; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	szNull
_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
COMM	evex:BYTE
COMM	ZEROLOCALS:BYTE
_DATA	ENDS
CONST	SEGMENT
szNull	DB	'<NULL>', 00H
CONST	ENDS
PUBLIC	codegen
PUBLIC	GetByteDisp
PUBLIC	Check4CompDisp8
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	OutputByte:PROC
EXTRN	OutputBytes:PROC
EXTRN	AddLinnumDataRef:PROC
EXTRN	OperandSize:PROC
EXTRN	AddFloatingPointEmulationFixup:PROC
EXTRN	GetCurrOffset:PROC
EXTRN	GetLineNumber:PROC
EXTRN	get_curr_srcfile:PROC
EXTRN	LstWrite:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	Parse_Pass:DWORD
EXTRN	write_to_file:BYTE
EXTRN	InstrTable:BYTE
EXTRN	optable_idx:BYTE
EXTRN	opnd_clstab:BYTE
EXTRN	ResWordTable:BYTE
EXTRN	vex_flags:BYTE
EXTRN	__ImageBase:BYTE
pdata	SEGMENT
$pdata$codegen DD imagerel $LN61
	DD	imagerel $LN61+71
	DD	imagerel $unwind$codegen
$pdata$1$codegen DD imagerel $LN61+71
	DD	imagerel $LN61+466
	DD	imagerel $chain$1$codegen
$pdata$3$codegen DD imagerel $LN61+466
	DD	imagerel $LN61+502
	DD	imagerel $chain$3$codegen
$pdata$GetByteDisp DD imagerel $LN20
	DD	imagerel $LN20+121
	DD	imagerel $unwind$GetByteDisp
$pdata$0$GetByteDisp DD imagerel $LN20+121
	DD	imagerel $LN20+152
	DD	imagerel $chain$0$GetByteDisp
$pdata$1$GetByteDisp DD imagerel $LN20+152
	DD	imagerel $LN20+500
	DD	imagerel $chain$1$GetByteDisp
$pdata$Check4CompDisp8 DD imagerel $LN6
	DD	imagerel $LN6+105
	DD	imagerel $unwind$Check4CompDisp8
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$output_opc DD imagerel output_opc
	DD	imagerel output_opc+6412
	DD	imagerel $unwind$output_opc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$output_data DD imagerel output_data
	DD	imagerel output_data+197
	DD	imagerel $unwind$output_data
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$output_data DD imagerel output_data+197
	DD	imagerel output_data+703
	DD	imagerel $chain$1$output_data
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$output_data DD imagerel output_data+703
	DD	imagerel output_data+719
	DD	imagerel $chain$2$output_data
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$match_phase_3 DD imagerel match_phase_3
	DD	imagerel match_phase_3+1018
	DD	imagerel $unwind$match_phase_3
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$check_operand_2 DD imagerel check_operand_2
	DD	imagerel check_operand_2+272
	DD	imagerel $unwind$check_operand_2
pdata	ENDS
CONST	SEGMENT
	ORG $+1
sr_prefix DB	026H
	DB	02eH
	DB	036H
	DB	03eH
	DB	064H
	DB	065H
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$check_operand_2 DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$match_phase_3 DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$output_data DD 021H
	DD	imagerel output_data
	DD	imagerel output_data+197
	DD	imagerel $unwind$output_data
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$output_data DD 040a21H
	DD	07e40aH
	DD	066405H
	DD	imagerel output_data
	DD	imagerel output_data+197
	DD	imagerel $unwind$output_data
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$output_data DD 060f01H
	DD	09540fH
	DD	08340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$output_opc DD 0c1c01H
	DD	0d641cH
	DD	0c541cH
	DD	0b341cH
	DD	0f018321cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
xdata	SEGMENT
$unwind$codegen DD 040a01H
	DD	08340aH
	DD	06006320aH
$chain$1$codegen DD 040d21H
	DD	07e40dH
	DD	067405H
	DD	imagerel $LN61
	DD	imagerel $LN61+71
	DD	imagerel $unwind$codegen
$chain$3$codegen DD 040021H
	DD	07e400H
	DD	067400H
	DD	imagerel $LN61
	DD	imagerel $LN61+71
	DD	imagerel $unwind$codegen
$unwind$GetByteDisp DD 020901H
	DD	050021209H
$chain$0$GetByteDisp DD 020521H
	DD	063405H
	DD	imagerel $LN20
	DD	imagerel $LN20+121
	DD	imagerel $unwind$GetByteDisp
$chain$1$GetByteDisp DD 021H
	DD	imagerel $LN20
	DD	imagerel $LN20+121
	DD	imagerel $unwind$GetByteDisp
$unwind$Check4CompDisp8 DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
;	COMDAT check_operand_2
_TEXT	SEGMENT
CodeInfo$ = 48
opnd1$ = 56
check_operand_2 PROC					; COMDAT

; 1811 : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1812 :     if( CodeInfo->opnd[OPND2].type == OP_NONE ) {

	cmp	DWORD PTR [rcx+56], 0
	mov	ebx, edx
	mov	rdi, rcx
	jne	$LN2@check_oper

; 1813 :       if (opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type[OPND2] != OP_NONE){

	mov	rdx, QWORD PTR [rcx+16]
	lea	r9, OFFSET FLAT:opnd_clstab
	movzx	eax, BYTE PTR [rdx]
	lea	r8, QWORD PTR [rax+rax*2]
	cmp	DWORD PTR [r9+r8*4+4], 0
	je	SHORT $LN6@check_oper

; 1814 :         if (CodeInfo->token == T_VGETEXPPD || CodeInfo->token == T_VGETEXPPS)
; 1815 :           ;
; 1816 :         else
; 1817 :         return(ERROR); /* doesn't match */

	mov	eax, DWORD PTR [rcx+24]
	sub	eax, 1423				; 0000058fH
	cmp	eax, 1
	ja	$LN12@check_oper
$LN6@check_oper:

; 1818 :       }
; 1819 :         /* 1 opnd instruction found */
; 1820 : 
; 1821 :         /* v2.06: added check for unspecified size of mem op */
; 1822 :         if ( opnd1 == OP_M ) {

	cmp	ebx, -1887436800			; ffffffff8f800000H
	jne	SHORT $LN9@check_oper

; 1823 :             const struct instr_item *next = CodeInfo->pinstr+1;
; 1824 :             if ( ( opnd_clstab[next->opclsidx].opnd_type[OPND1] & OP_M ) &&

	movzx	eax, BYTE PTR [rdx+14]
	lea	rcx, QWORD PTR [rax+rax*2]
	test	DWORD PTR [r9+rcx*4], ebx
	je	SHORT $LN9@check_oper
	cmp	BYTE PTR [rdx+18], 0
	jne	SHORT $LN9@check_oper

; 1825 :                 next->first == FALSE )
; 1826 :                 /* skip error if mem op is a forward reference */
; 1827 :                 /* v2.06b: added "undefined" check */
; 1828 :                 if ( CodeInfo->undef_sym == FALSE &&

	test	BYTE PTR [rdi+142], 64			; 00000040H
	jne	SHORT $LN9@check_oper
	mov	rax, QWORD PTR [rdi+48]
	test	rax, rax
	je	SHORT $LN10@check_oper
	mov	rcx, QWORD PTR [rax+56]
	test	rcx, rcx
	je	SHORT $LN10@check_oper
	cmp	DWORD PTR [rcx+32], 0
	je	SHORT $LN9@check_oper
$LN10@check_oper:

; 1829 :                     ( CodeInfo->opnd[OPND1].InsFixup == NULL ||
; 1830 :                      CodeInfo->opnd[OPND1].InsFixup->sym == NULL ||
; 1831 :                      CodeInfo->opnd[OPND1].InsFixup->sym->state != SYM_UNDEFINED ) ) {
; 1832 :                     DebugMsg(("check_operand_2: error: undef_sym=%u Fixup[0]=%X [%s]\n",
; 1833 :                               CodeInfo->undef_sym, CodeInfo->opnd[OPND1].InsFixup,
; 1834 :                               CodeInfo->opnd[OPND1].InsFixup ? CodeInfo->opnd[OPND1].InsFixup->sym ? CodeInfo->opnd[OPND1].InsFixup->sym->name : "NULL" : "NULL" ));
; 1835 :                     EmitErr( INSTRUCTION_OPERAND_MUST_HAVE_SIZE );

	mov	ecx, 182				; 000000b6H
	call	EmitErr
$LN9@check_oper:

; 1836 :                 }
; 1837 :         }
; 1838 : 
; 1839 :         output_opc( CodeInfo );

	mov	rcx, rdi
	call	output_opc

; 1840 :         output_data( CodeInfo, opnd1, OPND1 );

	xor	r8d, r8d
	mov	edx, ebx
	mov	rcx, rdi
	call	output_data

; 1841 : #if AMD64_SUPPORT
; 1842 :         if ( CodeInfo->Ofssize == USE64 && CodeInfo->opnd[OPND1].InsFixup && CodeInfo->opnd[OPND1].InsFixup->type == FIX_RELOFF32 )

	cmp	BYTE PTR [rdi+106], 2
	jne	SHORT $LN11@check_oper
	mov	rax, QWORD PTR [rdi+48]
$LN18@check_oper:
	test	rax, rax
	je	SHORT $LN11@check_oper
	cmp	DWORD PTR [rax+24], 3
	jne	SHORT $LN11@check_oper

; 1843 :             CodeInfo->opnd[OPND1].InsFixup->addbytes = GetCurrOffset() - CodeInfo->opnd[OPND1].InsFixup->locofs;

	mov	rbx, rax
	call	GetCurrOffset
	sub	al, BYTE PTR [rbx+20]
	mov	BYTE PTR [rbx+32], al
$LN11@check_oper:

; 1844 : #endif
; 1845 :         return( NOT_ERROR );

	xor	eax, eax

; 1862 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@check_oper:

; 1846 :     }
; 1847 : 
; 1848 :     /* check second operand */
; 1849 :     if ( match_phase_3( CodeInfo, opnd1 ) == NOT_ERROR ) {

	call	match_phase_3
	test	eax, eax
	jne	SHORT $LN12@check_oper

; 1850 : #if AMD64_SUPPORT
; 1851 :         /* for rip-relative fixups, the instruction end is needed */
; 1852 :         if ( CodeInfo->Ofssize == USE64 ) {

	cmp	BYTE PTR [rdi+106], 2
	jne	SHORT $LN11@check_oper

; 1853 :             if ( CodeInfo->opnd[OPND1].InsFixup && CodeInfo->opnd[OPND1].InsFixup->type == FIX_RELOFF32 )

	mov	rax, QWORD PTR [rdi+48]
	test	rax, rax
	je	SHORT $LN14@check_oper
	cmp	DWORD PTR [rax+24], 3
	jne	SHORT $LN14@check_oper

; 1854 :                 CodeInfo->opnd[OPND1].InsFixup->addbytes = GetCurrOffset() - CodeInfo->opnd[OPND1].InsFixup->locofs;

	mov	rbx, rax
	call	GetCurrOffset
	sub	al, BYTE PTR [rbx+20]
	mov	BYTE PTR [rbx+32], al
$LN14@check_oper:

; 1855 :             if ( CodeInfo->opnd[OPND2].InsFixup && CodeInfo->opnd[OPND2].InsFixup->type == FIX_RELOFF32 )

	mov	rax, QWORD PTR [rdi+72]

; 1856 :                 CodeInfo->opnd[OPND2].InsFixup->addbytes = GetCurrOffset() - CodeInfo->opnd[OPND2].InsFixup->locofs;
; 1857 :         }
; 1858 : #endif
; 1859 :         return( NOT_ERROR );

	jmp	SHORT $LN18@check_oper
$LN12@check_oper:

; 1860 :     }
; 1861 :     return( ERROR );

	or	eax, -1

; 1862 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
check_operand_2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
;	COMDAT match_phase_3
_TEXT	SEGMENT
CodeInfo$ = 48
opnd1$ = 56
match_phase_3 PROC					; COMDAT

; 1604 : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 1605 :     enum operand_type    determinant = opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type[OPND1]; /* remember first op type */

	mov	rax, QWORD PTR [rcx+16]
	lea	r14, OFFSET FLAT:__ImageBase
	mov	rbx, rcx
	mov	esi, edx
	movzx	ecx, BYTE PTR [rax]

; 1606 :     enum operand_type    opnd2 = CodeInfo->opnd[OPND2].type;

	mov	edi, DWORD PTR [rbx+56]
	lea	rax, QWORD PTR [rcx+rcx*2]
	mov	r8d, DWORD PTR opnd_clstab[r14+rax*4]

; 1607 :     enum operand_type    tbl_op2;
; 1608 : 
; 1609 :     DebugMsg1(("match_phase_3 enter, opnd1=%" I32_SPEC "X, searching op2=%" I32_SPEC "X\n", opnd1, opnd2 ));
; 1610 :     
; 1611 : #if AVXSUPP 
; 1612 :                                
; 1613 :     if ( CodeInfo->token >= VEX_START && ( vex_flags[ CodeInfo->token - VEX_START ] & VX_L ) ) {

	movsxd	rax, DWORD PTR [rbx+24]
	cmp	eax, 1291				; 0000050bH
	jl	SHORT $LN86@match_phas
	movzx	ecx, BYTE PTR vex_flags[rax+r14-1291]
	test	cl, 1
	je	SHORT $LN86@match_phas

; 1614 :         if ( CodeInfo->opnd[OPND1].type & (OP_K | OP_YMM | OP_ZMM | OP_M256) ) {

	mov	eax, DWORD PTR [rbx+32]
	test	eax, 268435904				; 100001c0H
	je	SHORT $LN10@match_phas
	test	edi, 448				; 000001c0H

; 1615 :             if ( opnd2 & OP_ZMM || opnd2 & OP_YMM || opnd2 & OP_K)

	jne	SHORT $LN14@match_phas

; 1616 :                 opnd2 |= OP_XMM;
; 1617 :             else if ( opnd2 & OP_M256 )

	bt	edi, 28
	jae	SHORT $LN15@match_phas

; 1618 :                 opnd2 |= OP_M128;

	bts	edi, 27
	jmp	SHORT $LN86@match_phas
$LN15@match_phas:

; 1619 :             else if ( opnd2 & OP_M128 )

	bt	edi, 27
	jae	SHORT $LN17@match_phas

; 1620 :                 opnd2 |= OP_M64;               //should be: ins->prefix & VX_HALF)

	bts	edi, 26
	jmp	SHORT $LN86@match_phas
$LN17@match_phas:

; 1621 :             else if ( ( opnd2 & OP_XMM ) && !( vex_flags[ CodeInfo->token - VEX_START ] & VX_HALF ) ) {

	test	dil, 32					; 00000020H
	je	SHORT $LN86@match_phas
	test	cl, 32					; 00000020H
	jne	SHORT $LN86@match_phas

; 1622 :                 EmitError( INSTRUCTION_OR_REGISTER_NOT_ACCEPTED_IN_CURRENT_CPU_MODE );

	mov	ecx, 30
	call	EmitError

; 1623 :                 return( ERROR );

	or	eax, -1
	jmp	$LN1@match_phas
$LN10@match_phas:

; 1624 :             }
; 1625 :         }
; 1626 : #if 1
; 1627 :         /* may be necessary to cover the cases where the first operand is a memory operand
; 1628 :          * "without size" and the second operand is a ymm register
; 1629 :          */
; 1630 :         else if ( CodeInfo->opnd[OPND1].type == OP_M ) {

	cmp	eax, -1887436800			; ffffffff8f800000H
	jne	SHORT $LN86@match_phas
	test	edi, 384				; 00000180H

; 1631 :             if ( opnd2 & OP_YMM || opnd2 & OP_ZMM)

	je	SHORT $LN86@match_phas
$LN14@match_phas:

; 1632 :                 opnd2 |= OP_XMM;

	or	edi, 32					; 00000020H
$LN86@match_phas:
	mov	r9d, 41					; 00000029H
	mov	r10d, 655360				; 000a0000H
$LL4@match_phas:

; 1633 :         }
; 1634 : #endif
; 1635 :     }
; 1636 : #endif
; 1637 :     do  {
; 1638 :         tbl_op2 = opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type[OPND2];

	mov	rax, QWORD PTR [rbx+16]
	movzx	ecx, BYTE PTR [rax]
	lea	rax, QWORD PTR [rcx+rcx*2]
	mov	ecx, DWORD PTR opnd_clstab[r14+rax*4+4]

; 1639 :         DebugMsg1(("match_phase_3: instr table op2=%" I32_SPEC "X\n", tbl_op2 ));
; 1640 :         switch( tbl_op2 ) {

	cmp	ecx, 131072				; 00020000H
	je	$LN45@match_phas
	cmp	ecx, 917504				; 000e0000H
	je	$LN23@match_phas
	cmp	ecx, 4325376				; 00420000H
	je	$LN54@match_phas
	cmp	ecx, 5111808				; 004e0000H
	je	$LN38@match_phas

; 1772 :                }
; 1773 :             }
; 1774 :             break;
; 1775 :         default:
; 1776 :             /* v2.06: condition made more restrictive */
; 1777 :             if (CodeInfo->token < T_VBROADCASTSS)(CodeInfo->evex_flag = 0);

	mov	eax, DWORD PTR [rbx+24]
	cmp	eax, 1291				; 0000050bH
	jge	SHORT $LN58@match_phas
	mov	BYTE PTR [rbx+136], 0
$LN58@match_phas:

; 1778 :             //if( ( opnd2 & tbl_op2 ) || (CodeInfo->mem_type == MT_EMPTY && (opnd2 & OP_M_ANY) && (tbl_op2 & OP_M_ANY) )) {
; 1779 :               if ((opnd2 & tbl_op2) || ((CodeInfo->evex_flag)&&(CodeInfo->token < T_VPBROADCASTB) || (CodeInfo->token > T_VPBROADCASTQ))) {     // 

	test	ecx, edi
	jne	SHORT $LN61@match_phas
	cmp	BYTE PTR [rbx+136], 0
	je	SHORT $LN62@match_phas
	cmp	eax, 1294				; 0000050eH
	jl	SHORT $LN61@match_phas
$LN62@match_phas:
	cmp	eax, 1297				; 00000511H
	jle	$LN53@match_phas
$LN61@match_phas:

; 1780 :                 if( check_3rd_operand( CodeInfo ) == ERROR )

	mov	rcx, rbx
	call	check_3rd_operand
	cmp	eax, -1
	je	$LN53@match_phas

; 1781 :                     break;
; 1782 :                 DebugMsg1(("match_phase_3: matched opnd2\n" ));
; 1783 :                 output_opc( CodeInfo );

	call	output_opc

; 1784 :                 if ( opnd1 & (OP_I_ANY | OP_M_ANY ) )

	test	esi, -4325376				; ffffffffffbe0000H
	je	SHORT $LN64@match_phas

; 1785 :                     output_data( CodeInfo, opnd1, OPND1 );

	xor	r8d, r8d
	mov	edx, esi
	mov	rcx, rbx
	call	output_data
$LN64@match_phas:

; 1786 :                 if ( opnd2 & (OP_I_ANY | OP_M_ANY ) )

	test	edi, -4325376				; ffffffffffbe0000H
	je	SHORT $LN65@match_phas

; 1787 :                     output_data( CodeInfo, opnd2, OPND2 );

	mov	r8d, 1
	mov	edx, edi
	mov	rcx, rbx
	call	output_data
$LN65@match_phas:

; 1788 :                 //if( CodeInfo->pinstr->opnd_type_3rd != OP3_NONE )
; 1789 :                 if( opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd != OP3_NONE )

	mov	rax, QWORD PTR [rbx+16]
	movzx	ecx, BYTE PTR [rax]
	lea	rax, QWORD PTR [rcx+rcx*2]
	cmp	BYTE PTR opnd_clstab[r14+rax*4+8], 0
	je	SHORT $LN66@match_phas

; 1790 :                     output_3rd_operand( CodeInfo );

	mov	rcx, rbx
	call	output_3rd_operand
$LN66@match_phas:

; 1791 :                 if( CodeInfo->pinstr->byte1_info == F_0F0F ) /* output 3dNow opcode? */

	mov	rax, QWORD PTR [rbx+16]
	cmp	BYTE PTR [rax+1], 17
	jne	$LN67@match_phas

; 1792 :                     OutputCodeByte( CodeInfo->pinstr->opcode | CodeInfo->iswide );

	movzx	ecx, BYTE PTR [rbx+142]
	and	cl, 1
	or	cl, BYTE PTR [rax+12]
	call	OutputByte

; 1793 :                 return( NOT_ERROR );

	jmp	SHORT $LN67@match_phas
$LN38@match_phas:

; 1707 :             }
; 1708 :             break;
; 1709 :         case OP_I8_U: /* shift+rotate, ENTER, BTx, IN, PSxx[D|Q|W] */
; 1710 :             if( opnd2 & tbl_op2 ) {

	test	edi, 5111808				; 004e0000H
	je	$LN53@match_phas

; 1711 :                 DebugMsg1(("match_phase_3: matched OP_I8_U\n"));
; 1712 :                 if ( CodeInfo->const_size_fixed && opnd2 != OP_I8 )

	test	BYTE PTR [rbx+142], 8
	je	SHORT $LN40@match_phas
	cmp	edi, 131072				; 00020000H
	jne	$LN53@match_phas
$LN40@match_phas:
	mov	eax, DWORD PTR [rbx+64]
	sub	eax, -128				; ffffffffffffff80H
	cmp	eax, 383				; 0000017fH
	ja	$LN53@match_phas

; 1713 :                     break;
; 1714 :                 /* v2.03: lower bound wasn't checked */
; 1715 :                 /* range of unsigned 8-bit is -128 - +255 */
; 1716 :                 if( CodeInfo->opnd[OPND2].data32l <= UCHAR_MAX && CodeInfo->opnd[OPND2].data32l >= SCHAR_MIN ) {
; 1717 :                     /* v2.06: if there's an external, adjust the fixup if it is > 8-bit */
; 1718 :                     if ( CodeInfo->opnd[OPND2].InsFixup != NULL ) {

	mov	rcx, QWORD PTR [rbx+72]
	test	rcx, rcx
	je	SHORT $LN74@match_phas
	mov	eax, DWORD PTR [rcx+24]
	sub	eax, 5
	cmp	eax, 1
	ja	SHORT $LN74@match_phas

; 1719 :                         if ( CodeInfo->opnd[OPND2].InsFixup->type == FIX_OFF16 ||
; 1720 :                             CodeInfo->opnd[OPND2].InsFixup->type == FIX_OFF32 )
; 1721 :                             CodeInfo->opnd[OPND2].InsFixup->type = FIX_OFF8;

	mov	DWORD PTR [rcx+24], 4
$LN74@match_phas:

; 1757 :                 DebugMsg1(("match_phase_3: matched OP_I8\n"));
; 1758 :                 output_opc( CodeInfo );

	mov	rcx, rbx
	call	output_opc

; 1759 :                 output_data( CodeInfo, opnd1, OPND1 );

	xor	r8d, r8d
	mov	edx, esi
	mov	rcx, rbx
	call	output_data

; 1760 :                 output_data( CodeInfo, OP_I8, OPND2 );

	mov	edx, 131072				; 00020000H
$LN88@match_phas:
	mov	r8d, 1
$LN87@match_phas:
	mov	rcx, rbx
	call	output_data
$LN67@match_phas:

; 1761 :                 return( NOT_ERROR );

	xor	eax, eax
$LN1@match_phas:

; 1802 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN54@match_phas:

; 1762 :             }
; 1763 :             break;
; 1764 :         case OP_I_1: /* shift ops */
; 1765 :             if( opnd2 & tbl_op2 ) {

	test	edi, 4325376				; 00420000H
	je	$LN53@match_phas

; 1766 :                if ( CodeInfo->opnd[OPND2].data32l == 1 ) {

	cmp	DWORD PTR [rbx+64], 1
	jne	$LN53@match_phas

; 1767 :                    DebugMsg1(("match_phase_3: matched OP_I_1\n"));
; 1768 :                    output_opc( CodeInfo );

	mov	rcx, rbx
	call	output_opc

; 1769 :                    output_data( CodeInfo, opnd1, OPND1 );

	xor	r8d, r8d
	mov	edx, esi

; 1770 :                    /* the immediate is "implicite" */
; 1771 :                    return( NOT_ERROR );

	jmp	SHORT $LN87@match_phas
$LN23@match_phas:

; 1641 :         case OP_I: /* arith, MOV, IMUL, TEST */
; 1642 :             if( opnd2 & tbl_op2 ) {

	test	edi, 917504				; 000e0000H
	je	$LN53@match_phas

; 1643 :                 DebugMsg1(("match_phase_3: matched OP_I\n"));
; 1644 :                 /* This branch exits with either ERROR or NOT_ERROR.
; 1645 :                  * So it can modify the CodeInfo fields without harm.
; 1646 :                  */
; 1647 :                 if( opnd1 & OP_R8 ) {

	test	sil, 1
	je	$LN25@match_phas

; 1648 :                     /* 8-bit register, so output 8-bit data */
; 1649 :                     /* v2.04: the check has already happened in check_size() or idata_xxx() */
; 1650 :                     //if( Parse_Pass == PASS_1 && !InRange( operand, 1 ) ) {
; 1651 :                     //    DebugMsg(("imm const too large (08): %X\n", operand));
; 1652 :                     //    EmitWarn( 1, IMMEDIATE_CONSTANT_TOO_LARGE );
; 1653 :                     //}
; 1654 :                     CodeInfo->prefix.opsiz = FALSE;

	and	BYTE PTR [rbx+9], 253			; 000000fdH

; 1655 :                     opnd2 = OP_I8;

	mov	edi, 131072				; 00020000H

; 1656 :                     if( CodeInfo->opnd[OPND2].InsFixup != NULL ) {

	mov	rax, QWORD PTR [rbx+72]
	test	rax, rax
	je	$LN7@match_phas

; 1657 :                     /* v1.96: make sure FIX_HIBYTE isn't overwritten! */
; 1658 :                         if ( CodeInfo->opnd[OPND2].InsFixup->type != FIX_HIBYTE )

	cmp	DWORD PTR [rax+24], 11
	je	$LN7@match_phas

; 1659 :                             CodeInfo->opnd[OPND2].InsFixup->type = FIX_OFF8;

	mov	DWORD PTR [rax+24], 4

; 1660 :                     }

	jmp	$LN7@match_phas
$LN45@match_phas:

; 1722 :                     }
; 1723 :                     /* the SSE4A EXTRQ instruction will need this! */
; 1724 :                     //if( check_3rd_operand( CodeInfo ) == ERROR )
; 1725 :                     //  break;
; 1726 :                     output_opc( CodeInfo );
; 1727 :                     output_data( CodeInfo, opnd1, OPND1 );
; 1728 :                     output_data( CodeInfo, OP_I8, OPND2 );
; 1729 :                     //if( CodeInfo->pinstr->opnd_type_3rd != OP3_NONE )
; 1730 :                     //output_3rd_operand( CodeInfo );
; 1731 :                     return( NOT_ERROR );
; 1732 :                 }
; 1733 :             }
; 1734 :             break;
; 1735 :         case OP_I8: /* arith, IMUL */
; 1736 :             /* v2.06: this case has been rewritten */
; 1737 : 
; 1738 :             /* v2.04: added */
; 1739 :             if( ModuleInfo.NoSignExtend &&

	test	DWORD PTR ModuleInfo+408, 262144	; 00040000H
	je	SHORT $LN46@match_phas
	mov	eax, DWORD PTR [rbx+24]
	add	eax, -501				; fffffffffffffe0bH
	cmp	eax, 5
	ja	SHORT $LN46@match_phas
	bt	r9d, eax
	jb	SHORT $LN53@match_phas
$LN46@match_phas:

; 1740 :                ( CodeInfo->token == T_AND ||
; 1741 :                 CodeInfo->token == T_OR ||
; 1742 :                 CodeInfo->token == T_XOR ) )
; 1743 :                 break;
; 1744 : 
; 1745 :             /* v2.11: skip externals - but don't skip undefines; forward8.asm */
; 1746 :             //if ( CodeInfo->opnd[OPND2].InsFixup != NULL ) /* external? then skip */
; 1747 :             if ( CodeInfo->opnd[OPND2].InsFixup != NULL && CodeInfo->opnd[OPND2].InsFixup->sym->state != SYM_UNDEFINED ) /* external? then skip */

	mov	rax, QWORD PTR [rbx+72]
	test	rax, rax
	je	SHORT $LN48@match_phas
	mov	rax, QWORD PTR [rax+56]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN53@match_phas
$LN48@match_phas:

; 1748 :                 break;
; 1749 : 
; 1750 :             if ( CodeInfo->const_size_fixed == FALSE )

	test	BYTE PTR [rbx+142], 8
	jne	SHORT $LN52@match_phas

; 1751 :                 if ( ( opnd1 & ( OP_R16 | OP_M16 ) ) && (int_8)CodeInfo->opnd[OPND2].data32l == (int_16)CodeInfo->opnd[OPND2].data32l )

	test	esi, 16777218				; 01000002H
	je	SHORT $LN50@match_phas
	movsx	eax, BYTE PTR [rbx+64]
	cmp	ax, WORD PTR [rbx+64]
	jne	SHORT $LN50@match_phas

; 1752 :                     tbl_op2 |= OP_I16;

	mov	ecx, 393216				; 00060000H
	jmp	SHORT $LN52@match_phas
$LN50@match_phas:

; 1753 :                 else if ( ( opnd1 & ( OP_RGT16 | OP_MGT16 ) ) && (int_8)CodeInfo->opnd[OPND2].data32l == (int_32)CodeInfo->opnd[OPND2].data32l )

	test	esi, 100663308				; 0600000cH
	je	SHORT $LN52@match_phas
	movsx	eax, BYTE PTR [rbx+64]
	cmp	eax, DWORD PTR [rbx+64]
	cmove	ecx, r10d
$LN52@match_phas:

; 1754 :                     tbl_op2 |= OP_I32;
; 1755 : 
; 1756 :             if( opnd2 & tbl_op2 ) {

	test	ecx, edi
	jne	$LN74@match_phas
$LN53@match_phas:

; 1794 :             }
; 1795 :             break;
; 1796 :         }
; 1797 :         CodeInfo->pinstr++;

	add	QWORD PTR [rbx+16], 14
	mov	rdx, QWORD PTR [rbx+16]

; 1798 :     } while ( opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type[OPND1] == determinant && CodeInfo->pinstr->first == FALSE );

	movzx	eax, BYTE PTR [rdx]
	lea	rcx, QWORD PTR [rax+rax*2]
	cmp	DWORD PTR opnd_clstab[r14+rcx*4], r8d
	jne	SHORT $LN68@match_phas
	cmp	BYTE PTR [rdx+4], 0
	je	$LL4@match_phas
$LN68@match_phas:

; 1799 :     CodeInfo->pinstr--; /* pointer will be increased in codegen() */

	lea	rax, QWORD PTR [rdx-14]
	mov	QWORD PTR [rbx+16], rax

; 1800 :     DebugMsg(("match_phase_3: returns EMPTY\n"));
; 1801 :     return( ERROR );

	or	eax, -1
	jmp	$LN1@match_phas
$LN25@match_phas:

; 1661 :                 } else if( opnd1 & OP_R16 ) {

	test	sil, 2
	je	SHORT $LN29@match_phas

; 1662 :                     /* v2.04: the check has already happened in check_size() or idata_xxx() */
; 1663 :                     //if( Parse_Pass == PASS_1 && !InRange( operand, 2 ) ) {
; 1664 :                     //    DebugMsg(("imm const too large (16): %X\n", operand));
; 1665 :                     //    EmitWarn( 1, IMMEDIATE_CONSTANT_TOO_LARGE );
; 1666 :                     //}
; 1667 :                     /* 16-bit register, so output 16-bit data */
; 1668 :                     opnd2 = OP_I16;

	mov	edi, 262144				; 00040000H
	jmp	$LN7@match_phas
$LN29@match_phas:

; 1669 : #if AMD64_SUPPORT
; 1670 :                 } else if( opnd1 & (OP_R32 | OP_R64 ) ) {

	test	sil, 12
	je	SHORT $LN31@match_phas

; 1671 : #else
; 1672 :                 } else if( opnd1 & OP_R32 ) {
; 1673 : #endif
; 1674 :                     /* 32- or 64-bit register, so output 32-bit data */
; 1675 :                     CodeInfo->prefix.opsiz = CodeInfo->Ofssize ? 0 : 1;/* 12-feb-92 */

	and	BYTE PTR [rbx+9], 253			; 000000fdH

; 1676 :                     opnd2 = OP_I32;

	mov	edi, 524288				; 00080000H
	cmp	BYTE PTR [rbx+106], 0
	sete	al
	and	al, 1
	add	al, al
	or	BYTE PTR [rbx+9], al
	jmp	SHORT $LN7@match_phas
$LN31@match_phas:

; 1677 :                 } else if( opnd1 & OP_M ) {

	test	esi, -1887436800			; ffffffff8f800000H
	je	SHORT $LN7@match_phas

; 1678 :                     /* there is no reason this should be only for T_MOV */
; 1679 :                     switch( OperandSize( opnd1, CodeInfo ) ) {

	mov	rdx, rbx
	mov	ecx, esi
	call	OperandSize
	sub	eax, 1
	je	SHORT $LN34@match_phas
	sub	eax, 1
	je	SHORT $LN35@match_phas
	sub	eax, 2
	je	SHORT $LN36@match_phas
	cmp	eax, 4
	je	SHORT $LN36@match_phas

; 1698 :                     default:
; 1699 :                         EmitError( INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS );

	mov	ecx, 14
	call	EmitError
	jmp	SHORT $LN7@match_phas
$LN36@match_phas:

; 1688 : #if AMD64_SUPPORT
; 1689 :                         /* mov [mem], imm64 doesn't exist. It's ensured that
; 1690 :                          * immediate data is 32bit only
; 1691 :                          */
; 1692 :                     case 8:
; 1693 : #endif
; 1694 :                     case 4:
; 1695 :                         opnd2 = OP_I32;
; 1696 :                         CodeInfo->prefix.opsiz = CodeInfo->Ofssize ? 0 : 1;

	and	BYTE PTR [rbx+9], 253			; 000000fdH
	mov	edi, 524288				; 00080000H
	cmp	BYTE PTR [rbx+106], 0
	sete	al
	and	al, 1
	add	al, al
	or	BYTE PTR [rbx+9], al

; 1697 :                         break;

	jmp	SHORT $LN7@match_phas
$LN35@match_phas:

; 1683 :                         break;
; 1684 :                     case 2:
; 1685 :                         opnd2 = OP_I16;
; 1686 :                         CodeInfo->prefix.opsiz = CodeInfo->Ofssize ? 1 : 0;

	and	BYTE PTR [rbx+9], 253			; 000000fdH
	mov	edi, 262144				; 00040000H
	cmp	BYTE PTR [rbx+106], 0
	setne	al
	and	al, 1
	add	al, al
	or	BYTE PTR [rbx+9], al

; 1687 :                         break;

	jmp	SHORT $LN7@match_phas
$LN34@match_phas:

; 1680 :                     case 1:
; 1681 :                         opnd2 = OP_I8;
; 1682 :                         CodeInfo->prefix.opsiz = FALSE;

	and	BYTE PTR [rbx+9], 253			; 000000fdH
	mov	edi, 131072				; 00020000H
$LN7@match_phas:

; 1700 :                         //return( ERROR ); /* v2.06: don't exit */
; 1701 :                     }
; 1702 :                 }
; 1703 :                 output_opc( CodeInfo );

	mov	rcx, rbx
	call	output_opc

; 1704 :                 output_data( CodeInfo, opnd1, OPND1 );

	xor	r8d, r8d
	mov	edx, esi
	mov	rcx, rbx
	call	output_data

; 1705 :                 output_data( CodeInfo, opnd2, OPND2 );

	mov	edx, edi

; 1706 :                 return( NOT_ERROR );

	jmp	$LN88@match_phas
match_phase_3 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
;	COMDAT output_3rd_operand
_TEXT	SEGMENT
CodeInfo$ = 8
output_3rd_operand PROC					; COMDAT

; 1509 :     if( opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd == OP3_I8_U ) {

	mov	rax, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR [rax]
	lea	rax, QWORD PTR [rdx+rdx*2]
	lea	rdx, OFFSET FLAT:opnd_clstab+8
	movzx	edx, BYTE PTR [rdx+rax*4]
	cmp	dl, 2
	je	$LN43@output_3rd

; 1510 :         DebugMsg1(("output_3rd_operand, expected I8, op3=%" I32_SPEC "X\n", CodeInfo->opnd[OPND3].type ));
; 1511 :         /* v2.06: the type has been checked already! */
; 1512 :         //if( CodeInfo->opnd_type[OPND3] & OP_I ) {
; 1513 :         output_data( CodeInfo, OP_I8, OPND3 );
; 1514 :         //} else {
; 1515 :         //    EmitError( INVALID_INSTRUCTION_OPERANDS );
; 1516 :         //    return;
; 1517 :         //}
; 1518 :     } else if( opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd == OP3_I ) {

	cmp	dl, 4
	jne	SHORT $LN4@output_3rd

; 1519 :         output_data( CodeInfo, CodeInfo->opnd[OPND3].type, OPND3 );

	mov	edx, DWORD PTR [rcx+80]

; 1590 :         output_data( CodeInfo, OP_I8, OPND3 );

	mov	r8d, 2
	jmp	output_data
$LN4@output_3rd:

; 1520 :     }
; 1521 :     else if (opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd == OP3_HID) {

	cmp	dl, 5
	jne	$LN6@output_3rd

; 1522 :       DebugMsg1(("output_3rd_operand, expected OP3_HID, op3=%" I32_SPEC "X\n", CodeInfo->opnd[OPND3].type));
; 1523 :       /* v2.06: to avoid having to add 3*8 operand categories there's a
; 1524 :        * hard-wired peculiarity for the "hidden" 3rd operand: it's calculated
; 1525 :        * directly from the instruction token. in instruct.h, CMPEQPD must
; 1526 :        * be first and the order of the following CMP entries must not be
; 1527 :        * changed.
; 1528 :        */
; 1529 :       //CodeInfo->data[OPND3] = opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd & ~OP3_HID;
; 1530 : #if AVXSUPP
; 1531 :       if (CodeInfo->token >= VEX_START){

	mov	edx, DWORD PTR [rcx+24]
	cmp	edx, 1291				; 0000050bH
	jl	$LN8@output_3rd
	lea	eax, DWORD PTR [rdx-1761]
	cmp	eax, 127				; 0000007fH
	ja	SHORT $LN10@output_3rd

; 1532 :         if (CodeInfo->token >= T_VCMPEQPD && CodeInfo->token <= T_VCMPTRUE_USSS){
; 1533 :           CodeInfo->opnd[OPND3].InsFixup = NULL;

	mov	QWORD PTR [rcx+96], 0

; 1534 :           OutputCodeByte((CodeInfo->token - T_VCMPEQPD) & 0x1F);

	lea	ecx, DWORD PTR [rdx-1]
	and	cl, 31
	jmp	OutputByte
$LN10@output_3rd:
	lea	eax, DWORD PTR [rdx-1454]
	cmp	eax, 7

; 1535 :           return;
; 1536 :         }
; 1537 :         else if (CodeInfo->token >= T_VPCMPEQD && CodeInfo->token <= T_VPCMPTRUED){
; 1538 :           CodeInfo->opnd[OPND3].InsFixup = NULL;
; 1539 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQD) & 0x07);
; 1540 :           return;

	jbe	SHORT $LN45@output_3rd

; 1541 :         }
; 1542 :         else if (CodeInfo->token >= T_VPCMPEQUD && CodeInfo->token <= T_VPCMPTRUEUD){
; 1543 :           CodeInfo->opnd[OPND3].InsFixup = NULL;
; 1544 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQUD) & 0x07);
; 1545 :           return;

	lea	eax, DWORD PTR [rdx-1462]
	cmp	eax, 7
	jbe	SHORT $LN45@output_3rd

; 1546 :         }
; 1547 :         else if (CodeInfo->token >= T_VPCMPEQQ && CodeInfo->token <= T_VPCMPTRUEQ){
; 1548 :           CodeInfo->opnd[OPND3].InsFixup = NULL;
; 1549 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQQ) & 0x07);
; 1550 :           return;

	lea	eax, DWORD PTR [rdx-1470]
	cmp	eax, 7
	jbe	SHORT $LN45@output_3rd

; 1551 :         }
; 1552 :         else if (CodeInfo->token >= T_VPCMPEQUQ && CodeInfo->token <= T_VPCMPTRUEUQ){
; 1553 :           CodeInfo->opnd[OPND3].InsFixup = NULL;
; 1554 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQUQ) & 0x07);
; 1555 :           return;

	lea	eax, DWORD PTR [rdx-1478]
	cmp	eax, 7
	jbe	SHORT $LN45@output_3rd

; 1556 :         }
; 1557 :         else if (CodeInfo->token >= T_VPCMPEQW && CodeInfo->token <= T_VPCMPTRUEW){
; 1558 :           CodeInfo->opnd[OPND3].InsFixup = NULL;
; 1559 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQW) & 0x07);
; 1560 :           return;

	lea	eax, DWORD PTR [rdx-1486]
	cmp	eax, 7
	jbe	SHORT $LN45@output_3rd

; 1561 :         }
; 1562 :         else if (CodeInfo->token >= T_VPCMPEQUW && CodeInfo->token <= T_VPCMPTRUEUW){
; 1563 :           CodeInfo->opnd[OPND3].InsFixup = NULL;
; 1564 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQUW) & 0x07);
; 1565 :           return;

	lea	eax, DWORD PTR [rdx-1494]
	cmp	eax, 7
	jbe	SHORT $LN45@output_3rd

; 1566 :         }
; 1567 :         else if (CodeInfo->token >= T_VPCMPEQB && CodeInfo->token <= T_VPCMPTRUEB){
; 1568 :           CodeInfo->opnd[OPND3].InsFixup = NULL;
; 1569 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQB) & 0x07);
; 1570 :           return;

	lea	eax, DWORD PTR [rdx-1502]
	cmp	eax, 7
	jbe	SHORT $LN45@output_3rd
	lea	eax, DWORD PTR [rdx-1510]
	cmp	eax, 7
	ja	SHORT $LN9@output_3rd
$LN45@output_3rd:

; 1571 :         }
; 1572 :         else if (CodeInfo->token >= T_VPCMPEQUB && CodeInfo->token <= T_VPCMPTRUEUB){
; 1573 :           CodeInfo->opnd[OPND3].InsFixup = NULL;

	mov	QWORD PTR [rcx+96], 0

; 1574 :           OutputCodeByte((CodeInfo->token - T_VPCMPEQUB) & 0x07);

	lea	ecx, DWORD PTR [rdx+2]
	and	cl, 7
	jmp	OutputByte
$LN8@output_3rd:

; 1575 :           return;
; 1576 :       }
; 1577 :     }
; 1578 :     else
; 1579 : #endif
; 1580 :           CodeInfo->opnd[OPND3].data32l = ( CodeInfo->token - T_CMPEQPD ) % 8;

	add	edx, -879				; fffffffffffffc91H
	and	edx, -2147483641			; ffffffff80000007H
	jge	SHORT $LN42@output_3rd
	dec	edx
	or	edx, -8
	inc	edx
$LN42@output_3rd:
	mov	DWORD PTR [rcx+88], edx
$LN9@output_3rd:

; 1581 :           CodeInfo->opnd[OPND3].InsFixup = NULL;

	mov	QWORD PTR [rcx+96], 0

; 1582 :           output_data( CodeInfo, OP_I8, OPND3 );
; 1583 :     }

	jmp	SHORT $LN43@output_3rd
$LN6@output_3rd:

; 1584 : #if AVXSUPP
; 1585 :     else if( ((CodeInfo->token >= VEX_START) && (CodeInfo->token < T_VPGATHERDD)|| 
; 1586 :       (CodeInfo->token > T_VGATHERQPS))&&

	mov	r8d, DWORD PTR [rcx+24]
	lea	eax, DWORD PTR [r8-1291]
	cmp	eax, 48					; 00000030H
	jbe	SHORT $LN28@output_3rd
	cmp	r8d, 1348				; 00000544H
	jl	SHORT $LN30@output_3rd
$LN28@output_3rd:
	cmp	dl, 3
	jne	SHORT $LN30@output_3rd

; 1587 :        opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd == OP3_XMM0 ) {
; 1588 :         CodeInfo->opnd[OPND3].data32l = ( CodeInfo->opnd[OPND3].data32l << 4 );

	shl	DWORD PTR [rcx+88], 4

; 1589 :         if (CodeInfo->opnd[OPND3].type != OP_K)

	cmp	DWORD PTR [rcx+80], 64			; 00000040H
	je	SHORT $LN30@output_3rd
$LN43@output_3rd:

; 1590 :         output_data( CodeInfo, OP_I8, OPND3 );

	mov	edx, 131072				; 00020000H
	mov	r8d, 2
	jmp	output_data
$LN30@output_3rd:

; 1591 :     }
; 1592 : #endif
; 1593 :     return;
; 1594 : }

	ret	0
output_3rd_operand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
;	COMDAT check_3rd_operand
_TEXT	SEGMENT
CodeInfo$ = 8
check_3rd_operand PROC					; COMDAT

; 1465 :     if( ( opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd == OP3_NONE ) ||

	mov	rax, QWORD PTR [rcx+16]
	movzx	edx, BYTE PTR [rax]
	lea	rax, QWORD PTR [rdx+rdx*2]
	lea	rdx, OFFSET FLAT:opnd_clstab+8
	movzx	edx, BYTE PTR [rdx+rax*4]
	test	dl, dl
	je	$LN5@check_3rd_
	cmp	dl, 5
	je	$LN5@check_3rd_

; 1468 :     
; 1469 :     /* current variant needs a 3rd operand */
; 1470 :     DebugMsg1(("check_3rd_operand: tab=%X <-> codeinfo=%X\n", opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd, CodeInfo->opnd[OPND3].type ));
; 1471 : 
; 1472 :     switch ( opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd ) {

	movzx	edx, dl
	sub	edx, 1
	je	SHORT $LN6@check_3rd_
	sub	edx, 1
	je	SHORT $LN8@check_3rd_
	sub	edx, 1
	je	SHORT $LN15@check_3rd_
	cmp	edx, 1
	jne	SHORT $LN7@check_3rd_

; 1484 :             }
; 1485 :         }
; 1486 :         break;
; 1487 :     case OP3_I: /* IMUL */
; 1488 :         if ( CodeInfo->opnd[OPND3].type & OP_I )

	test	DWORD PTR [rcx+80], 917504		; 000e0000H
	je	SHORT $LN7@check_3rd_

; 1489 :             return( NOT_ERROR );

	xor	eax, eax

; 1504 : }

	ret	0
$LN15@check_3rd_:

; 1490 :         break;
; 1491 :     case OP3_XMM0:
; 1492 : #if AVXSUPP
; 1493 :         /* for VEX encoding, XMM0 has the meaning: any K/XMM/YMM/ZMM register */
; 1494 :         if ( CodeInfo->token >= VEX_START ) {

	cmp	DWORD PTR [rcx+24], 1291		; 0000050bH
	jge	SHORT $LN22@check_3rd_

; 1495 :                return( NOT_ERROR );
; 1496 :         } else
; 1497 : #endif
; 1498 :         if ( CodeInfo->opnd[OPND3].type == OP_XMM &&

	cmp	DWORD PTR [rcx+80], 32			; 00000020H
	jne	SHORT $LN7@check_3rd_
	cmp	DWORD PTR [rcx+88], 0
	jne	SHORT $LN7@check_3rd_

; 1499 :             CodeInfo->opnd[OPND3].data32l == 0 )
; 1500 :             return( NOT_ERROR );

	xor	eax, eax

; 1504 : }

	ret	0
$LN8@check_3rd_:

; 1475 :             return( NOT_ERROR );
; 1476 :         break;
; 1477 :     case OP3_I8_U: /* IMUL, SHxD, a few MMX/SSE */
; 1478 :         /* for IMUL, the operand is signed! */
; 1479 :         if ( ( CodeInfo->opnd[OPND3].type & OP_I ) && CodeInfo->opnd[OPND3].data32l >= -128 ) {

	test	DWORD PTR [rcx+80], 917504		; 000e0000H
	je	SHORT $LN7@check_3rd_
	mov	eax, DWORD PTR [rcx+88]
	cmp	eax, -128				; ffffffffffffff80H
	jl	SHORT $LN7@check_3rd_

; 1480 :             if ( ( CodeInfo->token == T_IMUL && CodeInfo->opnd[OPND3].data32l < 128 ) ||

	mov	edx, DWORD PTR [rcx+24]
	cmp	edx, 616				; 00000268H
	jne	SHORT $LN21@check_3rd_
	cmp	eax, 128				; 00000080H
	jl	SHORT $LN11@check_3rd_
	cmp	edx, edx
	je	SHORT $LN7@check_3rd_
$LN21@check_3rd_:
	cmp	eax, 256				; 00000100H
	jge	SHORT $LN7@check_3rd_
$LN11@check_3rd_:

; 1481 :                 ( CodeInfo->token != T_IMUL && CodeInfo->opnd[OPND3].data32l < 256 ) ) {
; 1482 :                 CodeInfo->opnd[OPND3].type = OP_I8;

	mov	DWORD PTR [rcx+80], 131072		; 00020000H
$LN22@check_3rd_:

; 1483 :                 return( NOT_ERROR );

	xor	eax, eax

; 1504 : }

	ret	0
$LN6@check_3rd_:

; 1473 :     case OP3_CL:
; 1474 :         if ( CodeInfo->opnd[OPND3].type == OP_CL )

	cmp	DWORD PTR [rcx+80], 1025		; 00000401H
	je	SHORT $LN22@check_3rd_
$LN7@check_3rd_:

; 1501 :         break;
; 1502 :     }
; 1503 :     return( ERROR );

	or	eax, -1

; 1504 : }

	ret	0
$LN5@check_3rd_:

; 1466 :        ( opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type_3rd == OP3_HID ) )
; 1467 :         return( ( CodeInfo->opnd[OPND3].type == OP_NONE ) ? NOT_ERROR : ERROR );

	mov	eax, DWORD PTR [rcx+80]
	neg	eax
	sbb	eax, eax

; 1504 : }

	ret	0
check_3rd_operand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
;	COMDAT output_data
_TEXT	SEGMENT
CodeInfo$ = 48
determinant$ = 56
index$ = 64
output_data PROC					; COMDAT

; 1323 : {

	mov	QWORD PTR [rsp+24], rbx
	mov	QWORD PTR [rsp+32], rbp
	push	rdi
	sub	rsp, 32					; 00000020H

; 1324 :   int       size = 0;

	xor	ebx, ebx
	movsxd	rbp, r8d
	mov	rdi, rcx

; 1325 : #if AVXSUPP
; 1326 :     if (CodeInfo->token >= VEX_START){

	mov	ecx, DWORD PTR [rcx+24]
	lea	r8d, QWORD PTR [rbx+2]
	cmp	ecx, 1291				; 0000050bH
	jl	$LN6@output_dat
	lea	eax, DWORD PTR [rcx-1669]
	cmp	eax, 1
	jbe	SHORT $LN9@output_dat
	lea	eax, DWORD PTR [rcx-1679]
	cmp	eax, 1
	ja	SHORT $LN10@output_dat
$LN9@output_dat:

; 1327 :       if ((CodeInfo->token == T_ANDN) || (CodeInfo->token == T_MULX) ||
; 1328 :         (CodeInfo->token == T_PDEP) || (CodeInfo->token == T_PEXT)){
; 1329 :         if ((CodeInfo->opnd[OPND2].data32l == 0) || (index == 2))

	cmp	DWORD PTR [rdi+64], ebx
	je	$LN63@output_dat
	cmp	ebp, r8d
	je	$LN63@output_dat
$LN10@output_dat:
	lea	eax, DWORD PTR [rcx-1671]
	cmp	eax, 3
	jbe	SHORT $LN13@output_dat
	cmp	ecx, 1678				; 0000068eH
	jne	SHORT $LN16@output_dat
$LN13@output_dat:

; 1330 :           return;
; 1331 :       }
; 1332 :       if ((CodeInfo->token >= T_BEXTR) && (CodeInfo->token <= T_SHRX) || (CodeInfo->token == T_BZHI)) {
; 1333 :         if (CodeInfo->opnd[OPND2].data32l == 0) return;

	cmp	DWORD PTR [rdi+64], ebx
	je	$LN63@output_dat
	test	ebp, -3					; fffffffdH
	je	$LN63@output_dat
$LN16@output_dat:

; 1334 :         if ((index == 0) || (index == 2))
; 1335 :           return;
; 1336 :       }
; 1337 :       if (CodeInfo->opnd[OPND2].type == OP_I8 && CodeInfo->evex_flag){

	cmp	DWORD PTR [rdi+56], 131072		; 00020000H
	jne	SHORT $LN6@output_dat
	cmp	BYTE PTR [rdi+136], bl
	je	SHORT $LN6@output_dat
	lea	eax, DWORD PTR [rcx-2039]
	cmp	eax, 7
	jbe	SHORT $LN20@output_dat
	lea	eax, DWORD PTR [rcx-1529]
	cmp	eax, 17
	jbe	SHORT $LN20@output_dat
	lea	eax, DWORD PTR [rcx-1610]
	cmp	eax, 1
	ja	SHORT $LN6@output_dat
$LN20@output_dat:

; 1338 :         if ((CodeInfo->token >= T_VPSLLW) && (CodeInfo->token <= T_VPSRLQ) ||
; 1339 :           (CodeInfo->token >= T_VPSLLVD) && (CodeInfo->token <= T_VPSRLVW) ||
; 1340 :           (CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS))
; 1341 :         {
; 1342 :           if (((CodeInfo->rm_byte) >> 6) == 2)size = 4;

	movzx	eax, BYTE PTR [rdi+104]
	shr	al, 6
	cmp	al, r8b
	jne	SHORT $LN23@output_dat
	mov	ebx, 4
	jmp	SHORT $LN6@output_dat
$LN23@output_dat:

; 1343 :           else if (((CodeInfo->rm_byte) >> 6) == 1)size = 2;

	cmp	al, 1
	cmove	ebx, r8d
$LN6@output_dat:

; 1344 :         }
; 1345 :       }
; 1346 :     } 
; 1347 :     else
; 1348 : #endif
; 1349 :     /* skip the memory operand for XLAT/XLATB and string instructions! */
; 1350 :     if ( CodeInfo->token == T_XLAT || CodeInfo->token == T_XLATB ||
; 1351 :         CodeInfo->pinstr->allowed_prefix == AP_REP ||
; 1352 :         CodeInfo->pinstr->allowed_prefix == AP_REPxx ) {
; 1353 :         /* v2.06: no need anymore to modify the fixup field, it's
; 1354 :          * used inside OutputBytes() only.
; 1355 :          */
; 1356 :         //CodeInfo->InsFixup[index] = NULL;
; 1357 : 
; 1358 :         ;//return;
; 1359 :     }
; 1360 : #ifdef DEBUG_OUT
; 1361 :     if ( CodeInfo->opnd[index].InsFixup )
; 1362 :         DebugMsg1(("output_data(idx=%u, op=%" I32_SPEC "X [data=%" I32_SPEC "X fixup=%p typ=%u] ) enter [rm=%X]\n", index, determinant, CodeInfo->opnd[index].data32l, CodeInfo->opnd[index].InsFixup, CodeInfo->opnd[index].InsFixup->type ,CodeInfo->rm_byte ));
; 1363 :     else
; 1364 :         DebugMsg1(("output_data(idx=%u, op=%" I32_SPEC "X [data=%" I32_SPEC "X fixup=NULL] ) enter [rm=%X]\n", index, determinant, CodeInfo->opnd[index].data32l, CodeInfo->rm_byte ));
; 1365 : #endif
; 1366 : 
; 1367 :     /* determine size */
; 1368 : 
; 1369 :     if( determinant & OP_I8 ) {

	mov	QWORD PTR [rsp+48], rsi
	mov	QWORD PTR [rsp+56], r14
	bt	edx, 17
	jae	SHORT $LN28@output_dat
$LN39@output_dat:

; 1370 :         size = 1;

	mov	ebx, 1
	jmp	$LN67@output_dat
$LN28@output_dat:

; 1371 :     } else if( determinant & OP_I16 ) {

	bt	edx, 18
	jae	SHORT $LN30@output_dat

; 1372 :         size = 2;

	mov	ebx, r8d
	jmp	$LN67@output_dat
$LN30@output_dat:

; 1373 :     } else if( determinant & OP_I32 ) {

	bt	edx, 19
	jae	SHORT $LN32@output_dat
$LN53@output_dat:

; 1374 :         size = 4;

	mov	ebx, 4
	jmp	$LN67@output_dat
$LN32@output_dat:

; 1375 :     } else if( determinant & OP_I48 ) {

	bt	edx, 21
	jae	SHORT $LN34@output_dat

; 1376 :         size = 6;

	mov	ebx, 6
	jmp	$LN67@output_dat
$LN34@output_dat:

; 1377 : #if AMD64_SUPPORT
; 1378 :     } else if( determinant & OP_I64 ) {

	bt	edx, 20
	jae	SHORT $LN36@output_dat

; 1379 :         size = 8;

	mov	ebx, 8
	jmp	$LN67@output_dat
$LN36@output_dat:

; 1380 : #endif
; 1381 :     } else if( determinant & OP_M_ANY ) {

	test	edx, -8388608				; ffffffffff800000H
	je	$LN51@output_dat

; 1382 :         /* switch on the mode ( the leftmost 2 bits ) */
; 1383 :         switch( CodeInfo->rm_byte & BIT_67 ) {

	movzx	ecx, BYTE PTR [rdi+104]
	mov	edx, ecx
	and	edx, 192				; 000000c0H
	je	SHORT $LN40@output_dat
	sub	edx, 64					; 00000040H
	je	SHORT $LN39@output_dat
	cmp	edx, 64					; 00000040H
	jne	SHORT $LN51@output_dat

; 1412 : 
; 1413 : #endif
; 1414 :                 }
; 1415 :             }
; 1416 :             break;
; 1417 :         case MOD_10:  /* 16- or 32-bit displacement */
; 1418 :             if( ( CodeInfo->Ofssize == USE16 && CodeInfo->prefix.adrsiz == 0 ) ||

	movzx	eax, BYTE PTR [rdi+106]
	test	al, al
	jne	SHORT $LN56@output_dat
	test	BYTE PTR [rdi+9], 1
	je	SHORT $LN55@output_dat
$LN56@output_dat:
	cmp	al, 1
	jne	SHORT $LN53@output_dat
	test	BYTE PTR [rdi+9], al
	je	SHORT $LN53@output_dat
$LN55@output_dat:

; 1419 :                ( CodeInfo->Ofssize == USE32 && CodeInfo->prefix.adrsiz == 1 ) ) {
; 1420 :                 size = 2;

	mov	ebx, r8d

; 1421 :             } else {

	jmp	SHORT $LN67@output_dat
$LN40@output_dat:

; 1384 :         case MOD_01:  /* 8-bit displacement */
; 1385 :             size = 1;
; 1386 :             break;
; 1387 :         case MOD_00: /* direct; base and/or index with no disp */
; 1388 :             if( ( CodeInfo->Ofssize == USE16 && CodeInfo->prefix.adrsiz == 0 ) ||

	movzx	edx, BYTE PTR [rdi+106]
	test	dl, dl
	jne	SHORT $LN44@output_dat
	test	BYTE PTR [rdi+9], 1
	je	SHORT $LN43@output_dat
$LN44@output_dat:
	cmp	dl, 1
	jne	SHORT $LN41@output_dat
	test	BYTE PTR [rdi+9], dl
	je	SHORT $LN41@output_dat
$LN43@output_dat:

; 1389 :                ( CodeInfo->Ofssize == USE32 && CodeInfo->prefix.adrsiz == 1 ) ) {
; 1390 :                 if( ( CodeInfo->rm_byte & BIT_012 ) == RM_D16 ) {

	and	cl, 7
	cmp	cl, 6
	jne	SHORT $LN51@output_dat

; 1391 :                      size = 2; /* = size of displacement */

	mov	ebx, r8d

; 1392 :                 }
; 1393 :             } else {

	jmp	SHORT $LN67@output_dat
$LN41@output_dat:

; 1394 : #if AMD64_SUPPORT
; 1395 :                 /* v2.11: special case, 64-bit direct memory addressing, opcodes 0xA0 - 0xA3 */
; 1396 :                 if( CodeInfo->Ofssize == USE64 && ( CodeInfo->pinstr->opcode & 0xFC ) == 0xA0 && CodeInfo->pinstr->byte1_info == 0 )

	cmp	dl, r8b
	jne	SHORT $LN46@output_dat
	mov	r8, QWORD PTR [rdi+16]
	movzx	eax, BYTE PTR [r8+12]
	and	al, 252					; 000000fcH
	cmp	al, 160					; 000000a0H
	jne	SHORT $LN46@output_dat
	cmp	BYTE PTR [r8+1], 0
	jne	SHORT $LN46@output_dat

; 1397 :                     size = 8;

	mov	ebx, 8
	jmp	SHORT $LN67@output_dat
$LN46@output_dat:

; 1398 :                 else
; 1399 : #endif
; 1400 :                 switch( CodeInfo->rm_byte & BIT_012 ) {

	and	ecx, 7
	sub	ecx, 4
	je	SHORT $LN48@output_dat
	cmp	ecx, 1
	je	SHORT $LN49@output_dat
$LN51@output_dat:

; 1422 :                 size = 4;
; 1423 :             }
; 1424 :         }
; 1425 :     }
; 1426 : #ifdef DEBUG_OUT
; 1427 :     if ( size > 4 )
; 1428 :         DebugMsg1(( "output_data: size=%u cont=%" I64_SPEC "X\n", size, CodeInfo->opnd[index].data64 ));
; 1429 :     else if ( size )
; 1430 :         DebugMsg1(( "output_data: size=%u cont=%" I32_SPEC "X\n", size, CodeInfo->opnd[index].data32l ));
; 1431 :     else
; 1432 :         DebugMsg1(( "output_data: size=0\n" ));
; 1433 : #endif
; 1434 :     if (size) {

	test	ebx, ebx
	je	$LN61@output_dat
$LN67@output_dat:

; 1435 :       if (CodeInfo->opnd[index].InsFixup) {

	lea	rax, QWORD PTR [rbp+2]
	lea	rax, QWORD PTR [rax+rax*2]
	mov	rdx, QWORD PTR [rdi+rax*8]
	lea	r14, QWORD PTR [rdi+rax*8]
	test	rdx, rdx
	je	$LN61@output_dat

; 1436 :         /* v2.07: fixup type check moved here */
; 1437 :         if (Parse_Pass > PASS_1)

	cmp	DWORD PTR Parse_Pass, 0
	jbe	$LN60@output_dat

; 1438 :           if ((1 << CodeInfo->opnd[index].InsFixup->type) & ModuleInfo.fmtopt->invalid_fixup_type) {

	mov	r9, QWORD PTR ModuleInfo+344
	mov	ecx, DWORD PTR [rdx+24]
	movsx	eax, WORD PTR [r9+8]
	bt	eax, ecx
	jae	SHORT $LN60@output_dat

; 1439 :             EmitErr(UNSUPPORTED_FIXUP_TYPE,

	mov	rax, QWORD PTR [rdx+56]
	test	rax, rax
	je	SHORT $LN65@output_dat
	mov	r8, QWORD PTR [rax+8]
	jmp	SHORT $LN66@output_dat
$LN48@output_dat:

; 1401 :                 case RM_SIB: /* 0x04 (equals register # for ESP) */
; 1402 :                     if( ( CodeInfo->sib & BIT_012 ) != RM_D32 ) {

	movzx	eax, BYTE PTR [rdi+105]
	and	al, 7
	cmp	al, 5
	jne	SHORT $LN51@output_dat
$LN49@output_dat:

; 1403 :                         break;  /* size = 0 */
; 1404 :                     }
; 1405 :                     /* no break */
; 1406 :                 case RM_D32: /* 0x05 (equals register # for EBP) */
; 1407 :                     size = 4; /* = size of displacement */

	mov	ebx, 4

; 1408 : #if AMD64_SUPPORT
; 1409 :                     /* v2.11: overflow check for 64-bit added */
; 1410 :                       if ( CodeInfo->Ofssize == USE64 && CodeInfo->opnd[index].data64 >= 0x80000000 && CodeInfo->opnd[index].data64 < 0xffffffff80000000 )

	cmp	dl, 2
	jne	SHORT $LN67@output_dat
	lea	rcx, QWORD PTR [rbp*2]
	add	rcx, rbp
	mov	rax, QWORD PTR [rdi+rcx*8+40]
	mov	ecx, -2147483648			; 80000000H
	sub	rax, rcx
	mov	rcx, -4294967297			; fffffffeffffffffH
	cmp	rax, rcx
	ja	$LN67@output_dat

; 1411 :                         EmitErr( INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS );  // proveri

	lea	ecx, QWORD PTR [rbx+10]
	call	EmitErr

; 1422 :                 size = 4;
; 1423 :             }
; 1424 :         }
; 1425 :     }
; 1426 : #ifdef DEBUG_OUT
; 1427 :     if ( size > 4 )
; 1428 :         DebugMsg1(( "output_data: size=%u cont=%" I64_SPEC "X\n", size, CodeInfo->opnd[index].data64 ));
; 1429 :     else if ( size )
; 1430 :         DebugMsg1(( "output_data: size=%u cont=%" I32_SPEC "X\n", size, CodeInfo->opnd[index].data32l ));
; 1431 :     else
; 1432 :         DebugMsg1(( "output_data: size=0\n" ));
; 1433 : #endif
; 1434 :     if (size) {

	jmp	$LN67@output_dat
$LN65@output_dat:

; 1439 :             EmitErr(UNSUPPORTED_FIXUP_TYPE,

	lea	r8, OFFSET FLAT:szNull
$LN66@output_dat:
	lea	rdx, QWORD PTR [r9+10]
	mov	ecx, 197				; 000000c5H
	call	EmitErr
$LN60@output_dat:

; 1440 :               ModuleInfo.fmtopt->formatname,
; 1441 :               CodeInfo->opnd[index].InsFixup->sym ? CodeInfo->opnd[index].InsFixup->sym->name : szNull);
; 1442 :             /* don't exit! */
; 1443 :           }
; 1444 :         if (write_to_file) {

	cmp	BYTE PTR write_to_file, 0
	je	SHORT $LN61@output_dat

; 1445 :           CodeInfo->opnd[index].InsFixup->locofs = GetCurrOffset();

	call	GetCurrOffset
	mov	rcx, QWORD PTR [r14]
	mov	DWORD PTR [rcx+20], eax

; 1446 :           OutputBytes((unsigned char *)&CodeInfo->opnd[index].data32l,

	mov	r8, QWORD PTR [r14]

; 1447 :             size, CodeInfo->opnd[index].InsFixup);
; 1448 :           return;

	jmp	SHORT $LN75@output_dat
$LN61@output_dat:

; 1449 :         }
; 1450 :       }
; 1451 :     }
; 1452 :         /* if the TypleType is present output only 1 byte for the multiplier */
; 1453 :         if (CodeInfo->tuple){

	cmp	BYTE PTR [rdi+140], 0
	je	SHORT $LN62@output_dat

; 1454 :           OutputByte(CodeInfo->opnd[index].data32l);

	lea	rcx, QWORD PTR [rbp*2]
	add	rcx, rbp
	movzx	ecx, BYTE PTR [rdi+rcx*8+40]
	call	OutputByte

; 1455 :         }

	jmp	SHORT $LN74@output_dat
$LN62@output_dat:

; 1456 :         else
; 1457 :           OutputBytes( (unsigned char *)&CodeInfo->opnd[index].data32l, size, NULL );

	xor	r8d, r8d
$LN75@output_dat:
	lea	rcx, QWORD PTR [rbp*2+5]
	mov	edx, ebx
	add	rcx, rbp
	lea	rcx, QWORD PTR [rdi+rcx*8]
	call	OutputBytes
$LN74@output_dat:
	mov	rsi, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+56]
$LN63@output_dat:

; 1458 :        
; 1459 :     return;
; 1460 : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
output_data ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
;	COMDAT output_opc
_TEXT	SEGMENT
tv4286 = 80
tv3947 = 80
CodeInfo$ = 80
output_opc PROC						; COMDAT

; 168  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 32					; 00000020H

; 169  :   const struct instr_item *ins = CodeInfo->pinstr;

	mov	r15, QWORD PTR [rcx+16]

; 170  :   uint_8           tmp;
; 171  :   uint_8           fpfix = FALSE;

	xor	sil, sil

; 172  :   int              rn;
; 173  :   unsigned char    c;
; 174  :   int_8            comprdsp = 0;

	xor	r13b, r13b
	mov	rdi, rcx

; 175  : 
; 176  :   DebugMsg1(("output_opc enter, ins.opc/rm=%X/%X, byte1_info=%X CodeInfo->rm=%X opsiz=%u\n", ins->opcode, ins->rm_byte, ins->byte1_info, CodeInfo->rm_byte, CodeInfo->prefix.opsiz));
; 177  :   /*
; 178  :    * Output debug info - line numbers
; 179  :    */
; 180  :   if (Options.line_numbers)

	cmp	BYTE PTR Options+1, sil
	je	SHORT $LN21@output_opc

; 181  :     AddLinnumDataRef(get_curr_srcfile(), GetLineNumber());

	call	GetLineNumber
	mov	ebx, eax
	call	get_curr_srcfile
	mov	ecx, eax
	mov	edx, ebx
	call	AddLinnumDataRef
$LN21@output_opc:

; 182  :   /* if it's a FPU instr, reset opsiz */
; 183  :   //if( ins->cpu & P_FPU_MASK ) {
; 184  :   /* v2.02: if it's a FPU or MMX/SSE instr, reset opsiz!
; 185  :    * [this code has been moved here from codegen()]
; 186  :    */
; 187  :   if (ins->cpu & (P_FPU_MASK | P_MMX | P_SSEALL)) {

	mov	eax, 64775				; 0000fd07H
	test	WORD PTR [r15+10], ax
	je	SHORT $LN23@output_opc

; 188  : #if SSE4SUPP
; 189  :     /* there are 2 exceptions. how to avoid this ugly hack? */
; 190  :     if (CodeInfo->token != T_CRC32 &&

	mov	eax, DWORD PTR [rdi+24]
	cmp	eax, 1262				; 000004eeH
	je	SHORT $LN23@output_opc
	cmp	eax, 1268				; 000004f4H
	je	SHORT $LN23@output_opc

; 191  :       CodeInfo->token != T_POPCNT)
; 192  : #endif
; 193  :       CodeInfo->prefix.opsiz = FALSE;

	and	BYTE PTR [rdi+9], 253			; 000000fdH
$LN23@output_opc:

; 194  :   }
; 195  :   if ((CodeInfo->token == T_RDRAND) || (CodeInfo->token == T_RDSEED)){

	movsxd	r9, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [r9-1269]
	cmp	eax, 1
	ja	SHORT $LN26@output_opc
	mov	eax, DWORD PTR [rdi+32]
	sub	eax, 2
	test	eax, -513				; fffffdffH
	jne	SHORT $LN26@output_opc

; 196  :     if ((CodeInfo->opnd[OPND1].type == OP_R16) || (CodeInfo->opnd[OPND1].type == OP_AX))
; 197  :       CodeInfo->prefix.opsiz = TRUE;

	or	BYTE PTR [rdi+9], 2
$LN26@output_opc:

; 198  :   } 
; 199  :   /*
; 200  :    * Check if CPU, FPU and extensions are within the limits
; 201  :    */
; 202  :   if ((ins->cpu & P_CPU_MASK) > (ModuleInfo.curr_cpu & P_CPU_MASK)
; 203  :     || (ins->cpu & P_FPU_MASK) > (ModuleInfo.curr_cpu & P_FPU_MASK)
; 204  :     || (ins->cpu & P_EXT_MASK) > (ModuleInfo.curr_cpu & P_EXT_MASK)) {

	movzx	r8d, WORD PTR [r15+10]
	lea	r12, OFFSET FLAT:__ImageBase
	mov	edx, DWORD PTR ModuleInfo+392
	mov	ebx, 240				; 000000f0H
	mov	ecx, r8d
	mov	eax, edx
	and	ecx, ebx
	and	eax, ebx
	cmp	ecx, eax
	jg	SHORT $LN29@output_opc
	mov	ecx, r8d
	mov	eax, edx
	and	ecx, 7
	and	eax, 7
	cmp	cl, al
	jg	SHORT $LN29@output_opc
	mov	eax, r8d
	and	edx, 65280				; 0000ff00H
	and	eax, 65280				; 0000ff00H
	cmp	eax, edx
	jle	SHORT $LN31@output_opc
$LN29@output_opc:

; 205  :     DebugMsg(("output_opc: wrong cpu setting: instr.cpu=%X, ModuleInfo.cpu=%X\n",
; 206  :       ins->cpu, ModuleInfo.curr_cpu));
; 207  :     /* if instruction is valid for 16bit cpu, but operands aren't,
; 208  :      then display a more specific error message! */
; 209  :     if (ins->cpu == P_386 &&

	cmp	r8d, 48					; 00000030H
	jne	SHORT $LN30@output_opc
	movzx	eax, WORD PTR optable_idx[r12+r9*2-900]
	imul	rcx, rax, 14
	movzx	eax, WORD PTR InstrTable[rcx+r12+10]

; 210  :       ((InstrTable[IndexFromToken(CodeInfo->token)].cpu & P_CPU_MASK) <= P_386))
; 211  :       EmitError(INSTRUCTION_FORM_REQUIRES_80386);

	mov	ecx, 238				; 000000eeH
	and	ax, bx
	cmp	ax, r8w
	jbe	SHORT $LN647@output_opc
$LN30@output_opc:

; 212  :     else
; 213  :       EmitError(INSTRUCTION_OR_REGISTER_NOT_ACCEPTED_IN_CURRENT_CPU_MODE);

	mov	ecx, 30
$LN647@output_opc:
	call	EmitError
$LN31@output_opc:

; 214  :     //return( ERROR );
; 215  :   }
; 216  : 
; 217  :   /*
; 218  :    * Output FP fixup if required
; 219  :    * the OPs with NOWAIT are the instructions beginning with
; 220  :    * FN, except FNOP.
; 221  :    * the OPs with WAIT are the instructions:
; 222  :    * FCLEX, FDISI, FENI, FINIT, FSAVEx, FSTCW, FSTENVx, FSTSW
; 223  :    */
; 224  :   if ((ModuleInfo.emulator == TRUE) &&
; 225  :     (CodeInfo->Ofssize == USE16) &&
; 226  :     (ins->cpu & P_FPU_MASK) &&

	mov	ecx, DWORD PTR ModuleInfo+408
	bt	ecx, 9
	jae	SHORT $LN32@output_opc
	cmp	BYTE PTR [rdi+106], 0
	jne	SHORT $LN32@output_opc
	test	BYTE PTR [r15+10], 7
	je	SHORT $LN32@output_opc
	cmp	WORD PTR [r15+2], 5
	je	SHORT $LN32@output_opc

; 227  :     (ins->allowed_prefix != AP_NO_FWAIT)) {
; 228  :     fpfix = TRUE;
; 229  :     /* v2.04: no error is returned */
; 230  :     AddFloatingPointEmulationFixup(CodeInfo);

	mov	rcx, rdi
	mov	sil, 1
	call	AddFloatingPointEmulationFixup
	mov	ecx, DWORD PTR ModuleInfo+408
$LN32@output_opc:

; 231  :   }
; 232  : 
; 233  :   /*
; 234  :    * Output instruction prefix LOCK, REP or REP[N]E|Z
; 235  :    */
; 236  :   if (CodeInfo->prefix.ins != EMPTY && (CodeInfo->token < T_VPGATHERDD || CodeInfo->token > T_VGATHERQPS)) {

	movsxd	rdx, DWORD PTR [rdi]
	mov	ebp, 3
	cmp	edx, -2
	je	SHORT $LN37@output_opc
	mov	eax, DWORD PTR [rdi+24]
	sub	eax, 1340				; 0000053cH
	cmp	eax, 7
	jbe	SHORT $LN37@output_opc

; 237  :     tmp = InstrTable[IndexFromToken(CodeInfo->prefix.ins)].allowed_prefix;

	movzx	eax, WORD PTR optable_idx[r12+rdx*2-900]
	imul	rdx, rax, 14
	movzx	eax, BYTE PTR InstrTable[rdx+r12+2]

; 238  :     /* instruction prefix must be ok. However, with -Zm, the plain REP
; 239  :      * is also ok for instructions which expect REPxx.
; 240  :      */
; 241  :     if (ModuleInfo.m510 == TRUE &&
; 242  :       tmp == AP_REP &&

	test	cl, 64					; 00000040H
	je	SHORT $LN35@output_opc
	cmp	al, 2
	jne	SHORT $LN35@output_opc
	cmp	WORD PTR [r15+2], bp
	movzx	eax, al
	cmove	eax, ebp
$LN35@output_opc:

; 243  :       ins->allowed_prefix == AP_REPxx)
; 244  :       tmp = AP_REPxx;
; 245  : 
; 246  :     if (ins->allowed_prefix != tmp) {

	movzx	eax, al
	cmp	WORD PTR [r15+2], ax
	je	SHORT $LN36@output_opc

; 247  :       EmitError(INSTRUCTION_PREFIX_NOT_ALLOWED);

	mov	ecx, 28
	call	EmitError

; 248  :     }

	jmp	SHORT $LN37@output_opc
$LN36@output_opc:

; 249  :     else
; 250  :       OutputCodeByte(InstrTable[IndexFromToken(CodeInfo->prefix.ins)].opcode);

	movzx	ecx, BYTE PTR InstrTable[rdx+r12+12]
	call	OutputByte
$LN37@output_opc:

; 251  :   }
; 252  :   /*
; 253  :    * Output FP FWAIT if required
; 254  :    */
; 255  :   if (ins->cpu & P_FPU_MASK) {

	test	BYTE PTR [r15+10], 7
	je	SHORT $LN46@output_opc

; 256  :     if (CodeInfo->token == T_FWAIT) {

	cmp	DWORD PTR [rdi+24], 828			; 0000033cH
	jne	SHORT $LN39@output_opc

; 257  :       /* v2.04: Masm will always insert a NOP if emulation is active,
; 258  :        * no matter what the current cpu is. The reason is simple: the
; 259  :        * nop is needed because of the fixup which was inserted.
; 260  :        */
; 261  :       //if(( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_386 ) {
; 262  :       //    if(( ModuleInfo.emulator == TRUE ) && ( CodeInfo->Ofssize == USE16 )) {
; 263  :       if (fpfix) {

	test	sil, sil
	je	SHORT $LN46@output_opc

; 264  :         OutputCodeByte(OP_NOP);

	mov	cl, 144					; 00000090H

; 265  :       }
; 266  :     }

	jmp	SHORT $LN648@output_opc
$LN39@output_opc:

; 267  :     else if (fpfix || ins->allowed_prefix == AP_FWAIT) {

	test	sil, sil
	jne	SHORT $LN44@output_opc
	movzx	eax, WORD PTR [r15+2]
	cmp	ax, 4
	je	SHORT $LN44@output_opc

; 269  :     }
; 270  :     else if (ins->allowed_prefix != AP_NO_FWAIT) {

	cmp	ax, 5
	je	SHORT $LN46@output_opc

; 271  :       /* implicit FWAIT synchronization for 8087 (CPU 8086/80186) */
; 272  :       if ((ModuleInfo.curr_cpu & P_CPU_MASK) < P_286)

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, ebx
	cmp	eax, 32					; 00000020H
	jge	SHORT $LN46@output_opc
$LN44@output_opc:

; 268  :       OutputCodeByte(OP_WAIT);

	mov	cl, 155					; 0000009bH
$LN648@output_opc:
	call	OutputByte
$LN46@output_opc:

; 273  :         OutputCodeByte(OP_WAIT);
; 274  :     }
; 275  :   }
; 276  :   /*
; 277  :    * check if address/operand size prefix is to be set
; 278  :    */
; 279  :   switch (ins->byte1_info) {

	movzx	eax, BYTE PTR [r15+1]
	dec	eax
	cmp	eax, 21
	ja	SHORT $LN2@output_opc
	cdqe
	movzx	eax, BYTE PTR $LN645@output_opc[r12+rax]
	mov	ecx, DWORD PTR $LN646@output_opc[r12+rax*4]
	add	rcx, r12
	jmp	rcx
$LN47@output_opc:

; 280  :   case F_16:
; 281  :     if (CodeInfo->Ofssize >= USE32) CodeInfo->prefix.opsiz = TRUE;

	cmp	BYTE PTR [rdi+106], 1
	jb	SHORT $LN2@output_opc
	or	BYTE PTR [rdi+9], 2

; 282  :     break;

	jmp	SHORT $LN2@output_opc
$LN49@output_opc:

; 283  :   case F_32:
; 284  :     if (CodeInfo->Ofssize == USE16) CodeInfo->prefix.opsiz = TRUE;

	cmp	BYTE PTR [rdi+106], 0
	jne	SHORT $LN2@output_opc
	or	BYTE PTR [rdi+9], 2

; 285  :     break;

	jmp	SHORT $LN2@output_opc
$LN51@output_opc:

; 286  :   case F_16A: /* 16-bit JCXZ and LOOPcc */
; 287  :     /* doesnt exist for IA32+ */
; 288  :     if (CodeInfo->Ofssize == USE32) CodeInfo->prefix.adrsiz = TRUE;

	cmp	BYTE PTR [rdi+106], 1
	jne	SHORT $LN2@output_opc
	or	BYTE PTR [rdi+9], 1

; 289  :     break;

	jmp	SHORT $LN2@output_opc
$LN53@output_opc:

; 290  :   case F_32A: /* 32-bit JECXZ and LOOPcc */
; 291  : #if AMD64_SUPPORT
; 292  :     /* in IA32+, the 32bit version gets an 0x67 prefix */
; 293  :     if (CodeInfo->Ofssize != USE32)  CodeInfo->prefix.adrsiz = TRUE;

	cmp	BYTE PTR [rdi+106], 1
	je	SHORT $LN2@output_opc
	or	BYTE PTR [rdi+9], 1

; 294  : #else
; 295  :     if( CodeInfo->Ofssize == USE16 ) CodeInfo->prefix.adrsiz = TRUE;
; 296  : #endif
; 297  :     break;

	jmp	SHORT $LN2@output_opc
$LN55@output_opc:

; 298  :   case F_0FNO66:
; 299  :     CodeInfo->prefix.opsiz = FALSE;

	and	BYTE PTR [rdi+9], 253			; 000000fdH

; 300  :     break;

	jmp	SHORT $LN2@output_opc
$LN56@output_opc:

; 301  : #if AMD64_SUPPORT
; 302  :   case F_48:
; 303  :   case F_480F:
; 304  :     CodeInfo->prefix.rex |= REX_W;

	or	BYTE PTR [rdi+8], 8
$LN2@output_opc:

; 305  :     break;
; 306  : #endif
; 307  :   }
; 308  : 
; 309  : 
; 310  : #if AVXSUPP   
; 311  :   if (ResWordTable[CodeInfo->token].flags & RWF_EVEX)

	movsxd	rcx, DWORD PTR [rdi+24]
	mov	rax, rcx
	add	rax, rax
	test	BYTE PTR ResWordTable[r12+rax*8+3], 16
	je	SHORT $LN57@output_opc

; 312  : 	  CodeInfo->evex_flag = TRUE;

	mov	BYTE PTR [rdi+136], 1
$LN57@output_opc:

; 313  :   if (!evex)

	cmp	BYTE PTR evex, 0
	jne	SHORT $LN58@output_opc

; 314  : 	  CodeInfo->evex_flag = FALSE;

	mov	BYTE PTR [rdi+136], 0
$LN58@output_opc:

; 315  :   if (CodeInfo->evex_flag == TRUE) {

	cmp	BYTE PTR [rdi+136], 1
	jne	SHORT $LN60@output_opc

; 316  : 	  if (!(vex_flags[CodeInfo->token - VEX_START] & VX_LL))

	test	BYTE PTR vex_flags[rcx+r12-1291], 64	; 00000040H
	jne	SHORT $LN60@output_opc

; 317  : 		  EmitError(INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS);

	mov	ecx, 14
	call	EmitError
$LN60@output_opc:

; 318  :   }
; 319  : 
; 320  :   if (!(ResWordTable[CodeInfo->token].flags & RWF_VEX)) {

	movsxd	rax, DWORD PTR [rdi+24]
	add	rax, rax
	test	BYTE PTR ResWordTable[r12+rax*8+3], 8
	jne	SHORT $LN4@output_opc

; 321  : #endif
; 322  : 
; 323  : 	switch (ins->byte1_info) {

	movzx	eax, BYTE PTR [r15+1]
	add	eax, -5
	cmp	eax, 22
	ja	SHORT $LN4@output_opc
	cdqe
	movzx	eax, BYTE PTR $LN643@output_opc[r12+rax]
	mov	ecx, DWORD PTR $LN644@output_opc[r12+rax*4]
	add	rcx, r12
	jmp	rcx
$LN62@output_opc:

; 324  :     case F_660F:
; 325  :     case F_660F38:
; 326  :     case F_660F3A:
; 327  :       CodeInfo->prefix.opsiz = TRUE;

	or	BYTE PTR [rdi+9], 2

; 328  :       break;

	jmp	SHORT $LN4@output_opc
$LN63@output_opc:

; 329  :     case F_F20F:
; 330  :     case F_F20F38: OutputCodeByte(0xF2); break;

	mov	cl, 242					; 000000f2H
	jmp	SHORT $LN649@output_opc
$LN64@output_opc:

; 331  :     case F_F3: /* PAUSE instruction */
; 332  :     case F_F30F:   OutputCodeByte(0xF3); break;

	mov	cl, 243					; 000000f3H
$LN649@output_opc:
	call	OutputByte
$LN4@output_opc:

; 333  :     }
; 334  : #if AVXSUPP
; 335  :   }
; 336  : #endif
; 337  :   /*
; 338  :    * Output address and operand size prefixes.
; 339  :    * These bytes are NOT compatible with FP emulation fixups,
; 340  :    * which expect that the FWAIT/NOP first "prefix" byte is followed
; 341  :    * by either a segment prefix or the opcode byte.
; 342  :    * Neither Masm nor HJWasm emit a warning, though.
; 343  :    */
; 344  :   if (CodeInfo->prefix.adrsiz == TRUE && (CodeInfo->token < T_VPGATHERDD || CodeInfo->token > T_VSCATTERQPD)) {

	test	BYTE PTR [rdi+9], 1
	je	SHORT $LN65@output_opc
	mov	eax, DWORD PTR [rdi+24]
	sub	eax, 1340				; 0000053cH
	cmp	eax, 15
	jbe	SHORT $LN65@output_opc

; 345  :     OutputCodeByte(ADRSIZ);

	mov	cl, 103					; 00000067H
	call	OutputByte
$LN65@output_opc:

; 346  : #ifdef DEBUG_OUT
; 347  :     if (fpfix)
; 348  :       DebugMsg(("output_opc: ERROR: FP emulation byte sequence destroyed by 32-bit address prefix!\n"));
; 349  : #endif
; 350  :   }
; 351  :   if (CodeInfo->prefix.opsiz == TRUE) {

	test	BYTE PTR [rdi+9], 2
	je	SHORT $LN67@output_opc

; 352  : #if 1
; 353  :     if ((ModuleInfo.curr_cpu & P_CPU_MASK) < P_386) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, ebx
	cmp	eax, 48					; 00000030H
	jge	SHORT $LN68@output_opc

; 354  :       DebugMsg(("output_opc: instruction form requires 386\n"));
; 355  :       EmitError(INSTRUCTION_FORM_REQUIRES_80386);

	mov	ecx, 238				; 000000eeH
	call	EmitError
$LN68@output_opc:

; 356  :       //return( ERROR ); /* v2.06: don't skip instruction */
; 357  :     }
; 358  : #endif
; 359  :     OutputCodeByte(OPSIZ);

	mov	cl, 102					; 00000066H
	call	OutputByte
$LN67@output_opc:

; 360  :   }
; 361  :   /*
; 362  :    * Output segment prefix
; 363  :    */
; 364  :   if (CodeInfo->prefix.RegOverride != EMPTY) {

	movsxd	rax, DWORD PTR [rdi+4]
	cmp	eax, -2
	je	SHORT $LN69@output_opc

; 365  :     OutputCodeByte(sr_prefix[CodeInfo->prefix.RegOverride]);

	movzx	ecx, BYTE PTR sr_prefix[rax+r12]
	call	OutputByte
$LN69@output_opc:

; 366  :   }
; 367  :   if (ins->opnd_dir) {

	cmp	BYTE PTR [r15+6], 0
	je	SHORT $LN70@output_opc

; 368  :     /* The reg and r/m fields are backwards */
; 369  :     tmp = CodeInfo->rm_byte;

	movzx	ecx, BYTE PTR [rdi+104]

; 370  :     CodeInfo->rm_byte = (tmp & 0xc0) | ((tmp >> 3) & 0x7) | ((tmp << 3) & 0x38);

	movzx	edx, cl
	movzx	eax, cl
	shr	dl, 3
	and	al, 7
	and	dl, 7
	shl	al, 3
	or	dl, al
	and	cl, 192					; 000000c0H
	or	dl, cl

; 371  : #if AMD64_SUPPORT
; 372  :     tmp = CodeInfo->prefix.rex;

	movzx	ecx, BYTE PTR [rdi+8]
	mov	BYTE PTR [rdi+104], dl

; 373  :     CodeInfo->prefix.rex = (tmp & 0xFA) | ((tmp & REX_R) >> 2) | ((tmp & REX_B) << 2);

	movzx	eax, cl
	movzx	edx, cl
	and	al, 1
	shr	dl, 2
	and	cl, 250					; 000000faH
	and	dl, 1
	shl	al, 2
	or	dl, al
	or	dl, cl
	mov	BYTE PTR [rdi+8], dl
$LN70@output_opc:

; 374  : #endif
; 375  :   }
; 376  : #if AVXSUPP
; 377  :   if (ResWordTable[CodeInfo->token].flags & RWF_VEX) {

	movsxd	rdx, DWORD PTR [rdi+24]
	mov	r14d, 1
	mov	rax, rdx
	add	rax, rax
	test	BYTE PTR ResWordTable[r12+rax*8+3], 8
	je	$LN71@output_opc

; 378  :     uint_8 lbyte = 0;

	xor	al, al

; 379  :     if (CodeInfo->evex_flag){

	cmp	BYTE PTR [rdi+136], 0
	movzx	ebx, al
	mov	eax, 4
	cmovne	ebx, eax

; 380  :       lbyte |= 0x4;              //bite 3 must be set in P2 WVVVV1PP 
; 381  :     }
; 382  :     switch (ins->byte1_info) {

	movzx	eax, BYTE PTR [r15+1]
	add	eax, -18
	cmp	eax, 10
	ja	SHORT $LN6@output_opc
	cdqe
	mov	ecx, DWORD PTR $LN642@output_opc[r12+rax*4]
	add	rcx, r12
	jmp	rcx
$LN74@output_opc:

; 383  :     case F_660F:
; 384  :     case F_660F38:
; 385  :     case F_660F3A:
; 386  :       lbyte |= 0x01;

	or	bl, r14b

; 387  :       break;

	jmp	SHORT $LN6@output_opc
$LN75@output_opc:

; 388  :     case F_F30F:
; 389  :     case F_F30F38:
; 390  :       lbyte |= 0x02;

	or	bl, 2

; 391  :       break;

	jmp	SHORT $LN6@output_opc
$LN76@output_opc:

; 392  :     case F_F20F:
; 393  :     case F_F20F38:
; 394  :       lbyte |= 0x03;

	or	bl, bpl
$LN6@output_opc:
	lea	eax, DWORD PTR [rdx-1589]
	cmp	eax, ebp
	ja	SHORT $LN77@output_opc

; 395  :       break;
; 396  :     }
; 397  :     if ((CodeInfo->token >= T_VSHUFF32X4) && (CodeInfo->token <= T_VSHUFI64X2) &&

	test	BYTE PTR [rdi+32], 32			; 00000020H
	jne	SHORT $LN78@output_opc
	test	BYTE PTR [rdi+56], 32			; 00000020H
	je	SHORT $LN77@output_opc
$LN78@output_opc:

; 398  :       ((CodeInfo->opnd[OPND1].type & OP_XMM) || (CodeInfo->opnd[OPND2].type & OP_XMM)))
; 399  :       EmitError(INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS); //Only YMM and ZMM alowed    

	mov	ecx, 14
	call	EmitError
$LN77@output_opc:

; 400  :     if (CodeInfo->vexregop)

	movzx	ecx, BYTE PTR [rdi+128]
	test	cl, cl
	je	SHORT $LN79@output_opc

; 401  :       lbyte |= ((16 - CodeInfo->vexregop) << 3);

	shl	cl, 3
	mov	eax, 128				; 00000080H
	sub	al, cl
	or	bl, al
	jmp	SHORT $LN80@output_opc
$LN79@output_opc:

; 402  :     else {
; 403  :       lbyte |= EVEX_P1VVVV;

	or	bl, 120					; 00000078H

; 404  :       CodeInfo->evex_p2 |= EVEX_P2VMASK;

	or	BYTE PTR [rdi+139], 8
$LN80@output_opc:

; 405  :     }
; 406  : 	if ((CodeInfo->token >= T_VBROADCASTF128) && (CodeInfo->token <= T_VPBROADCASTQ)) {

	mov	ecx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-1293]
	cmp	eax, 4
	ja	SHORT $LN82@output_opc

; 407  : 		if (!decoflags)CodeInfo->evex_flag = 0;

	cmp	BYTE PTR decoflags, 0
	jne	SHORT $LN82@output_opc
	mov	BYTE PTR [rdi+136], 0
$LN82@output_opc:
	lea	eax, DWORD PTR [rcx-1941]
	cmp	eax, r14d
	ja	SHORT $LN83@output_opc

; 408  : 	}
; 409  :         /* emit 4 byte (0x62), 3 (0xC4) or 2 (0xC5) byte VEX prefix */
; 410  :         if ((CodeInfo->token ==  T_VMOVMSKPD )||(CodeInfo->token ==  T_VMOVMSKPS )) 
; 411  :           CodeInfo->prefix.rex &= ~REX_W;

	and	BYTE PTR [rdi+8], 247			; 000000f7H
$LN83@output_opc:

; 412  :         if (( ins->byte1_info >= F_0F38) || ( CodeInfo->prefix.rex & ( REX_B | REX_X | REX_W ) )|| 
; 413  :           (( ins->byte1_info == F_0F) && (CodeInfo->token ==  T_KMOVQ )) || (ins->byte1_info == F_660F) && 

	movzx	edx, BYTE PTR [r15+1]
	cmp	dl, 23
	jae	$LN87@output_opc
	movzx	eax, BYTE PTR [rdi+8]
	test	al, 11
	jne	$LN87@output_opc
	cmp	dl, 16
	jne	SHORT $LN88@output_opc
	cmp	ecx, 1727				; 000006bfH
	je	$LN87@output_opc
$LN88@output_opc:
	cmp	dl, 18
	jne	SHORT $LN85@output_opc
	cmp	ecx, 1726				; 000006beH
	je	$LN87@output_opc
$LN85@output_opc:

; 780  :                 }
; 781  :             }
; 782  :         } else {
; 783  :             lbyte |= ( ( CodeInfo->prefix.rex & REX_R ) ? 0 : EVEX_P1WMASK );

	shl	al, 5
	not	al
	and	al, 128					; 00000080H
	or	bl, al

; 784  :             /* first byte is 0xC5  in 2 byte version  */
; 785  :             if (CodeInfo->evex_flag) {

	cmp	BYTE PTR [rdi+136], 0
	je	$LN287@output_opc

; 786  :               OutputCodeByte(0x62);

	mov	cl, 98					; 00000062H
	call	OutputByte

; 787  :               if ((CodeInfo->opnd[OPND1].type & OP_M_ANY)|| (CodeInfo->opnd[OPND2].type & OP_M_ANY)||

	test	DWORD PTR [rdi+32], -8388608		; ffffffffff800000H
	jne	SHORT $LN290@output_opc
	test	DWORD PTR [rdi+56], -8388608		; ffffffffff800000H
	jne	SHORT $LN290@output_opc
	test	DWORD PTR [rdi+80], -8388608		; ffffffffff800000H
	je	SHORT $LN289@output_opc
$LN290@output_opc:

; 788  :                 (CodeInfo->opnd[OPND3].type & OP_M_ANY)) CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b
$LN289@output_opc:

; 789  :               lbyte &= ~EVEX_P1WMASK;
; 790  :               lbyte |=  ((CodeInfo->pinstr->prefix)>>8 & EVEX_P1WMASK);

	mov	rax, QWORD PTR [rdi+16]
	xor	bl, BYTE PTR [rax+9]
	and	bl, 127					; 0000007fH
	xor	bl, BYTE PTR [rax+9]

; 791  :               if ((CodeInfo->opnd[OPND2].type == OP_M64)||(CodeInfo->opnd[OPND1].type == OP_M64)) 

	mov	eax, DWORD PTR [rdi+56]
	cmp	eax, 67108864				; 04000000H
	je	SHORT $LN292@output_opc
	cmp	DWORD PTR [rdi+32], 67108864		; 04000000H
	jne	SHORT $LN291@output_opc
$LN292@output_opc:

; 792  :                 lbyte |= EVEX_P1WMASK;

	or	bl, 128					; 00000080H
$LN291@output_opc:
	add	eax, -4					; fffffffcH
	test	eax, -513				; fffffdffH
	je	SHORT $LN294@output_opc
	mov	eax, DWORD PTR [rdi+32]
	sub	eax, 4
	test	eax, -513				; fffffdffH
	jne	SHORT $LN293@output_opc
$LN294@output_opc:

; 793  :               if ((CodeInfo->opnd[OPND2].type == OP_R32) || (CodeInfo->opnd[OPND2].type == OP_EAX)||
; 794  :                 (CodeInfo->opnd[OPND1].type == OP_R32) || (CodeInfo->opnd[OPND1].type == OP_EAX)){
; 795  :                 lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN293@output_opc:

; 796  :               }
; 797  :               switch ( ins->byte1_info ) {                     

	movzx	edx, BYTE PTR [r15+1]
	mov	ecx, edx
	sub	ecx, 23
	je	SHORT $LN295@output_opc
	sub	ecx, r14d
	je	SHORT $LN296@output_opc
	sub	ecx, r14d
	je	SHORT $LN295@output_opc
	sub	ecx, r14d
	je	SHORT $LN296@output_opc
	sub	ecx, r14d
	je	SHORT $LN295@output_opc

; 807  :               default:
; 808  :                 if (ins->byte1_info >= F_0F){

	cmp	dl, 16
	jb	SHORT $LN298@output_opc

; 809  :                   CodeInfo->evex_p0 |= 0x01;

	or	BYTE PTR [rdi+137], r14b
	jmp	SHORT $LN298@output_opc
$LN296@output_opc:

; 802  :                   break;
; 803  :               case F_0F3A:
; 804  :               case F_660F3A:
; 805  :                   CodeInfo->evex_p0 |= 0x03;

	or	BYTE PTR [rdi+137], bpl

; 806  :                   break;

	jmp	SHORT $LN298@output_opc
$LN295@output_opc:

; 798  :               case F_0F38:                                     
; 799  :               case F_660F38:                                   
; 800  :               case F_F20F38:                                   
; 801  :                   CodeInfo->evex_p0 |= 0x02;

	or	BYTE PTR [rdi+137], 2
$LN298@output_opc:

; 810  :                 }
; 811  :               }
; 812  :               CodeInfo->evex_p0 |= EVEX_P0XMASK;
; 813  :               CodeInfo->evex_p0 |= EVEX_P0BMASK;

	or	BYTE PTR [rdi+137], 96			; 00000060H

; 814  :                if ((CodeInfo->token >= T_VMOVLHPS)&&(CodeInfo->token <= T_VMOVLPS)||         
; 815  :                  (CodeInfo->token == T_VMOVNTDQ)||                                           
; 816  :                (CodeInfo->token == T_VMOVUPD)||(CodeInfo->token == T_VMOVAPD)||              
; 817  :                (CodeInfo->token >= T_VMOVDQA32)&&(CodeInfo->token <= T_VMOVDQU64)||          
; 818  :                (CodeInfo->token == T_VMOVAPS)||(CodeInfo->token == T_VMOVUPS)){              

	mov	edx, DWORD PTR [rdi+24]
	movzx	ecx, BYTE PTR [rdi+137]
	lea	eax, DWORD PTR [rdx-1927]
	cmp	eax, 23
	ja	SHORT $LN563@output_opc
	mov	r8d, 12652419				; 00c10f83H
	bt	r8d, eax
	jb	SHORT $LN301@output_opc
$LN563@output_opc:
	lea	eax, DWORD PTR [rdx-1638]
	cmp	eax, ebp
	jbe	SHORT $LN301@output_opc

; 839  :                 } 
; 840  :               }
; 841  :               else{
; 842  :                 if (CodeInfo->reg1 <= 15) CodeInfo->evex_p0 |= EVEX_P0R1MASK;

	movzx	eax, BYTE PTR [rdi+109]
	cmp	al, 15
	ja	SHORT $LN323@output_opc
	or	cl, 16
	jmp	SHORT $LN650@output_opc
$LN323@output_opc:

; 843  :                 else CodeInfo->evex_p0 &= ~EVEX_P0R1MASK;

	and	cl, 239					; 000000efH
$LN650@output_opc:
	mov	BYTE PTR [rdi+137], cl
	test	al, 232					; 000000e8H
	je	SHORT $LN327@output_opc

; 846  :                 else CodeInfo->evex_p0 &= ~EVEX_P0RMASK;

	and	BYTE PTR [rdi+137], 127			; 0000007fH
	jmp	$LN313@output_opc
$LN327@output_opc:

; 844  :                 if ((CodeInfo->reg1 <= 7) || (CodeInfo->reg1 >= 16 && CodeInfo->reg1 <= 23))
; 845  :                   CodeInfo->evex_p0 |= EVEX_P0RMASK;

	or	BYTE PTR [rdi+137], 128			; 00000080H
	jmp	$LN313@output_opc
$LN301@output_opc:
	test	DWORD PTR [rdi+32], 416			; 000001a0H

; 819  :                 if ((CodeInfo->opnd[OPND1].type & OP_XMM)||(CodeInfo->opnd[OPND1].type & OP_YMM)||

	jne	SHORT $LN306@output_opc
	test	DWORD PTR [rdi+56], 416			; 000001a0H

; 828  :                 }
; 829  :               else if ((CodeInfo->opnd[OPND2].type & OP_XMM)||(CodeInfo->opnd[OPND2].type & OP_YMM)||

	je	SHORT $LN313@output_opc
	test	BYTE PTR [rdi+110], 232			; 000000e8H
	je	SHORT $LN318@output_opc

; 833  :                   else CodeInfo->evex_p0 &= ~EVEX_P0RMASK;

	and	cl, 127					; 0000007fH
	jmp	SHORT $LN651@output_opc
$LN318@output_opc:

; 830  :                 (CodeInfo->opnd[OPND2].type & OP_ZMM)){
; 831  :                   if ((CodeInfo->reg2 <= 7) || (CodeInfo->reg2 >= 16 && CodeInfo->reg2 <= 23))
; 832  :                     CodeInfo->evex_p0 |= EVEX_P0RMASK;

	or	cl, 128					; 00000080H
$LN651@output_opc:
	mov	BYTE PTR [rdi+137], cl

; 834  :                   if (CodeInfo->reg1 > 0x07)
; 835  :                     CodeInfo->evex_p0 &= ~EVEX_P0R1MASK;

	and	BYTE PTR [rdi+137], 239			; 000000efH

; 836  :                   else CodeInfo->evex_p0 &= ~EVEX_P0R1MASK;  
; 837  :                   if (CodeInfo->opnd[OPND2].type & OP_YMM) CodeInfo->evex_p2 |= EVEX_P2LMASK;

	test	BYTE PTR [rdi+56], -128			; ffffffffffffff80H
	je	SHORT $LN321@output_opc
	or	BYTE PTR [rdi+139], 32			; 00000020H
$LN321@output_opc:

; 838  :                   if (CodeInfo->opnd[OPND2].type & OP_ZMM) CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	test	DWORD PTR [rdi+56], 256			; 00000100H
	jmp	SHORT $LN652@output_opc
$LN306@output_opc:

; 820  :                 (CodeInfo->opnd[OPND1].type & OP_ZMM)){
; 821  :                   if ((CodeInfo->reg1 <= 7) || (CodeInfo->reg1 >= 16 && CodeInfo->reg1 <= 23))

	movzx	eax, BYTE PTR [rdi+109]
	test	al, 232					; 000000e8H
	je	SHORT $LN309@output_opc

; 823  :                   else CodeInfo->evex_p0 &= ~EVEX_P0RMASK;

	and	cl, 127					; 0000007fH
	jmp	SHORT $LN653@output_opc
$LN309@output_opc:

; 822  :                     CodeInfo->evex_p0 |= EVEX_P0RMASK;

	or	cl, 128					; 00000080H
$LN653@output_opc:
	mov	BYTE PTR [rdi+137], cl

; 824  :                   if (CodeInfo->reg1 <= 15) CodeInfo->evex_p0 |= EVEX_P0R1MASK;

	cmp	al, 15
	ja	SHORT $LN310@output_opc
	or	BYTE PTR [rdi+137], 16
	jmp	SHORT $LN311@output_opc
$LN310@output_opc:

; 825  :                   else CodeInfo->evex_p0 &= ~EVEX_P0R1MASK;

	and	BYTE PTR [rdi+137], 239			; 000000efH
$LN311@output_opc:

; 826  :                   if (CodeInfo->opnd[OPND1].type & OP_YMM) CodeInfo->evex_p2 |= EVEX_P2LMASK;

	test	BYTE PTR [rdi+32], -128			; ffffffffffffff80H
	je	SHORT $LN312@output_opc
	or	BYTE PTR [rdi+139], 32			; 00000020H
$LN312@output_opc:

; 827  :                   if (CodeInfo->opnd[OPND1].type & OP_ZMM) CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	test	DWORD PTR [rdi+32], 256			; 00000100H
$LN652@output_opc:
	je	SHORT $LN313@output_opc
	or	BYTE PTR [rdi+139], 64			; 00000040H
$LN313@output_opc:
	lea	eax, DWORD PTR [rdx-1945]
	cmp	eax, r14d
	ja	SHORT $LN333@output_opc

; 847  :               }
; 848  :               if ((CodeInfo->token == T_VMOVNTPD)||(CodeInfo->token == T_VMOVNTPS)){
; 849  :                 if (CodeInfo->reg2 <= 15) CodeInfo->evex_p0 |= EVEX_P0R1MASK;

	movzx	eax, BYTE PTR [rdi+110]
	cmp	al, 15
	ja	SHORT $LN330@output_opc
	or	BYTE PTR [rdi+137], 16
	jmp	SHORT $LN331@output_opc
$LN330@output_opc:

; 850  :                 else CodeInfo->evex_p0 &= ~EVEX_P0R1MASK;

	and	BYTE PTR [rdi+137], 239			; 000000efH
$LN331@output_opc:
	test	al, 232					; 000000e8H
	je	SHORT $LN334@output_opc

; 853  :                 else CodeInfo->evex_p0 &= ~EVEX_P0RMASK;

	and	BYTE PTR [rdi+137], 127			; 0000007fH
	jmp	SHORT $LN333@output_opc
$LN334@output_opc:

; 851  :                 if ((CodeInfo->reg2 <= 7) || (CodeInfo->reg2 >= 16 && CodeInfo->reg2 <= 23))
; 852  :                   CodeInfo->evex_p0 |= EVEX_P0RMASK;

	or	BYTE PTR [rdi+137], 128			; 00000080H
$LN333@output_opc:
	lea	eax, DWORD PTR [rdx-1934]
	cmp	eax, 4
	ja	SHORT $LN336@output_opc

; 854  :               }
; 855  :               if ((CodeInfo->token >= T_VMOVLHPS)&&(CodeInfo->token <= T_VMOVLPS)){
; 856  :                 if ((CodeInfo->opnd[OPND1].type == OP_YMM)||(CodeInfo->opnd[OPND2].type == OP_YMM)||
; 857  :                 (CodeInfo->opnd[OPND1].type == OP_ZMM)||(CodeInfo->opnd[OPND2].type == OP_ZMM))

	mov	ecx, DWORD PTR [rdi+32]
	cmp	ecx, 128				; 00000080H
	je	SHORT $LN337@output_opc
	mov	eax, DWORD PTR [rdi+56]
	cmp	eax, 128				; 00000080H
	je	SHORT $LN337@output_opc
	cmp	ecx, 256				; 00000100H
	je	SHORT $LN337@output_opc
	cmp	eax, 256				; 00000100H
	jne	SHORT $LN336@output_opc
$LN337@output_opc:

; 858  :                 EmitError( INVALID_INSTRUCTION_OPERANDS );

	mov	ecx, 49					; 00000031H
	call	EmitError
$LN336@output_opc:

; 859  :               }
; 860  :               OutputCodeByte( CodeInfo->evex_p0 );

	movzx	ecx, BYTE PTR [rdi+137]
	call	OutputByte

; 861  :             }

	jmp	SHORT $LN288@output_opc
$LN287@output_opc:

; 862  :             else{
; 863  :               OutputCodeByte(0xC5);

	mov	cl, 197					; 000000c5H
	call	OutputByte

; 864  :               if (CodeInfo->opnd[OPND1].type == OP_YMM || CodeInfo->opnd[OPND2].type == OP_YMM || CodeInfo->token == T_VZEROALL) /* VZEROALL is 256 bits VZEROUPPER is 128 bits */

	cmp	DWORD PTR [rdi+32], 128			; 00000080H
	je	SHORT $LN340@output_opc
	cmp	DWORD PTR [rdi+56], 128			; 00000080H
	je	SHORT $LN340@output_opc
	cmp	DWORD PTR [rdi+24], 1332		; 00000534H
	je	SHORT $LN340@output_opc

; 866  :               else
; 867  :                 lbyte &= ~0x04;

	and	bl, 251					; 000000fbH
	jmp	SHORT $LN339@output_opc
$LN340@output_opc:

; 865  :                  lbyte |= 0x04;  /* set L: Vector Length */

	or	bl, 4
$LN339@output_opc:

; 868  :               CodeInfo->tuple = 0;

	mov	BYTE PTR [rdi+140], 0
$LN288@output_opc:

; 869  :             }
; 870  :             /* second byte R vvvv Lpp   */
; 871  :             if ((CodeInfo->token == T_LZCNT) || (CodeInfo->token == T_TZCNT))

	movsxd	rcx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-1271]
	cmp	eax, r14d
	ja	SHORT $LN341@output_opc

; 872  :                lbyte |= 0x80;

	or	bl, 128					; 00000080H
$LN341@output_opc:

; 873  :             if (CodeInfo->token == T_VMASKMOVDQU) {

	cmp	ecx, 1926				; 00000786H
	jne	SHORT $LN346@output_opc

; 874  :               /*  1 1111 0pp */
; 875  :               /*  R vvvv Lpp */
; 876  :               lbyte |= 0xF8;
; 877  :               if (ins->byte1_info == F_660F) lbyte |= 0x01;

	movzx	eax, BYTE PTR [r15+1]
	or	bl, 248					; 000000f8H
	cmp	al, 18
	jne	SHORT $LN344@output_opc
	or	bl, r14b
	jmp	SHORT $LN346@output_opc
$LN344@output_opc:

; 878  :               else if (ins->byte1_info == F_0F) lbyte |= 0x3;

	cmp	al, 16
	jne	SHORT $LN346@output_opc
	or	bl, bpl
$LN346@output_opc:
	lea	eax, DWORD PTR [rcx-1342]
	cmp	eax, ebp
	ja	SHORT $LN347@output_opc

; 879  :             }  //WVVVV1PP
; 880  :             /* if broadflags are prezent W = 0  in WVVVV1PP */
; 881  :               if (CodeInfo->token == T_VPGATHERDQ || CodeInfo->token == T_VPGATHERQQ ||
; 882  :                 CodeInfo->token == T_VGATHERDPD || CodeInfo->token == T_VGATHERQPD){
; 883  :                   lbyte |= 0x80;

	or	bl, 128					; 00000080H
$LN347@output_opc:

; 884  :                 }
; 885  :               if (CodeInfo->token == T_VGATHERDPS)lbyte &= ~0x80;

	cmp	ecx, 1346				; 00000542H
	jne	SHORT $LN349@output_opc
	and	bl, 127					; 0000007fH
$LN349@output_opc:

; 886  :               if (CodeInfo->evex_flag){

	movzx	r8d, BYTE PTR [rdi+136]
	test	r8b, r8b
	je	SHORT $LN351@output_opc
	mov	eax, DWORD PTR [rdi+56]
	sub	eax, 4
	test	eax, -513				; fffffdffH
	jne	SHORT $LN351@output_opc

; 887  :                 if ((CodeInfo->opnd[OPND2].type == OP_R32) || (CodeInfo->opnd[OPND2].type == OP_EAX))
; 888  :                   lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN351@output_opc:
	lea	eax, DWORD PTR [rcx-1682]
	cmp	eax, 26
	ja	SHORT $LN353@output_opc

; 889  :               }
; 890  :             if ((CodeInfo->token >= T_KADDB) && (CodeInfo->token <= T_KUNPCKDQ)) {       //here pay atention
; 891  :               c = CodeInfo->reg2;
; 892  :               lbyte &= 0x83;
; 893  :               c = (c << 3);

	movzx	edx, BYTE PTR [rdi+110]
	and	bl, 131					; 00000083H
	shl	dl, 3

; 894  :               c = ~c;

	not	dl

; 895  :               c &= EVEX_P1VVVV;

	and	dl, 120					; 00000078H

; 896  :               lbyte |= c;

	or	bl, dl

; 897  :               if (vex_flags[ CodeInfo->token - VEX_START ] & VX_L ) lbyte |= c;

	test	BYTE PTR vex_flags[rcx+r12-1291], r14b
	je	SHORT $LN362@output_opc
	or	bl, dl

; 898  :             }

	jmp	SHORT $LN362@output_opc
$LN353@output_opc:
	lea	eax, DWORD PTR [rcx-1709]
	cmp	eax, 7
	ja	SHORT $LN356@output_opc

; 899  :             else if ((CodeInfo->token >= T_KNOTB) && (CodeInfo->token <= T_KORTESTQ)) {
; 900  :               /*  1 1111 0pp */
; 901  :               /*  R vvvv Lpp */
; 902  :               lbyte = 0xF8;
; 903  :               if (ins->byte1_info == F_660F) lbyte |= 0x01;

	cmp	BYTE PTR [r15+1], 18
	mov	bl, 248					; 000000f8H
	jne	SHORT $LN362@output_opc
	mov	bl, 249					; 000000f9H

; 904  :             }

	jmp	SHORT $LN362@output_opc
$LN356@output_opc:
	lea	eax, DWORD PTR [rcx-1725]
	cmp	eax, ebp
	ja	SHORT $LN362@output_opc

; 905  :             else if ((CodeInfo->token >= T_KMOVB) && (CodeInfo->token <= T_KMOVW)) {
; 906  :               /*  1 1111 0pp */
; 907  :               /*  R vvvv Lpp */
; 908  :               lbyte = 0xF8;
; 909  :               if (ins->byte1_info == F_660F) lbyte |= 0x01;

	movzx	edx, BYTE PTR [r15+1]
	mov	al, 248					; 000000f8H
	cmp	dl, 18
	jne	SHORT $LN360@output_opc
	mov	bl, 249					; 000000f9H
	jmp	SHORT $LN362@output_opc
$LN360@output_opc:

; 910  :               else if (ins->byte1_info == F_F20F) lbyte |= 0x3;

	mov	ebx, 251				; 000000fbH
	movzx	eax, al
	cmp	dl, 19
	cmove	eax, ebx
	movzx	ebx, al
$LN362@output_opc:
	cmp	ecx, 1935				; 0000078fH
	je	SHORT $LN364@output_opc
	cmp	ecx, 1943				; 00000797H
	je	SHORT $LN364@output_opc
	lea	eax, DWORD PTR [rcx-1643]
	cmp	eax, ebp
	ja	SHORT $LN366@output_opc
$LN364@output_opc:

; 911  :             }  //WVVVV1PP
; 912  :               if ((CodeInfo->token == T_VMOVHPD)||(CodeInfo->token == T_VMOVNTDQ)||
; 913  :                 (CodeInfo->token >= T_VFPCLASSPD)&&(CodeInfo->token <= T_VFPCLASSSS)){
; 914  :                 if (CodeInfo->vexregop){

	movzx	edx, BYTE PTR [rdi+128]
	test	dl, dl
	je	SHORT $LN365@output_opc

; 915  :                   lbyte &= ~0x78;
; 916  :                   lbyte |= ((16 - CodeInfo->vexregop) << 3);

	shl	dl, 3
	mov	eax, 128				; 00000080H
	sub	al, dl
	and	bl, 135					; 00000087H
	or	bl, al

; 917  :                 }

	jmp	SHORT $LN366@output_opc
$LN365@output_opc:

; 918  :                 else lbyte |= 0x78;

	or	bl, 120					; 00000078H
$LN366@output_opc:

; 919  :               }
; 920  :               if (CodeInfo->evex_flag){

	test	r8b, r8b
	je	SHORT $LN368@output_opc
	lea	eax, DWORD PTR [rcx-1936]
	test	eax, -3					; fffffffdH
	jne	SHORT $LN368@output_opc

; 921  :                 if ((CodeInfo->token == T_VMOVHPS) || (CodeInfo->token == T_VMOVLPS))
; 922  :                   lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN368@output_opc:
	cmp	ecx, 2041				; 000007f9H
	je	SHORT $LN371@output_opc
	cmp	ecx, 2046				; 000007feH
	je	SHORT $LN371@output_opc
	lea	edx, DWORD PTR [rcx-1534]
	cmp	edx, 6
	ja	SHORT $LN370@output_opc
	mov	eax, 81					; 00000051H
	bt	eax, edx
	jae	SHORT $LN370@output_opc
$LN371@output_opc:

; 923  :               }
; 924  :              if ((CodeInfo->token == T_VPSLLQ)||(CodeInfo->token == T_VPSRLQ)||
; 925  :                (CodeInfo->token == T_VPSRAQ)|| (CodeInfo->token == T_VPROLQ)||
; 926  :                (CodeInfo->token == T_VPRORQ))
; 927  :                lbyte |= EVEX_P1WMASK;

	or	bl, 128					; 00000080H
$LN370@output_opc:
	lea	eax, DWORD PTR [rcx-1694]
	cmp	eax, r14d
	jbe	SHORT $LN373@output_opc
	cmp	ecx, 1708				; 000006acH
	jne	SHORT $LN372@output_opc
$LN373@output_opc:

; 928  :             //if first byte is VEX 0xC5 then there is two byte folowing 
; 929  :             if ((CodeInfo->token == T_KUNPCKBW)||(CodeInfo->token == T_KUNPCKWD)||(CodeInfo->token == T_KUNPCKDQ))
; 930  :                   lbyte |=  0x04; 

	or	bl, 4
$LN372@output_opc:

; 931  :             CodeInfo->evex_p1 = lbyte;
; 932  :             OutputCodeByte( lbyte );

	movzx	ecx, bl
	mov	BYTE PTR [rdi+138], bl
	call	OutputByte

; 933  :             if (CodeInfo->evex_flag) {

	cmp	BYTE PTR [rdi+136], 0
	je	$LN12@output_opc

; 934  :               if (broadflags >= 0x10 && broadflags <= 0x47){         

	movzx	eax, BYTE PTR broadflags
	sub	al, 16
	cmp	al, 55					; 00000037H
	ja	$LN375@output_opc

; 935  :                 CodeInfo->evex_p2 |= 0x10;

	or	BYTE PTR [rdi+139], 16

; 936  :                 if (CodeInfo->vexregop){                 

	cmp	BYTE PTR [rdi+128], 0
	movzx	eax, BYTE PTR [rdi+139]
	je	SHORT $LN377@output_opc

; 937  :                   if (CodeInfo->reg2 <= 15) CodeInfo->evex_p2 |= EVEX_P2VMASK;

	cmp	BYTE PTR [rdi+110], 15
	jbe	SHORT $LN377@output_opc

; 938  :                   else CodeInfo->evex_p2 &= ~EVEX_P2VMASK;

	and	al, 247					; 000000f7H

; 939  :                 }

	jmp	SHORT $LN654@output_opc
$LN377@output_opc:

; 940  :                 else CodeInfo->evex_p2 |= EVEX_P2VMASK;

	or	al, 8
$LN654@output_opc:

; 941  :                 if (CodeInfo->r2type == OP_XMM && (broadflags & ~EVEX_P2AAAMASK) == 0x10){   //{1to2}

	mov	edx, DWORD PTR [rdi+120]
	mov	BYTE PTR [rdi+139], al
	movzx	ecx, BYTE PTR broadflags
	cmp	edx, 32					; 00000020H
	jne	$LN386@output_opc
	movzx	eax, cl
	and	al, -8
	cmp	al, 16
	jne	SHORT $LN381@output_opc

; 942  :                    if ((CodeInfo->mem_type != MT_QWORD) && (CodeInfo->mem_type != MT_EMPTY))

	mov	eax, DWORD PTR [rdi+28]
	cmp	eax, 7
	je	SHORT $LN383@output_opc
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN383@output_opc

; 943  :                      EmitError( INVALID_OPERAND_SIZE );

	lea	ecx, QWORD PTR [rdx+39]
	call	EmitError
$LN383@output_opc:

; 944  :                    if ((CodeInfo->pinstr->prefix & 0xE0) == QSIZE)

	mov	rax, QWORD PTR [rdi+16]
	movzx	ecx, BYTE PTR [rax+8]
	and	cl, 224					; 000000e0H
	cmp	cl, 96					; 00000060H
	jne	$LN408@output_opc

; 945  :                      CodeInfo->mem_type = MT_QWORD;

	mov	DWORD PTR [rdi+28], 7
	jmp	$LN442@output_opc
$LN381@output_opc:

; 946  :                    else
; 947  :                      EmitError( MISMATCH_IN_THE_NUMBER_OF_BROADCASTING_ELEMENTS );
; 948  :                 }
; 949  :                 else if (CodeInfo->r2type == OP_XMM && (broadflags & ~EVEX_P2AAAMASK) == 0x20){ //{1to4} 

	cmp	edx, 32					; 00000020H
	jne	SHORT $LN386@output_opc
	movzx	eax, cl
	and	al, -8
	cmp	al, dl
	jne	SHORT $LN386@output_opc

; 950  :                    if ((CodeInfo->mem_type != MT_DWORD) && (CodeInfo->mem_type != MT_EMPTY))

	mov	eax, DWORD PTR [rdi+28]
	cmp	eax, ebp
	je	SHORT $LN388@output_opc
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN388@output_opc

; 951  :                      EmitError( INVALID_OPERAND_SIZE );

	lea	ecx, QWORD PTR [rdx+39]
	call	EmitError
$LN388@output_opc:

; 952  :                    if ((CodeInfo->pinstr->prefix & 0xE0) == DSIZE)

	mov	rax, QWORD PTR [rdi+16]
	movzx	ecx, BYTE PTR [rax+8]
	and	cl, 224					; 000000e0H
	cmp	cl, 64					; 00000040H
	jne	$LN408@output_opc

; 953  :                      CodeInfo->mem_type = MT_DWORD;

	mov	DWORD PTR [rdi+28], ebp
	jmp	$LN442@output_opc
$LN386@output_opc:

; 954  :                    else
; 955  :                      EmitError( MISMATCH_IN_THE_NUMBER_OF_BROADCASTING_ELEMENTS );
; 956  :                 }
; 957  :                 else if (CodeInfo->r2type == OP_YMM && (broadflags & ~EVEX_P2AAAMASK) == 0x20){ //{1to4}

	cmp	edx, 128				; 00000080H
	jne	$LN396@output_opc
	movzx	eax, cl
	and	al, -8
	cmp	al, 32					; 00000020H
	jne	SHORT $LN391@output_opc

; 958  :                    if ((CodeInfo->mem_type != MT_QWORD) && (CodeInfo->mem_type != MT_EMPTY))

	mov	eax, DWORD PTR [rdi+28]
	cmp	eax, 7
	je	SHORT $LN393@output_opc
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN393@output_opc

; 959  :                      EmitError( INVALID_OPERAND_SIZE );

	lea	ecx, QWORD PTR [rdx-57]
	call	EmitError
$LN393@output_opc:

; 960  :                    if ((CodeInfo->pinstr->prefix & 0xE0) == QSIZE){

	mov	rax, QWORD PTR [rdi+16]
	movzx	ecx, BYTE PTR [rax+8]
	and	cl, 224					; 000000e0H
	cmp	cl, 96					; 00000060H
	jne	$LN408@output_opc

; 961  :                      CodeInfo->mem_type = MT_QWORD;
; 962  :                      CodeInfo->evex_p2 |= 0x20;

	or	BYTE PTR [rdi+139], 32			; 00000020H
	mov	DWORD PTR [rdi+28], 7

; 963  :                    }

	jmp	$LN442@output_opc
$LN391@output_opc:

; 964  :                    else 
; 965  :                      EmitError( MISMATCH_IN_THE_NUMBER_OF_BROADCASTING_ELEMENTS );
; 966  :                 }
; 967  :                 else if (CodeInfo->r2type == OP_YMM && (broadflags & ~EVEX_P2AAAMASK) == 0x30){ //{1to8}

	cmp	edx, 128				; 00000080H
	jne	SHORT $LN396@output_opc
	movzx	eax, cl
	and	eax, -8
	cmp	al, 48					; 00000030H
	jne	SHORT $LN396@output_opc

; 968  :                    if ((CodeInfo->mem_type != MT_DWORD) && (CodeInfo->mem_type != MT_EMPTY)||
; 969  :                      (CodeInfo->mem_type != MT_OWORD))
; 970  :                      EmitError( INVALID_OPERAND_SIZE );

	lea	ecx, QWORD PTR [rdx-57]
	call	EmitError

; 971  :                    if ((CodeInfo->pinstr->prefix & 0xE0) == DSIZE){

	mov	rax, QWORD PTR [rdi+16]
	movzx	ecx, BYTE PTR [rax+8]
	and	cl, 224					; 000000e0H
	cmp	cl, 64					; 00000040H
	jne	SHORT $LN408@output_opc

; 972  :                      CodeInfo->mem_type = MT_DWORD;
; 973  :                      CodeInfo->evex_p2 |= 0x20;

	or	BYTE PTR [rdi+139], 32			; 00000020H
	mov	DWORD PTR [rdi+28], ebp

; 974  :                    }

	jmp	$LN442@output_opc
$LN396@output_opc:

; 975  :                    else 
; 976  :                      EmitError( MISMATCH_IN_THE_NUMBER_OF_BROADCASTING_ELEMENTS );
; 977  :                 }
; 978  :                 else if ( CodeInfo->r2type == OP_ZMM && (broadflags & ~EVEX_P2AAAMASK) == 0x30){ //{1to8}

	cmp	edx, 256				; 00000100H
	jne	$LN442@output_opc
	movzx	eax, cl
	and	eax, -8
	cmp	al, 48					; 00000030H
	jne	SHORT $LN403@output_opc

; 979  :                    if ((CodeInfo->pinstr->prefix & 0xE0) == QSIZE){

	mov	rax, QWORD PTR [rdi+16]
	movzx	ecx, BYTE PTR [rax+8]
	and	cl, 224					; 000000e0H
	cmp	cl, 96					; 00000060H
	jne	SHORT $LN408@output_opc

; 980  :                      CodeInfo->mem_type = MT_QWORD;
; 981  :                      CodeInfo->evex_p2 |= 0x40;

	or	BYTE PTR [rdi+139], 64			; 00000040H
	mov	DWORD PTR [rdi+28], 7

; 982  :                    }

	jmp	$LN442@output_opc
$LN403@output_opc:

; 983  :                    else 
; 984  :                      EmitError( MISMATCH_IN_THE_NUMBER_OF_BROADCASTING_ELEMENTS );
; 985  :                 }
; 986  :                 else if (CodeInfo->r2type == OP_ZMM && (broadflags & ~EVEX_P2AAAMASK) == 0x40){ //{1to16}

	cmp	edx, 256				; 00000100H
	jne	$LN442@output_opc
	and	cl, -8
	cmp	cl, 64					; 00000040H
	jne	$LN442@output_opc

; 987  :                    if ((CodeInfo->pinstr->prefix & 0xE0) == DSIZE){

	mov	rax, QWORD PTR [rdi+16]
	movzx	ecx, BYTE PTR [rax+8]
	and	cl, 224					; 000000e0H
	cmp	cl, 64					; 00000040H
	jne	SHORT $LN408@output_opc

; 988  :                      CodeInfo->mem_type = MT_DWORD;
; 989  :                      CodeInfo->evex_p2 |= 0x40;

	or	BYTE PTR [rdi+139], cl
	mov	DWORD PTR [rdi+28], ebp

; 990  :                    }

	jmp	$LN442@output_opc
$LN408@output_opc:

; 991  :                    else 
; 992  :                      EmitError(MISMATCH_IN_THE_NUMBER_OF_BROADCASTING_ELEMENTS);

	mov	ecx, 18
	call	EmitError

; 993  :                 }
; 994  :               }

	jmp	$LN442@output_opc
$LN375@output_opc:

; 995  :               else{   //check all for size
; 996  :                 if (CodeInfo->r2type == OP_YMM){              

	mov	eax, DWORD PTR [rdi+120]
	cmp	eax, 128				; 00000080H
	jne	SHORT $LN410@output_opc

; 997  :                   if (CodeInfo->mem_type == MT_YMMWORD || (CodeInfo->mem_type == MT_EMPTY)){

	mov	eax, DWORD PTR [rdi+28]
	cmp	eax, 31
	je	SHORT $LN414@output_opc
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN414@output_opc
$LN429@output_opc:

; 999  :                     if ((CodeInfo->opnd[OPND3].data32h > 0x20)||(CodeInfo->opnd[OPND3].data32h > ~0x20)) 
; 1000 :                       CodeInfo->tuple = TRUE;  
; 1001 :                   }
; 1002 :                   else EmitError(INVALID_OPERAND_SIZE);

	mov	ecx, 71					; 00000047H
	call	EmitError
	jmp	SHORT $LN437@output_opc
$LN414@output_opc:

; 998  :                     CodeInfo->evex_p2 |= 0x20;

	or	BYTE PTR [rdi+139], 32			; 00000020H
	cmp	DWORD PTR [rdi+92], -32			; ffffffffffffffe0H

; 1003 :                 }

	jmp	SHORT $LN658@output_opc
$LN410@output_opc:

; 1004 :                 else if (CodeInfo->r2type == OP_XMM){

	cmp	eax, 32					; 00000020H
	jne	SHORT $LN417@output_opc

; 1005 :                   if ((CodeInfo->mem_type == MT_OWORD || CodeInfo->mem_type == MT_EMPTY)){

	mov	ecx, DWORD PTR [rdi+28]
	cmp	ecx, 15
	je	SHORT $LN421@output_opc
	cmp	ecx, 192				; 000000c0H
	je	SHORT $LN421@output_opc

; 1006 :                     if ((CodeInfo->opnd[OPND3].data32h > 0x10)||(CodeInfo->opnd[OPND3].data32h > ~0x10))
; 1007 :                       CodeInfo->tuple = TRUE;
; 1008 :                   }
; 1009 :                   else if ((CodeInfo->token >= T_VCMPEQSD || CodeInfo->token <= T_VCMPTRUE_USSD) &&

	cmp	ecx, 7
	jne	SHORT $LN424@output_opc
	cmp	DWORD PTR [rdi+92], -8

; 1010 :                     (CodeInfo->mem_type == MT_QWORD)){
; 1011 :                       if ((CodeInfo->opnd[OPND3].data32h > 8)||(CodeInfo->opnd[OPND3].data32h > ~8))
; 1012 :                       CodeInfo->tuple = TRUE;
; 1013 :                   }

	jmp	SHORT $LN658@output_opc
$LN424@output_opc:

; 1014 :                   else if ((CodeInfo->token >= T_VCMPEQSS || CodeInfo->token <= T_VCMPTRUE_USSS) &&

	cmp	ecx, ebp
	jne	SHORT $LN429@output_opc
	cmp	DWORD PTR [rdi+92], -4

; 1015 :                     (CodeInfo->mem_type == MT_DWORD)){
; 1016 :                       if ((CodeInfo->opnd[OPND3].data32h > 4)||(CodeInfo->opnd[OPND3].data32h > ~4))
; 1017 :                       CodeInfo->tuple = TRUE;
; 1018 :                   }

	jmp	SHORT $LN658@output_opc
$LN421@output_opc:
	cmp	DWORD PTR [rdi+92], -16

; 1019 :                   else EmitError(INVALID_OPERAND_SIZE);
; 1020 :                 }

	jmp	SHORT $LN658@output_opc
$LN417@output_opc:

; 1021 :                 else if (CodeInfo->r2type == OP_ZMM){

	cmp	eax, 256				; 00000100H
	jne	SHORT $LN437@output_opc

; 1022 :                   if (CodeInfo->mem_type == MT_ZMMWORD || (CodeInfo->mem_type == MT_EMPTY)){

	mov	eax, DWORD PTR [rdi+28]
	cmp	eax, 63					; 0000003fH
	je	SHORT $LN436@output_opc
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN437@output_opc
$LN436@output_opc:

; 1023 :                     CodeInfo->evex_p2 |= 0x40;

	or	BYTE PTR [rdi+139], 64			; 00000040H
	cmp	DWORD PTR [rdi+92], -64			; ffffffffffffffc0H
$LN658@output_opc:
	jl	SHORT $LN437@output_opc

; 1024 :                     if ((CodeInfo->opnd[OPND3].data32h > 0x40)||(CodeInfo->opnd[OPND3].data32h > ~0x40))
; 1025 :                       CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b
$LN437@output_opc:

; 1026 :                   }
; 1027 :                 }
; 1028 :                 if (CodeInfo->opnd[OPND3].data32l != -1){

	cmp	DWORD PTR [rdi+88], -1
	je	SHORT $LN442@output_opc

; 1029 :                   if ((CodeInfo->r2type == OP_YMM) && (CodeInfo->opnd[OPND3].type != OP_ZMM)){

	cmp	DWORD PTR [rdi+120], 128		; 00000080H
	jne	SHORT $LN442@output_opc
	cmp	DWORD PTR [rdi+80], 256			; 00000100H
	je	SHORT $LN442@output_opc
	mov	eax, DWORD PTR [rdi+24]
	sub	eax, 1761				; 000006e1H
	cmp	eax, 127				; 0000007fH
	ja	SHORT $LN441@output_opc

; 1030 :                     if ((CodeInfo->token >= T_VCMPEQPD) && (CodeInfo->token <= T_VCMPTRUE_USSS))
; 1031 :                       CodeInfo->evex_p2 |= 0x40;

	or	BYTE PTR [rdi+139], 64			; 00000040H
$LN441@output_opc:

; 1032 :                     if (CodeInfo->opnd[OPND3].data32l >= 0x20)

	cmp	DWORD PTR [rdi+88], 32			; 00000020H
	jl	SHORT $LN442@output_opc

; 1033 :                       CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b
$LN442@output_opc:

; 1034 :                   }
; 1035 :                 }
; 1036 :               }
; 1037 :               if (CodeInfo->evex_sae){

	movzx	edx, BYTE PTR [rdi+141]
	test	dl, dl
	je	SHORT $LN443@output_opc

; 1038 :                 CodeInfo->evex_p2 &= ~0x70;     //clear bites 6,5,4

	and	BYTE PTR [rdi+139], 143			; 0000008fH

; 1039 :                 c = CodeInfo->evex_sae - 0x10;  //subtract SAE to get a proper decorator
; 1040 :                 /* here we need to test for corect use of decorators  
; 1041 :                  * if it is {sae} c will be zero, in that case we need to add 0x10 to c
; 1042 :                  * if we need {sae}
; 1043 :                 */  
; 1044 :                 if (c == 0) c = 0x10;

	mov	r9d, 16
	sub	dl, 16
	movzx	eax, dl
	cmove	eax, r9d

; 1045 :                 CodeInfo->evex_p2 |= c;

	or	BYTE PTR [rdi+139], al
$LN443@output_opc:

; 1046 :               }
; 1047 :                 if (CodeInfo->r2type == OP_YMM) CodeInfo->evex_p2 |= EVEX_P2LMASK;

	cmp	DWORD PTR [rdi+120], 128		; 00000080H
	jne	SHORT $LN445@output_opc
	or	BYTE PTR [rdi+139], 32			; 00000020H
	jmp	SHORT $LN447@output_opc
$LN445@output_opc:

; 1048 :                 else if (CodeInfo->opnd[OPND3].type == OP_ZMM)CodeInfo->evex_p2 |= EVEX_P2L1MASK; 

	cmp	DWORD PTR [rdi+80], 256			; 00000100H
	jne	SHORT $LN447@output_opc
	or	BYTE PTR [rdi+139], 64			; 00000040H
$LN447@output_opc:

; 1049 :                 if ((CodeInfo->token >= T_VPGATHERDD && CodeInfo->token <= T_VGATHERQPS )||

	mov	ecx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-1340]
	cmp	eax, 7
	jbe	SHORT $LN449@output_opc
	cmp	ecx, 1334				; 00000536H
	jne	SHORT $LN448@output_opc
$LN449@output_opc:

; 1050 :                   CodeInfo->token == T_VCVTPD2DQ)
; 1051 :                   CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	or	BYTE PTR [rdi+139], 64			; 00000040H
$LN448@output_opc:
	cmp	ecx, 1917				; 0000077dH
	je	SHORT $LN452@output_opc
	lea	eax, DWORD PTR [rcx-1598]
	cmp	eax, r14d
	jbe	SHORT $LN452@output_opc
	lea	eax, DWORD PTR [rcx-1935]
	cmp	eax, 5
	ja	SHORT $LN451@output_opc
$LN452@output_opc:

; 1052 :                   if ((CodeInfo->token == T_VEXTRACTPS)||      // 1914    1932
; 1053 :                     //(CodeInfo->token == T_VMOVHPS)||(CodeInfo->token == T_VMOVLPS)||           // 1933    1935  
; 1054 :                     (CodeInfo->token == T_VCVTSD2USI)||(CodeInfo->token == T_VCVTSS2USI)||     // 1598    1599
; 1055 :                     (CodeInfo->token >= T_VMOVHPD)&&(CodeInfo->token <= T_VMOVSS))              // 1936    1937
; 1056 :                     CodeInfo->evex_p2 &= ~EVEX_P2L1MASK;

	and	BYTE PTR [rdi+139], 191			; 000000bfH
$LN451@output_opc:

; 1057 :                 if (CodeInfo->evex_flag){

	cmp	BYTE PTR [rdi+136], 0
	je	$LN12@output_opc

; 1058 :                   if (CodeInfo->vexregop){

	cmp	BYTE PTR [rdi+128], 0
	je	SHORT $LN454@output_opc

; 1059 :                     if (CodeInfo->reg2 <= 15) CodeInfo->evex_p2 |= EVEX_P2VMASK;

	cmp	BYTE PTR [rdi+110], 15
	jbe	SHORT $LN454@output_opc

; 1060 :                     else CodeInfo->evex_p2 &= ~EVEX_P2VMASK;

	and	BYTE PTR [rdi+139], 247			; 000000f7H

; 1061 :                   }

	jmp	SHORT $LN455@output_opc
$LN454@output_opc:

; 1062 :                   else CodeInfo->evex_p2 |= EVEX_P2VMASK;

	or	BYTE PTR [rdi+139], 8
$LN455@output_opc:

; 1063 :                   CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b

; 1064 :                   CodeInfo->evex_p2 |= decoflags;

	movzx	eax, BYTE PTR decoflags
	or	BYTE PTR [rdi+139], al
	movzx	eax, BYTE PTR [rdi+139]

; 1065 :                   if (CodeInfo->token == T_VCVTDQ2PD || CodeInfo->token == T_VCVTPS2PD ||

	cmp	ecx, 1899				; 0000076bH
	je	SHORT $LN459@output_opc
	cmp	ecx, 1903				; 0000076fH
	je	SHORT $LN459@output_opc
	cmp	ecx, 1442				; 000005a2H
	jne	SHORT $LN462@output_opc
$LN459@output_opc:

; 1066 :                     CodeInfo->token == T_VCVTUDQ2PD){       
; 1067 :                      CodeInfo->evex_p2 &= ~EVEX_P2LMASK;
; 1068 :                      CodeInfo->evex_p2 &= ~EVEX_P2L1MASK;
; 1069 :                     if (CodeInfo->r1type == OP_YMM)CodeInfo->evex_p2 |= EVEX_P2LMASK;

	mov	ecx, DWORD PTR [rdi+116]
	and	al, 159					; 0000009fH
	mov	BYTE PTR [rdi+139], al
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN460@output_opc
	or	al, 32					; 00000020H

; 1070 :                     else if (CodeInfo->r1type == OP_ZMM)CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	mov	BYTE PTR [rdi+139], al

; 1071 :                   }
; 1072 :                   OutputCodeByte(CodeInfo->evex_p2);

	movzx	ecx, al
	jmp	$LN660@output_opc
$LN460@output_opc:

; 1070 :                     else if (CodeInfo->r1type == OP_ZMM)CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	cmp	ecx, 256				; 00000100H
	jne	SHORT $LN462@output_opc
	or	al, 64					; 00000040H
	mov	BYTE PTR [rdi+139], al
$LN462@output_opc:

; 1071 :                   }
; 1072 :                   OutputCodeByte(CodeInfo->evex_p2);

	movzx	ecx, BYTE PTR [rdi+139]
	jmp	$LN660@output_opc
$LN87@output_opc:

; 414  :            (CodeInfo->token ==  T_KMOVD )){
; 415  :             uint_8 byte1 = 0;      //RXBR00MM

	xor	sil, sil

; 416  :             /* first byte is 0xC4  in 3 byte VEX prefix */  
; 417  :             if (CodeInfo->evex_flag) 

	cmp	BYTE PTR [rdi+136], sil
	je	SHORT $LN89@output_opc

; 418  :               OutputCodeByte( 0x62 ); //AVX512 EVEX first byte

	mov	cl, 98					; 00000062H
	call	OutputByte
	jmp	SHORT $LN90@output_opc
$LN89@output_opc:

; 419  :             else{
; 420  :               OutputCodeByte(0xC4);

	mov	cl, 196					; 000000c4H
	call	OutputByte

; 421  :               if (CodeInfo->opnd[OPND1].type == OP_YMM || CodeInfo->opnd[OPND2].type == OP_YMM)

	cmp	DWORD PTR [rdi+32], 128			; 00000080H
	je	SHORT $LN93@output_opc
	cmp	DWORD PTR [rdi+56], 128			; 00000080H
	je	SHORT $LN93@output_opc

; 423  :               else
; 424  :                 lbyte &= ~0x04;

	and	bl, 251					; 000000fbH
	jmp	SHORT $LN92@output_opc
$LN93@output_opc:

; 422  :                  lbyte |= 0x04;

	or	bl, 4
$LN92@output_opc:

; 425  :               CodeInfo->tuple = 0;
; 426  :               /* This fixes AVX  REX_W wide 32 <-> 64 instructions third byte bit W*/
; 427  :               lbyte &= ~EVEX_P1WMASK;        //make sure it is not set if not 64 bit
; 428  :               lbyte |= ((CodeInfo->pinstr->prefix) >> 8 & 0x80); // set only W bit if 64 bit

	mov	rax, QWORD PTR [rdi+16]
	mov	BYTE PTR [rdi+140], 0
	xor	bl, BYTE PTR [rax+9]
	and	bl, 127					; 0000007fH
	xor	bl, BYTE PTR [rax+9]
$LN90@output_opc:

; 429  :             }
; 430  :             switch ( ins->byte1_info ) {                     

	movzx	r8d, BYTE PTR [r15+1]
	lea	eax, DWORD PTR [r8-23]
	cmp	eax, 6
	ja	SHORT $LN96@output_opc
	cdqe
	mov	ecx, DWORD PTR $LN641@output_opc[r12+rax*4]
	add	rcx, r12
	jmp	rcx
$LN94@output_opc:

; 431  :             case F_0F38:                                     
; 432  :             case F_660F38:                                   
; 433  :             case F_F20F38:
; 434  :             case F_F30F38:
; 435  :                 byte1 |= 0x02;

	mov	dl, 2

; 436  :                 break;

	jmp	SHORT $LN97@output_opc
$LN95@output_opc:

; 437  :             case F_0F3A:
; 438  :             case F_660F3A:
; 439  :             case F_F20F3A:
; 440  :                 byte1 |= 0x03;

	movzx	edx, bpl

; 441  :                 break;

	jmp	SHORT $LN97@output_opc
$LN96@output_opc:

; 442  :             default:
; 443  :                 if ( ins->byte1_info >= F_0F )

	cmp	r8b, 16
	movzx	edx, sil
	cmovae	edx, r14d
$LN97@output_opc:

; 444  :                     byte1 |= 0x01;
; 445  :             }
; 446  :               byte1 |= ((CodeInfo->prefix.rex & REX_B) ? 0 : 0x20);/*  REX_B regno 0-7 <-> 8-15 of ModR/M or SIB base */
; 447  :               byte1 |= ((CodeInfo->prefix.rex & REX_X) ? 0 : 0x40);/*  REX_X regno 0-7 <-> 8-15 of SIB index */
; 448  :               byte1 |= ((CodeInfo->prefix.rex & REX_R) ? 0 : 0x80);/*  REX_R regno 0-7 <-> 8-15 of ModR/M REG */

	movzx	eax, BYTE PTR [rdi+8]

; 449  :               //this still needs to be checked
; 450  :               if ((CodeInfo->evex_flag)&& (CodeInfo->reg2 <= 15))byte1 |= EVEX_P0R1MASK;

	movzx	r9d, BYTE PTR [rdi+136]
	shl	al, 5
	not	al
	and	al, 224					; 000000e0H
	or	dl, al
	test	r9b, r9b
	je	$LN118@output_opc
	cmp	BYTE PTR [rdi+110], 15
	ja	SHORT $LN98@output_opc
	or	dl, 16
$LN98@output_opc:

; 451  :             /* second byte is RXBm mmmm of 3 byte  VEX prefix */    /*  REX_W wide 32 <-> 64 */
; 452  :                if ((CodeInfo->evex_flag) && (CodeInfo->token != T_VEXTRACTPS)){ 

	test	r9b, r9b
	je	$LN118@output_opc
	mov	r8d, DWORD PTR [rdi+24]
	cmp	r8d, 1917				; 0000077dH
	je	$LN118@output_opc

; 453  :                  if ((CodeInfo->opnd[OPND1].type & OP_M_ANY) || (CodeInfo->opnd[OPND2].type & OP_M_ANY) ||

	test	DWORD PTR [rdi+32], -8388608		; ffffffffff800000H
	jne	SHORT $LN101@output_opc
	test	DWORD PTR [rdi+56], -8388608		; ffffffffff800000H
	jne	SHORT $LN101@output_opc
	test	DWORD PTR [rdi+80], -8388608		; ffffffffff800000H
	je	SHORT $LN100@output_opc
$LN101@output_opc:

; 454  :                    (CodeInfo->opnd[OPND3].type & OP_M_ANY)) CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b
$LN100@output_opc:

; 455  :                  lbyte &= ~EVEX_P1WMASK;
; 456  :                  lbyte |= ((CodeInfo->pinstr->prefix) >> 8 & 0x80);

	mov	rax, QWORD PTR [rdi+16]
	xor	bl, BYTE PTR [rax+9]
	and	bl, 127					; 0000007fH
	xor	bl, BYTE PTR [rax+9]

; 457  :                  if ((CodeInfo->opnd[OPND2].type == OP_M64)||(CodeInfo->opnd[OPND1].type == OP_M64)) 

	mov	eax, DWORD PTR [rdi+56]
	cmp	eax, 67108864				; 04000000H
	je	SHORT $LN103@output_opc
	cmp	DWORD PTR [rdi+32], 67108864		; 04000000H
	jne	SHORT $LN102@output_opc
$LN103@output_opc:

; 458  :                    lbyte |= EVEX_P1WMASK;

	or	bl, 128					; 00000080H
$LN102@output_opc:
	add	eax, -4					; fffffffcH
	test	eax, -513				; fffffdffH
	je	SHORT $LN105@output_opc
	mov	eax, DWORD PTR [rdi+32]
	sub	eax, 4
	test	eax, -513				; fffffdffH
	jne	SHORT $LN104@output_opc
$LN105@output_opc:

; 459  :                  if ((CodeInfo->opnd[OPND2].type == OP_R32) || (CodeInfo->opnd[OPND2].type == OP_EAX)||
; 460  :                     (CodeInfo->opnd[OPND1].type == OP_R32) || (CodeInfo->opnd[OPND1].type == OP_EAX)){
; 461  :                    lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN104@output_opc:

; 462  :                  }
; 463  :                  if (((CodeInfo->opnd[OPND1].type & OP_M_ANY) == 0)&&

	test	DWORD PTR [rdi+32], -8388608		; ffffffffff800000H
	jne	SHORT $LN118@output_opc
	cmp	r8d, 1428				; 00000594H
	je	SHORT $LN118@output_opc
	cmp	r8d, 1571				; 00000623H
	je	SHORT $LN118@output_opc

; 464  :                    ((CodeInfo->token != T_VCVTPS2PH) && CodeInfo->token != T_VPMOVQB)) {
; 465  :                    if (CodeInfo->reg1 <= 15)

	movzx	eax, BYTE PTR [rdi+109]
	cmp	al, 15
	ja	SHORT $LN107@output_opc

; 466  :                      byte1 |= EVEX_P0R1MASK;

	or	dl, 16
	jmp	SHORT $LN108@output_opc
$LN107@output_opc:

; 467  :                    else
; 468  :                      byte1 &= ~EVEX_P0R1MASK;

	and	dl, 239					; 000000efH
$LN108@output_opc:
	test	al, 232					; 000000e8H
	je	SHORT $LN111@output_opc

; 471  :                    else
; 472  :                      byte1 &= ~EVEX_P0RMASK;

	and	dl, 127					; 0000007fH
	jmp	SHORT $LN110@output_opc
$LN111@output_opc:

; 469  :                    if ((CodeInfo->reg1 <= 7) || (CodeInfo->reg1 >= 16 && CodeInfo->reg1 <= 23))
; 470  :                      byte1 |= EVEX_P0RMASK;

	or	dl, 128					; 00000080H
$LN110@output_opc:

; 473  :                    if (CodeInfo->reg3 != 0xff)     

	movzx	eax, BYTE PTR [rdi+111]
	cmp	al, 255					; 000000ffH
	je	SHORT $LN112@output_opc

; 474  :                      rn = CodeInfo->reg3;

	movzx	eax, al
	jmp	SHORT $LN115@output_opc
$LN112@output_opc:

; 475  :                    else if (CodeInfo->basereg != 0xff)

	movzx	eax, BYTE PTR [rdi+113]
	cmp	al, 255					; 000000ffH

; 476  :                      rn = CodeInfo->basereg;

	movzx	eax, al
	jne	SHORT $LN115@output_opc

; 477  :                    else rn = CodeInfo->reg2;

	movzx	eax, BYTE PTR [rdi+110]
$LN115@output_opc:

; 478  :                    if (rn > 15){

	cmp	eax, 15
	jle	SHORT $LN116@output_opc

; 479  :                      rn -= 15;

	sub	eax, 15

; 480  :                      byte1 &= ~EVEX_P0XMASK;

	and	dl, 191					; 000000bfH
$LN116@output_opc:

; 481  :                    }
; 482  :                    if (rn <= 7)byte1 |= EVEX_P0BMASK;

	cmp	eax, 7
	jg	SHORT $LN117@output_opc
	or	dl, 32					; 00000020H
	jmp	SHORT $LN118@output_opc
$LN117@output_opc:

; 483  :                    else byte1 &= ~EVEX_P0BMASK;

	and	dl, 223					; 000000dfH
$LN118@output_opc:

; 484  :                  }
; 485  :                }
; 486  :             if (CodeInfo->token >= T_VPSCATTERDD && CodeInfo->token <= T_VSCATTERQPD){

	mov	ecx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-1348]
	cmp	eax, 7
	ja	SHORT $LN125@output_opc

; 487  :               if (CodeInfo->reg2 <= 15) byte1 |= EVEX_P0R1MASK;

	movzx	eax, BYTE PTR [rdi+110]
	cmp	al, 15
	ja	SHORT $LN120@output_opc
	or	dl, 16
	jmp	SHORT $LN121@output_opc
$LN120@output_opc:

; 488  :               else byte1 &= ~EVEX_P0R1MASK;

	and	dl, 239					; 000000efH
$LN121@output_opc:

; 489  :               if (CodeInfo->reg2 <= 7 )  byte1 |= EVEX_P0RMASK;

	cmp	al, 7
	ja	SHORT $LN122@output_opc
	or	dl, 128					; 00000080H
	jmp	SHORT $LN125@output_opc
$LN122@output_opc:
	sub	al, 16
	cmp	al, 7
	ja	SHORT $LN124@output_opc

; 490  :               else if (CodeInfo->reg2 >= 16 && CodeInfo->reg2 <= 23) byte1 |= EVEX_P0RMASK;

	or	dl, 128					; 00000080H
	jmp	SHORT $LN125@output_opc
$LN124@output_opc:

; 491  :               else byte1 &= ~EVEX_P0RMASK;

	and	dl, 127					; 0000007fH
$LN125@output_opc:
	lea	eax, DWORD PTR [rcx-1936]
	test	eax, -3					; fffffffdH
	jne	SHORT $LN126@output_opc

; 492  :             }
; 493  :               if (((CodeInfo->token == T_VMOVHPS)||(CodeInfo->token == T_VMOVLPS)) && (CodeInfo->opnd[OPND2].type & OP_XMM)){

	test	BYTE PTR [rdi+56], 32			; 00000020H
	je	SHORT $LN126@output_opc

; 494  :                 if ((CodeInfo->reg2 > 7))

	cmp	BYTE PTR [rdi+110], 7
	jbe	SHORT $LN128@output_opc

; 495  :                     byte1 &= ~EVEX_P0RMASK;

	and	dl, 127					; 0000007fH
$LN128@output_opc:

; 496  :                     lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN126@output_opc:
	lea	eax, DWORD PTR [rcx-1945]
	cmp	eax, r14d
	jbe	SHORT $LN130@output_opc
	lea	eax, DWORD PTR [rcx-1571]
	cmp	eax, 14
	ja	SHORT $LN139@output_opc
$LN130@output_opc:

; 497  :               }
; 498  :               if ((CodeInfo->token == T_VMOVNTPD)||(CodeInfo->token == T_VMOVNTPS)||                                
; 499  :                 (CodeInfo->token >= T_VPMOVQB)&&(CodeInfo->token <= T_VPMOVUSDW)){
; 500  :                 if (CodeInfo->reg2 <= 15) byte1 |= EVEX_P0R1MASK;

	movzx	eax, BYTE PTR [rdi+110]
	cmp	al, 15
	ja	SHORT $LN131@output_opc
	or	dl, 16
	jmp	SHORT $LN132@output_opc
$LN131@output_opc:

; 501  :                 else byte1 &= ~EVEX_P0R1MASK;

	and	dl, 239					; 000000efH
$LN132@output_opc:
	test	al, 232					; 000000e8H
	je	SHORT $LN135@output_opc

; 504  :                 else byte1 &= ~EVEX_P0RMASK;

	and	dl, 127					; 0000007fH
	jmp	SHORT $LN134@output_opc
$LN135@output_opc:

; 502  :                 if ((CodeInfo->reg2 <= 7) || (CodeInfo->reg2 >= 16 && CodeInfo->reg2 <= 23))
; 503  :                   byte1 |= EVEX_P0RMASK;

	or	dl, 128					; 00000080H
$LN134@output_opc:

; 505  :                 if (CodeInfo->reg1 <= 15) byte1 |= EVEX_P0XMASK;

	movzx	eax, BYTE PTR [rdi+109]
	cmp	al, 15
	ja	SHORT $LN136@output_opc
	or	dl, 64					; 00000040H
	jmp	SHORT $LN137@output_opc
$LN136@output_opc:

; 506  :                 else byte1 &= ~EVEX_P0XMASK;

	and	dl, 191					; 000000bfH
$LN137@output_opc:
	test	al, 232					; 000000e8H
	je	SHORT $LN140@output_opc

; 509  :                 else byte1 &= ~EVEX_P0BMASK;

	and	dl, 223					; 000000dfH
	jmp	SHORT $LN139@output_opc
$LN140@output_opc:

; 507  :                 if ((CodeInfo->reg1 <= 7) || (CodeInfo->reg1 >= 16 && CodeInfo->reg1 <= 23))
; 508  :                   byte1 |= EVEX_P0BMASK;

	or	dl, 32					; 00000020H
$LN139@output_opc:

; 510  :               }
; 511  :               if (CodeInfo->opnd[OPND2].type == OP_I8){

	cmp	DWORD PTR [rdi+56], 131072		; 00020000H
	jne	SHORT $LN153@output_opc
	lea	eax, DWORD PTR [rcx-2039]
	cmp	eax, 7
	jbe	SHORT $LN143@output_opc
	lea	eax, DWORD PTR [rcx-1529]
	cmp	eax, 17
	ja	SHORT $LN153@output_opc
$LN143@output_opc:
	mov	eax, DWORD PTR [rdi+32]

; 512  :                 if ((CodeInfo->token >= T_VPSLLW) && (CodeInfo->token <= T_VPSRLQ) ||
; 513  :                   (CodeInfo->token >= T_VPSLLVD) && (CodeInfo->token <= T_VPSRLVW)){
; 514  :                   byte1 |= EVEX_P0R1MASK;
; 515  :                   byte1 |= EVEX_P0RMASK;

	or	dl, 144					; 00000090H
	sub	eax, 4
	test	eax, -517				; fffffdfbH
	je	SHORT $LN147@output_opc

; 529  :                     }
; 530  :                   }
; 531  :                   else if (!CodeInfo->evex_flag)

	test	r9b, r9b
	jne	SHORT $LN153@output_opc

; 532  :                     byte1 &= ~EVEX_P0R1MASK;

	and	dl, 239					; 000000efH
	jmp	SHORT $LN153@output_opc
$LN147@output_opc:

; 516  :                   if ((CodeInfo->opnd[OPND1].type == OP_R64) || (CodeInfo->opnd[OPND1].type == OP_RAX) ||
; 517  :                     (CodeInfo->opnd[OPND1].type == OP_R32) || (CodeInfo->opnd[OPND1].type == OP_EAX)){
; 518  :                       if (CodeInfo->basereg != 0xFF){

	movzx	eax, BYTE PTR [rdi+113]
	cmp	al, 255					; 000000ffH
	je	SHORT $LN150@output_opc

; 519  :                         if (CodeInfo->basereg <= 7)   

	cmp	al, 7
	ja	SHORT $LN149@output_opc

; 520  :                           byte1 |= EVEX_P0BMASK;

	or	dl, 32					; 00000020H
	jmp	SHORT $LN150@output_opc
$LN149@output_opc:

; 521  :                         else
; 522  :                           byte1 &= ~EVEX_P0BMASK;

	and	dl, 223					; 000000dfH
$LN150@output_opc:

; 523  :                       }
; 524  :                     if (CodeInfo->indexreg != 0xFF){

	movzx	eax, BYTE PTR [rdi+112]
	cmp	al, 255					; 000000ffH
	je	SHORT $LN153@output_opc

; 525  :                       if (CodeInfo->indexreg <= 7)   

	cmp	al, 7
	ja	SHORT $LN152@output_opc

; 526  :                         byte1 |= EVEX_P0XMASK;

	or	dl, 64					; 00000040H
	jmp	SHORT $LN153@output_opc
$LN152@output_opc:

; 527  :                       else
; 528  :                         byte1 &= ~EVEX_P0XMASK;

	and	dl, 191					; 000000bfH
$LN153@output_opc:
	lea	eax, DWORD PTR [rcx-1610]
	cmp	eax, r14d
	ja	SHORT $LN161@output_opc

; 533  :                 }
; 534  :               }
; 535  :               if ((CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS)){
; 536  :                 if (((CodeInfo->r2type &= OP_R64)||(CodeInfo->r2type &= OP_R32))&&

	and	DWORD PTR [rdi+120], 8
	jne	SHORT $LN158@output_opc
	and	DWORD PTR [rdi+120], 4
	je	SHORT $LN161@output_opc
$LN158@output_opc:
	cmp	DWORD PTR [rdi+124], 0
	je	SHORT $LN161@output_opc

; 537  :                   (CodeInfo->vexconst)) { 
; 538  :                   if (CodeInfo->indexreg != 0xff){

	cmp	BYTE PTR [rdi+112], 255			; 000000ffH
	je	SHORT $LN161@output_opc

; 539  :                     if (CodeInfo->reg1 <= 7)

	cmp	BYTE PTR [rdi+109], 7
	ja	SHORT $LN160@output_opc

; 540  :                       byte1 |= EVEX_P0XMASK;

	or	dl, 64					; 00000040H
	jmp	SHORT $LN161@output_opc
$LN160@output_opc:

; 541  :                     else
; 542  :                       byte1 &= ~EVEX_P0XMASK;

	and	dl, 191					; 000000bfH
$LN161@output_opc:
	lea	eax, DWORD PTR [rcx-1314]
	cmp	eax, r14d
	ja	SHORT $LN170@output_opc

; 543  :                   }
; 544  :                 }
; 545  :               }
; 546  :               if (((CodeInfo->token == T_VEXTRACTF32x8)||(CodeInfo->token == T_VEXTRACTF64x4))
; 547  :                 && !(CodeInfo->opnd[OPND1].type & OP_M_ANY)) {

	test	DWORD PTR [rdi+32], -8388608		; ffffffffff800000H
	jne	SHORT $LN170@output_opc

; 548  :                 if (CodeInfo->reg2 <= 15) byte1 |= EVEX_P0R1MASK;

	movzx	eax, BYTE PTR [rdi+110]
	cmp	al, 15
	ja	SHORT $LN164@output_opc
	or	dl, 16
	jmp	SHORT $LN165@output_opc
$LN164@output_opc:

; 549  :                 else byte1 &= ~EVEX_P0R1MASK;

	and	dl, 239					; 000000efH
$LN165@output_opc:
	test	al, 232					; 000000e8H
	je	SHORT $LN168@output_opc

; 552  :                 else
; 553  :                   byte1 &= ~EVEX_P0RMASK;

	and	dl, 127					; 0000007fH
	jmp	SHORT $LN167@output_opc
$LN168@output_opc:

; 550  :                 if ((CodeInfo->reg2 <= 7) || (CodeInfo->reg2 >= 16 && CodeInfo->reg2 <= 23))
; 551  :                   byte1 |= EVEX_P0RMASK;

	or	dl, 128					; 00000080H
$LN167@output_opc:

; 554  :                 if (CodeInfo->reg1 <= 15) byte1 |= EVEX_P0XMASK;

	cmp	BYTE PTR [rdi+109], 15
	ja	SHORT $LN169@output_opc
	or	dl, 64					; 00000040H
	jmp	SHORT $LN170@output_opc
$LN169@output_opc:

; 555  :                 else byte1 &= ~EVEX_P0XMASK;

	and	dl, 191					; 000000bfH
$LN170@output_opc:
	lea	eax, DWORD PTR [rcx-1671]
	cmp	eax, ebp
	jbe	SHORT $LN172@output_opc

; 556  :               }
; 557  :               if (((CodeInfo->token >= T_BEXTR)&&(CodeInfo->token <= T_SHRX)||(CodeInfo->token == T_BZHI)&&

	cmp	ecx, 1678				; 0000068eH
	jne	SHORT $LN174@output_opc
	cmp	BYTE PTR [rdi+112], 255			; 000000ffH
	je	SHORT $LN174@output_opc
$LN172@output_opc:

; 558  :                 (CodeInfo->indexreg != 0xFF))){
; 559  :                 byte1 &= 0xE3;

	and	dl, 227					; 000000e3H

; 560  :                 if (CodeInfo->indexreg > 0x07)byte1 &= ~0x10;

	cmp	BYTE PTR [rdi+112], 7
	jbe	SHORT $LN174@output_opc
	and	dl, 239					; 000000efH
$LN174@output_opc:
	cmp	ecx, 1427				; 00000593H
	je	SHORT $LN176@output_opc
	lea	eax, DWORD PTR [rcx-1334]
	cmp	eax, r14d
	jbe	SHORT $LN176@output_opc
	cmp	ecx, 1899				; 0000076bH
	jne	SHORT $LN182@output_opc
$LN176@output_opc:
	test	BYTE PTR [rdi+109], 232			; 000000e8H
	je	SHORT $LN179@output_opc

; 566  :                 else
; 567  :                   byte1 &= ~EVEX_P0RMASK;

	and	dl, 127					; 0000007fH
	jmp	SHORT $LN178@output_opc
$LN179@output_opc:

; 561  :               }
; 562  :               if (CodeInfo->token == T_VCVTPH2PS || CodeInfo->token == T_VCVTPD2UDQ||
; 563  :                 CodeInfo->token == T_VCVTPD2DQ || CodeInfo->token == T_VCVTDQ2PD){
; 564  :                 if ((CodeInfo->reg1 <= 7) || (CodeInfo->reg1 >= 16 && CodeInfo->reg1 <= 23))
; 565  :                   byte1 |= EVEX_P0RMASK;

	or	dl, 128					; 00000080H
$LN178@output_opc:

; 568  :                 if (CodeInfo->reg2 <= 15) byte1 |= EVEX_P0XMASK;

	cmp	BYTE PTR [rdi+110], 15
	ja	SHORT $LN180@output_opc
	or	dl, 64					; 00000040H
	jmp	SHORT $LN181@output_opc
$LN180@output_opc:

; 569  :                 else byte1 &= ~EVEX_P0XMASK;

	and	dl, 191					; 000000bfH
$LN181@output_opc:

; 570  :                 if (CodeInfo->token == T_VCVTDQ2PD)

	cmp	ecx, 1899				; 0000076bH
	jne	SHORT $LN182@output_opc

; 571  :                 CodeInfo->evex_p2 &= ~EVEX_P2L1MASK;

	and	BYTE PTR [rdi+139], 191			; 000000bfH
$LN182@output_opc:

; 572  :               }
; 573  : 
; 574  :               OutputCodeByte( byte1 );

	movzx	ecx, dl
	call	OutputByte

; 575  :               if (CodeInfo->opnd[OPND2].type == OP_I8){

	cmp	DWORD PTR [rdi+56], 131072		; 00020000H
	jne	SHORT $LN183@output_opc

; 576  :                 if ((CodeInfo->token >= T_VPSLLW) && (CodeInfo->token <= T_VPSRLQ) ||

	mov	ecx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-2039]
	cmp	eax, 7
	jbe	SHORT $LN186@output_opc
	lea	eax, DWORD PTR [rcx-1529]
	cmp	eax, 17
	ja	SHORT $LN184@output_opc
$LN186@output_opc:

; 577  :                   (CodeInfo->token >= T_VPSLLVD) && (CodeInfo->token <= T_VPSRLVW))
; 578  :                   CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b

; 579  :               }

	jmp	SHORT $LN184@output_opc
$LN183@output_opc:

; 580  :             else
; 581  :             lbyte |= ( ( CodeInfo->prefix.rex & REX_W ) ? 0x80 : 0 );

	movzx	eax, BYTE PTR [rdi+8]
	and	al, 248					; 000000f8H
	shl	al, 4
	or	bl, al
$LN184@output_opc:

; 582  :             /* KSHIFTLW KSHIFTLQ KSHIFTRW KSHIFTRQ */
; 583  :             if ((CodeInfo->token == T_KSHIFTLW) || (CodeInfo->token == T_KSHIFTLQ)||
; 584  :               (CodeInfo->token == T_KSHIFTRW) || (CodeInfo->token == T_KSHIFTRQ)){

	mov	ecx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-1718]
	test	eax, -7					; fffffff9H
	jne	SHORT $LN188@output_opc

; 585  :               lbyte |= 0x80;

	or	bl, 128					; 00000080H
$LN188@output_opc:
	lea	eax, DWORD PTR [rcx-1340]
	cmp	eax, 7
	ja	SHORT $LN195@output_opc

; 586  :             }
; 587  :             //HJWasm13.1 VPGATHERDD, VPGATHERQD, VPGATHERDQ, VPGATHERQQ
; 588  :             if (CodeInfo->token >= T_VPGATHERDD && CodeInfo->token <= T_VGATHERQPS){
; 589  :               if ((CodeInfo->opnd[OPND3].type != CodeInfo->opnd[OPND1].type)&& 

	mov	eax, DWORD PTR [rdi+32]
	cmp	DWORD PTR [rdi+80], eax
	je	SHORT $LN191@output_opc
	cmp	BYTE PTR [rdi+136], 0
	jne	SHORT $LN191@output_opc

; 590  :                 (CodeInfo->evex_flag == 0))
; 591  :                 EmitError( INVALID_USE_OF_REGISTER );

	mov	ecx, 170				; 000000aaH
	call	EmitError
$LN191@output_opc:

; 592  :               CodeInfo->tuple = TRUE;       
; 593  :               lbyte &= ~EVEX_P1VVVV;      // clear EVEX_P1VVVV

	and	bl, 135					; 00000087H
	mov	BYTE PTR [rdi+140], r14b

; 594  :               if (CodeInfo->evex_flag){

	cmp	BYTE PTR [rdi+136], 0
	je	SHORT $LN192@output_opc

; 595  :                 c = EVEX_P1VVVV;          // set all to ones : VVVV = 1111, we are not using it

	mov	al, 120					; 00000078H

; 596  :               }

	jmp	SHORT $LN193@output_opc
$LN192@output_opc:

; 597  :               else {
; 598  :                 c = CodeInfo->reg3 + 1;
; 599  :                 c = ((16 - c) << 3);

	mov	eax, 15
	sub	al, BYTE PTR [rdi+111]
	shl	al, 3
$LN193@output_opc:

; 600  :                 //c = ~c;
; 601  :               }
; 602  :               c &= EVEX_P1VVVV;

	and	al, 120					; 00000078H

; 603  :               lbyte |= c;  

	or	bl, al

; 604  :               if (CodeInfo->indextype == OP_YMM)    lbyte |= 4;

	cmp	DWORD PTR [rdi+132], 128		; 00000080H
	jne	SHORT $LN194@output_opc
	or	bl, 4
$LN194@output_opc:

; 605  :               if (( CodeInfo->prefix.rex & REX_W )) lbyte |= 8;

	test	BYTE PTR [rdi+8], 8
	je	SHORT $LN195@output_opc
	or	bl, 8
$LN195@output_opc:

; 606  :             }
; 607  :             if ((CodeInfo->token >= T_KADDB) && (CodeInfo->token <= T_KUNPCKDQ)) {       //here pay atention

	mov	ecx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-1682]
	cmp	eax, 26
	ja	SHORT $LN196@output_opc

; 608  :               /* third byte W vvvv Lpp   */
; 609  :               c = CodeInfo->reg2;
; 610  :               lbyte &= 0xc0;
; 611  :               c = (c << 3);

	movzx	eax, BYTE PTR [rdi+110]
	and	bl, 196					; 000000c4H
	shl	al, 3

; 612  :               c = ~c;

	not	al

; 613  :               c &= EVEX_P1VVVV;

	and	al, 120					; 00000078H

; 614  :               lbyte |= c;
; 615  :               lbyte |= 4;    

	or	bl, al
	or	bl, 4

; 616  :                if (ins->byte1_info == F_660F) lbyte |= 0x1;

	cmp	BYTE PTR [r15+1], 18
	jne	SHORT $LN203@output_opc
	or	bl, r14b

; 617  :             }

	jmp	SHORT $LN203@output_opc
$LN196@output_opc:
	lea	eax, DWORD PTR [rcx-1709]
	cmp	eax, 7
	ja	SHORT $LN199@output_opc

; 618  :             else if ((CodeInfo->token >= T_KNOTB) && (CodeInfo->token <= T_KORTESTQ)) {
; 619  :               /*  1 1111 0pp */
; 620  :               /*  R vvvv Lpp */
; 621  :               lbyte = 0xF8;
; 622  :               if (ins->byte1_info == F_660F) lbyte |= 0x01;

	cmp	BYTE PTR [r15+1], 18
	mov	bl, 248					; 000000f8H
	jne	SHORT $LN203@output_opc
	mov	bl, 249					; 000000f9H

; 623  :             }

	jmp	SHORT $LN203@output_opc
$LN199@output_opc:
	lea	eax, DWORD PTR [rcx-1725]
	cmp	eax, ebp
	ja	SHORT $LN203@output_opc

; 624  :             else if ((CodeInfo->token >= T_KMOVB) && (CodeInfo->token <= T_KMOVW)) {
; 625  :               /*  1 1111 0pp */
; 626  :               /*  R vvvv Lpp */
; 627  :               lbyte = 0xF8;
; 628  :               if (ins->byte1_info == F_660F) lbyte |= 0x01;

	cmp	BYTE PTR [r15+1], 18
	mov	ebx, 251				; 000000fbH
	mov	eax, 249				; 000000f9H
	cmove	ebx, eax
$LN203@output_opc:
	lea	eax, DWORD PTR [rcx-1349]
	test	eax, -7					; fffffff9H
	jne	SHORT $LN207@output_opc

; 629  :               else  lbyte |= 0x3;
; 630  :             }
; 631  :             if (CodeInfo->token < T_VCVTDQ2PD && CodeInfo->token > T_VCVTTSS2SI){
; 632  :               if (CodeInfo->reg2 > 15)lbyte |= EVEX_P1WMASK;
; 633  :             }
; 634  :             if (CodeInfo->token == T_VPSCATTERDQ || CodeInfo->token == T_VPSCATTERQQ ||
; 635  :               CodeInfo->token == T_VSCATTERDPD || CodeInfo->token == T_VSCATTERQPD){
; 636  :               lbyte |= 0x80;

	or	bl, 128					; 00000080H
$LN207@output_opc:
	lea	eax, DWORD PTR [rcx-1342]
	cmp	eax, ebp
	ja	SHORT $LN209@output_opc

; 637  :             }
; 638  :             /* if broadflags are prezent W = 0  in WVVVV1PP */
; 639  :               if (CodeInfo->token == T_VPGATHERDQ || CodeInfo->token == T_VPGATHERQQ ||
; 640  :                 CodeInfo->token == T_VGATHERDPD || CodeInfo->token == T_VGATHERQPD){
; 641  :                   lbyte |= 0x80;

	or	bl, 128					; 00000080H
$LN209@output_opc:

; 642  :                 }
; 643  :             if (CodeInfo->token == T_VGATHERDPS)lbyte &= ~0x80;

	cmp	ecx, 1346				; 00000542H
	jne	SHORT $LN211@output_opc
	and	bl, 127					; 0000007fH
$LN211@output_opc:
	cmp	ecx, 1438				; 0000059eH
	jle	SHORT $LN213@output_opc
	lea	eax, DWORD PTR [rcx-1899]
	cmp	eax, 11
	ja	SHORT $LN212@output_opc
$LN213@output_opc:

; 644  :             if (((CodeInfo->token <= T_VCOMPRESSPS))||((CodeInfo->token >= T_VCVTDQ2PD) &&
; 645  :               (CodeInfo->token <= T_VCVTTSS2SI))|| (CodeInfo->token == T_VCVTPD2DQ)) 
; 646  :               CodeInfo->evex_p2 &= ~EVEX_P1PPMASK;

	and	BYTE PTR [rdi+139], 252			; 000000fcH
$LN212@output_opc:
	lea	eax, DWORD PTR [rcx-1452]
	cmp	eax, r14d
	ja	SHORT $LN215@output_opc

; 647  :             if ((CodeInfo->token == T_VPCMPB) || (CodeInfo->token == T_VPCMPUB ))lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN215@output_opc:

; 648  :             if (CodeInfo->evex_flag){

	cmp	BYTE PTR [rdi+136], 0
	je	SHORT $LN220@output_opc

; 649  :               if ((CodeInfo->opnd[OPND2].type == OP_M64) || (CodeInfo->opnd[OPND1].type == OP_M64))

	mov	eax, DWORD PTR [rdi+56]
	cmp	eax, 67108864				; 04000000H
	je	SHORT $LN219@output_opc
	cmp	DWORD PTR [rdi+32], 67108864		; 04000000H
	jne	SHORT $LN218@output_opc
$LN219@output_opc:

; 650  :                 lbyte |= EVEX_P1WMASK;

	or	bl, 128					; 00000080H
$LN218@output_opc:
	add	eax, -4					; fffffffcH
	test	eax, -513				; fffffdffH
	je	SHORT $LN221@output_opc
	mov	eax, DWORD PTR [rdi+32]
	sub	eax, 4
	test	eax, -513				; fffffdffH
	jne	SHORT $LN220@output_opc
$LN221@output_opc:

; 651  :                if ((CodeInfo->opnd[OPND2].type == OP_R32) || (CodeInfo->opnd[OPND2].type == OP_EAX) ||
; 652  :                  (CodeInfo->opnd[OPND1].type == OP_R32) || (CodeInfo->opnd[OPND1].type == OP_EAX)){
; 653  :                  lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN220@output_opc:
	cmp	ecx, 1936				; 00000790H
	je	SHORT $LN223@output_opc
	cmp	ecx, 1938				; 00000792H
	je	SHORT $LN223@output_opc
	lea	eax, DWORD PTR [rcx-1571]
	cmp	eax, 2
	ja	SHORT $LN222@output_opc
$LN223@output_opc:

; 654  :                }
; 655  :              }
; 656  :             if ((CodeInfo->token == T_VMOVHPS)||(CodeInfo->token == T_VMOVLPS)||
; 657  :               (CodeInfo->token == T_VPMOVQB)||(CodeInfo->token == T_VPMOVSQB)||
; 658  :               (CodeInfo->token == T_VPMOVUSQB)){  
; 659  :                   lbyte &= ~EVEX_P1WMASK;

	and	bl, 127					; 0000007fH
$LN222@output_opc:
	cmp	ecx, 2041				; 000007f9H
	je	SHORT $LN225@output_opc
	cmp	ecx, 2046				; 000007feH
	je	SHORT $LN225@output_opc
	lea	edx, DWORD PTR [rcx-1534]
	cmp	edx, 6
	ja	SHORT $LN224@output_opc
	mov	eax, 81					; 00000051H
	bt	eax, edx
	jae	SHORT $LN224@output_opc
$LN225@output_opc:

; 660  :             }
; 661  :              if ((CodeInfo->token == T_VPSLLQ)||(CodeInfo->token == T_VPSRLQ)||
; 662  :                (CodeInfo->token == T_VPSRAQ)|| (CodeInfo->token == T_VPROLQ)||
; 663  :                (CodeInfo->token == T_VPRORQ))
; 664  :                lbyte |= EVEX_P1WMASK;

	or	bl, 128					; 00000080H
$LN224@output_opc:
	lea	eax, DWORD PTR [rcx-1671]
	cmp	eax, ebp
	jbe	SHORT $LN227@output_opc
	cmp	ecx, 1678				; 0000068eH
	jne	SHORT $LN235@output_opc
$LN227@output_opc:

; 665  :              if ((CodeInfo->token >= T_BEXTR)&&(CodeInfo->token <= T_SHRX)||(CodeInfo->token == T_BZHI)){
; 666  :               c = CodeInfo->reg3;
; 667  :               lbyte &= 0x80;
; 668  :               c = (c << 3);

	movzx	ebx, BYTE PTR [rdi+111]

; 669  :               c = ~c;
; 670  :               c &= EVEX_P1VVVV;
; 671  :               lbyte |= c;
; 672  : #if AMD64_SUPPORT
; 673  :               lbyte |=0x80;
; 674  : #endif
; 675  :                if (ins->byte1_info == F_660F) lbyte |= 0x1;

	movzx	eax, BYTE PTR [r15+1]
	shl	bl, 3
	not	bl
	and	bl, 248					; 000000f8H
	or	bl, 128					; 00000080H
	cmp	al, 18
	jne	SHORT $LN229@output_opc
	or	bl, r14b
	jmp	SHORT $LN235@output_opc
$LN229@output_opc:

; 676  :                else if (ins->byte1_info == F_F30F38) lbyte |= 0x02;//SARX

	cmp	al, 28
	jne	SHORT $LN231@output_opc
	or	bl, 2
	jmp	SHORT $LN235@output_opc
$LN231@output_opc:

; 677  :                else if (ins->byte1_info == F_660F38) lbyte |= 0x01;//SHLX

	cmp	al, 25
	jne	SHORT $LN233@output_opc
	or	bl, r14b
	jmp	SHORT $LN235@output_opc
$LN233@output_opc:

; 678  :                else if (ins->byte1_info == F_F20F38) lbyte |= 0x03;//SHRX

	cmp	al, 27
	jne	SHORT $LN235@output_opc
	or	bl, bpl
$LN235@output_opc:
	lea	eax, DWORD PTR [rcx-1675]
	cmp	eax, 2
	ja	SHORT $LN240@output_opc

; 679  :              }
; 680  :              if ((CodeInfo->token == T_BLSMSK)||(CodeInfo->token == T_BLSI)||
; 681  :                (CodeInfo->token == T_BLSR)){
; 682  :               c = CodeInfo->reg1;
; 683  :               lbyte &= 0x80;
; 684  :               c = (c << 3);

	movzx	eax, BYTE PTR [rdi+109]
	and	bl, 128					; 00000080H
	shl	al, 3

; 685  :               c = ~c;

	not	al

; 686  :               c &= EVEX_P1VVVV;

	and	al, 120					; 00000078H

; 687  :               lbyte |= c;

	or	bl, al

; 688  :                if (ins->byte1_info == F_660F) lbyte |= 0x1;

	movzx	eax, BYTE PTR [r15+1]
	cmp	al, 18
	jne	SHORT $LN238@output_opc
	or	bl, r14b
	jmp	SHORT $LN240@output_opc
$LN238@output_opc:

; 689  :                else if (ins->byte1_info == F_F20F38) lbyte |= 0x3;

	cmp	al, 27
	jne	SHORT $LN240@output_opc
	or	bl, bpl
$LN240@output_opc:
	lea	eax, DWORD PTR [rcx-1679]
	cmp	eax, r14d
	ja	SHORT $LN245@output_opc

; 690  :              }
; 691  :              if ((CodeInfo->token == T_PDEP)||(CodeInfo->token == T_PEXT)){ 
; 692  :               c = CodeInfo->reg2;
; 693  :               lbyte &= 0x80;
; 694  :               c = (c << 3);

	movzx	eax, BYTE PTR [rdi+110]
	and	bl, 128					; 00000080H
	shl	al, 3

; 695  :               c = ~c;

	not	al

; 696  :               c &= EVEX_P1VVVV;

	and	al, 120					; 00000078H

; 697  :               lbyte |= c;

	or	bl, al

; 698  :                if (ins->byte1_info == F_F20F38) lbyte |= 0x3;

	movzx	eax, BYTE PTR [r15+1]
	cmp	al, 27
	jne	SHORT $LN243@output_opc
	or	bl, bpl
	jmp	SHORT $LN245@output_opc
$LN243@output_opc:

; 699  :                else if (ins->byte1_info == F_F30F38)

	cmp	al, 28
	jne	SHORT $LN245@output_opc

; 700  :                  lbyte |= 0x2;

	or	bl, 2
$LN245@output_opc:

; 701  :              }
; 702  :             if (CodeInfo->token == T_RORX)lbyte |= 0x3;

	cmp	ecx, 1681				; 00000691H
	jne	SHORT $LN246@output_opc
	or	bl, bpl
$LN246@output_opc:

; 703  :             if (CodeInfo->token == T_VEXTRACTF128){

	cmp	ecx, 1311				; 0000051fH
	jne	SHORT $LN248@output_opc

; 704  :               if (CodeInfo->r2type == OP_YMM)

	cmp	DWORD PTR [rdi+120], 128		; 00000080H
	jne	SHORT $LN248@output_opc

; 705  :                 lbyte |= 0x04;

	or	bl, 4
$LN248@output_opc:

; 706  :             }
; 707  :             CodeInfo->evex_p1 = lbyte;
; 708  :             OutputCodeByte( lbyte );

	movzx	ecx, bl
	mov	BYTE PTR [rdi+138], bl
	call	OutputByte

; 709  :             if (CodeInfo->evex_flag  ){

	cmp	BYTE PTR [rdi+136], 0
	je	$LN12@output_opc

; 710  :               CodeInfo->evex_p2 |= decoflags;

	movzx	eax, BYTE PTR decoflags
	or	BYTE PTR [rdi+139], al

; 711  :             if ((CodeInfo->opnd[OPND1].type  & OP_ZMM)|| (CodeInfo->r2type & OP_ZMM))

	mov	edx, DWORD PTR [rdi+32]
	movzx	eax, BYTE PTR [rdi+139]
	bt	edx, 8
	jb	SHORT $LN252@output_opc
	mov	ecx, DWORD PTR [rdi+120]
	bt	ecx, 8
	jb	SHORT $LN252@output_opc

; 713  :             else if ((CodeInfo->opnd[OPND1].type & OP_YMM) || (CodeInfo->r2type & OP_YMM)) 

	test	dl, dl
	js	SHORT $LN254@output_opc
	test	cl, cl
	jns	SHORT $LN253@output_opc
$LN254@output_opc:

; 714  :               CodeInfo->evex_p2 |= EVEX_P2LMASK;

	or	al, 32					; 00000020H
	jmp	SHORT $LN662@output_opc
$LN252@output_opc:

; 712  :               CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	or	al, 64					; 00000040H
$LN662@output_opc:
	mov	BYTE PTR [rdi+139], al
$LN253@output_opc:

; 715  :               /* here is Static Rounding Mode inserted */
; 716  :             if (CodeInfo->evex_sae){

	movzx	r8d, BYTE PTR [rdi+141]
	test	r8b, r8b
	je	SHORT $LN255@output_opc

; 717  :                 CodeInfo->evex_p2 &= ~0x70;     //clear bites 6,5,4

	and	BYTE PTR [rdi+139], 143			; 0000008fH

; 718  :                 c = CodeInfo->evex_sae - 0x10;  //subtract SAE to get a proper decorator

	movzx	eax, r8b
	sub	al, 16

; 719  :                 /* here we need to test for corect use of decorators  
; 720  :                  * if it is {sae} c will be zero, in that case we need to add 0x10 to c
; 721  :                  * if we need {sae}
; 722  :                 */   
; 723  :                 if (c == 0) c += 0x10;

	mov	r9d, 16
	movzx	ecx, al
	cmove	ecx, r9d

; 724  :                 CodeInfo->evex_p2 |= c;

	or	BYTE PTR [rdi+139], cl
$LN255@output_opc:

; 725  :               }
; 726  :               if (broadflags >= 0x10 && broadflags <= 0x47) CodeInfo->evex_p2 |= 0x10;

	movzx	eax, BYTE PTR broadflags
	sub	al, 16
	cmp	al, 55					; 00000037H
	ja	SHORT $LN257@output_opc
	or	BYTE PTR [rdi+139], 16
$LN257@output_opc:
	mov	eax, DWORD PTR [rdi+24]
	sub	eax, 1899				; 0000076bH
	cmp	eax, 11
	ja	SHORT $LN272@output_opc

; 727  :                 if ((CodeInfo->token >= T_VCVTDQ2PD && CodeInfo->token <= T_VCVTTSS2SI)||
; 728  :                 (CodeInfo->token == T_VCVTSD2SS)){
; 729  :                   if (!CodeInfo->evex_sae)

	test	r8b, r8b
	jne	SHORT $LN261@output_opc

; 730  :                   CodeInfo->evex_p2 &= ~0x60;   //clear bits 6 and 5

	and	BYTE PTR [rdi+139], 159			; 0000009fH
$LN261@output_opc:

; 731  :                   if (CodeInfo->opnd[OPND1].type & OP_XMM){

	mov	eax, DWORD PTR [rdi+32]
	test	al, 32					; 00000020H
	je	SHORT $LN262@output_opc

; 732  :                     if (CodeInfo->r2type & (OP_XMM | OP_M64 | OP_M))

	test	DWORD PTR [rdi+120], -1887436768	; 8f800020H
	jne	SHORT $LN272@output_opc
$LN268@output_opc:

; 733  :                       ;
; 734  :                     else EmitError(INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS);

	mov	ecx, 14
	call	EmitError

; 735  :                   }

	jmp	SHORT $LN272@output_opc
$LN262@output_opc:

; 736  :                   else if (CodeInfo->opnd[OPND1].type & OP_YMM){

	test	al, al
	jns	SHORT $LN266@output_opc

; 737  :                     if (CodeInfo->r2type & (OP_XMM | OP_M128 | OP_M))

	test	DWORD PTR [rdi+120], -1887436768	; 8f800020H
	je	SHORT $LN268@output_opc

; 738  :                       CodeInfo->evex_p2 |= EVEX_P2LMASK;

	or	BYTE PTR [rdi+139], 32			; 00000020H
	jmp	SHORT $LN272@output_opc
$LN266@output_opc:

; 739  :                     else EmitError(INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS);
; 740  :                   }
; 741  :                   else if (CodeInfo->opnd[OPND1].type & OP_ZMM){

	bt	eax, 8
	jae	SHORT $LN272@output_opc

; 742  :                     if (CodeInfo->r2type & OP_YMM | OP_M256 | OP_M)
; 743  :                       CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	or	BYTE PTR [rdi+139], 64			; 00000040H
$LN272@output_opc:

; 744  :                     else EmitError(INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS);
; 745  :                   }
; 746  :                 }
; 747  :                 if (CodeInfo->token >= T_VPGATHERDD && CodeInfo->token <= T_VGATHERQPS){

	mov	ecx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rcx-1340]
	cmp	eax, 7
	ja	SHORT $LN273@output_opc

; 748  :                   CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	or	BYTE PTR [rdi+139], 64			; 00000040H

; 749  :                   CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b
$LN273@output_opc:
	lea	eax, DWORD PTR [rcx-1348]
	cmp	eax, 7
	ja	SHORT $LN274@output_opc

; 750  :                 }
; 751  :                 if (CodeInfo->token >= T_VPSCATTERDD && CodeInfo->token <= T_VSCATTERQPD){
; 752  :                   CodeInfo->evex_p2 &= ~EVEX_P2LMASK;

	and	BYTE PTR [rdi+139], 223			; 000000dfH

; 753  :                   CodeInfo->evex_p2 |= EVEX_P2L1MASK;

	or	BYTE PTR [rdi+139], 64			; 00000040H

; 754  :                 CodeInfo->tuple = TRUE;

	mov	BYTE PTR [rdi+140], r14b
$LN274@output_opc:
	cmp	ecx, 1917				; 0000077dH
	je	SHORT $LN276@output_opc
	lea	eax, DWORD PTR [rcx-1598]
	cmp	eax, r14d
	jbe	SHORT $LN276@output_opc
	cmp	ecx, 1618				; 00000652H
	jne	SHORT $LN275@output_opc
$LN276@output_opc:

; 755  :                 }
; 756  :                 if ((CodeInfo->token == T_VEXTRACTPS)||(CodeInfo->token == T_VCVTSD2USI)||
; 757  :                   (CodeInfo->token == T_VCVTSS2USI)||(CodeInfo->token == T_VCVTTSD2USI))
; 758  :                   CodeInfo->evex_p2 &= ~EVEX_P2L1MASK;

	and	BYTE PTR [rdi+139], 191			; 000000bfH
$LN275@output_opc:
	lea	eax, DWORD PTR [rcx-1312]
	cmp	eax, 8
	ja	SHORT $LN627@output_opc
	mov	edx, 495				; 000001efH
	bt	edx, eax
	jb	SHORT $LN278@output_opc
$LN627@output_opc:
	cmp	ecx, 1917				; 0000077dH
	jne	SHORT $LN277@output_opc
$LN278@output_opc:

; 759  :                   if ((CodeInfo->token == T_VEXTRACTF32x4) || (CodeInfo->token == T_VEXTRACTF64x2)||
; 760  :                     (CodeInfo->token == T_VEXTRACTF64x4)|| (CodeInfo->token == T_VEXTRACTF32x8)||
; 761  :                     (CodeInfo->token == T_VEXTRACTI32x4)||(CodeInfo->token == T_VEXTRACTI64x4)||
; 762  :                     (CodeInfo->token == T_VEXTRACTI64x2)|| (CodeInfo->token == T_VEXTRACTI32x8)||
; 763  :                   (CodeInfo->token == T_VEXTRACTPS)|| (CodeInfo->token == T_VEXTRACTPS)){
; 764  :                     CodeInfo->evex_p2 &= ~EVEX_P2BMASK;
; 765  :                     CodeInfo->evex_p2 &= ~EVEX_P2LMASK;

	and	BYTE PTR [rdi+139], 207			; 000000cfH
$LN277@output_opc:

; 766  :                   }
; 767  :                 if (CodeInfo->evex_flag){

	cmp	BYTE PTR [rdi+136], 0
	je	$LN12@output_opc

; 768  :                   if (CodeInfo->vexregop){

	cmp	BYTE PTR [rdi+128], 0
	je	SHORT $LN280@output_opc

; 769  :                     if (CodeInfo->reg2 <= 15) CodeInfo->evex_p2 |= EVEX_P2VMASK;

	cmp	BYTE PTR [rdi+110], 15
	jbe	SHORT $LN280@output_opc

; 770  :                     else CodeInfo->evex_p2 &= ~EVEX_P2VMASK;

	and	BYTE PTR [rdi+139], 247			; 000000f7H

; 771  :                   }

	jmp	SHORT $LN281@output_opc
$LN280@output_opc:

; 772  :                   else CodeInfo->evex_p2 |= EVEX_P2VMASK;

	or	BYTE PTR [rdi+139], 8
$LN281@output_opc:
	lea	eax, DWORD PTR [rcx-1610]
	cmp	eax, r14d
	jbe	SHORT $LN285@output_opc
	cmp	ecx, 1428				; 00000594H
	jne	SHORT $LN284@output_opc
$LN285@output_opc:

; 773  :               if ((CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS)||
; 774  :                    (CodeInfo->token ==  T_VCVTPS2PH))
; 775  :                     CodeInfo->evex_p2 |= EVEX_P2VMASK;

	or	BYTE PTR [rdi+139], 8
$LN284@output_opc:

; 776  :                 CodeInfo->evex_p2 |= decoflags;

	movzx	eax, BYTE PTR decoflags
	or	BYTE PTR [rdi+139], al
	movzx	eax, BYTE PTR [rdi+139]

; 777  :               if (CodeInfo->token == T_VCVTDQ2PD)

	cmp	ecx, 1899				; 0000076bH
	jne	SHORT $LN286@output_opc

; 778  :                 CodeInfo->evex_p2 &= ~EVEX_P2L1MASK;

	and	al, 191					; 000000bfH
	mov	BYTE PTR [rdi+139], al
$LN286@output_opc:

; 779  :                 OutputCodeByte(CodeInfo->evex_p2);

	movzx	ecx, BYTE PTR [rdi+139]

; 1073 :                 }
; 1074 :             }
; 1075 :         }
; 1076 :     } else {

	jmp	SHORT $LN660@output_opc
$LN71@output_opc:

; 1077 : #endif
; 1078 : 
; 1079 : #if AMD64_SUPPORT
; 1080 :     /* the REX prefix must be located after the other prefixes */
; 1081 :     if( CodeInfo->prefix.rex != 0 ) {

	cmp	BYTE PTR [rdi+8], 0
	je	SHORT $LN463@output_opc

; 1082 :         if ( CodeInfo->Ofssize != USE64 ) {

	cmp	BYTE PTR [rdi+106], 2
	je	SHORT $LN464@output_opc

; 1083 :             EmitError( INVALID_OPERAND_SIZE );

	mov	ecx, 71					; 00000047H
	call	EmitError
$LN464@output_opc:

; 1084 :         }
; 1085 :         OutputCodeByte( CodeInfo->prefix.rex | 0x40 );

	movzx	ecx, BYTE PTR [rdi+8]
	or	cl, 64					; 00000040H
	call	OutputByte
$LN463@output_opc:

; 1086 :     }
; 1087 : #endif
; 1088 : 
; 1089 :     /*
; 1090 :      * Output extended opcode
; 1091 :      * special case for some 286 and 386 instructions
; 1092 :      * or 3DNow!, MMX and SSEx instructions
; 1093 :      */
; 1094 :     if ( ins->byte1_info >= F_0F ) {

	cmp	BYTE PTR [r15+1], 16
	jb	SHORT $LN12@output_opc

; 1095 :         OutputCodeByte( EXTENDED_OPCODE );

	mov	cl, 15
	call	OutputByte

; 1096 :         switch ( ins->byte1_info ) {

	movzx	eax, BYTE PTR [r15+1]
	add	eax, -17
	cmp	eax, 10
	ja	SHORT $LN12@output_opc
	cdqe
	mov	ecx, DWORD PTR $LN640@output_opc[r12+rax*4]
	add	rcx, r12
	jmp	rcx
$LN466@output_opc:

; 1097 :         case F_0F0F:   OutputCodeByte( EXTENDED_OPCODE ); break;

	mov	cl, 15
	jmp	SHORT $LN660@output_opc
$LN467@output_opc:

; 1098 :         case F_0F38:
; 1099 :         case F_F20F38:
; 1100 :         case F_660F38: OutputCodeByte( 0x38 );            break;

	mov	cl, 56					; 00000038H
	jmp	SHORT $LN660@output_opc
$LN468@output_opc:

; 1101 :         case F_0F3A:
; 1102 :         case F_660F3A: OutputCodeByte( 0x3A );            break;

	mov	cl, 58					; 0000003aH
$LN660@output_opc:
	call	OutputByte
$LN12@output_opc:

; 1103 :         }
; 1104 :     }
; 1105 : 
; 1106 : #if AVXSUPP
; 1107 :     }
; 1108 : #endif
; 1109 : 
; 1110 :     switch( ins->rm_info) {

	movzx	ecx, BYTE PTR [r15+5]
	sub	ecx, r14d
	je	$LN470@output_opc
	sub	ecx, r14d
	je	SHORT $LN471@output_opc
	sub	ecx, r14d
	jne	SHORT $LN472@output_opc

; 1111 :     case R_in_OP:
; 1112 :         OutputCodeByte( ins->opcode | ( CodeInfo->rm_byte & NOT_BIT_67 ) );

	movzx	ecx, BYTE PTR [rdi+104]
	and	cl, 63					; 0000003fH

; 1113 :         break;

	jmp	$LN663@output_opc
$LN471@output_opc:

; 1116 :         break;
; 1117 :     case no_WDS:
; 1118 :         CodeInfo->iswide = 0;

	and	BYTE PTR [rdi+142], 254			; 000000feH
$LN472@output_opc:

; 1119 :         /* no break */
; 1120 :     default: /* opcode (with w d s bits), rm-byte */
; 1121 :            if( ins->byte1_info != F_0F0F ) {

	xor	r14d, r14d
	cmp	BYTE PTR [r15+1], 17
	je	$LN475@output_opc

; 1122 :              if ((CodeInfo->token >= T_KADDB) && (CodeInfo->token <= T_KMOVW)){

	mov	edx, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rdx-1682]
	cmp	eax, 46					; 0000002eH
	ja	SHORT $LN474@output_opc

; 1123 :                if ((CodeInfo->token >= T_KMOVB) && (CodeInfo->token <= T_KMOVW)){

	cmp	edx, 1725				; 000006bdH
	jl	SHORT $LN639@output_opc

; 1124 :                 const  struct instr_item *p = CodeInfo->pinstr;
; 1125 :                  int cnt;
; 1126 :                  int type1 = CodeInfo->opnd[OPND1].type;

	mov	ebp, DWORD PTR [rdi+32]

; 1127 :                  int type2 = CodeInfo->opnd[OPND2].type;

	mov	esi, DWORD PTR [rdi+56]
	mov	rbx, QWORD PTR [rdi+16]

; 1128 :                  CodeInfo->tuple = 0;

	mov	BYTE PTR [rdi+140], r14b

; 1129 :                  /* at least one operand must be K register */
; 1130 :                  if (type1 == OP_K || type2 == OP_K)

	cmp	ebp, 64					; 00000040H
	je	SHORT $LN480@output_opc
	cmp	esi, 64					; 00000040H
	je	SHORT $LN480@output_opc

; 1131 :                    ;    //OK
; 1132 :                  else
; 1133 :                  EmitError(INVALID_COMBINATION_OF_OPCODE_AND_OPERANDS);

	lea	ecx, QWORD PTR [r14+14]
	call	EmitError
$LN480@output_opc:

; 1134 :                  /* find the proper opcode for the command movw KREG,GP_REG */
; 1135 :                  for (cnt = 0; cnt < 5; cnt++,p++){

	mov	edx, r14d
	npad	3
$LL18@output_opc:

; 1136 :                    if ((opnd_clstab[p->opclsidx].opnd_type[OPND1] == type1) && 

	movzx	eax, BYTE PTR [rbx]
	lea	rcx, QWORD PTR [rax+rax*2]
	cmp	DWORD PTR opnd_clstab[r12+rcx*4], ebp
	jne	SHORT $LN16@output_opc
	cmp	DWORD PTR opnd_clstab[r12+rcx*4+4], esi
	je	SHORT $LN547@output_opc
$LN16@output_opc:

; 1134 :                  /* find the proper opcode for the command movw KREG,GP_REG */
; 1135 :                  for (cnt = 0; cnt < 5; cnt++,p++){

	inc	edx
	add	rbx, 14
	cmp	edx, 5
	jl	SHORT $LL18@output_opc
$LN639@output_opc:

; 1143 :                  else
; 1144 :                    OutputCodeByte(ins->opcode);

	movzx	ecx, BYTE PTR [r15+12]

; 1145 :               }else

	jmp	SHORT $LN664@output_opc
$LN547@output_opc:

; 1137 :                      (opnd_clstab[p->opclsidx].opnd_type[OPND2] == type2))
; 1138 :                      break;
; 1139 :                  }
; 1140 :                  if (cnt < 5) {   //there are 5 combinations

	cmp	edx, 5
	jge	SHORT $LN639@output_opc

; 1141 :                    OutputCodeByte(p->opcode);

	movzx	ecx, BYTE PTR [rbx+12]

; 1142 :                  }

	jmp	SHORT $LN664@output_opc
$LN474@output_opc:

; 1146 :                 OutputCodeByte(ins->opcode);
; 1147 :              }
; 1148 :              else{
; 1149 :                OutputCodeByte(ins->opcode | CodeInfo->iswide | CodeInfo->opc_or);

	movzx	ecx, BYTE PTR [rdi+142]
	and	cl, 1
	or	cl, BYTE PTR [rdi+107]
	or	cl, BYTE PTR [r15+12]
$LN664@output_opc:
	call	OutputByte
$LN475@output_opc:

; 1150 :              }
; 1151 :         }
; 1152 : 
; 1153 :         /* emit ModRM byte; bits 7-6 = Mod, bits 5-3 = Reg, bits 2-0 = R/M */
; 1154 :            if ((CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS))CodeInfo->tuple = TRUE;

	mov	ebp, DWORD PTR [rdi+24]
	lea	eax, DWORD PTR [rbp-1610]
	cmp	eax, 1
	ja	SHORT $LN484@output_opc
	mov	BYTE PTR [rdi+140], 1
$LN484@output_opc:
	lea	eax, DWORD PTR [rbp-1682]
	cmp	eax, 26
	ja	SHORT $LN486@output_opc

; 1155 :             if ((CodeInfo->token >= T_KADDB) && (CodeInfo->token <= T_KUNPCKDQ)) {       //here pay atention
; 1156 :               c = CodeInfo->reg1;
; 1157 :               tmp = MOD_11;           //bits 7-6 = Mod
; 1158 :               c = (c << 3);           //bits 5-3 = Reg,
; 1159 :               tmp |= c;            
; 1160 :               tmp |= CodeInfo->reg3;  //bits 2-0 = R/M

	movzx	ebx, BYTE PTR [rdi+109]
	or	bl, 248					; 000000f8H
	shl	bl, 3
	or	bl, BYTE PTR [rdi+111]

; 1161 :             }

	jmp	SHORT $LN489@output_opc
$LN486@output_opc:
	lea	eax, DWORD PTR [rbp-1709]
	cmp	eax, 7
	ja	SHORT $LN488@output_opc

; 1162 :             else if ((CodeInfo->token >= T_KNOTB) && (CodeInfo->token <= T_KORTESTQ)) {
; 1163 :                 tmp = MOD_11;                 //bits 7-6 = Mod
; 1164 :                 tmp |= (CodeInfo->reg1 << 3); //bits 5-3 = Reg,
; 1165 :                 tmp |= CodeInfo->reg2;        //bits 2-0 = R/M

	movzx	ebx, BYTE PTR [rdi+109]
	or	bl, 248					; 000000f8H
	shl	bl, 3
	or	bl, BYTE PTR [rdi+110]

; 1166 :             }

	jmp	SHORT $LN489@output_opc
$LN488@output_opc:

; 1167 :         else
; 1168 :         tmp = ins->rm_byte | CodeInfo->rm_byte;

	movzx	ebx, BYTE PTR [rdi+104]
	or	bl, BYTE PTR [r15+13]
$LN489@output_opc:

; 1169 :             if (CodeInfo->token == T_VCVTPS2PH){//(!CodeInfo->evex_flag) && 

	cmp	ebp, 1428				; 00000594H
	jne	SHORT $LN490@output_opc

; 1170 :               //tmp &= 0xC0;
; 1171 :               c = CodeInfo->reg2;

	movzx	eax, BYTE PTR [rdi+110]

; 1172 :               if (c > 15)c -= 16 ;

	cmp	al, 15
	jbe	SHORT $LN491@output_opc
	add	al, 240					; 000000f0H
$LN491@output_opc:

; 1173 :               if (c > 7)c -= 8;

	cmp	al, 7
	jbe	SHORT $LN492@output_opc
	add	al, 248					; 000000f8H
$LN492@output_opc:

; 1174 :               c = (c << 3);

	shl	al, 3

; 1175 :               tmp |= c;

	or	bl, al
$LN490@output_opc:

; 1176 :             }
; 1177 :         if (CodeInfo->basetype == T_RIP) tmp &= ~MOD_10;

	cmp	BYTE PTR [rdi+108], 131			; 00000083H
	jne	SHORT $LN493@output_opc
	and	bl, 127					; 0000007fH
$LN493@output_opc:

; 1178 :         /* use only if TypleType is present  */
; 1179 :         if (CodeInfo->tuple){

	cmp	BYTE PTR [rdi+140], r14b
	je	$LN527@output_opc

; 1180 :           int index = -1;
; 1181 :           int d;
; 1182 :           if ((CodeInfo->opnd[OPND1].type & OP_M_ANY) &&

	test	DWORD PTR [rdi+32], -8388608		; ffffffffff800000H
	je	SHORT $LN495@output_opc
	cmp	DWORD PTR [rdi+40], -1
	jne	SHORT $LN551@output_opc
$LN495@output_opc:

; 1183 :             (CodeInfo->opnd[OPND1].data32l != -1))  index = OPND1;
; 1184 :           else if ((CodeInfo->opnd[OPND2].type & OP_M_ANY) &&

	test	DWORD PTR [rdi+56], -8388608		; ffffffffff800000H
	je	SHORT $LN498@output_opc
	cmp	DWORD PTR [rdi+40], -1
	je	SHORT $LN498@output_opc

; 1185 :             (CodeInfo->opnd[OPND1].data32l != -1))
; 1186 :             index = OPND2;

	mov	r14d, 1
$LN551@output_opc:

; 1187 :           if ((index != -1) && ((Check4CompDisp8(CodeInfo, &comprdsp, &d, CodeInfo->opnd[index].data32l)) && comprdsp)){

	movsxd	rax, r14d
	lea	rcx, QWORD PTR [rax+rax*2]
	mov	esi, DWORD PTR [rdi+rcx*8+40]
	lea	r14, QWORD PTR [rdi+rcx*8]
	mov	rcx, rdi
	call	GetByteDisp
	test	al, al
	je	SHORT $LN540@output_opc
	movzx	r8d, al
	lea	ecx, DWORD PTR [r8-1]
	test	ecx, esi
	jne	SHORT $LN540@output_opc
	mov	eax, esi
	cdq
	idiv	r8d
	mov	r13d, eax
	lea	ecx, DWORD PTR [rax+128]
	cmp	ecx, 255				; 000000ffH
	ja	SHORT $LN540@output_opc
	test	al, al
	je	SHORT $LN498@output_opc

; 1188 :             CodeInfo->opnd[index].data32l = comprdsp;

	movsx	ecx, al

; 1189 :             tmp &= ~MOD_10;     /* if        mod = 10, r/m = 100, s-i-b is present */

	and	bl, 63					; 0000003fH
	mov	DWORD PTR [r14+40], ecx

; 1190 :             tmp |= MOD_01;      /* change to mod = 01, r/m = 100, s-i-b is present */

	or	bl, 64					; 00000040H

; 1191 :           }

	jmp	$LN527@output_opc

; 1187 :           if ((index != -1) && ((Check4CompDisp8(CodeInfo, &comprdsp, &d, CodeInfo->opnd[index].data32l)) && comprdsp)){

$LN540@output_opc:
	xor	r13b, r13b
$LN498@output_opc:

; 1192 :           else if (CodeInfo->opnd[OPND2].type == OP_I8 ){

	cmp	DWORD PTR [rdi+56], 131072		; 00020000H
	jne	$LN500@output_opc
	lea	eax, DWORD PTR [rbp-2039]
	cmp	eax, 7
	jbe	SHORT $LN503@output_opc
	lea	eax, DWORD PTR [rbp-1610]
	cmp	eax, 1
	jbe	SHORT $LN503@output_opc
	lea	eax, DWORD PTR [rbp-1529]
	cmp	eax, 17
	ja	$LN527@output_opc
$LN503@output_opc:

; 1193 :             if ((CodeInfo->token >= T_VPSLLW) && (CodeInfo->token <= T_VPSRLQ) ||
; 1194 :               (CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS)||
; 1195 :               (CodeInfo->token >= T_VPSLLVD) && (CodeInfo->token <= T_VPSRLVW)){
; 1196 :               if ((CodeInfo->vexconst) && ((Check4CompDisp8(CodeInfo, &comprdsp, &d, CodeInfo->vexconst)) && comprdsp)){

	mov	esi, DWORD PTR [rdi+124]
	test	esi, esi
	je	SHORT $LN505@output_opc
	mov	rcx, rdi
	call	GetByteDisp
	test	al, al
	je	SHORT $LN544@output_opc
	movzx	ecx, al
	lea	eax, DWORD PTR [rcx-1]
	test	eax, esi
	jne	SHORT $LN544@output_opc
	mov	eax, esi
	cdq
	idiv	ecx
	lea	ecx, DWORD PTR [rax+128]
	cmp	ecx, 255				; 000000ffH
	ja	SHORT $LN544@output_opc
	movzx	r13d, al
	test	al, al
	je	SHORT $LN505@output_opc

; 1197 :                 CodeInfo->opnd[OPND1].data32l = comprdsp;                tmp &= ~MOD_10;     /* if        mod = 10, r/m = 100, s-i-b is present */

	movsx	eax, al
	and	bl, 63					; 0000003fH
	mov	DWORD PTR [rdi+40], eax

; 1198 :                 tmp |= MOD_01;      /* change to mod = 01, r/m = 100, s-i-b is present */

	or	bl, 64					; 00000040H
	mov	eax, DWORD PTR [rdi+24]
	sub	eax, 1610				; 0000064aH
	cmp	eax, 1
	ja	$LN527@output_opc

; 1199 :                 if ((CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS)){                   
; 1200 :                      c = CodeInfo->reg2;

	movzx	eax, BYTE PTR [rdi+110]

; 1201 :                      if (c > 15) c -= 16;

	cmp	al, 15
	jbe	SHORT $LN509@output_opc
	add	al, 240					; 000000f0H
$LN509@output_opc:

; 1202 :                      if (c > 7) c -= 8;

	cmp	al, 7
	jbe	$LN526@output_opc
	add	al, 248					; 000000f8H

; 1203 :                      tmp |= c;

	or	bl, al

; 1204 :                  }
; 1205 :               }

	jmp	$LN527@output_opc

; 1193 :             if ((CodeInfo->token >= T_VPSLLW) && (CodeInfo->token <= T_VPSRLQ) ||
; 1194 :               (CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS)||
; 1195 :               (CodeInfo->token >= T_VPSLLVD) && (CodeInfo->token <= T_VPSRLVW)){
; 1196 :               if ((CodeInfo->vexconst) && ((Check4CompDisp8(CodeInfo, &comprdsp, &d, CodeInfo->vexconst)) && comprdsp)){

$LN544@output_opc:
	xor	r13b, r13b
$LN505@output_opc:

; 1206 :               else{
; 1207 :                 CodeInfo->tuple = 0;
; 1208 :                 if (CodeInfo->indexreg != 0xff){

	movzx	ecx, BYTE PTR [rdi+112]
	mov	BYTE PTR [rdi+140], 0
	cmp	cl, 255					; 000000ffH
	je	SHORT $LN511@output_opc

; 1209 :                   tmp &= ~NOT_BIT_345;
; 1210 :                   tmp &= ~BIT_012;
; 1211 :                   tmp |= MOD_10;
; 1212 :                   tmp |= RM_SIB;
; 1213 :                   c = CodeInfo->indexreg;
; 1214 :                   c = (c &= 0x7) << 3;
; 1215 :                   CodeInfo->sib |= c;
; 1216 :                   c = CodeInfo->basereg;
; 1217 :                   c &= 0x7;

	movzx	eax, BYTE PTR [rdi+113]

; 1218 :                   CodeInfo->sib |= c;
; 1219 :                   CodeInfo->rm_byte = tmp;
; 1220 :                   CodeInfo->sib |= MOD_11;

	or	cl, 248					; 000000f8H
	shl	cl, 3
	and	al, 7
	and	bl, 56					; 00000038H
	or	cl, al
	or	bl, 132					; 00000084H
	or	BYTE PTR [rdi+105], cl
	mov	BYTE PTR [rdi+104], bl

; 1221 :                   CodeInfo->opnd[OPND1].data32l = CodeInfo->vexconst;

	mov	DWORD PTR [rdi+40], esi

; 1222 :                 }

	jmp	$LN527@output_opc
$LN511@output_opc:

; 1223 :                 else {
; 1224 :                   if ((CodeInfo->opnd[OPND1].type == OP_R64) || (CodeInfo->opnd[OPND1].type == OP_RAX) ||
; 1225 :                     (CodeInfo->opnd[OPND1].type == OP_R32) || (CodeInfo->opnd[OPND1].type == OP_EAX)){

	mov	ecx, DWORD PTR [rdi+32]
	lea	eax, DWORD PTR [rcx-4]
	test	eax, -517				; fffffdfbH
	je	SHORT $LN515@output_opc

; 1231 :                     }
; 1232 :                   }
; 1233 :                   else if ((CodeInfo->opnd[OPND1].type == OP_XMM) || (CodeInfo->opnd[OPND1].type == OP_YMM) ||

	cmp	ecx, 32					; 00000020H
	je	SHORT $LN518@output_opc
	cmp	ecx, 128				; 00000080H
	je	SHORT $LN518@output_opc
	cmp	ecx, 256				; 00000100H
	jne	SHORT $LN527@output_opc
$LN518@output_opc:

; 1234 :                     (CodeInfo->opnd[OPND1].type == OP_ZMM)){
; 1235 :                 CodeInfo->tuple = 0;

	mov	BYTE PTR [rdi+140], 0

; 1236 :                 if (CodeInfo->vexconst){

	test	esi, esi
	je	SHORT $LN519@output_opc

; 1237 :                   tmp &= ~NOT_BIT_345;
; 1238 :                   tmp &= ~BIT_012;
; 1239 :                   tmp |= MOD_10;
; 1240 :                   tmp |= RM_SIB;
; 1241 :                   if (CodeInfo->indexreg != 0xFF){
; 1242 :                     c = CodeInfo->indexreg;
; 1243 :                     c = (c &= 0x07) << 3;
; 1244 :                     CodeInfo->sib |= c;
; 1245 :                     c = CodeInfo->basereg;
; 1246 :                     c &= 0x7;
; 1247 :                     CodeInfo->sib |= c;
; 1248 :                     CodeInfo->sib = 0xf0;
; 1249 :                   }
; 1250 :                   else{
; 1251 :                     tmp &= ~0x07;
; 1252 :                     tmp |= (CodeInfo->reg2 & 0x07);

	movzx	eax, BYTE PTR [rdi+110]
	and	bl, 56					; 00000038H
	or	bl, 132					; 00000084H
	xor	al, bl
	and	al, 7
	xor	bl, al

; 1253 :                   }
; 1254 :                   CodeInfo->rm_byte = tmp;

	mov	BYTE PTR [rdi+104], bl

; 1255 :                   CodeInfo->opnd[OPND1].data32l = CodeInfo->vexconst;

	mov	DWORD PTR [rdi+40], esi

; 1256 :                 }

	jmp	SHORT $LN527@output_opc
$LN519@output_opc:

; 1257 :                    else {
; 1258 :                      if ((CodeInfo->r2type)&&((CodeInfo->token == T_VRNDSCALEPD) || (CodeInfo->token == T_VRNDSCALEPS)))

	cmp	DWORD PTR [rdi+120], 0
	je	SHORT $LN523@output_opc
	lea	eax, DWORD PTR [rbp-1610]
	cmp	eax, 1
	ja	SHORT $LN523@output_opc

; 1259 :                        tmp &= ~0xc0;

	and	bl, 63					; 0000003fH
$LN523@output_opc:

; 1260 :                      c = CodeInfo->reg2;

	movzx	eax, BYTE PTR [rdi+110]

; 1261 :                      if (c > 15) c -= 16;

	cmp	al, 15
	jbe	SHORT $LN525@output_opc
	add	al, 240					; 000000f0H
$LN525@output_opc:

; 1262 :                      if (c > 7) c -= 8;

	cmp	al, 7
	jbe	SHORT $LN526@output_opc
	add	al, 248					; 000000f8H
$LN526@output_opc:

; 1263 :                      tmp |= c;

	or	bl, al
	jmp	SHORT $LN527@output_opc
$LN515@output_opc:

; 1226 :                     tmp &= ~MOD_11;

	and	bl, 63					; 0000003fH

; 1227 :                     if (CodeInfo->vexconst){

	test	esi, esi
	je	SHORT $LN527@output_opc

; 1228 :                       tmp |= MOD_10;

	or	bl, 128					; 00000080H

; 1229 :                       CodeInfo->rm_byte = tmp;

	mov	BYTE PTR [rdi+104], bl

; 1230 :                       CodeInfo->opnd[OPND1].data32l = CodeInfo->vexconst;

	mov	DWORD PTR [rdi+40], esi

; 1264 :                    }
; 1265 :                   }
; 1266 :                 }
; 1267 :               }
; 1268 :             }
; 1269 :           }

	jmp	SHORT $LN527@output_opc
$LN500@output_opc:
	lea	eax, DWORD PTR [rbp-1340]

; 1270 :           else{
; 1271 :             CodeInfo->tuple = 0;

	mov	BYTE PTR [rdi+140], 0
	cmp	eax, 15
	ja	SHORT $LN527@output_opc

; 1272 :            if (CodeInfo->token >= T_VPGATHERDD && CodeInfo->token <= T_VSCATTERQPD){
; 1273 :               tmp &= ~0xc0;

	and	bl, 63					; 0000003fH

; 1274 :               tmp |= MOD_10;

	or	bl, 128					; 00000080H

; 1275 :               CodeInfo->rm_byte = tmp;

	mov	BYTE PTR [rdi+104], bl
$LN527@output_opc:

; 1276 :             }
; 1277 :           }
; 1278 :         }
; 1279 :         if (CodeInfo->token == T_VCVTPS2PH){

	mov	eax, DWORD PTR [rdi+24]
	cmp	eax, 1428				; 00000594H
	jne	SHORT $LN528@output_opc

; 1280 :           if (!comprdsp) CodeInfo->tuple = 0;

	test	r13b, r13b
	jne	SHORT $LN529@output_opc
	mov	BYTE PTR [rdi+140], r13b
$LN529@output_opc:

; 1281 :           if (CodeInfo->indexreg != 0xFF){

	cmp	BYTE PTR [rdi+112], 255			; 000000ffH
	je	SHORT $LN530@output_opc

; 1282 :             c = CodeInfo->indexreg;
; 1283 :             c = (c &= 0x07) << 3;
; 1284 :             CodeInfo->sib |= c;
; 1285 :             c = CodeInfo->basereg;
; 1286 :             c &= 0x7;
; 1287 :             CodeInfo->sib |= c;
; 1288 :             CodeInfo->sib = 0xf0;

	mov	BYTE PTR [rdi+105], 240			; 000000f0H

; 1289 :             tmp |= RM_SIB;

	or	bl, 4
$LN530@output_opc:

; 1290 :           }
; 1291 :           CodeInfo->rm_byte = tmp;

	mov	BYTE PTR [rdi+104], bl
$LN528@output_opc:

; 1292 :         }
; 1293 :         if (CodeInfo->token == T_BLSMSK){

	cmp	eax, 1676				; 0000068cH
	jne	SHORT $LN531@output_opc

; 1294 :               tmp &= ~0x38;

	and	bl, 215					; 000000d7H

; 1295 :               tmp |= 0x10;

	or	bl, 16
$LN531@output_opc:

; 1296 :             }
; 1297 :         if (CodeInfo->token == T_BLSR){

	cmp	eax, 1677				; 0000068dH
	jne	SHORT $LN532@output_opc

; 1298 :               tmp &= ~0x38;

	and	bl, 207					; 000000cfH

; 1299 :               tmp |= 0x08;

	or	bl, 8
$LN532@output_opc:

; 1300 :             }
; 1301 :         OutputCodeByte( tmp );

	movzx	ecx, bl
	call	OutputByte

; 1302 :         if( ( CodeInfo->Ofssize == USE16 && CodeInfo->prefix.adrsiz == 0 ) ||

	movzx	eax, BYTE PTR [rdi+106]
	test	al, al
	jne	SHORT $LN535@output_opc
	test	BYTE PTR [rdi+9], 1
	je	SHORT $LN19@output_opc
$LN535@output_opc:
	cmp	al, 1
	jne	SHORT $LN533@output_opc
	test	BYTE PTR [rdi+9], al
	jne	SHORT $LN19@output_opc
$LN533@output_opc:

; 1303 :            ( CodeInfo->Ofssize == USE32 && CodeInfo->prefix.adrsiz == 1 ) )
; 1304 :             return; /* no SIB for 16bit */
; 1305 : 
; 1306 :         switch ( tmp & NOT_BIT_345 ) {

	movzx	ecx, bl
	and	ecx, 199				; 000000c7H
	sub	ecx, 4
	je	SHORT $LN536@output_opc
	sub	ecx, 64					; 00000040H
	je	SHORT $LN536@output_opc
	cmp	ecx, 64					; 00000040H
	jne	SHORT $LN19@output_opc
$LN536@output_opc:

; 1307 :         case 0x04: /* mod = 00, r/m = 100, s-i-b is present */
; 1308 :         case 0x44: /* mod = 01, r/m = 100, s-i-b is present */
; 1309 :         case 0x84: /* mod = 10, r/m = 100, s-i-b is present */
; 1310 :             /* emit SIB byte; bits 7-6 = Scale, bits 5-3 = Index, bits 2-0 = Base */
; 1311 :           OutputCodeByte( CodeInfo->sib );

	movzx	ecx, BYTE PTR [rdi+105]
	jmp	SHORT $LN665@output_opc
$LN470@output_opc:

; 1114 :     case no_RM:
; 1115 :         OutputCodeByte( ins->opcode | CodeInfo->iswide );

	movzx	ecx, BYTE PTR [rdi+142]
	and	cl, r14b
$LN663@output_opc:
	or	cl, BYTE PTR [r15+12]
$LN665@output_opc:
	call	OutputByte
$LN19@output_opc:

; 1312 :         }
; 1313 :     }
; 1314 : 
; 1315 :     return;
; 1316 : }

	mov	rbx, QWORD PTR [rsp+88]
	mov	rbp, QWORD PTR [rsp+96]
	mov	rsi, QWORD PTR [rsp+104]
	add	rsp, 32					; 00000020H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
	npad	1
$LN646@output_opc:
	DD	$LN47@output_opc
	DD	$LN49@output_opc
	DD	$LN51@output_opc
	DD	$LN53@output_opc
	DD	$LN56@output_opc
	DD	$LN55@output_opc
	DD	$LN2@output_opc
$LN645@output_opc:
	DB	0
	DB	1
	DB	2
	DB	3
	DB	6
	DB	4
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	DB	4
	npad	2
$LN644@output_opc:
	DD	$LN64@output_opc
	DD	$LN62@output_opc
	DD	$LN63@output_opc
	DD	$LN4@output_opc
$LN643@output_opc:
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	2
	DB	0
	DB	3
	DB	3
	DB	3
	DB	3
	DB	1
	DB	1
	DB	2
	npad	1
$LN642@output_opc:
	DD	$LN74@output_opc
	DD	$LN76@output_opc
	DD	$LN75@output_opc
	DD	$LN6@output_opc
	DD	$LN6@output_opc
	DD	$LN6@output_opc
	DD	$LN6@output_opc
	DD	$LN74@output_opc
	DD	$LN74@output_opc
	DD	$LN76@output_opc
	DD	$LN75@output_opc
$LN641@output_opc:
	DD	$LN94@output_opc
	DD	$LN95@output_opc
	DD	$LN94@output_opc
	DD	$LN95@output_opc
	DD	$LN94@output_opc
	DD	$LN94@output_opc
	DD	$LN95@output_opc
$LN640@output_opc:
	DD	$LN466@output_opc
	DD	$LN12@output_opc
	DD	$LN12@output_opc
	DD	$LN12@output_opc
	DD	$LN12@output_opc
	DD	$LN12@output_opc
	DD	$LN467@output_opc
	DD	$LN468@output_opc
	DD	$LN467@output_opc
	DD	$LN468@output_opc
	DD	$LN467@output_opc
output_opc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
_TEXT	SEGMENT
CodeInfo$ = 48
comprdsp$ = 56
d$ = 64
disp$ = 72
Check4CompDisp8 PROC

; 129  : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	esi, r9d
	mov	rbx, r8
	mov	rdi, rdx

; 130  :     int_32 disp32           = disp;
; 131  :     uint_8 n;
; 132  :     int_32 disp8;
; 133  : 
; 134  :     n = GetByteDisp(CodeInfo);

	call	GetByteDisp

; 135  :     *d = n;

	movzx	ecx, al
	mov	DWORD PTR [rbx], ecx

; 136  :     if (n && !(disp32 & (n - 1))) {

	test	al, al
	je	SHORT $LN3@Check4Comp
	lea	eax, DWORD PTR [rcx-1]
	test	eax, esi
	jne	SHORT $LN3@Check4Comp

; 137  :         disp8 = disp32 / n;

	mov	eax, esi
	cdq
	idiv	ecx

; 138  :         /* if it fits in Disp8 */
; 139  :         if (disp8 >= -128 && disp8 <= 127) {

	lea	ecx, DWORD PTR [rax+128]
	cmp	ecx, 255				; 000000ffH
	ja	SHORT $LN3@Check4Comp

; 140  :             *comprdsp = disp8;

	mov	BYTE PTR [rdi], al

; 141  :             return TRUE;

	mov	al, 1

; 142  :         }
; 143  :     }
; 144  :     *comprdsp = 0;
; 145  :     return FALSE;
; 146  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@Check4Comp:
	mov	rbx, QWORD PTR [rsp+48]
	xor	al, al
	mov	rsi, QWORD PTR [rsp+56]
	mov	BYTE PTR [rdi], 0
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
Check4CompDisp8 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
_TEXT	SEGMENT
fvarr$ = 0
duparr$ = 32
CodeInfo$ = 32
hvarr$ = 40
GetByteDisp PROC

; 67   : {

$LN20:
	push	rbp
	mov	rbp, rsp
	sub	rsp, 16

; 68   :     const uint_8 fvarr[2][2][3] = {{{16, 32, 64}, {4, 4, 4}},    // Full Vector (FV)
; 69   :                                   {{16, 32, 64}, {8, 8, 8}}};
; 70   :     const uint_8 hvarr[2][3]    =  {{8, 16, 32}, {4, 4, 4}};     // Half Vector (HV) 
; 71   :     const uint_8 duparr[3]      =   {8, 32, 64};                 // VMOVDDUP    (DUP)
; 72   :                                                   //RXBR00MM
; 73   :     uint_8 n = 0;
; 74   :     bool evexW            = (CodeInfo->evex_p1 & EVEX_P1WMASK) >> 7;
; 75   :     enum ttypes   tuple   = CodeInfo->pinstr->prefix & 0x1F;

	mov	rax, QWORD PTR [rcx+16]
	xor	dl, dl

; 76   :     bool evexB            = (CodeInfo->evex_p2 & EVEX_P2BMASK) >> 4;

	movzx	r9d, BYTE PTR [rcx+139]
	movzx	r10d, BYTE PTR [rcx+138]
	movzx	r11d, r9b
	shr	r11b, 4
	movzx	r8d, WORD PTR [rax+8]
	and	r11b, 1
	and	r8d, 31

; 77   :     uint_8  vctln         = (CodeInfo->evex_p2 & EVEX_P2LLMASK) >> 5;

	shr	r9b, 5
	shr	r10b, 7
	and	r9b, 3
	mov	DWORD PTR fvarr$[rbp-16], 71311376	; 04402010H
	mov	DWORD PTR fvarr$[rbp-12], 537920516	; 20100404H

; 78   :     
; 79   : 
; 80   :     switch(tuple) {

	lea	eax, DWORD PTR [r8-1]
	mov	DWORD PTR fvarr$[rbp-8], 134744128	; 08080840H
	mov	DWORD PTR hvarr$[rbp-16], 69210120	; 04201008H
	mov	WORD PTR hvarr$[rbp-12], 1028		; 00000404H
	mov	WORD PTR duparr$[rbp-16], 8200		; 00002008H
	mov	BYTE PTR duparr$[rbp-14], 64		; 00000040H
	cmp	eax, 19
	ja	$LN16@GetByteDis
	mov	QWORD PTR [rsp+48], rbx
	lea	rbx, OFFSET FLAT:__ImageBase
	cdqe
	mov	ecx, DWORD PTR $LN18@GetByteDis[rbx+rax*4]
	add	rcx, rbx
	mov	rbx, QWORD PTR [rsp+48]
	jmp	rcx
$LN4@GetByteDis:

; 81   :     case FV:         // Full Vector 
; 82   :         n = fvarr[evexW][evexB][vctln];

	movzx	eax, r11b
	movzx	ecx, r10b
	lea	rcx, QWORD PTR [rax+rcx*2]
	movzx	eax, r9b
	lea	rdx, QWORD PTR [rcx+rcx*2]
	lea	rcx, QWORD PTR fvarr$[rbp-16]
	add	rcx, rax
	movzx	edx, BYTE PTR [rcx+rdx]

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN5@GetByteDis:

; 83   :         break;
; 84   :     case HV:        // Half Vector 
; 85   :         n = hvarr[evexB][vctln];

	movzx	eax, r11b
	lea	rcx, QWORD PTR hvarr$[rbp-16]
	lea	rdx, QWORD PTR [rax+rax*2]
	movzx	eax, r9b
	add	rcx, rax
	movzx	edx, BYTE PTR [rcx+rdx]

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN6@GetByteDis:

; 86   :         break;
; 87   :     case FVM:       // Full Vector Mem
; 88   :         n = 1 << (vctln + 4);

	movzx	ecx, r9b
	mov	edx, 1
	add	ecx, 4
	shl	dl, cl

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN7@GetByteDis:

; 89   :         break;
; 90   :     case T1S8:      // Tuple1 Scalar
; 91   :     case T1S16: 
; 92   :         n = tuple - T1S8 + 1;

	lea	edx, DWORD PTR [r8-3]

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN8@GetByteDis:

; 93   :         break;
; 94   :     case T1S:
; 95   :         n = evexW ? 8 : 4;

	mov	edx, 8
	test	r10b, r10b
	mov	eax, 4
	cmovne	eax, edx
	movzx	edx, al

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN9@GetByteDis:

; 96   :         break;
; 97   :     case T1F32:    // Tuple1 Fixed
; 98   :     case T1F64:
; 99   :         n = (tuple == T1F32 ? 4 : 8);

	mov	eax, 4
	cmp	r8d, 7
	mov	edx, 8
	cmove	edx, eax

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN10@GetByteDis:

; 100  :         break;
; 101  :     case T2:       // Tuple2
; 102  :     case T4:       // Tuple4
; 103  :     case T8:       // Tuple8
; 104  :         if (vctln + 7 <= (evexW + 5) + (tuple - T2 + 1))

	movzx	edx, r10b
	add	edx, r8d
	movzx	ecx, r9b
	add	ecx, 7
	lea	eax, DWORD PTR [rdx-5]
	cmp	ecx, eax
	jg	SHORT $LN11@GetByteDis

; 105  :             n = 0;

	xor	dl, dl

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN11@GetByteDis:

; 106  :         else
; 107  :             n = 1 << (tuple - T2 + evexW + 3);

	lea	ecx, DWORD PTR [rdx-8]
	mov	edx, 1
	shl	dl, cl

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN13@GetByteDis:

; 108  :         break;
; 109  :     case HVM:      // Half Mem
; 110  :     case QVM:      // QuarterMem
; 111  :     case OVM:      // OctMem
; 112  :         n = 1 << (OVM - tuple + vctln + 1);

	movzx	ecx, r9b
	mov	edx, 1
	sub	ecx, r8d
	add	ecx, 17
	shl	dl, cl

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN14@GetByteDis:

; 113  :         break;
; 114  :     case T128:     // Mem128
; 115  :         n = 16;

	mov	dl, 16

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
$LN15@GetByteDis:

; 116  :         break;
; 117  :     case DUP:      // MOVDDUP
; 118  :         n = duparr[vctln];

	movzx	eax, r9b
	movzx	edx, BYTE PTR duparr$[rbp+rax-16]
$LN16@GetByteDis:

; 119  :         break;
; 120  : 
; 121  :     default:
; 122  :         break;
; 123  :     }
; 124  :     return n;

	movzx	eax, dl

; 125  : }

	add	rsp, 16
	pop	rbp
	ret	0
	npad	3
$LN18@GetByteDis:
	DD	$LN4@GetByteDis
	DD	$LN5@GetByteDis
	DD	$LN6@GetByteDis
	DD	$LN7@GetByteDis
	DD	$LN7@GetByteDis
	DD	$LN8@GetByteDis
	DD	$LN9@GetByteDis
	DD	$LN16@GetByteDis
	DD	$LN16@GetByteDis
	DD	$LN9@GetByteDis
	DD	$LN10@GetByteDis
	DD	$LN10@GetByteDis
	DD	$LN10@GetByteDis
	DD	$LN13@GetByteDis
	DD	$LN13@GetByteDis
	DD	$LN13@GetByteDis
	DD	$LN14@GetByteDis
	DD	$LN16@GetByteDis
	DD	$LN16@GetByteDis
	DD	$LN15@GetByteDis
GetByteDisp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\codegen.c
_TEXT	SEGMENT
CodeInfo$ = 48
oldofs$ = 56
codegen	PROC

; 1871 : {

$LN61:
	mov	QWORD PTR [rsp+24], rbx
	push	rsi
	sub	rsp, 32					; 00000020H

; 1872 :     ret_code           retcode = ERROR;
; 1873 :     enum operand_type  opnd1;
; 1874 :     enum operand_type  tbl_op1;
; 1875 :     /* privileged instructions ok? */
; 1876 :     if( ( CodeInfo->pinstr->cpu & P_PM ) > ( ModuleInfo.curr_cpu & P_PM ) ) {

	mov	r8, QWORD PTR [rcx+16]
	or	r10d, -1
	mov	esi, edx
	mov	rbx, rcx
	movzx	r9d, WORD PTR [r8+10]
	mov	r8d, DWORD PTR ModuleInfo+392
	and	r9d, 8
	and	r8d, 8
	cmp	r9b, r8b
	jle	SHORT $LN7@codegen

; 1877 :         EmitError( INSTRUCTION_OR_REGISTER_NOT_ACCEPTED_IN_CURRENT_CPU_MODE );

	lea	ecx, QWORD PTR [r10+31]
	call	EmitError

; 1878 :         return( ERROR );

	or	eax, -1

; 1971 : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN7@codegen:
	mov	QWORD PTR [rsp+48], rdi

; 1879 :     }
; 1880 :     opnd1 = CodeInfo->opnd[OPND1].type;

	mov	edi, DWORD PTR [rcx+32]
	mov	QWORD PTR [rsp+56], r14

; 1881 :     /* if first operand is immediate data, set compatible flags */
; 1882 :     if( opnd1 & OP_I ) {

	test	edi, 917504				; 000e0000H
	je	SHORT $LN11@codegen

; 1883 :         if( opnd1 == OP_I8 ) {

	cmp	edi, 131072				; 00020000H
	jne	SHORT $LN9@codegen

; 1884 :             opnd1 = OP_IGE8;

	mov	edi, 917504				; 000e0000H
	jmp	SHORT $LN11@codegen
$LN9@codegen:

; 1885 :         } else if( opnd1 == OP_I16 ) {

	cmp	edi, 262144				; 00040000H
	mov	eax, 786432				; 000c0000H
	cmove	edi, eax
$LN11@codegen:

; 1886 :             opnd1 = OP_IGE16;
; 1887 :         }
; 1888 :     }
; 1889 : 
; 1890 : #if AVXSUPP 
; 1891 : 	if (CodeInfo->token >= VEX_START) {

	movsxd	rdx, DWORD PTR [rcx+24]
	lea	r14, OFFSET FLAT:__ImageBase
	cmp	edx, 1291				; 0000050bH
	jl	$LL4@codegen

; 1892 : 		if (vex_flags[CodeInfo->token - VEX_START] & VX_L) {

	movzx	ecx, BYTE PTR vex_flags[rdx+r14-1291]
	test	cl, 1
	je	SHORT $LN17@codegen

; 1893 : 			if (opnd1 & (OP_K | OP_ZMM | OP_YMM | OP_M256 | OP_M512)) {

	test	edi, 805306816				; 300001c0H
	je	SHORT $LN17@codegen

; 1894 : 				if (CodeInfo->opnd[OPND2].type & OP_XMM && !(vex_flags[CodeInfo->token - VEX_START] & VX_HALF)) {

	test	BYTE PTR [rbx+56], 32			; 00000020H
	je	SHORT $LN15@codegen
	test	cl, 32					; 00000020H
	jne	SHORT $LN15@codegen

; 1895 : 					EmitErr(INVALID_INSTRUCTION_OPERANDS);

	mov	ecx, 49					; 00000031H
	call	EmitErr

; 1896 : 					return(ERROR);

	jmp	$LN59@codegen
$LN15@codegen:
	mov	ecx, edi
	mov	eax, edi

; 1897 : 				}
; 1898 : 				if (opnd1 & OP_YMM || opnd1 & OP_K || opnd1 & OP_ZMM)
; 1899 : 					opnd1 |= OP_XMM;
; 1900 : 				else
; 1901 : 					opnd1 |= OP_M128;

	bts	ecx, 27
	or	edi, 32					; 00000020H
	test	eax, 448				; 000001c0H
	cmove	edi, ecx
$LN17@codegen:
	lea	eax, DWORD PTR [rdx-1757]
	cmp	eax, 131				; 00000083H
	jbe	SHORT $LN20@codegen
	lea	eax, DWORD PTR [rdx-1446]
	cmp	eax, 189				; 000000bdH
	jbe	SHORT $LN20@codegen
	lea	eax, DWORD PTR [rdx-2010]
	cmp	eax, 70					; 00000046H
	jbe	SHORT $LN20@codegen
	lea	eax, DWORD PTR [rdx-1294]
	cmp	eax, 45					; 0000002dH
	ja	SHORT $LN48@codegen
	mov	rcx, 69269232558079			; 00003f0000001fffH
	bt	rcx, rax
	jb	SHORT $LN20@codegen
$LN48@codegen:
	lea	eax, DWORD PTR [rdx-1427]
	cmp	eax, 1
	jbe	SHORT $LN20@codegen
	lea	eax, DWORD PTR [rdx-1642]
	cmp	eax, 4
	ja	SHORT $LL4@codegen
$LN20@codegen:

; 1902 : 			}
; 1903 : 		}
; 1904 : 		/* Here is probably possible to find better solution     */
; 1905 : 
; 1906 :       if ((CodeInfo->token >= T_VCMPPD && CodeInfo->token <= T_VCMPTRUE_USSS) ||     //1754        1885                  
; 1907 :         (CodeInfo->token >= T_VPCMPD) && (CodeInfo->token <= T_VINSERTI64x4) ||          //1446        1635         
; 1908 :         (CodeInfo->token >= T_VPMOVSXBD) && (CodeInfo->token <= T_VUNPCKLPS) ||        //2007        2077            
; 1909 :         (CodeInfo->token >= T_VPBROADCASTB && CodeInfo->token <= T_VBROADCASTF64x4) || //1294        1306
; 1910 :         (CodeInfo->token == T_VCVTPS2PH) || (CodeInfo->token == T_VCVTPH2PS) ||          //1428        1427
; 1911 :         (CodeInfo->token == T_VMOVDDUP) ||                                             //1339        
; 1912 :         (CodeInfo->token >= T_VDBPSADBW) && (CodeInfo->token <= T_VFPCLASSSS) ||         //1642        1646
; 1913 :         (CodeInfo->token >= T_VCVTPD2DQ) && (CodeInfo->token <= T_VMOVDDUP))            //1334        1339 
; 1914 :         opnd1 |= OP_XMM;

	or	edi, 32					; 00000020H
	npad	4
$LL4@codegen:

; 1915 :     }
; 1916 : #endif
; 1917 : 
; 1918 : #if AMD64_SUPPORT
; 1919 :     DebugMsg1(("codegen(ofs=%X): %s opnd1=%X codeinfo: ofssize=%u wide=%u rm=%Xh sib=%Xh rex=%Xh opsiz=%u\n",
; 1920 :                CurrSeg->sym.offset, GetResWName( CodeInfo->token, NULL ),
; 1921 :                opnd1, CodeInfo->Ofssize, CodeInfo->iswide,
; 1922 :                CodeInfo->rm_byte, CodeInfo->sib,
; 1923 :                CodeInfo->prefix.rex, CodeInfo->prefix.opsiz ));
; 1924 : #endif
; 1925 :     /* scan the instruction table for a matching first operand */
; 1926 :     do  {
; 1927 :         tbl_op1 = opnd_clstab[CodeInfo->pinstr->opclsidx].opnd_type[OPND1];

	mov	rax, QWORD PTR [rbx+16]
	movzx	ecx, BYTE PTR [rax]
	lea	rax, QWORD PTR [rcx+rcx*2]
	mov	edx, DWORD PTR opnd_clstab[r14+rax*4]

; 1928 : 
; 1929 :         //DebugMsg1(("codegen: table.op1=%X\n", tbl_op1 ));
; 1930 :         /* v2.06: simplified */
; 1931 :         if ( tbl_op1 == OP_NONE && opnd1 == OP_NONE ) {

	test	edx, edx
	jne	SHORT $LN26@codegen
	test	edi, edi
	je	$LN40@codegen
$LN26@codegen:

; 1936 :         } else if ( opnd1 & tbl_op1 ) {

	test	edx, edi
	je	SHORT $LN36@codegen
	lea	eax, DWORD PTR [rdx-262144]
	test	eax, -262145				; fffbffffH
	je	SHORT $LN30@codegen

; 1937 :             /* for immediate operands, the idata type has sometimes
; 1938 :              * to be modified in opnd_type[OPND1], to make output_data()
; 1939 :              * emit the correct number of bytes. */
; 1940 :             switch( tbl_op1 ) {

	cmp	edx, 4325377				; 00420001H
	je	SHORT $LN33@codegen
	cmp	edx, 5111808				; 004e0000H
	je	SHORT $LN31@codegen

; 1953 :                 }
; 1954 :                 break;
; 1955 :             default:
; 1956 :                 retcode = check_operand_2( CodeInfo, CodeInfo->opnd[OPND1].type );

	mov	edx, DWORD PTR [rbx+32]
	jmp	SHORT $LN30@codegen
$LN31@codegen:
	mov	eax, DWORD PTR [rbx+40]
	sub	eax, -128				; ffffffffffffff80H
	cmp	eax, 383				; 0000017fH
	ja	SHORT $LN5@codegen

; 1944 :                 break;
; 1945 :             case OP_I8_U: /* INT xx; OUT xx, AL */
; 1946 :                 if( CodeInfo->opnd[OPND1].data32l <= UCHAR_MAX && CodeInfo->opnd[OPND1].data32l >= SCHAR_MIN ) {
; 1947 :                     retcode = check_operand_2( CodeInfo, OP_I8 );

	mov	edx, 131072				; 00020000H

; 1948 :                 }
; 1949 :                 break;

	jmp	SHORT $LN30@codegen
$LN33@codegen:

; 1950 :             case OP_I_3: /* INT 3 */
; 1951 :                 if ( CodeInfo->opnd[OPND1].data32l == 3 ) {

	cmp	DWORD PTR [rbx+40], 3
	jne	SHORT $LN5@codegen

; 1952 :                     retcode = check_operand_2( CodeInfo, OP_NONE );

	xor	edx, edx
$LN30@codegen:

; 1941 :             case OP_I32: /* CALL, JMP, PUSHD */
; 1942 :             case OP_I16: /* CALL, JMP, RETx, ENTER, PUSHW */
; 1943 :                 retcode = check_operand_2( CodeInfo, tbl_op1 );

	mov	rcx, rbx
	call	check_operand_2
	mov	r10d, eax
$LN5@codegen:

; 1957 :                 break;
; 1958 :             }
; 1959 :             if( retcode == NOT_ERROR) {

	test	r10d, r10d
	je	SHORT $LN42@codegen
$LN36@codegen:

; 1960 :                 if ( CurrFile[LST] )
; 1961 :                     LstWrite( LSTTYPE_CODE, oldofs, NULL );
; 1962 :                 return( NOT_ERROR );
; 1963 :             }
; 1964 :         }
; 1965 :         CodeInfo->pinstr++;

	add	QWORD PTR [rbx+16], 14
	mov	rax, QWORD PTR [rbx+16]

; 1966 :     } while ( CodeInfo->pinstr->first == FALSE );

	cmp	BYTE PTR [rax+4], 0
	je	SHORT $LL4@codegen

; 1967 : 
; 1968 :     DebugMsg(("codegen: no matching format found\n"));
; 1969 :     EmitError( INVALID_INSTRUCTION_OPERANDS );

	mov	ecx, 49					; 00000031H
	call	EmitError
$LN59@codegen:

; 1970 :     return( ERROR );

	or	eax, -1
$LN58@codegen:
	mov	rdi, QWORD PTR [rsp+48]
	mov	r14, QWORD PTR [rsp+56]

; 1971 : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN40@codegen:

; 1932 :             output_opc( CodeInfo );

	mov	rcx, rbx
	call	output_opc
$LN42@codegen:

; 1933 :             if ( CurrFile[LST] )

	cmp	QWORD PTR ModuleInfo+112, 0
	je	SHORT $LN37@codegen

; 1934 :                 LstWrite( LSTTYPE_CODE, oldofs, NULL );

	xor	r8d, r8d
	mov	edx, esi
	lea	ecx, QWORD PTR [r8+1]
	call	LstWrite
$LN37@codegen:

; 1935 :             return( NOT_ERROR );

	xor	eax, eax
	jmp	SHORT $LN58@codegen
codegen	ENDP
_TEXT	ENDS
END
