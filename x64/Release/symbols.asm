; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

EXTRN	ModuleInfo:BYTE
EXTRN	FileCur:QWORD
EXTRN	LineCur:QWORD
EXTRN	symCurSeg:QWORD
EXTRN	UpdateLineNumber:PROC
EXTRN	UpdateWordSize:PROC
EXTRN	UpdateCurPC:PROC
_DATA	SEGMENT
COMM	SymCmpFunc:QWORD
COMM	decoflags:BYTE
COMM	broadflags:BYTE
_DATA	ENDS
_BSS	SEGMENT
szDate	DB	0cH DUP (?)
szTime	DB	0cH DUP (?)
symPC	DQ	01H DUP (?)
$SG11019 DB	01H DUP (?)
	ALIGN	4

$SG11080 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG11012 DB	'@Version', 00H
	ORG $+3
$SG11013 DB	'800', 00H
$SG11014 DB	'@Date', 00H
	ORG $+2
$SG11015 DB	'@Time', 00H
	ORG $+2
$SG11016 DB	'@FileName', 00H
	ORG $+2
$SG11032 DB	'$', 00H
	ORG $+2
$SG11017 DB	'@FileCur', 00H
	ORG $+3
$SG11033 DB	'@Line', 00H
	ORG $+6
$SG11018 DB	'@CurSeg', 00H
$SG11031 DB	'__HJWASM__', 00H
	ORG $+5
$SG11034 DB	'@WordSize', 00H
	ORG $+6
$SG11191 DB	'%02u/%02u/%02u', 00H
	ORG $+1
$SG11192 DB	'%02u:%02u:%02u', 00H
_DATA	ENDS
CONST	SEGMENT
tmtab	DQ	FLAT:$SG11012
	DQ	FLAT:$SG11013
	DQ	0000000000000000H
	DQ	FLAT:$SG11014
	DQ	FLAT:szDate
	DQ	0000000000000000H
	DQ	FLAT:$SG11015
	DQ	FLAT:szTime
	DQ	0000000000000000H
	DQ	FLAT:$SG11016
	DQ	FLAT:ModuleInfo+512
	DQ	0000000000000000H
	DQ	FLAT:$SG11017
	DQ	0000000000000000H
	DQ	FLAT:FileCur
	DQ	FLAT:$SG11018
	DQ	FLAT:$SG11019
	DQ	FLAT:symCurSeg
eqtab	DQ	FLAT:$SG11031
	DD	0d5H
	ORG $+4
	DQ	0000000000000000H
	DQ	0000000000000000H
	DQ	FLAT:$SG11032
	DD	00H
	ORG $+4
	DQ	FLAT:UpdateCurPC
	DQ	FLAT:symPC
	DQ	FLAT:$SG11033
	DD	00H
	ORG $+4
	DQ	FLAT:UpdateLineNumber
	DQ	FLAT:LineCur
	DQ	FLAT:$SG11034
	DD	00H
	ORG $+4
	DQ	FLAT:UpdateWordSize
	DQ	0000000000000000H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	sprintf
PUBLIC	SymAlloc
PUBLIC	SymFree
PUBLIC	SymCreate
PUBLIC	SymLCreate
PUBLIC	SymAddGlobal
PUBLIC	SymAddLocal
PUBLIC	SymLookup
PUBLIC	SymLookupLocal
PUBLIC	SymFind
PUBLIC	SymInit
PUBLIC	SymFini
PUBLIC	SymPassInit
PUBLIC	SymMakeAllSymbolsPublic
PUBLIC	SymGetAll
PUBLIC	SymEnum
PUBLIC	SymGetCount
PUBLIC	SymSetCmpFunc
PUBLIC	SymClearLocal
PUBLIC	SymSetLocal
PUBLIC	SymGetLocal
EXTRN	memcmp:PROC
EXTRN	_localtime64:PROC
EXTRN	_time64:PROC
EXTRN	__stdio_common_vsprintf:PROC
EXTRN	_memicmp:PROC
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	LclAlloc:PROC
EXTRN	DeleteGroup:PROC
EXTRN	AddPublicData:PROC
EXTRN	ReleaseMacroData:PROC
EXTRN	DeleteType:PROC
EXTRN	DeleteProc:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	UseSavedState:BYTE
EXTRN	CurrProc:QWORD
EXTRN	__ImageBase:BYTE
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	8

gsym_table DQ	01f49H DUP (?)
lsym_table DQ	07fH DUP (?)
gsym	DQ	01H DUP (?)
lsym	DQ	01H DUP (?)
SymCount DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN6
	DD	imagerel $LN6+98
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN8
	DD	imagerel $LN8+90
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$SymAlloc DD imagerel $LN9
	DD	imagerel $LN9+201
	DD	imagerel $unwind$SymAlloc
$pdata$SymCreate DD imagerel $LN5
	DD	imagerel $LN5+70
	DD	imagerel $unwind$SymCreate
$pdata$SymLCreate DD imagerel $LN5
	DD	imagerel $LN5+70
	DD	imagerel $unwind$SymLCreate
$pdata$SymAddGlobal DD imagerel $LN5
	DD	imagerel $LN5+77
	DD	imagerel $unwind$SymAddGlobal
$pdata$SymAddLocal DD imagerel $LN6
	DD	imagerel $LN6+145
	DD	imagerel $unwind$SymAddLocal
$pdata$SymLookup DD imagerel $LN6
	DD	imagerel $LN6+49
	DD	imagerel $unwind$SymLookup
$pdata$SymLookupLocal DD imagerel $LN9
	DD	imagerel $LN9+111
	DD	imagerel $unwind$SymLookupLocal
$pdata$SymFind DD imagerel $LN35
	DD	imagerel $LN35+391
	DD	imagerel $unwind$SymFind
$pdata$SymInit DD imagerel $LN30
	DD	imagerel $LN30+466
	DD	imagerel $unwind$SymInit
$pdata$SymMakeAllSymbolsPublic DD imagerel $LN19
	DD	imagerel $LN19+122
	DD	imagerel $unwind$SymMakeAllSymbolsPublic
$pdata$SymSetLocal DD imagerel $LN22
	DD	imagerel $LN22+154
	DD	imagerel $unwind$SymSetLocal
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$free_ext DD imagerel free_ext
	DD	imagerel free_ext+172
	DD	imagerel $unwind$free_ext
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$free_ext DD 020601H
	DD	030023206H
xdata	ENDS
xdata	SEGMENT
$unwind$SymAlloc DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SymCreate DD 020601H
	DD	030023206H
$unwind$SymLCreate DD 020601H
	DD	030023206H
$unwind$SymAddGlobal DD 020601H
	DD	030023206H
$unwind$SymAddLocal DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$SymLookup DD 020601H
	DD	030023206H
$unwind$SymLookupLocal DD 020601H
	DD	030023206H
$unwind$SymFind DD 081501H
	DD	087415H
	DD	076415H
	DD	063415H
	DD	0e0113215H
$unwind$SymInit DD 060f01H
	DD	0a640fH
	DD	09340fH
	DD	0700b520fH
$unwind$SymMakeAllSymbolsPublic DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SymSetLocal DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
;	COMDAT free_ext
_TEXT	SEGMENT
sym$ = 48
free_ext PROC						; COMDAT

; 359  : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 360  :     DebugMsg(("free_ext: item=%p name=%s state=%u\n", sym, sym->name, sym->state ));
; 361  :     switch( sym->state ) {

	mov	eax, DWORD PTR [rcx+32]
	mov	rbx, rcx
	dec	eax
	cmp	eax, 9
	ja	SHORT $LN13@free_ext
	lea	rcx, OFFSET FLAT:__ImageBase
	cdqe
	mov	edx, DWORD PTR $LN16@free_ext[rcx+rax*4]
	add	rdx, rcx
	jmp	rdx
$LN4@free_ext:

; 362  :     case SYM_INTERNAL:
; 363  :         if ( sym->isproc )

	test	BYTE PTR [rbx+41], 8
	je	SHORT $LN13@free_ext

; 364  :             DeleteProc( (struct dsym *)sym );

	mov	rcx, rbx

; 393  :         LclFree( ((struct dsym *)sym)->e.macroinfo );
; 394  :         break;
; 395  :     case SYM_TMACRO:
; 396  :         if ( sym->predefined == FALSE )
; 397  :             LclFree( sym->string_ptr );
; 398  :         break;
; 399  : #ifdef DEBUG_OUT 
; 400  :     case SYM_STACK:
; 401  :         /* to be removed, this can't happen anymore. */
; 402  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) { 
; 403  :             DebugMsg(( "free_ext: case SYM_STACK, sym=%s with private type\n", sym->name ));
; 404  :             /* symbol has a "private" type */
; 405  :             SymFree( sym->type );
; 406  :         }
; 407  :         break;
; 408  : #endif
; 409  :     }
; 410  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 364  :             DeleteProc( (struct dsym *)sym );

	jmp	DeleteProc
$LN6@free_ext:

; 365  :         break;
; 366  :     case SYM_EXTERNAL:
; 367  :         if ( sym->isproc )

	test	BYTE PTR [rbx+41], 8
	je	SHORT $LN7@free_ext

; 368  :             DeleteProc( (struct dsym *)sym );

	mov	rcx, rbx
	call	DeleteProc
$LN7@free_ext:

; 369  :         sym->first_size = 0;

	mov	DWORD PTR [rbx+44], 0

; 393  :         LclFree( ((struct dsym *)sym)->e.macroinfo );
; 394  :         break;
; 395  :     case SYM_TMACRO:
; 396  :         if ( sym->predefined == FALSE )
; 397  :             LclFree( sym->string_ptr );
; 398  :         break;
; 399  : #ifdef DEBUG_OUT 
; 400  :     case SYM_STACK:
; 401  :         /* to be removed, this can't happen anymore. */
; 402  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) { 
; 403  :             DebugMsg(( "free_ext: case SYM_STACK, sym=%s with private type\n", sym->name ));
; 404  :             /* symbol has a "private" type */
; 405  :             SymFree( sym->type );
; 406  :         }
; 407  :         break;
; 408  : #endif
; 409  :     }
; 410  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN10@free_ext:

; 370  :         /* The altname field may contain a symbol (if weak == FALSE).
; 371  :          * However, this is an independant item and must not be released here
; 372  :          */
; 373  : #ifdef DEBUG_OUT /* to be removed, this can't happen anymore. */
; 374  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) {
; 375  :             DebugMsg(( "free_ext: external with private type: %s\n", sym->name ));
; 376  :             SymFree( sym->type );
; 377  :         }
; 378  : #endif
; 379  :         break;
; 380  :     case SYM_SEG:
; 381  :         if ( ((struct dsym *)sym)->e.seginfo->internal )
; 382  :             LclFree( ((struct dsym *)sym)->e.seginfo->CodeBuffer );
; 383  :         LclFree( ((struct dsym *)sym)->e.seginfo );
; 384  :         break;
; 385  :     case SYM_GRP:
; 386  :         DeleteGroup( (struct dsym *)sym );

	mov	rcx, rbx

; 393  :         LclFree( ((struct dsym *)sym)->e.macroinfo );
; 394  :         break;
; 395  :     case SYM_TMACRO:
; 396  :         if ( sym->predefined == FALSE )
; 397  :             LclFree( sym->string_ptr );
; 398  :         break;
; 399  : #ifdef DEBUG_OUT 
; 400  :     case SYM_STACK:
; 401  :         /* to be removed, this can't happen anymore. */
; 402  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) { 
; 403  :             DebugMsg(( "free_ext: case SYM_STACK, sym=%s with private type\n", sym->name ));
; 404  :             /* symbol has a "private" type */
; 405  :             SymFree( sym->type );
; 406  :         }
; 407  :         break;
; 408  : #endif
; 409  :     }
; 410  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 370  :         /* The altname field may contain a symbol (if weak == FALSE).
; 371  :          * However, this is an independant item and must not be released here
; 372  :          */
; 373  : #ifdef DEBUG_OUT /* to be removed, this can't happen anymore. */
; 374  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) {
; 375  :             DebugMsg(( "free_ext: external with private type: %s\n", sym->name ));
; 376  :             SymFree( sym->type );
; 377  :         }
; 378  : #endif
; 379  :         break;
; 380  :     case SYM_SEG:
; 381  :         if ( ((struct dsym *)sym)->e.seginfo->internal )
; 382  :             LclFree( ((struct dsym *)sym)->e.seginfo->CodeBuffer );
; 383  :         LclFree( ((struct dsym *)sym)->e.seginfo );
; 384  :         break;
; 385  :     case SYM_GRP:
; 386  :         DeleteGroup( (struct dsym *)sym );

	jmp	DeleteGroup
$LN11@free_ext:

; 387  :         break;
; 388  :     case SYM_TYPE:
; 389  :         DeleteType( (struct dsym *)sym );

	mov	rcx, rbx

; 393  :         LclFree( ((struct dsym *)sym)->e.macroinfo );
; 394  :         break;
; 395  :     case SYM_TMACRO:
; 396  :         if ( sym->predefined == FALSE )
; 397  :             LclFree( sym->string_ptr );
; 398  :         break;
; 399  : #ifdef DEBUG_OUT 
; 400  :     case SYM_STACK:
; 401  :         /* to be removed, this can't happen anymore. */
; 402  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) { 
; 403  :             DebugMsg(( "free_ext: case SYM_STACK, sym=%s with private type\n", sym->name ));
; 404  :             /* symbol has a "private" type */
; 405  :             SymFree( sym->type );
; 406  :         }
; 407  :         break;
; 408  : #endif
; 409  :     }
; 410  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 387  :         break;
; 388  :     case SYM_TYPE:
; 389  :         DeleteType( (struct dsym *)sym );

	jmp	DeleteType
$LN12@free_ext:

; 390  :         break;
; 391  :     case SYM_MACRO:
; 392  :         ReleaseMacroData( (struct dsym *)sym );

	mov	rcx, rbx

; 393  :         LclFree( ((struct dsym *)sym)->e.macroinfo );
; 394  :         break;
; 395  :     case SYM_TMACRO:
; 396  :         if ( sym->predefined == FALSE )
; 397  :             LclFree( sym->string_ptr );
; 398  :         break;
; 399  : #ifdef DEBUG_OUT 
; 400  :     case SYM_STACK:
; 401  :         /* to be removed, this can't happen anymore. */
; 402  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) { 
; 403  :             DebugMsg(( "free_ext: case SYM_STACK, sym=%s with private type\n", sym->name ));
; 404  :             /* symbol has a "private" type */
; 405  :             SymFree( sym->type );
; 406  :         }
; 407  :         break;
; 408  : #endif
; 409  :     }
; 410  : }

	add	rsp, 32					; 00000020H
	pop	rbx

; 390  :         break;
; 391  :     case SYM_MACRO:
; 392  :         ReleaseMacroData( (struct dsym *)sym );

	jmp	ReleaseMacroData
$LN13@free_ext:

; 393  :         LclFree( ((struct dsym *)sym)->e.macroinfo );
; 394  :         break;
; 395  :     case SYM_TMACRO:
; 396  :         if ( sym->predefined == FALSE )
; 397  :             LclFree( sym->string_ptr );
; 398  :         break;
; 399  : #ifdef DEBUG_OUT 
; 400  :     case SYM_STACK:
; 401  :         /* to be removed, this can't happen anymore. */
; 402  :         if ( sym->mem_type == MT_TYPE && *sym->type->name == NULLC ) { 
; 403  :             DebugMsg(( "free_ext: case SYM_STACK, sym=%s with private type\n", sym->name ));
; 404  :             /* symbol has a "private" type */
; 405  :             SymFree( sym->type );
; 406  :         }
; 407  :         break;
; 408  : #endif
; 409  :     }
; 410  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
	npad	1
$LN16@free_ext:
	DD	$LN4@free_ext
	DD	$LN6@free_ext
	DD	$LN13@free_ext
	DD	$LN10@free_ext
	DD	$LN13@free_ext
	DD	$LN13@free_ext
	DD	$LN11@free_ext
	DD	$LN13@free_ext
	DD	$LN12@free_ext
	DD	$LN13@free_ext
free_ext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
;	COMDAT hashpjw
_TEXT	SEGMENT
s$ = 8
hashpjw	PROC						; COMDAT

; 148  : {

	mov	r9, rcx

; 149  :     unsigned h;
; 150  :     unsigned g;
; 151  : 
; 152  : #if HASH_MAGNITUDE==12
; 153  :     for( h = 0; *s; ++s ) {
; 154  :         h = (h << 4) + (*s | ' ');
; 155  :         g = h & ~0x0fff;
; 156  :         h ^= g;
; 157  :         h ^= g >> 12;
; 158  :     }
; 159  : #else
; 160  :     for( h = 0; *s; ++s ) {

	xor	eax, eax
	movzx	ecx, BYTE PTR [rcx]
	test	cl, cl
	je	SHORT $LN10@hashpjw
	npad	4
$LL4@hashpjw:

; 161  :         h = (h << 5) + (*s | ' ');

	movsx	r8d, cl
	lea	r9, QWORD PTR [r9+1]
	shl	eax, 5
	or	r8d, 32					; 00000020H
	add	eax, r8d

; 162  :         g = h & ~0x7fff;

	mov	edx, eax
	and	edx, -32768				; ffff8000H

; 163  :         h ^= g;
; 164  :         h ^= g >> 15;

	mov	ecx, edx
	shr	ecx, 15
	xor	ecx, edx
	xor	eax, ecx
	movzx	ecx, BYTE PTR [r9]
	test	cl, cl
	jne	SHORT $LL4@hashpjw
$LN10@hashpjw:

; 165  :     }
; 166  : #endif
; 167  :     return( h );
; 168  : }

	ret	0
hashpjw	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
proc$ = 8
SymGetLocal PROC

; 191  :     int i;
; 192  :     struct dsym  **l = &((struct dsym *)proc)->e.procinfo->labellist;

	mov	r8, QWORD PTR [rcx+96]
	lea	rax, OFFSET FLAT:lsym_table
	add	r8, 24
	mov	edx, 127				; 0000007fH
$LL4@SymGetLoca:

; 195  :         if ( lsym_table[i] ) {

	mov	rcx, QWORD PTR [rax]
	test	rcx, rcx
	je	SHORT $LN2@SymGetLoca

; 196  :             *l = (struct dsym *)lsym_table[i];

	mov	QWORD PTR [r8], rcx

; 197  :             l = &(*l)->e.nextll;

	lea	r8, QWORD PTR [rcx+96]
$LN2@SymGetLoca:

; 193  : 
; 194  :     for ( i = 0; i < LHASH_TABLE_SIZE; i++ ) {

	add	rax, 8
	sub	rdx, 1
	jne	SHORT $LL4@SymGetLoca

; 198  :         }
; 199  :     }
; 200  :     *l = NULL;

	mov	QWORD PTR [r8], rdx

; 201  : 
; 202  :     return;
; 203  : }

	ret	0
SymGetLocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
proc$ = 48
SymSetLocal PROC

; 213  : {

$LN22:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 214  :     int i;
; 215  :     struct dsym *l;
; 216  : 
; 217  :     SymClearLocal();

	lea	rdi, OFFSET FLAT:lsym_table
	mov	rcx, rdi
	xor	edx, edx
	mov	r8d, 1016				; 000003f8H
	call	memset

; 218  :     for ( l = ((struct dsym *)proc)->e.procinfo->labellist; l; l = l->e.nextll ) {

	mov	rax, QWORD PTR [rbx+96]
	mov	r9, QWORD PTR [rax+24]
	test	r9, r9
	je	SHORT $LN3@SymSetLoca
$LL4@SymSetLoca:

; 219  :         DebugMsg1(("SymSetLocal(%s): label=%s\n", proc->name, l->sym.name ));
; 220  :         i = hashpjw( l->sym.name ) % LHASH_TABLE_SIZE;

	mov	r8, QWORD PTR [r9+8]
	xor	ecx, ecx
	movzx	eax, BYTE PTR [r8]
	test	al, al
	je	SHORT $LN10@SymSetLoca
	npad	1
$LL11@SymSetLoca:
	movsx	edx, al
	lea	r8, QWORD PTR [r8+1]
	or	edx, 32					; 00000020H
	shl	ecx, 5
	add	ecx, edx
	mov	edx, ecx
	and	edx, -32768				; ffff8000H
	mov	eax, edx
	shr	eax, 15
	xor	eax, edx
	xor	ecx, eax
	movzx	eax, BYTE PTR [r8]
	test	al, al
	jne	SHORT $LL11@SymSetLoca
$LN10@SymSetLoca:
	mov	eax, 33818641				; 02040811H
	mul	ecx
	mov	eax, ecx
	sub	eax, edx
	shr	eax, 1
	add	eax, edx
	shr	eax, 6
	imul	eax, eax, 127				; 0000007fH
	sub	ecx, eax

; 221  :         lsym_table[i] = &l->sym;

	movsxd	rax, ecx
	mov	QWORD PTR [rdi+rax*8], r9
	mov	r9, QWORD PTR [r9+96]
	test	r9, r9
	jne	SHORT $LL4@SymSetLoca
$LN3@SymSetLoca:

; 222  :     }
; 223  :     return;
; 224  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SymSetLocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
SymClearLocal PROC

; 182  :     memset( &lsym_table, 0, sizeof( lsym_table ) );

	xor	edx, edx
	lea	rcx, OFFSET FLAT:lsym_table
	mov	r8d, 1016				; 000003f8H
	jmp	memset
SymClearLocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
SymSetCmpFunc PROC

; 173  :     SymCmpFunc = ( ModuleInfo.case_sensitive == TRUE ? memcmp : (StrCmpFunc)_memicmp );

	mov	eax, DWORD PTR ModuleInfo+408
	lea	rcx, OFFSET FLAT:_memicmp
	and	al, 1
	lea	rdx, OFFSET FLAT:memcmp
	cmovne	rcx, rdx
	mov	QWORD PTR SymCmpFunc, rcx

; 174  :     return;
; 175  : }

	ret	0
SymSetCmpFunc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
SymGetCount PROC

; 689  :     return( SymCount );

	mov	eax, DWORD PTR SymCount

; 690  : }

	ret	0
SymGetCount ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
sym$ = 8
pi$ = 16
SymEnum	PROC

; 716  :     if ( sym == NULL ) {

	test	rcx, rcx
	jne	SHORT $LN4@SymEnum

; 717  :         *pi = 0;

	mov	DWORD PTR [rdx], ecx

; 718  :         sym = gsym_table[*pi];

	mov	rax, QWORD PTR gsym_table

; 719  :     } else {

	jmp	SHORT $LN7@SymEnum
$LN4@SymEnum:

; 720  :         sym = sym->nextitem;

	mov	rax, QWORD PTR [rcx]
$LN7@SymEnum:

; 721  :     }
; 722  : 
; 723  :     /* v2.10: changed from for() to while() */
; 724  :     while( sym == NULL && *pi < GHASH_TABLE_SIZE - 1 )

	test	rax, rax
	jne	SHORT $LN11@SymEnum
	lea	r8, OFFSET FLAT:gsym_table
	npad	1
$LL2@SymEnum:
	mov	ecx, DWORD PTR [rdx]
	cmp	ecx, 8008				; 00001f48H
	jge	SHORT $LN11@SymEnum

; 725  :         sym = gsym_table[++(*pi)];

	lea	eax, DWORD PTR [rcx+1]
	movsxd	rcx, eax
	mov	DWORD PTR [rdx], eax
	mov	rax, QWORD PTR [r8+rcx*8]
	test	rax, rax
	je	SHORT $LL2@SymEnum
$LN11@SymEnum:

; 726  : 
; 727  :     //printf("sym=%X, i=%u\n", sym, *pi );
; 728  :     return( sym );
; 729  : }

	ret	0
SymEnum	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
syms$ = 8
SymGetAll PROC

; 697  :     struct asym         *sym;
; 698  :     unsigned            i, j;
; 699  : 
; 700  :     /* copy symbols to table */
; 701  :     for( i = j = 0; i < GHASH_TABLE_SIZE; i++ ) {

	xor	r8d, r8d
	lea	r9, OFFSET FLAT:gsym_table
	mov	r10d, 8009				; 00001f49H
$LL4@SymGetAll:

; 702  :         for( sym = gsym_table[i]; sym; sym = sym->nextitem ) {

	mov	rax, QWORD PTR [r9]
	test	rax, rax
	je	SHORT $LN2@SymGetAll
	npad	8
$LL7@SymGetAll:

; 703  :             syms[j++] = sym;

	mov	QWORD PTR [rcx+r8*8], rax
	inc	r8d
	mov	rax, QWORD PTR [rax]
	test	rax, rax
	jne	SHORT $LL7@SymGetAll
$LN2@SymGetAll:

; 697  :     struct asym         *sym;
; 698  :     unsigned            i, j;
; 699  : 
; 700  :     /* copy symbols to table */
; 701  :     for( i = j = 0; i < GHASH_TABLE_SIZE; i++ ) {

	add	r9, 8
	sub	r10, 1
	jne	SHORT $LL4@SymGetAll

; 704  :         }
; 705  :     }
; 706  :     return;
; 707  : }

	ret	0
SymGetAll ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
SymMakeAllSymbolsPublic PROC

; 522  : {

$LN19:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 523  :     int i;
; 524  :     struct asym  *sym;
; 525  : 
; 526  :     for( i = 0; i < GHASH_TABLE_SIZE; i++ ) {

	lea	rdi, OFFSET FLAT:gsym_table
	lea	rsi, OFFSET FLAT:gsym_table+64072
	npad	3
$LL4@SymMakeAll:

; 527  :         for( sym = gsym_table[i]; sym; sym = sym->nextitem ) {

	mov	rbx, QWORD PTR [rdi]
	test	rbx, rbx
	je	SHORT $LN2@SymMakeAll
$LL7@SymMakeAll:

; 528  :             if ( sym->state == SYM_INTERNAL &&
; 529  :                 /* v2.07: MT_ABS is obsolete */
; 530  :                 //sym->mem_type != MT_ABS &&  /* no EQU or '=' constants */
; 531  :                 sym->isequate == FALSE &&     /* no EQU or '=' constants */
; 532  :                 sym->predefined == FALSE && /* no predefined symbols ($) */
; 533  :                 sym->included == FALSE && /* v2.09: symbol already added to public queue? */
; 534  :                 //sym->scoped == FALSE && /* v2.09: no procs that are marked as "private" */
; 535  :                 sym->name[1] != '&' && /* v2.10: no @@ code labels */

	cmp	DWORD PTR [rbx+32], 1
	jne	SHORT $LN5@SymMakeAll
	movzx	ecx, BYTE PTR [rbx+40]
	test	cl, 48					; 00000030H
	jne	SHORT $LN5@SymMakeAll
	test	BYTE PTR [rbx+41], 64			; 00000040H
	jne	SHORT $LN5@SymMakeAll
	mov	rax, QWORD PTR [rbx+8]
	cmp	BYTE PTR [rax+1], 38			; 00000026H
	je	SHORT $LN5@SymMakeAll
	test	cl, cl
	js	SHORT $LN5@SymMakeAll

; 536  :                 sym->ispublic == FALSE ) {
; 537  :                 sym->ispublic = TRUE;

	or	cl, 128					; 00000080H
	mov	BYTE PTR [rbx+40], cl

; 538  :                 AddPublicData( sym );

	mov	rcx, rbx
	call	AddPublicData
$LN5@SymMakeAll:

; 527  :         for( sym = gsym_table[i]; sym; sym = sym->nextitem ) {

	mov	rbx, QWORD PTR [rbx]
	test	rbx, rbx
	jne	SHORT $LL7@SymMakeAll
$LN2@SymMakeAll:

; 523  :     int i;
; 524  :     struct asym  *sym;
; 525  : 
; 526  :     for( i = 0; i < GHASH_TABLE_SIZE; i++ ) {

	add	rdi, 8
	cmp	rdi, rsi
	jl	SHORT $LL4@SymMakeAll

; 539  :             }
; 540  :         }
; 541  :     }
; 542  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SymMakeAllSymbolsPublic ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
pass$ = 8
SymPassInit PROC

; 653  :     unsigned            i;
; 654  : 
; 655  :     if ( pass == PASS_1 )

	test	ecx, ecx
	je	SHORT $LN3@SymPassIni

; 656  :         return;
; 657  : 
; 658  : #if FASTPASS
; 659  :     /* No need to reset the "defined" flag if FASTPASS is on.
; 660  :      * Because then the source lines will come from the line store,
; 661  :      * where inactive conditional lines are NOT contained.
; 662  :      */
; 663  :     if ( UseSavedState )

	cmp	BYTE PTR UseSavedState, 0
	jne	SHORT $LN3@SymPassIni

; 664  :         return;
; 665  : #endif
; 666  :     /* mark as "undefined":
; 667  :      * - SYM_INTERNAL - internals
; 668  :      * - SYM_MACRO - macros
; 669  :      * - SYM_TMACRO - text macros
; 670  :      */
; 671  :     for( i = 0; i < GHASH_TABLE_SIZE; i++ ) {

	lea	rdx, OFFSET FLAT:gsym_table
	mov	r8d, 8009				; 00001f49H
	npad	6
$LL4@SymPassIni:

; 672  :         struct asym *sym;
; 673  :         for( sym = gsym_table[i]; sym; sym = sym->nextitem ) {

	mov	rax, QWORD PTR [rdx]
	test	rax, rax
	je	SHORT $LN2@SymPassIni
	npad	8
$LL7@SymPassIni:

; 674  :             if ( sym->predefined == FALSE ) {

	movzx	ecx, BYTE PTR [rax+40]
	test	cl, 32					; 00000020H
	jne	SHORT $LN5@SymPassIni

; 675  :                 /* v2.04: all symbol's "defined" flag is now reset. */
; 676  :                 // if ( sym->state == SYM_TMACRO ||
; 677  :                 //    sym->state == SYM_MACRO  ||
; 678  :                 //    sym->state == SYM_INTERNAL ) {
; 679  :                     sym->isdefined = FALSE;

	and	cl, 253					; 000000fdH
	mov	BYTE PTR [rax+40], cl
$LN5@SymPassIni:

; 672  :         struct asym *sym;
; 673  :         for( sym = gsym_table[i]; sym; sym = sym->nextitem ) {

	mov	rax, QWORD PTR [rax]
	test	rax, rax
	jne	SHORT $LL7@SymPassIni
$LN2@SymPassIni:

; 664  :         return;
; 665  : #endif
; 666  :     /* mark as "undefined":
; 667  :      * - SYM_INTERNAL - internals
; 668  :      * - SYM_MACRO - macros
; 669  :      * - SYM_TMACRO - text macros
; 670  :      */
; 671  :     for( i = 0; i < GHASH_TABLE_SIZE; i++ ) {

	add	rdx, 8
	sub	r8, 1
	jne	SHORT $LL4@SymPassIni
$LN3@SymPassIni:

; 680  :                 //}
; 681  :             }
; 682  :         }
; 683  :     }
; 684  : }

	ret	0
SymPassInit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
SymFini	PROC

; 551  : #if FASTMEM==0 || defined( DEBUG_OUT )
; 552  :     unsigned i;
; 553  : #endif
; 554  : 
; 555  : #ifdef DEBUG_OUT
; 556  :     if ( Options.dump_symbols_hash ) {
; 557  :         for( i = 0; i < GHASH_TABLE_SIZE; i++ ) {
; 558  :             struct asym  *sym = gsym_table[i];
; 559  :             if ( sym ) {
; 560  :                 printf("%4u ", i );
; 561  :                 for( ; sym; sym = sym->nextitem ) {
; 562  :                     printf("%-16s ", sym->name );
; 563  :                 }
; 564  :                 printf("\n" );
; 565  :             }
; 566  :         }
; 567  :     }
; 568  :     DumpSymbols();
; 569  : #endif
; 570  : 
; 571  : #if FASTMEM==0 || defined( DEBUG_OUT )
; 572  :     /* free the symbol table */
; 573  :     for( i = 0; i < GHASH_TABLE_SIZE; i++ ) {
; 574  :         struct asym  *sym;
; 575  :         struct asym  *next;
; 576  :         for( sym = gsym_table[i]; sym; ) {
; 577  :             next = sym->nextitem;
; 578  :             SymFree( sym );
; 579  :             SymCount--;
; 580  :             sym = next;
; 581  :         }
; 582  :     }
; 583  :     /**/myassert( SymCount == 0 );
; 584  : #endif
; 585  : 
; 586  : }

	ret	0
SymFini	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
time_of_day$ = 64
SymInit	PROC

; 592  : {

$LN30:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 593  :     struct asym *sym;
; 594  :     int i;
; 595  :     time_t    time_of_day;
; 596  :     struct tm *now;
; 597  : 
; 598  :     DebugMsg(("SymInit() enter\n"));
; 599  :     SymCount = 0;
; 600  : 
; 601  :     /* v2.11: ensure CurrProc is NULL - might be a problem if multiple files are assembled */
; 602  :     CurrProc = NULL;
; 603  : 
; 604  :     memset( gsym_table, 0, sizeof(gsym_table) );

	xor	edx, edx
	mov	DWORD PTR SymCount, 0
	mov	r8d, 64072				; 0000fa48H
	mov	QWORD PTR CurrProc, 0
	lea	rcx, OFFSET FLAT:gsym_table
	call	memset

; 605  : 
; 606  :     time_of_day = time( NULL );

	xor	ecx, ecx
	call	_time64

; 607  :     now = localtime( &time_of_day );

	lea	rcx, QWORD PTR time_of_day$[rsp]
	mov	QWORD PTR time_of_day$[rsp], rax
	call	_localtime64
	mov	rbx, rax

; 608  : #if USESTRFTIME
; 609  :     strftime( szDate, 9, szDateFmt, now );
; 610  :     strftime( szTime, 9, szTimeFmt, now );
; 611  : #else
; 612  :     sprintf( szDate, "%02u/%02u/%02u", now->tm_mon + 1, now->tm_mday, now->tm_year % 100 );

	mov	r9d, DWORD PTR [rax+20]
	mov	eax, 1374389535				; 51eb851fH
	mov	r8d, DWORD PTR [rbx+16]
	imul	r9d
	inc	r8d
	sar	edx, 5
	mov	ecx, edx
	shr	ecx, 31
	add	edx, ecx
	imul	ecx, edx, 100				; 00000064H
	lea	rdx, OFFSET FLAT:$SG11191
	sub	r9d, ecx
	lea	rcx, OFFSET FLAT:szDate
	mov	DWORD PTR [rsp+32], r9d
	mov	r9d, DWORD PTR [rbx+12]
	call	sprintf

; 613  :     sprintf( szTime, "%02u:%02u:%02u", now->tm_hour, now->tm_min, now->tm_sec );

	mov	eax, DWORD PTR [rbx]
	lea	rdx, OFFSET FLAT:$SG11192
	mov	r9d, DWORD PTR [rbx+4]
	lea	rcx, OFFSET FLAT:szTime
	mov	r8d, DWORD PTR [rbx+8]
	mov	DWORD PTR [rsp+32], eax
	call	sprintf

; 614  : #endif
; 615  : 
; 616  :     for( i = 0; i < sizeof(tmtab) / sizeof(tmtab[0]); i++ ) {

	xor	esi, esi
	lea	rbx, OFFSET FLAT:tmtab+8
	npad	6
$LL4@SymInit:

; 617  :         sym = SymCreate( tmtab[i].name );

	mov	rdi, QWORD PTR [rbx-8]
	mov	rcx, rdi
	call	SymFind
	test	rax, rax
	je	SHORT $LN16@SymInit
	mov	rdx, rdi
	mov	ecx, 56					; 00000038H
	call	EmitErr
	xor	eax, eax
	jmp	SHORT $LN15@SymInit
$LN16@SymInit:
	mov	rcx, rdi
	call	SymAlloc
	mov	rcx, QWORD PTR gsym
	inc	DWORD PTR SymCount
	mov	QWORD PTR [rcx], rax
$LN15@SymInit:

; 618  :         sym->state = SYM_TMACRO;
; 619  :         sym->isdefined = TRUE;
; 620  :         sym->predefined = TRUE;

	or	BYTE PTR [rax+40], 34			; 00000022H
	mov	DWORD PTR [rax+32], 10

; 621  :         sym->string_ptr = tmtab[i].value;

	mov	rcx, QWORD PTR [rbx]
	mov	QWORD PTR [rax+16], rcx
	mov	rcx, QWORD PTR [rbx+8]

; 622  :         if ( tmtab[i].store )

	test	rcx, rcx
	je	SHORT $LN2@SymInit

; 623  :             *tmtab[i].store = sym;

	mov	QWORD PTR [rcx], rax
$LN2@SymInit:

; 614  : #endif
; 615  : 
; 616  :     for( i = 0; i < sizeof(tmtab) / sizeof(tmtab[0]); i++ ) {

	inc	esi
	add	rbx, 24
	movsxd	rax, esi
	cmp	rax, 6
	jb	SHORT $LL4@SymInit

; 624  :     }
; 625  : 
; 626  :     for( i = 0; i < sizeof(eqtab) / sizeof(eqtab[0]); i++ ) {

	xor	esi, esi
	lea	rbx, OFFSET FLAT:eqtab+8
$LL7@SymInit:

; 627  :         sym = SymCreate( eqtab[i].name );

	mov	rdi, QWORD PTR [rbx-8]
	mov	rcx, rdi
	call	SymFind
	test	rax, rax
	je	SHORT $LN19@SymInit
	mov	rdx, rdi
	mov	ecx, 56					; 00000038H
	call	EmitErr
	xor	eax, eax
	jmp	SHORT $LN18@SymInit
$LN19@SymInit:
	mov	rcx, rdi
	call	SymAlloc
	mov	rcx, QWORD PTR gsym
	inc	DWORD PTR SymCount
	mov	QWORD PTR [rcx], rax
$LN18@SymInit:

; 628  :         sym->state = SYM_INTERNAL;
; 629  :         /* v2.07: MT_ABS is obsolete */
; 630  :         //sym->mem_type = MT_ABS;
; 631  :         sym->isdefined = TRUE;
; 632  :         sym->predefined = TRUE;

	or	BYTE PTR [rax+40], 34			; 00000022H
	mov	DWORD PTR [rax+32], 1

; 633  :         sym->offset = eqtab[i].value;

	mov	ecx, DWORD PTR [rbx]
	mov	DWORD PTR [rax+16], ecx

; 634  :         sym->sfunc_ptr = eqtab[i].sfunc_ptr;

	mov	rcx, QWORD PTR [rbx+8]
	mov	QWORD PTR [rax+64], rcx
	mov	rcx, QWORD PTR [rbx+16]

; 635  :         //sym->variable = TRUE; /* if fixup must be created */
; 636  :         if ( eqtab[i].store )

	test	rcx, rcx
	je	SHORT $LN5@SymInit

; 637  :             *eqtab[i].store = sym;

	mov	QWORD PTR [rcx], rax
$LN5@SymInit:

; 624  :     }
; 625  : 
; 626  :     for( i = 0; i < sizeof(eqtab) / sizeof(eqtab[0]); i++ ) {

	inc	esi
	add	rbx, 32					; 00000020H
	movsxd	rcx, esi
	cmp	rcx, 4
	jb	SHORT $LL7@SymInit

; 638  :     }
; 639  :     sym->list   = FALSE; /* @WordSize should not be listed */

	and	BYTE PTR [rax+41], 254			; 000000feH

; 640  :     /* $ is an address (usually). Also, don't add it to the list */
; 641  :     symPC->variable = TRUE;

	mov	rax, QWORD PTR symPC

; 642  :     symPC->list     = FALSE;
; 643  :     LineCur->list   = FALSE;
; 644  : 
; 645  :     DebugMsg(("SymInit() exit\n"));
; 646  :     return;
; 647  : 
; 648  : }

	mov	rbx, QWORD PTR [rsp+72]
	mov	rsi, QWORD PTR [rsp+80]
	or	BYTE PTR [rax+40], 64			; 00000040H
	mov	rax, QWORD PTR symPC
	and	BYTE PTR [rax+41], 254			; 000000feH
	mov	rax, QWORD PTR LineCur
	and	BYTE PTR [rax+41], 254			; 000000feH
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
SymInit	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
name$ = 48
SymFind	PROC

; 262  : {

$LN35:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx

; 263  :     int i;
; 264  :     int len;
; 265  : 
; 266  :     len = strlen( name );

	or	rbx, -1
	npad	4
$LL33@SymFind:
	inc	rbx
	cmp	BYTE PTR [rcx+rbx], 0
	jne	SHORT $LL33@SymFind

; 267  :     i = hashpjw( name );

	movzx	eax, BYTE PTR [rcx]
	xor	edi, edi
	mov	rdx, rcx
	test	al, al
	je	SHORT $LN14@SymFind
	npad	11
$LL15@SymFind:
	movsx	ecx, al
	lea	rdx, QWORD PTR [rdx+1]
	or	ecx, 32					; 00000020H
	shl	edi, 5
	add	edi, ecx
	mov	ecx, edi
	and	ecx, -32768				; ffff8000H
	mov	eax, ecx
	shr	eax, 15
	xor	eax, ecx
	xor	edi, eax
	movzx	eax, BYTE PTR [rdx]
	test	al, al
	jne	SHORT $LL15@SymFind
$LN14@SymFind:

; 268  : 
; 269  :     if ( CurrProc ) {

	cmp	QWORD PTR CurrProc, 0
	lea	r14, OFFSET FLAT:__ImageBase
	je	SHORT $LN31@SymFind

; 270  :         for( lsym = &lsym_table[ i % LHASH_TABLE_SIZE ]; *lsym; lsym = &((*lsym)->nextitem ) ) {

	mov	eax, -2130574327			; ffffffff81020409H
	mov	ecx, edi
	imul	edi
	add	edx, edi
	sar	edx, 6
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	imul	eax, edx, 127				; 0000007fH
	sub	ecx, eax
	movsxd	rax, ecx
	lea	rcx, QWORD PTR lsym_table[r14]
	mov	rdx, QWORD PTR [rcx+rax*8]
	lea	rcx, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR lsym, rcx
	test	rdx, rdx
	je	SHORT $LN31@SymFind
$LL4@SymFind:

; 271  :             if ( len == (*lsym)->name_size && SYMCMP( name, (*lsym)->name, len ) == 0 ) {

	movzx	eax, BYTE PTR [rdx+72]
	cmp	ebx, eax
	jne	SHORT $LN2@SymFind
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, rsi
	movsxd	r8, ebx
	call	QWORD PTR SymCmpFunc
	test	eax, eax
	je	$LN20@SymFind
	mov	rcx, QWORD PTR lsym
$LN2@SymFind:

; 270  :         for( lsym = &lsym_table[ i % LHASH_TABLE_SIZE ]; *lsym; lsym = &((*lsym)->nextitem ) ) {

	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR lsym, rcx
	mov	rdx, QWORD PTR [rcx]
	test	rdx, rdx
	jne	SHORT $LL4@SymFind
$LN31@SymFind:

; 274  :             }
; 275  :         }
; 276  :     }
; 277  : 
; 278  :     for( gsym = &gsym_table[ i % GHASH_TABLE_SIZE ]; *gsym; gsym = &((*gsym)->nextitem ) ) {

	mov	eax, -2098415161			; ffffffff82ecb9c7H
	lea	rcx, QWORD PTR gsym_table[r14]
	imul	edi
	add	edx, edi
	sar	edx, 12
	mov	eax, edx
	shr	eax, 31
	add	edx, eax
	imul	eax, edx, 8009				; 00001f49H
	sub	edi, eax
	movsxd	rax, edi
	mov	rdx, QWORD PTR [rcx+rax*8]
	lea	rcx, QWORD PTR [rcx+rax*8]
	mov	QWORD PTR gsym, rcx
	test	rdx, rdx
	je	SHORT $LN32@SymFind
$LL7@SymFind:

; 279  :         if ( len == (*gsym)->name_size && SYMCMP( name, (*gsym)->name, len ) == 0 ) {

	movzx	eax, BYTE PTR [rdx+72]
	cmp	ebx, eax
	jne	SHORT $LN5@SymFind
	mov	rdx, QWORD PTR [rdx+8]
	mov	rcx, rsi
	movsxd	r8, ebx
	call	QWORD PTR SymCmpFunc
	test	eax, eax
	je	SHORT $LN21@SymFind
	mov	rcx, QWORD PTR gsym
$LN5@SymFind:

; 274  :             }
; 275  :         }
; 276  :     }
; 277  : 
; 278  :     for( gsym = &gsym_table[ i % GHASH_TABLE_SIZE ]; *gsym; gsym = &((*gsym)->nextitem ) ) {

	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR gsym, rcx
	mov	rdx, QWORD PTR [rcx]
	test	rdx, rdx
	jne	SHORT $LL7@SymFind
$LN32@SymFind:

; 282  :         }
; 283  :     }
; 284  : 
; 285  :     return( NULL );

	xor	eax, eax
$LN1@SymFind:

; 286  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN20@SymFind:

; 272  :                 DebugMsg1(("SymFind(%s): found in local table, state=%u, local=%u\n", name, (*lsym)->state, (*lsym)->scoped ));
; 273  :                 return( *lsym );

	mov	rax, QWORD PTR lsym
	mov	rax, QWORD PTR [rax]
	jmp	SHORT $LN1@SymFind
$LN21@SymFind:

; 280  :             DebugMsg1(("SymFind(%s): found, state=%u memtype=%X lang=%u\n", name, (*gsym)->state, (*gsym)->mem_type, (*gsym)->langtype ));
; 281  :             return( *gsym );

	mov	rax, QWORD PTR gsym
	mov	rax, QWORD PTR [rax]
	jmp	SHORT $LN1@SymFind
SymFind	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
name$ = 48
SymLookupLocal PROC

; 324  : {

$LN9:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 325  :     //struct asym      **sym_ptr;
; 326  :     struct asym      *sym;
; 327  : 
; 328  :     sym = SymFind( name );

	call	SymFind
	mov	rdx, rax

; 329  :     if ( sym == NULL ) {

	test	rax, rax
	jne	SHORT $LN2@SymLookupL

; 330  :         sym = SymAlloc( name );

	mov	rcx, rbx
	call	SymAlloc

; 331  :         sym->scoped = TRUE;
; 332  :         /* add the label to the local hash table */
; 333  :         //sym->next = *lsym;
; 334  :         *lsym = sym;

	mov	rcx, QWORD PTR lsym
	or	BYTE PTR [rax+40], 4
	mov	QWORD PTR [rcx], rax

; 353  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@SymLookupL:

; 335  :         DebugMsg1(("SymLookupLocal(%s): local symbol created in %s\n", name, CurrProc->sym.name));
; 336  :     } else if( sym->state == SYM_UNDEFINED && sym->scoped == FALSE ) {

	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN4@SymLookupL
	test	BYTE PTR [rax+40], 4
	jne	SHORT $LN4@SymLookupL

; 337  :         /* if the label was defined due to a FORWARD reference,
; 338  :          * its scope is to be changed from global to local.
; 339  :          */
; 340  :         /* remove the label from the global hash table */
; 341  :         *gsym = sym->nextitem;

	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR gsym

; 342  :         SymCount--;

	dec	DWORD PTR SymCount
	mov	QWORD PTR [rax], rcx

; 343  :         sym->scoped = TRUE;
; 344  :         /* add the label to the local hash table */
; 345  :         //sym->next = *lsym;
; 346  :         sym->nextitem = NULL;
; 347  :         *lsym = sym;

	mov	rax, QWORD PTR lsym
	or	BYTE PTR [rdx+40], 4
	mov	QWORD PTR [rdx], 0
	mov	QWORD PTR [rax], rdx

; 348  :         DebugMsg1(("SymLookupLocal(%s): label moved into %s's local namespace\n", sym->name, CurrProc->sym.name ));
; 349  :     }
; 350  : 
; 351  :     DebugMsg1(("SymLookupLocal(%s): found, state=%u, defined=%u\n", name, sym->state, sym->isdefined));
; 352  :     return( sym );

	mov	rax, rdx
$LN4@SymLookupL:

; 353  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
SymLookupLocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
name$ = 48
SymLookup PROC

; 302  : {

$LN6:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 303  :     struct asym      *sym;
; 304  : 
; 305  :     sym = SymFind( name );

	call	SymFind

; 306  :     if( sym == NULL ) {

	test	rax, rax
	jne	SHORT $LN4@SymLookup

; 307  :         sym = SymAlloc( name );

	mov	rcx, rbx
	call	SymAlloc

; 308  :         DebugMsg1(("SymLookup(%s): created new symbol, CurrProc=%s\n", name, CurrProc ? CurrProc->sym.name : "NULL" ));
; 309  :         //sym->next = *gsym;
; 310  :         *gsym = sym;

	mov	rcx, QWORD PTR gsym

; 311  :         ++SymCount;

	inc	DWORD PTR SymCount
	mov	QWORD PTR [rcx], rax
$LN4@SymLookup:

; 312  :     }
; 313  : 
; 314  :     DebugMsg1(("SymLookup(%s): found, state=%u, defined=%u\n", name, sym->state, sym->isdefined));
; 315  : 
; 316  :     return( sym );
; 317  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
SymLookup ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
sym$ = 48
name$ = 56
SymAddLocal PROC

; 446  : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rcx
	mov	rbx, rdx

; 447  :     struct asym *sym2;
; 448  :     /* v2.10: ignore symbols with state SYM_UNDEFINED! */
; 449  :     //if( SymFind( name ) ) {
; 450  :     if( ( sym2 = SymFind( name ) ) && sym2->state != SYM_UNDEFINED ) {

	mov	rcx, rdx
	call	SymFind
	test	rax, rax
	je	SHORT $LN2@SymAddLoca
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN2@SymAddLoca

; 451  :         /* shouldn't happen */
; 452  :         EmitErr( SYMBOL_ALREADY_DEFINED, name );

	mov	rdx, rbx
	mov	ecx, 56					; 00000038H
	call	EmitErr

; 453  :         return( NULL );

	xor	eax, eax

; 463  :     return( sym );
; 464  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@SymAddLoca:

; 454  :     }
; 455  : #if FASTMEM==0
; 456  :     if ( sym->name_size ) LclFree( sym->name );
; 457  : #endif
; 458  :     sym->name_size = strlen( name );

	or	rax, -1
$LL4@SymAddLoca:
	inc	rax
	cmp	BYTE PTR [rbx+rax], 0
	jne	SHORT $LL4@SymAddLoca

; 459  :     sym->name = LclAlloc( sym->name_size + 1 );

	movzx	ecx, al
	inc	ecx
	mov	BYTE PTR [rdi+72], al
	movsxd	rcx, ecx
	call	LclAlloc

; 460  :     memcpy( sym->name, name, sym->name_size + 1 );

	movzx	ecx, BYTE PTR [rdi+72]
	mov	rdx, rbx
	inc	ecx
	mov	QWORD PTR [rdi+8], rax
	movsxd	r8, ecx
	mov	rcx, rax
	call	memcpy

; 461  :     sym->nextitem = NULL;
; 462  :     *lsym = sym;

	mov	rax, QWORD PTR lsym

; 463  :     return( sym );
; 464  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	QWORD PTR [rdi], 0
	mov	QWORD PTR [rax], rdi
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SymAddLocal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
sym$ = 48
SymAddGlobal PROC

; 473  : {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 474  :     if( SymFind( sym->name ) ) {

	mov	rcx, QWORD PTR [rcx+8]
	call	SymFind
	test	rax, rax
	je	SHORT $LN2@SymAddGlob

; 475  :         EmitErr( SYMBOL_ALREADY_DEFINED, sym->name );

	mov	rdx, QWORD PTR [rbx+8]
	mov	ecx, 56					; 00000038H
	call	EmitErr

; 476  :         return( NULL );

	xor	eax, eax

; 482  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@SymAddGlob:

; 477  :     }
; 478  :     sym->nextitem = NULL;
; 479  :     *gsym = sym;

	mov	rax, QWORD PTR gsym

; 480  :     SymCount++;

	inc	DWORD PTR SymCount
	mov	QWORD PTR [rbx], 0
	mov	QWORD PTR [rax], rbx

; 481  :     return( sym );

	mov	rax, rbx

; 482  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
SymAddGlobal ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
name$ = 48
SymLCreate PROC

; 506  : {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 507  :     struct asym *sym;
; 508  : 
; 509  :     /* v2.10: ignore symbols with state SYM_UNDEFINED */
; 510  :     //if( SymFind( name ) ) {
; 511  :     if( ( sym = SymFind( name ) ) && sym->state != SYM_UNDEFINED ) {

	call	SymFind
	test	rax, rax
	je	SHORT $LN2@SymLCreate
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN2@SymLCreate

; 512  :         EmitErr( SYMBOL_ALREADY_DEFINED, name );

	mov	rdx, rbx
	mov	ecx, 56					; 00000038H
	call	EmitErr

; 513  :         return( NULL );

	xor	eax, eax

; 517  :     return( sym );
; 518  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@SymLCreate:

; 514  :     }
; 515  :     sym = SymAlloc( name );

	mov	rcx, rbx
	call	SymAlloc

; 516  :     *lsym = sym;

	mov	rcx, QWORD PTR lsym
	mov	QWORD PTR [rcx], rax

; 517  :     return( sym );
; 518  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
SymLCreate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
name$ = 48
SymCreate PROC

; 487  : {

$LN5:
	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 488  :     struct asym *sym;
; 489  : 
; 490  :     if( SymFind( name ) ) {

	call	SymFind
	test	rax, rax
	je	SHORT $LN2@SymCreate

; 491  :         EmitErr( SYMBOL_ALREADY_DEFINED, name );

	mov	rdx, rbx
	mov	ecx, 56					; 00000038H
	call	EmitErr

; 492  :         return( NULL );

	xor	eax, eax

; 497  :     return( sym );
; 498  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN2@SymCreate:

; 493  :     }
; 494  :     sym = SymAlloc( name );

	mov	rcx, rbx
	call	SymAlloc

; 495  :     *gsym = sym;

	mov	rcx, QWORD PTR gsym

; 496  :     SymCount++;

	inc	DWORD PTR SymCount
	mov	QWORD PTR [rcx], rax

; 497  :     return( sym );
; 498  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
SymCreate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
sym$ = 8
SymFree	PROC

; 421  :     //DebugMsg(("SymFree: free %X, name=%s, state=%X\n", sym, sym->name, sym->state));
; 422  :     free_ext( sym );

	jmp	free_ext
SymFree	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\symbols.c
_TEXT	SEGMENT
name$ = 48
SymAlloc PROC

; 228  : {

$LN9:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rsi, rcx

; 229  :     int len = strlen( name );

	or	rbx, -1
$LL6@SymAlloc:
	inc	rbx
	cmp	BYTE PTR [rcx+rbx], 0
	jne	SHORT $LL6@SymAlloc

; 230  :     struct asym *sym;
; 231  : 
; 232  :     sym = LclAlloc( sizeof( struct dsym ) );

	mov	ecx, 120				; 00000078H
	call	LclAlloc

; 233  :     memset( sym, 0, sizeof( struct dsym ) );

	xor	edx, edx
	mov	rcx, rax
	mov	rdi, rax
	lea	r8d, QWORD PTR [rdx+120]
	call	memset

; 234  : #if 1
; 235  :     /* the tokenizer ensures that identifiers are within limits, so
; 236  :      * this check probably is redundant */
; 237  :     if( len > MAX_ID_LEN ) {

	cmp	ebx, 247				; 000000f7H
	jle	SHORT $LN2@SymAlloc

; 238  :         EmitError( IDENTIFIER_TOO_LONG );

	mov	ecx, 70					; 00000046H
	call	EmitError

; 239  :         len = MAX_ID_LEN;

	mov	ebx, 247				; 000000f7H
$LN2@SymAlloc:

; 240  :     }
; 241  : #endif
; 242  :     sym->name_size = len;

	mov	BYTE PTR [rdi+72], bl

; 243  :     sym->list = ModuleInfo.cref;

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 12
	xor	al, BYTE PTR [rdi+41]
	and	al, 1

; 244  :     sym->mem_type = MT_EMPTY;

	mov	DWORD PTR [rdi+36], 192			; 000000c0H
	xor	BYTE PTR [rdi+41], al

; 245  :     if ( len ) {

	test	ebx, ebx
	je	SHORT $LN3@SymAlloc

; 246  :         sym->name = LclAlloc( len + 1 );

	lea	eax, DWORD PTR [rbx+1]
	movsxd	rcx, eax
	call	LclAlloc

; 247  :         memcpy( sym->name, name, len );

	movsxd	rbx, ebx
	mov	rdx, rsi
	mov	r8, rbx
	mov	QWORD PTR [rdi+8], rax
	mov	rcx, rax
	call	memcpy

; 248  :         sym->name[len] = NULLC;

	mov	rax, QWORD PTR [rdi+8]
	mov	BYTE PTR [rbx+rax], 0

; 249  :     } else
; 250  :         sym->name = "";
; 251  :     return( sym );

	mov	rax, rdi

; 252  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN3@SymAlloc:
	mov	rbx, QWORD PTR [rsp+48]
	lea	rax, OFFSET FLAT:$SG11080
	mov	rsi, QWORD PTR [rsp+56]
	mov	QWORD PTR [rdi+8], rax
	mov	rax, rdi
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SymAlloc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Buffer$ = 80
_Format$ = 88
sprintf	PROC						; COMDAT

; 1776 : {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]
	mov	rdi, rcx

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	call	__local_stdio_printf_options
	mov	r9, rbx
	mov	QWORD PTR [rsp+40], rsi
	or	rbx, -1
	mov	QWORD PTR [rsp+32], 0
	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vsprintf
	test	eax, eax
	cmovs	eax, ebx

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rsi
	or	rbx, -1
	mov	QWORD PTR [rsp+32], rdi
	mov	r8, rbx
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vsprintf

; 1459 :     #pragma warning(pop)
; 1460 : }

	mov	rbp, QWORD PTR [rsp+72]
	test	eax, eax
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ebx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_Locale$ = 88
_ArgList$ = 96
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 1386 :     int const _Result = __stdio_common_vsprintf(

	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR _ArgList$[rsp]
	or	rcx, 1
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rbx
	call	__stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;
; 1391 : }

	mov	rbx, QWORD PTR [rsp+64]
	or	ecx, -1
	mov	rbp, QWORD PTR [rsp+72]
	test	eax, eax
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ecx
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\time.h
;	COMDAT time
_TEXT	SEGMENT
_Time$ = 8
time	PROC						; COMDAT

; 535  :             return _time64(_Time);

	jmp	_time64
time	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\time.h
;	COMDAT localtime
_TEXT	SEGMENT
_Time$ = 8
localtime PROC						; COMDAT

; 509  :             #pragma warning(push)
; 510  :             #pragma warning(disable: 4996)
; 511  :             return _localtime64(_Time);

	jmp	_localtime64
localtime ENDP
_TEXT	ENDS
END
