; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
COMM	evex:BYTE
COMM	ZEROLOCALS:BYTE
_DATA	ENDS
CONST	SEGMENT
optiontab DQ	FLAT:$SG11209
	DQ	FLAT:SetDotName
	DQ	FLAT:$SG11210
	DQ	FLAT:SetNoDotName
	DQ	FLAT:$SG11211
	DQ	FLAT:SetM510
	DQ	FLAT:$SG11212
	DQ	FLAT:SetNoM510
	DQ	FLAT:$SG11213
	DQ	FLAT:SetScoped
	DQ	FLAT:$SG11214
	DQ	FLAT:SetNoScoped
	DQ	FLAT:$SG11215
	DQ	FLAT:SetOldStructs
	DQ	FLAT:$SG11216
	DQ	FLAT:SetNoOldStructs
	DQ	FLAT:$SG11217
	DQ	FLAT:SetEmulator
	DQ	FLAT:$SG11218
	DQ	FLAT:SetNoEmulator
	DQ	FLAT:$SG11219
	DQ	FLAT:SetLJmp
	DQ	FLAT:$SG11220
	DQ	FLAT:SetNoLJmp
	DQ	FLAT:$SG11221
	DQ	FLAT:Unsupported
	DQ	FLAT:$SG11222
	DQ	FLAT:SetNoReadonly
	DQ	FLAT:$SG11223
	DQ	FLAT:Unsupported
	DQ	FLAT:$SG11224
	DQ	FLAT:SetNoOldmacros
	DQ	FLAT:$SG11225
	DQ	FLAT:Unsupported
	DQ	FLAT:$SG11226
	DQ	FLAT:SetExpr32
	DQ	FLAT:$SG11227
	DQ	FLAT:SetNoSignExt
	DQ	FLAT:$SG11228
	DQ	FLAT:SetCaseMap
	DQ	FLAT:$SG11229
	DQ	FLAT:SetProc
	DQ	FLAT:$SG11230
	DQ	FLAT:SetPrologue
	DQ	FLAT:$SG11231
	DQ	FLAT:SetEpilogue
	DQ	FLAT:$SG11232
	DQ	FLAT:SetLanguage
	DQ	FLAT:$SG11233
	DQ	FLAT:SetNoKeyword
	DQ	FLAT:$SG11234
	DQ	FLAT:SetSetIF2
	DQ	FLAT:$SG11235
	DQ	FLAT:SetOffset
	DQ	FLAT:$SG11236
	DQ	FLAT:SetSegment
	DQ	FLAT:$SG11237
	DQ	FLAT:SetFieldAlign
	DQ	FLAT:$SG11238
	DQ	FLAT:SetProcAlign
	DQ	FLAT:$SG11239
	DQ	FLAT:SetMZ
	DQ	FLAT:$SG11240
	DQ	FLAT:SetFrame
	DQ	FLAT:$SG11241
	DQ	FLAT:SetElf
	DQ	FLAT:$SG11242
	DQ	FLAT:SetRenameKey
	DQ	FLAT:$SG11243
	DQ	FLAT:SetWin64
	DQ	FLAT:$SG11244
	DQ	FLAT:SetDllImport
	DQ	FLAT:$SG11245
	DQ	FLAT:SetCodeView
	DQ	FLAT:$SG11246
	DQ	FLAT:SetStackBase
	DQ	FLAT:$SG11247
	DQ	FLAT:SetEvex
	DQ	FLAT:$SG11248
	DQ	FLAT:SetZeroLocals
CONST	ENDS
_DATA	SEGMENT
$SG10778 DB	'NONE', 00H
	ORG $+3
$SG10781 DB	'NOTPUBLIC', 00H
	ORG $+2
$SG10784 DB	'ALL', 00H
$SG10927 DB	'TRUE', 00H
	ORG $+3
$SG10929 DB	'FALSE', 00H
	ORG $+2
$SG10942 DB	'NONE', 00H
	ORG $+3
$SG10945 DB	'PROLOGUEDEF', 00H
$SG10958 DB	'NONE', 00H
	ORG $+3
$SG10971 DB	'GROUP', 00H
	ORG $+2
$SG10992 DB	'EXPORT', 00H
	ORG $+1
$SG11239 DB	'MZ', 00H
	ORG $+1
$SG10961 DB	'EPILOGUEDEF', 00H
$SG10974 DB	'FLAT', 00H
	ORG $+3
$SG11008 DB	'USE16', 00H
	ORG $+2
$SG11097 DB	'NOAUTO', 00H
	ORG $+1
$SG11241 DB	'ELF', 00H
$SG10977 DB	'SEGMENT', 00H
$SG10990 DB	'PRIVATE', 00H
$SG11011 DB	'USE32', 00H
	ORG $+2
$SG11014 DB	'USE64', 00H
	ORG $+2
$SG11095 DB	'AUTO', 00H
	ORG $+3
$SG11153 DB	'__imp_', 00H
	ORG $+1
$SG11154 DB	'_imp_', 00H
	ORG $+2
$SG11165 DB	'NONE', 00H
	ORG $+3
$SG11195 DB	'@StackBase', 00H
	ORG $+5
$SG11196 DB	'@ProcStatus', 00H
	ORG $+4
$SG11209 DB	'DOTNAME', 00H
$SG11210 DB	'NODOTNAME', 00H
	ORG $+2
$SG11211 DB	'M510', 00H
	ORG $+3
$SG11212 DB	'NOM510', 00H
	ORG $+1
$SG11213 DB	'SCOPED', 00H
	ORG $+5
$SG11214 DB	'NOSCOPED', 00H
	ORG $+7
$SG11215 DB	'OLDSTRUCTS', 00H
	ORG $+5
$SG11216 DB	'NOOLDSTRUCTS', 00H
	ORG $+3
$SG11217 DB	'EMULATOR', 00H
	ORG $+7
$SG11218 DB	'NOEMULATOR', 00H
	ORG $+1
$SG11219 DB	'LJMP', 00H
	ORG $+3
$SG11220 DB	'NOLJMP', 00H
	ORG $+5
$SG11221 DB	'READONLY', 00H
	ORG $+7
$SG11222 DB	'NOREADONLY', 00H
	ORG $+5
$SG11223 DB	'OLDMACROS', 00H
	ORG $+6
$SG11224 DB	'NOOLDMACROS', 00H
$SG11225 DB	'EXPR16', 00H
	ORG $+1
$SG11226 DB	'EXPR32', 00H
	ORG $+5
$SG11227 DB	'NOSIGNEXTEND', 00H
	ORG $+3
$SG11228 DB	'CASEMAP', 00H
$SG11229 DB	'PROC', 00H
	ORG $+3
$SG11230 DB	'PROLOGUE', 00H
	ORG $+7
$SG11231 DB	'EPILOGUE', 00H
	ORG $+7
$SG11232 DB	'LANGUAGE', 00H
	ORG $+7
$SG11233 DB	'NOKEYWORD', 00H
	ORG $+2
$SG11234 DB	'SETIF2', 00H
	ORG $+1
$SG11235 DB	'OFFSET', 00H
	ORG $+5
$SG11236 DB	'SEGMENT', 00H
$SG11237 DB	'FIELDALIGN', 00H
	ORG $+5
$SG11238 DB	'PROCALIGN', 00H
	ORG $+2
$SG11240 DB	'FRAME', 00H
	ORG $+6
$SG11242 DB	'RENAMEKEYWORD', 00H
	ORG $+2
$SG11243 DB	'WIN64', 00H
	ORG $+2
$SG11244 DB	'DLLIMPORT', 00H
	ORG $+6
$SG11245 DB	'CODEVIEW', 00H
	ORG $+7
$SG11246 DB	'STACKBASE', 00H
	ORG $+2
$SG11247 DB	'EVEX', 00H
	ORG $+7
$SG11248 DB	'ZEROLOCALS', 00H
_DATA	ENDS
PUBLIC	OptionDirective
EXTRN	isspace:PROC
EXTRN	_stricmp:PROC
EXTRN	_strupr:PROC
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	SetMasm510:PROC
EXTRN	LclAlloc:PROC
EXTRN	SymSetCmpFunc:PROC
EXTRN	GetLangType:PROC
EXTRN	FindResWord:PROC
EXTRN	IsKeywordDisabled:PROC
EXTRN	DisableKeyword:PROC
EXTRN	RenameKeyword:PROC
EXTRN	EvalOperand:PROC
EXTRN	EmitConstError:PROC
EXTRN	CreateVariable:PROC
EXTRN	UpdateStackBase:PROC
EXTRN	UpdateProcStatus:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	Parse_Pass:DWORD
EXTRN	SpecialTable:BYTE
EXTRN	sym_Interface:QWORD
EXTRN	__ImageBase:BYTE
pdata	SEGMENT
$pdata$SetEvex DD imagerel SetEvex
	DD	imagerel SetEvex+143
	DD	imagerel $unwind$SetEvex
$pdata$SetZeroLocals DD imagerel SetZeroLocals
	DD	imagerel SetZeroLocals+143
	DD	imagerel $unwind$SetZeroLocals
$pdata$SetCaseMap DD imagerel SetCaseMap
	DD	imagerel SetCaseMap+224
	DD	imagerel $unwind$SetCaseMap
$pdata$SetM510 DD imagerel SetM510
	DD	imagerel SetM510+18
	DD	imagerel $unwind$SetM510
$pdata$SetNoM510 DD imagerel SetNoM510
	DD	imagerel SetNoM510+18
	DD	imagerel $unwind$SetNoM510
$pdata$SetNoKeyword DD imagerel SetNoKeyword
	DD	imagerel SetNoKeyword+121
	DD	imagerel $unwind$SetNoKeyword
$pdata$2$SetNoKeyword DD imagerel SetNoKeyword+121
	DD	imagerel SetNoKeyword+358
	DD	imagerel $chain$2$SetNoKeyword
$pdata$4$SetNoKeyword DD imagerel SetNoKeyword+358
	DD	imagerel SetNoKeyword+370
	DD	imagerel $chain$4$SetNoKeyword
$pdata$5$SetNoKeyword DD imagerel SetNoKeyword+370
	DD	imagerel SetNoKeyword+395
	DD	imagerel $chain$5$SetNoKeyword
$pdata$SetLanguage DD imagerel SetLanguage
	DD	imagerel SetLanguage+144
	DD	imagerel $unwind$SetLanguage
$pdata$SetSetIF2 DD imagerel SetSetIF2
	DD	imagerel SetSetIF2+115
	DD	imagerel $unwind$SetSetIF2
$pdata$SetPrologue DD imagerel SetPrologue
	DD	imagerel SetPrologue+216
	DD	imagerel $unwind$SetPrologue
$pdata$SetEpilogue DD imagerel SetEpilogue
	DD	imagerel SetEpilogue+216
	DD	imagerel $unwind$SetEpilogue
$pdata$SetOffset DD imagerel SetOffset
	DD	imagerel SetOffset+215
	DD	imagerel $unwind$SetOffset
$pdata$SetProc DD imagerel SetProc
	DD	imagerel SetProc+162
	DD	imagerel $unwind$SetProc
$pdata$SetSegment DD imagerel SetSegment
	DD	imagerel SetSegment+289
	DD	imagerel $unwind$SetSegment
$pdata$SetFieldAlign DD imagerel SetFieldAlign
	DD	imagerel SetFieldAlign+183
	DD	imagerel $unwind$SetFieldAlign
$pdata$SetProcAlign DD imagerel SetProcAlign
	DD	imagerel SetProcAlign+183
	DD	imagerel $unwind$SetProcAlign
$pdata$SetMZ DD	imagerel SetMZ
	DD	imagerel SetMZ+431
	DD	imagerel $unwind$SetMZ
$pdata$SetFrame DD imagerel SetFrame
	DD	imagerel SetFrame+115
	DD	imagerel $unwind$SetFrame
$pdata$SetElf DD imagerel SetElf
	DD	imagerel SetElf+165
	DD	imagerel $unwind$SetElf
$pdata$SetRenameKey DD imagerel SetRenameKey
	DD	imagerel SetRenameKey+85
	DD	imagerel $unwind$SetRenameKey
$pdata$0$SetRenameKey DD imagerel SetRenameKey+85
	DD	imagerel SetRenameKey+137
	DD	imagerel $chain$0$SetRenameKey
$pdata$3$SetRenameKey DD imagerel SetRenameKey+137
	DD	imagerel SetRenameKey+199
	DD	imagerel $chain$3$SetRenameKey
$pdata$5$SetRenameKey DD imagerel SetRenameKey+199
	DD	imagerel SetRenameKey+237
	DD	imagerel $chain$5$SetRenameKey
$pdata$6$SetRenameKey DD imagerel SetRenameKey+237
	DD	imagerel SetRenameKey+288
	DD	imagerel $chain$6$SetRenameKey
$pdata$SetWin64 DD imagerel SetWin64
	DD	imagerel SetWin64+225
	DD	imagerel $unwind$SetWin64
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$IncludeDll DD imagerel IncludeDll
	DD	imagerel IncludeDll+30
	DD	imagerel $unwind$IncludeDll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$IncludeDll DD imagerel IncludeDll+30
	DD	imagerel IncludeDll+192
	DD	imagerel $chain$0$IncludeDll
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$IncludeDll DD imagerel IncludeDll+192
	DD	imagerel IncludeDll+206
	DD	imagerel $chain$2$IncludeDll
pdata	ENDS
pdata	SEGMENT
$pdata$SetDllImport DD imagerel SetDllImport
	DD	imagerel SetDllImport+127
	DD	imagerel $unwind$SetDllImport
$pdata$SetCodeView DD imagerel SetCodeView
	DD	imagerel SetCodeView+118
	DD	imagerel $unwind$SetCodeView
$pdata$SetStackBase DD imagerel SetStackBase
	DD	imagerel SetStackBase+229
	DD	imagerel $unwind$SetStackBase
$pdata$OptionDirective DD imagerel $LN37
	DD	imagerel $LN37+394
	DD	imagerel $unwind$OptionDirective
pdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$IncludeDll DD 020021H
	DD	067400H
	DD	imagerel IncludeDll
	DD	imagerel IncludeDll+30
	DD	imagerel $unwind$IncludeDll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$IncludeDll DD 020521H
	DD	067405H
	DD	imagerel IncludeDll
	DD	imagerel IncludeDll+30
	DD	imagerel $unwind$IncludeDll
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$IncludeDll DD 020601H
	DD	030023206H
xdata	ENDS
xdata	SEGMENT
$unwind$SetEvex DD 030b01H
	DD	014010bH
	DD	03004H
$unwind$SetZeroLocals DD 030b01H
	DD	014010bH
	DD	03004H
$unwind$SetCaseMap DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetM510 DD 010401H
	DD	04204H
$unwind$SetNoM510 DD 010401H
	DD	04204H
$unwind$SetNoKeyword DD 040b01H
	DD	09540bH
	DD	0e007320bH
$chain$2$SetNoKeyword DD 061321H
	DD	087413H
	DD	07640eH
	DD	063405H
	DD	imagerel SetNoKeyword
	DD	imagerel SetNoKeyword+121
	DD	imagerel $unwind$SetNoKeyword
$chain$4$SetNoKeyword DD 060021H
	DD	087400H
	DD	076400H
	DD	063400H
	DD	imagerel SetNoKeyword
	DD	imagerel SetNoKeyword+121
	DD	imagerel $unwind$SetNoKeyword
$chain$5$SetNoKeyword DD 021H
	DD	imagerel SetNoKeyword
	DD	imagerel SetNoKeyword+121
	DD	imagerel $unwind$SetNoKeyword
$unwind$SetLanguage DD 040a01H
	DD	07340aH
	DD	07006320aH
$unwind$SetSetIF2 DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetPrologue DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetEpilogue DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetOffset DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetProc DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetSegment DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetFieldAlign DD 030b01H
	DD	014010bH
	DD	03004H
$unwind$SetProcAlign DD 030b01H
	DD	014010bH
	DD	03004H
$unwind$SetMZ DD 091501H
	DD	01a5415H
	DD	0193415H
	DD	0140115H
	DD	0700ce00eH
	DD	0600bH
$unwind$SetFrame DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetElf DD 030b01H
	DD	014010bH
	DD	03004H
$unwind$SetRenameKey DD 040b01H
	DD	08740bH
	DD	0e007320bH
$chain$0$SetRenameKey DD 020521H
	DD	076405H
	DD	imagerel SetRenameKey
	DD	imagerel SetRenameKey+85
	DD	imagerel $unwind$SetRenameKey
$chain$3$SetRenameKey DD 040521H
	DD	063405H
	DD	076400H
	DD	imagerel SetRenameKey
	DD	imagerel SetRenameKey+85
	DD	imagerel $unwind$SetRenameKey
$chain$5$SetRenameKey DD 040021H
	DD	076400H
	DD	063400H
	DD	imagerel SetRenameKey
	DD	imagerel SetRenameKey+85
	DD	imagerel $unwind$SetRenameKey
$chain$6$SetRenameKey DD 021H
	DD	imagerel SetRenameKey
	DD	imagerel SetRenameKey+85
	DD	imagerel $unwind$SetRenameKey
$unwind$SetWin64 DD 030901H
	DD	0140109H
	DD	03002H
$unwind$SetDllImport DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
$unwind$SetCodeView DD 030b01H
	DD	014010bH
	DD	03004H
$unwind$SetStackBase DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$OptionDirective DD 081401H
	DD	096414H
	DD	085414H
	DD	073414H
	DD	070103214H
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 48
tokenarray$ = 56
OptionDirective PROC

; 935  : {

$LN37:
	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	mov	QWORD PTR [rsp+32], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 936  :     int idx = -1;
; 937  : 
; 938  :     DebugMsg1(( "OPTION directive enter, option=%s\n", tokenarray[i+1].string_ptr ));
; 939  : 
; 940  :     i++; /* skip OPTION directive */

	lea	r8d, DWORD PTR [rcx+1]
	or	ebx, -1

; 941  :     while ( tokenarray[i].token != T_FINAL ) {

	movsxd	rcx, r8d
	mov	rdi, rdx
	shl	rcx, 5
	add	rcx, rdx
	mov	DWORD PTR i$[rsp], r8d
	cmp	BYTE PTR [rcx], 0
	je	$LN26@OptionDire
	lea	rbp, OFFSET FLAT:optiontab
	npad	3
$LL2@OptionDire:

; 942  :         _strupr( tokenarray[i].string_ptr );

	mov	rcx, QWORD PTR [rcx+8]
	call	_strupr

; 944  :             if ( 0 == strcmp( tokenarray[i].string_ptr, optiontab[idx].name ) )

	movsxd	r8, DWORD PTR i$[rsp]
	xor	ebx, ebx
	mov	rax, r8
	xor	r11d, r11d
	shl	rax, 5
	mov	r10, rbp
	mov	rsi, QWORD PTR [rax+rdi+8]
$LL6@OptionDire:
	mov	r9, QWORD PTR [r10]
	mov	rax, rsi
	sub	r9, rsi
	npad	5
$LL34@OptionDire:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r9]
	sub	edx, ecx
	jne	SHORT $LN35@OptionDire
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL34@OptionDire
$LN35@OptionDire:
	test	edx, edx
	je	SHORT $LN20@OptionDire

; 943  :         for ( idx = 0; idx < TABITEMS; idx++ ) {

	inc	ebx
	inc	r11
	movsxd	rax, ebx
	add	r10, 16
	cmp	rax, 40					; 00000028H
	jb	SHORT $LL6@OptionDire
$LN20@OptionDire:

; 945  :                 break;
; 946  :         }
; 947  :         if ( idx >= TABITEMS )

	movsxd	rax, ebx
	cmp	rax, 40					; 00000028H
	jae	$LN26@OptionDire

; 948  :             break;
; 949  :         i++;

	inc	r8d
	mov	DWORD PTR i$[rsp], r8d

; 950  :         /* v2.06: check for colon separator here */
; 951  :         if ( idx >= NOARGOPTS ) {

	cmp	ebx, 19
	jl	SHORT $LN12@OptionDire

; 952  :             if ( tokenarray[i].token != T_COLON ) {

	movsxd	rax, r8d
	shl	rax, 5
	cmp	BYTE PTR [rax+rdi], 58			; 0000003aH
	jne	$LN22@OptionDire

; 954  :             }
; 955  :             i++;

	inc	r8d

; 956  :             /* there must be something after the colon */
; 957  :             if ( tokenarray[i].token == T_FINAL ) {

	movsxd	rax, r8d
	shl	rax, 5
	mov	DWORD PTR i$[rsp], r8d
	cmp	BYTE PTR [rax+rdi], 0
	je	SHORT $LN23@OptionDire

; 960  :             }
; 961  :             /* reject option if -Zne is set */
; 962  :             if ( idx >= MASMOPTS && Options.strict_masm_compat ) {

	cmp	ebx, 28
	jl	SHORT $LN12@OptionDire
	cmp	BYTE PTR Options+127, 0
	jne	SHORT $LN23@OptionDire
$LN12@OptionDire:

; 963  :                 i -= 2;
; 964  :                 break;
; 965  :             }
; 966  :         }
; 967  :         if ( optiontab[idx].func( &i, tokenarray ) == ERROR )

	add	r11, r11
	lea	rcx, QWORD PTR i$[rsp]
	mov	rdx, rdi
	call	QWORD PTR [rbp+r11*8+8]
	cmp	eax, -1
	je	SHORT $LN25@OptionDire

; 969  :         if ( tokenarray[i].token != T_COMMA )

	movsxd	r8, DWORD PTR i$[rsp]
	mov	rax, r8
	shl	rax, 5
	cmp	BYTE PTR [rax+rdi], 44			; 0000002cH
	jne	SHORT $LN26@OptionDire

; 970  :             break;
; 971  :         i++;

	inc	r8d
	movsxd	rcx, r8d
	shl	rcx, 5
	add	rcx, rdi
	mov	DWORD PTR i$[rsp], r8d
	cmp	BYTE PTR [rcx], 0
	jne	$LL2@OptionDire
$LN26@OptionDire:

; 972  :     }
; 973  :     if ( idx >= TABITEMS  || tokenarray[i].token != T_FINAL ) {

	movsxd	rax, ebx
	cmp	rax, 40					; 00000028H
	jae	SHORT $LN16@OptionDire
	movsxd	rax, r8d
	shl	rax, 5
	cmp	BYTE PTR [rax+rdi], 0
	jne	SHORT $LN16@OptionDire

; 976  :     }
; 977  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	SHORT $LN1@OptionDire
$LN23@OptionDire:

; 958  :                 i -= 2; /* position back to option identifier */

	sub	r8d, 2
	mov	DWORD PTR i$[rsp], r8d

; 959  :                 break;

	jmp	SHORT $LN26@OptionDire
$LN22@OptionDire:

; 953  :                 return( EmitError( COLON_EXPECTED ) );

	mov	ecx, 84					; 00000054H
	call	EmitError
	jmp	SHORT $LN1@OptionDire
$LN25@OptionDire:

; 968  :             return( ERROR );

	or	eax, -1
	jmp	SHORT $LN1@OptionDire
$LN16@OptionDire:

; 974  :         DebugMsg(( "option syntax error: >%s<\n", tokenarray[i].tokpos ));
; 975  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rdx, r8d
	mov	ecx, 209				; 000000d1H
	shl	rdx, 5
	mov	rdx, QWORD PTR [rdx+rdi+24]
	call	EmitErr
$LN1@OptionDire:

; 978  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
OptionDirective ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
Unsupported PROC

; 847  : {

	mov	rax, rdx

; 848  :     return( EmitErr( NOT_SUPPORTED, tokenarray[(*pi)-2].tokpos ) );

	movsxd	rdx, DWORD PTR [rcx]
	shl	rdx, 5
	mov	ecx, 72					; 00000048H
	mov	rdx, QWORD PTR [rdx+rax-40]
	jmp	EmitErr
Unsupported ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetStackBase PROC

; 821  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 822  :     int i = *pi;

	movsxd	rdi, DWORD PTR [rcx]
	mov	rbx, rcx

; 823  : 
; 824  :     if ( tokenarray[i].token != T_REG ) {

	mov	r8, rdi
	shl	r8, 5
	cmp	BYTE PTR [r8+rdx], 2
	je	SHORT $LN2@SetStackBa

; 825  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	mov	rdx, QWORD PTR [r8+rdx+8]
	mov	ecx, 209				; 000000d1H

; 842  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 825  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	jmp	EmitErr
$LN2@SetStackBa:

; 826  :     }
; 827  :     if ( !( GetSflagsSp( tokenarray[i].tokval ) & SFR_IREG ) ) {

	mov	ecx, DWORD PTR [r8+rdx+16]
	lea	rdx, OFFSET FLAT:__ImageBase
	lea	rax, QWORD PTR [rcx+rcx*2]
	test	BYTE PTR SpecialTable[rdx+rax*4+4], 32	; 00000020H
	jne	SHORT $LN3@SetStackBa

; 828  :         return( EmitError( MUST_BE_INDEX_OR_BASE_REGISTER ) );

	mov	ecx, 33					; 00000021H

; 842  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 828  :         return( EmitError( MUST_BE_INDEX_OR_BASE_REGISTER ) );

	jmp	EmitError
$LN3@SetStackBa:

; 829  :     }
; 830  :     ModuleInfo.basereg[ModuleInfo.Ofssize] = tokenarray[i].tokval;

	movzx	eax, BYTE PTR ModuleInfo+404
	mov	DWORD PTR ModuleInfo[rdx+rax*4+500], ecx

; 831  :     if ( !ModuleInfo.g.StackBase ) {

	cmp	QWORD PTR ModuleInfo+272, 0
	jne	SHORT $LN4@SetStackBa

; 832  :         ModuleInfo.g.StackBase = CreateVariable( "@StackBase", 0 );

	xor	edx, edx
	lea	rcx, OFFSET FLAT:$SG11195
	call	CreateVariable
	mov	QWORD PTR ModuleInfo+272, rax

; 833  :         ModuleInfo.g.StackBase->predefined = TRUE;
; 834  :         ModuleInfo.g.StackBase->sfunc_ptr = UpdateStackBase;

	lea	rcx, OFFSET FLAT:UpdateStackBase

; 835  :         ModuleInfo.g.ProcStatus = CreateVariable( "@ProcStatus", 0 );

	xor	edx, edx
	or	BYTE PTR [rax+40], 32			; 00000020H
	mov	rax, QWORD PTR ModuleInfo+272
	mov	QWORD PTR [rax+64], rcx
	lea	rcx, OFFSET FLAT:$SG11196
	call	CreateVariable
	mov	QWORD PTR ModuleInfo+280, rax

; 836  :         ModuleInfo.g.ProcStatus->predefined = TRUE;
; 837  :         ModuleInfo.g.ProcStatus->sfunc_ptr = UpdateProcStatus;

	lea	rcx, OFFSET FLAT:UpdateProcStatus
	or	BYTE PTR [rax+40], 32			; 00000020H
	mov	rax, QWORD PTR ModuleInfo+280
	mov	QWORD PTR [rax+64], rcx
$LN4@SetStackBa:

; 838  :     }
; 839  :     i++;

	lea	eax, DWORD PTR [rdi+1]

; 840  :     *pi = i;

	mov	DWORD PTR [rbx], eax

; 841  :     return( NOT_ERROR );

	xor	eax, eax

; 842  : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetStackBase ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opnd$ = 48
i$ = 176
pi$ = 176
tokenarray$ = 184
SetCodeView PROC

; 798  : {

	mov	r11, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 799  :     int i = *pi;

	mov	eax, DWORD PTR [rcx]

; 800  :     struct expr opnd;
; 801  : 
; 802  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opnd, 0 ) == ERROR )

	lea	r9, QWORD PTR [r11-120]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rbx, rcx
	lea	rcx, QWORD PTR [r11+8]
	mov	DWORD PTR [r11+8], eax
	mov	BYTE PTR [rsp+32], 0
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetCodeVie

; 803  :         return( ERROR );

	or	eax, eax

; 811  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN2@SetCodeVie:

; 804  :     if ( opnd.kind == EXPR_CONST ) {

	cmp	DWORD PTR opnd$[rsp+60], 0
	jne	SHORT $LN3@SetCodeVie

; 805  :         ModuleInfo.cv_opt = opnd.value;

	movzx	eax, BYTE PTR opnd$[rsp]
	mov	BYTE PTR ModuleInfo+427, al

; 808  :     }
; 809  :     *pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rbx], eax

; 810  :     return( NOT_ERROR );

	xor	eax, eax

; 811  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN3@SetCodeVie:

; 806  :     } else {
; 807  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError

; 811  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
SetCodeView ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetDllImport PROC

; 772  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 773  :     int i = *pi;

	movsxd	rbx, DWORD PTR [rcx]
	mov	rdi, rcx

; 774  : 
; 775  :     /* used for COFF only */
; 776  :     //if ( Options.output_format != OFORMAT_COFF ) {
; 777  :     //    SkipOption( pi, tokenarray );
; 778  :     //    return( NOT_ERROR);
; 779  :     //}
; 780  : 
; 781  :     if ( tokenarray[i].token == T_ID &&

	mov	rsi, rbx
	shl	rsi, 5
	add	rsi, rdx
	cmp	BYTE PTR [rsi], 8
	jne	SHORT $LN2@SetDllImpo
	mov	rcx, QWORD PTR [rsi+8]
	lea	rdx, OFFSET FLAT:$SG11165
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetDllImpo

; 782  :         ( _stricmp( tokenarray[i].string_ptr, "NONE" ) == 0 ) ) {
; 783  :         ModuleInfo.CurrDll = NULL;

	mov	QWORD PTR ModuleInfo+336, 0

; 784  :         i++;

	jmp	SHORT $LN5@SetDllImpo
$LN2@SetDllImpo:

; 785  :     } else if ( tokenarray[i].token == T_STRING && tokenarray[i].string_delim == '<' ) {

	cmp	BYTE PTR [rsi], 9
	jne	SHORT $LN7@SetDllImpo
	cmp	BYTE PTR [rsi+1], 60			; 0000003cH
	jne	SHORT $LN7@SetDllImpo

; 786  :         if ( Parse_Pass == PASS_1 )

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN5@SetDllImpo

; 787  :             ModuleInfo.CurrDll = IncludeDll( tokenarray[i].string_ptr );

	mov	rcx, QWORD PTR [rsi+8]
	call	IncludeDll
	mov	QWORD PTR ModuleInfo+336, rax
$LN5@SetDllImpo:

; 788  :         i++;

	inc	ebx
$LN7@SetDllImpo:

; 789  :     }
; 790  :     *pi = i;
; 791  :     return( NOT_ERROR );
; 792  : }

	mov	rsi, QWORD PTR [rsp+56]
	xor	eax, eax
	mov	DWORD PTR [rdi], ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetDllImport ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
;	COMDAT IncludeDll
_TEXT	SEGMENT
name$ = 48
IncludeDll PROC						; COMDAT

; 743  : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 744  :     struct dll_desc **q;
; 745  :     struct dll_desc *node;
; 746  : 
; 747  :     /* allow a zero-sized name! */
; 748  :     if ( *name == NULLC )

	cmp	BYTE PTR [rcx], 0
	mov	rbx, rcx
	jne	SHORT $LN5@IncludeDll

; 749  :         return( NULL );

	xor	eax, eax

; 768  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN5@IncludeDll:

; 750  : 
; 751  :     for ( q = &ModuleInfo.g.DllQueue; *q ; q = &(*q)->next ) {

	cmp	QWORD PTR ModuleInfo+80, 0
	mov	QWORD PTR [rsp+48], rdi
	lea	rdi, OFFSET FLAT:ModuleInfo+80
	je	SHORT $LN3@IncludeDll
	npad	4
$LL4@IncludeDll:

; 752  :         if ( _stricmp( (*q)->name, name ) == 0 )

	mov	rcx, QWORD PTR [rdi]
	mov	rdx, rbx
	add	rcx, 12
	call	_stricmp
	test	eax, eax
	je	SHORT $LN11@IncludeDll

; 750  : 
; 751  :     for ( q = &ModuleInfo.g.DllQueue; *q ; q = &(*q)->next ) {

	mov	rdi, QWORD PTR [rdi]
	cmp	QWORD PTR [rdi], 0
	jne	SHORT $LL4@IncludeDll
$LN3@IncludeDll:

; 754  :     }
; 755  :     node = LclAlloc( sizeof( struct dll_desc ) + strlen( name ) );

	or	rcx, -1
$LL17@IncludeDll:
	inc	rcx
	cmp	BYTE PTR [rbx+rcx], 0
	jne	SHORT $LL17@IncludeDll
	add	rcx, 16
	call	LclAlloc
	mov	r8, rax

; 756  :     node->next = NULL;

	xor	eax, eax

; 757  :     node->cnt = 0;
; 758  :     strcpy( node->name, name );

	mov	rdx, r8
	sub	rdx, rbx
	mov	QWORD PTR [r8], rax
	mov	DWORD PTR [r8+8], eax
	npad	12
$LL8@IncludeDll:
	movzx	ecx, BYTE PTR [rbx]
	mov	BYTE PTR [rdx+rbx+12], cl
	lea	rbx, QWORD PTR [rbx+1]
	test	cl, cl
	jne	SHORT $LL8@IncludeDll

; 759  :     *q = node;

	mov	QWORD PTR [rdi], r8

; 760  : 
; 761  : #if AMD64_SUPPORT
; 762  :     ModuleInfo.g.imp_prefix = ( ( ModuleInfo.defOfssize == USE64 ) ? "__imp_" : "_imp_" );

	lea	rcx, OFFSET FLAT:$SG11153
	cmp	BYTE PTR ModuleInfo+405, 2
	lea	rax, OFFSET FLAT:$SG11154
	mov	rdi, QWORD PTR [rsp+48]
	cmove	rax, rcx
	mov	QWORD PTR ModuleInfo+88, rax

; 763  : #else
; 764  :     ModuleInfo.g.imp_prefix = "_imp_";
; 765  : #endif
; 766  : 
; 767  :     return( node );

	mov	rax, r8

; 768  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN11@IncludeDll:

; 753  :             return( *q );

	mov	rax, QWORD PTR [rdi]
	mov	rdi, QWORD PTR [rsp+48]

; 768  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
IncludeDll ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opndx$ = 48
i$ = 176
pi$ = 176
tokenarray$ = 184
SetWin64 PROC

; 713  : {

	push	rbx
	sub	rsp, 160				; 000000a0H

; 714  :     int i = *pi;
; 715  :     struct expr opndx;
; 716  : 
; 717  :     /* if -win64 isn't set, skip the option */
; 718  :     /* v2.09: skip option if Ofssize != USE64 */
; 719  :     if ( ModuleInfo.defOfssize != USE64 ) {

	cmp	BYTE PTR ModuleInfo+405, 2
	mov	r10, rdx
	movsxd	rax, DWORD PTR [rcx]
	mov	rbx, rcx
	mov	DWORD PTR i$[rsp], eax
	je	SHORT $LN2@SetWin64

; 720  :         SkipOption( pi, tokenarray );

	shl	rax, 5
	cmp	BYTE PTR [rax+rdx], 0
	je	SHORT $LN16@SetWin64
	npad	4
$LL9@SetWin64:
	movsxd	rdx, DWORD PTR [rbx]
	mov	rax, rdx
	shl	rax, 5
	cmp	BYTE PTR [rax+r10], 44			; 0000002cH
	je	SHORT $LN16@SetWin64
	lea	eax, DWORD PTR [rdx+1]
	movsxd	rcx, eax
	shl	rcx, 5
	mov	DWORD PTR [rbx], eax
	cmp	BYTE PTR [rcx+r10], 0
	jne	SHORT $LL9@SetWin64
$LN16@SetWin64:

; 721  :         return( NOT_ERROR);

	xor	eax, eax

; 736  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN2@SetWin64:

; 722  :     }
; 723  : 
; 724  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, 0 ) == ERROR )

	mov	r8d, DWORD PTR ModuleInfo+496
	lea	r9, QWORD PTR opndx$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	mov	BYTE PTR [rsp+32], 0
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN3@SetWin64

; 725  :         return( ERROR );

	or	eax, eax

; 736  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN3@SetWin64:

; 726  :     if ( opndx.kind == EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN4@SetWin64

; 727  :         if ( opndx.llvalue & ( ~W64F_ALL ) ) {

	mov	rax, QWORD PTR opndx$[rsp]
	test	rax, -16
	je	SHORT $LN6@SetWin64

; 728  :             return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError

; 736  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN6@SetWin64:

; 729  :         }
; 730  :         ModuleInfo.win64_flags = opndx.value;

	mov	BYTE PTR ModuleInfo+413, al

; 733  :     }
; 734  :     *pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rbx], eax

; 735  :     return( NOT_ERROR );

	xor	eax, eax

; 736  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN4@SetWin64:

; 731  :     } else {
; 732  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError

; 736  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
SetWin64 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetRenameKey PROC

; 668  : {

	mov	QWORD PTR [rsp+24], rdi
	push	r14
	sub	rsp, 32					; 00000020H

; 669  :     int i = *pi;

	movsxd	rdi, DWORD PTR [rcx]
	mov	r8, rdx

; 670  :     //struct ReservedWord *resw;
; 671  :     unsigned index;
; 672  :     char *oldname;
; 673  : 
; 674  : #if 0 /* v2.11: allow temporary renaming of keywords */
; 675  :     /* do nothing if pass > 1 */
; 676  :     if( Parse_Pass != PASS_1 ) {
; 677  :         SkipOption( pi, tokenarray );
; 678  :         return( NOT_ERROR );
; 679  :     }
; 680  : #endif
; 681  :     if ( tokenarray[i].token != T_STRING || tokenarray[i].string_delim != '<' )  {

	mov	rdx, rdi
	mov	r14, rcx
	shl	rdx, 5
	add	rdx, r8
	cmp	BYTE PTR [rdx], 9
	jne	$LN3@SetRenameK
	cmp	BYTE PTR [rdx+1], 60			; 0000003cH
	jne	$LN3@SetRenameK

; 683  :     }
; 684  :     oldname = tokenarray[i].string_ptr;

	mov	rcx, QWORD PTR [rdx+8]

; 685  :     i++;

	inc	edi

; 686  :     /* v2.06: syntax changed */
; 687  :     //if ( tokenarray[i].token != T_COMMA ) {
; 688  :     if ( tokenarray[i].token != T_DIRECTIVE || tokenarray[i].dirtype != DRT_EQUALSGN ) {

	movsxd	rdx, edi
	shl	rdx, 5
	cmp	BYTE PTR [rdx+r8], 3
	jne	$LN5@SetRenameK
	cmp	BYTE PTR [rdx+r8+1], 48			; 00000030H
	jne	$LN5@SetRenameK

; 691  :     }
; 692  :     i++;

	mov	QWORD PTR [rsp+56], rsi
	inc	edi

; 693  :     if ( tokenarray[i].token != T_ID )  {

	movsxd	rsi, edi
	shl	rsi, 5
	add	rsi, r8
	cmp	BYTE PTR [rsi], 8
	je	SHORT $LN6@SetRenameK

; 694  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	mov	rdx, QWORD PTR [rsi+24]
	mov	ecx, 209				; 000000d1H
	mov	rsi, QWORD PTR [rsp+56]

; 707  : }

	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14

; 694  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	jmp	EmitErr
$LN6@SetRenameK:
	mov	QWORD PTR [rsp+48], rbx

; 695  :     }
; 696  : 
; 697  :     /* todo: if MAX_ID_LEN can be > 255, then check size,
; 698  :      * since a reserved word's size must be <= 255 */
; 699  :     index = FindResWord( oldname, strlen( oldname ) );

	or	rbx, -1
	mov	rdx, rbx
$LL10@SetRenameK:
	inc	rdx
	cmp	BYTE PTR [rcx+rdx], 0
	jne	SHORT $LL10@SetRenameK
	call	FindResWord

; 700  :     if ( index == 0 ) {

	test	eax, eax
	jne	SHORT $LN7@SetRenameK

; 701  :         return( EmitError( RESERVED_WORD_EXPECTED ) );

	mov	ecx, 158				; 0000009eH
	call	EmitError
$LN12@SetRenameK:
	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]

; 707  : }

	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN7@SetRenameK:

; 702  :     }
; 703  :     RenameKeyword( index, tokenarray[i].string_ptr, strlen( tokenarray[i].string_ptr ) );

	mov	rdx, QWORD PTR [rsi+8]
	npad	5
$LL9@SetRenameK:
	inc	rbx
	cmp	BYTE PTR [rdx+rbx], 0
	jne	SHORT $LL9@SetRenameK
	mov	r8, rbx
	mov	ecx, eax
	call	RenameKeyword

; 704  :     i++;

	lea	eax, DWORD PTR [rdi+1]

; 705  :     *pi = i;

	mov	DWORD PTR [r14], eax

; 706  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	SHORT $LN12@SetRenameK
$LN5@SetRenameK:

; 689  :         //EmitError( EXPECTING_COMMA );
; 690  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	mov	rdx, QWORD PTR [rdx+r8+24]
	mov	ecx, 209				; 000000d1H

; 707  : }

	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14

; 689  :         //EmitError( EXPECTING_COMMA );
; 690  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	jmp	EmitErr
$LN3@SetRenameK:

; 682  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	mov	rdx, QWORD PTR [rdx+24]
	mov	ecx, 209				; 000000d1H

; 707  : }

	mov	rdi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	r14

; 682  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	jmp	EmitErr
SetRenameKey ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opndx$ = 48
i$ = 176
pi$ = 176
tokenarray$ = 184
SetElf	PROC

; 642  : {

	mov	r11, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 643  :     int i = *pi;

	mov	eax, DWORD PTR [rcx]

; 644  :     struct expr opndx;
; 645  : 
; 646  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, 0 ) == ERROR )

	lea	r9, QWORD PTR [r11-120]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rbx, rcx
	lea	rcx, QWORD PTR [r11+8]
	mov	DWORD PTR [r11+8], eax
	mov	BYTE PTR [rsp+32], 0
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetElf

; 647  :         return( ERROR );

	or	eax, eax

; 659  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN2@SetElf:

; 648  :     if ( opndx.kind == EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN3@SetElf

; 649  :         if ( opndx.llvalue > 0xFF ) {

	mov	rax, QWORD PTR opndx$[rsp]
	cmp	rax, 255				; 000000ffH
	jbe	SHORT $LN5@SetElf

; 650  :             return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError

; 659  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN5@SetElf:

; 651  :         }
; 652  :         if ( Options.output_format == OFORMAT_ELF )

	cmp	DWORD PTR Options+144, 3
	movzx	ecx, BYTE PTR ModuleInfo+412
	movzx	eax, al
	cmove	ecx, eax

; 656  :     }
; 657  :     *pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	BYTE PTR ModuleInfo+412, cl
	mov	DWORD PTR [rbx], eax

; 658  :     return( NOT_ERROR );

	xor	eax, eax

; 659  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN3@SetElf:

; 653  :             ModuleInfo.elf_osabi = opndx.value;
; 654  :     } else {
; 655  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError

; 659  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
SetElf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetFrame PROC

; 624  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 625  :     int i = *pi;

	movsxd	rbx, DWORD PTR [rcx]
	mov	rdi, rcx

; 626  : 
; 627  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "AUTO" ) ) {

	mov	rsi, rbx
	shl	rsi, 5
	add	rsi, rdx
	lea	rdx, OFFSET FLAT:$SG11095
	mov	rcx, QWORD PTR [rsi+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetFrame

; 628  :         ModuleInfo.frame_auto = 1;

	or	DWORD PTR ModuleInfo+408, 131072	; 00020000H

; 629  :         i++;

	jmp	SHORT $LN7@SetFrame
$LN2@SetFrame:

; 630  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "NOAUTO" ) ) {

	mov	rcx, QWORD PTR [rsi+8]
	lea	rdx, OFFSET FLAT:$SG11097
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetFrame

; 631  :         ModuleInfo.frame_auto = 0;

	and	DWORD PTR ModuleInfo+408, -131073	; fffdffffH
$LN7@SetFrame:

; 632  :         i++;

	inc	ebx
$LN6@SetFrame:

; 633  :     }
; 634  :     *pi = i;
; 635  :     return( NOT_ERROR );
; 636  : }

	mov	rsi, QWORD PTR [rsp+56]
	xor	eax, eax
	mov	DWORD PTR [rdi], ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetFrame ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opndx$ = 48
i$ = 192
pi$ = 192
tokenarray$ = 200
SetMZ	PROC

; 568  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 160				; 000000a0H

; 569  :     int i = *pi;

	mov	eax, DWORD PTR [rcx]
	lea	rdi, OFFSET FLAT:ModuleInfo+412
	mov	DWORD PTR i$[rsp], eax
	lea	r14, OFFSET FLAT:ModuleInfo+420
	mov	rbx, rdx
	mov	rsi, rcx
	mov	rbp, 288247968337764352			; 0400100000002000H
	npad	4
$LL4@SetMZ:

; 575  :         int k;
; 576  :         for ( k = i; tokenarray[k].token != T_FINAL; k++ )

	movsxd	r9, eax
	mov	r8, r9
	shl	r8, 5
	cmp	BYTE PTR [r8+rbx], 0
	je	SHORT $LN47@SetMZ
	mov	rcx, r9
	shl	rcx, 5
	movzx	edx, BYTE PTR [rcx+rbx]
	npad	4
$LL7@SetMZ:
	cmp	dl, 58					; 0000003aH
	ja	SHORT $LN43@SetMZ
	bt	rbp, rdx
	jb	SHORT $LN47@SetMZ
$LN43@SetMZ:
	inc	r9
	inc	eax
	mov	rcx, r9
	shl	rcx, 5
	movzx	edx, BYTE PTR [rcx+rbx]
	test	dl, dl
	jne	SHORT $LL7@SetMZ
$LN47@SetMZ:

; 577  :             if ( tokenarray[k].token == T_COMMA ||
; 578  :                 tokenarray[k].token == T_COLON ||
; 579  :                 tokenarray[k].token == T_DBL_COLON )
; 580  :                 break;
; 581  :         if ( EvalOperand( &i, tokenarray, k, &opndx, 0 ) == ERROR )

	lea	r9, QWORD PTR opndx$[rsp]
	mov	BYTE PTR [rsp+32], 0
	mov	r8d, eax
	lea	rcx, QWORD PTR i$[rsp]
	mov	rdx, rbx
	call	EvalOperand
	cmp	eax, -1
	je	$LN32@SetMZ

; 583  :         if ( opndx.kind == EXPR_EMPTY ) {

	mov	eax, DWORD PTR opndx$[rsp+60]
	cmp	eax, -2
	je	SHORT $LN46@SetMZ

; 584  :         } else if ( opndx.kind == EXPR_CONST ) {

	test	eax, eax
	jne	$LN16@SetMZ

; 585  :             if ( opndx.value64 > 0xFFFF ) {

	mov	rax, QWORD PTR opndx$[rsp]
	cmp	rax, 65535				; 0000ffffH
	jg	$LN33@SetMZ

; 587  :             }
; 588  :             if ( ModuleInfo.sub_format == SFORMAT_MZ )

	cmp	DWORD PTR ModuleInfo+372, 1
	jne	SHORT $LN46@SetMZ

; 589  :                 *(parms + j) = opndx.value;

	mov	WORD PTR [rdi], ax
$LN46@SetMZ:

; 592  :         }
; 593  :         if ( tokenarray[i].token == T_COLON )

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, rax
	shl	rcx, 5
	movzx	edx, BYTE PTR [rcx+rbx]
	cmp	dl, 58					; 0000003aH
	jne	SHORT $LN20@SetMZ

; 594  :             i++;

	inc	eax
	jmp	SHORT $LN48@SetMZ
$LN20@SetMZ:

; 595  :         else if ( tokenarray[i].token == T_DBL_COLON ) {

	cmp	dl, 13
	jne	SHORT $LN2@SetMZ

; 596  :             i++;

	inc	eax

; 597  :             j++;

	add	rdi, 2
$LN48@SetMZ:

; 596  :             i++;

	mov	DWORD PTR i$[rsp], eax
$LN2@SetMZ:

; 570  :     int j;
; 571  :     uint_16 *parms;
; 572  :     struct expr opndx;
; 573  : 
; 574  :     for ( j = 0, parms = (uint_16 *)&ModuleInfo.mz_data ; j < 4; j++ ) {

	add	rdi, 2
	cmp	rdi, r14
	jl	$LL4@SetMZ

; 598  :         }
; 599  :     }
; 600  : 
; 601  :     /* ensure data integrity of the params */
; 602  :     if ( ModuleInfo.sub_format == SFORMAT_MZ ) {

	cmp	DWORD PTR ModuleInfo+372, 1
	jne	SHORT $LN26@SetMZ

; 603  :         if ( ModuleInfo.mz_data.ofs_fixups < 0x1E )

	cmp	WORD PTR ModuleInfo+412, 30
	jae	SHORT $LN24@SetMZ

; 604  :             ModuleInfo.mz_data.ofs_fixups = 0x1E;

	mov	ecx, 30
	mov	WORD PTR ModuleInfo+412, cx
$LN24@SetMZ:

; 605  : 
; 606  :         for( j = 16; j < ModuleInfo.mz_data.alignment; j <<= 1 );

	movzx	edx, WORD PTR ModuleInfo+414
	mov	ecx, 16
	cmp	ecx, edx
	jge	SHORT $LN49@SetMZ
	npad	3
$LL10@SetMZ:
	add	ecx, ecx
	cmp	ecx, edx
	jl	SHORT $LL10@SetMZ
$LN49@SetMZ:

; 607  :         if( j != ModuleInfo.mz_data.alignment )

	je	SHORT $LN25@SetMZ

; 608  :             EmitError( INVALID_HEADER_ALIGNMENT );

	mov	ecx, 205				; 000000cdH
	call	EmitError
	mov	eax, DWORD PTR i$[rsp]
$LN25@SetMZ:

; 609  : 
; 610  :         if ( ModuleInfo.mz_data.heapmax < ModuleInfo.mz_data.heapmin )

	movzx	edx, WORD PTR ModuleInfo+418
	cmp	dx, WORD PTR ModuleInfo+416
	cmovb	dx, WORD PTR ModuleInfo+416
	mov	WORD PTR ModuleInfo+418, dx
$LN26@SetMZ:

; 611  :             ModuleInfo.mz_data.heapmax = ModuleInfo.mz_data.heapmin;
; 612  :     }
; 613  :     *pi = i;

	mov	DWORD PTR [rsi], eax

; 614  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	SHORT $LN1@SetMZ
$LN33@SetMZ:

; 586  :                 return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	SHORT $LN1@SetMZ
$LN16@SetMZ:

; 590  :         } else {
; 591  :             return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetMZ
$LN32@SetMZ:

; 582  :             return( ERROR );

	or	eax, -1
$LN1@SetMZ:

; 615  : }

	lea	r11, QWORD PTR [rsp+160]
	mov	rbx, QWORD PTR [r11+40]
	mov	rbp, QWORD PTR [r11+48]
	mov	rsp, r11
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
SetMZ	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opndx$ = 48
i$ = 176
pi$ = 176
tokenarray$ = 184
SetProcAlign PROC

; 542  : {

	mov	r11, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 543  :     int i = *pi;

	mov	eax, DWORD PTR [rcx]

; 544  :     int temp, temp2;
; 545  :     struct expr opndx;
; 546  : 
; 547  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, EXPF_NOUNDEF ) == ERROR )

	lea	r9, QWORD PTR [r11-120]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rbx, rcx
	lea	rcx, QWORD PTR [r11+8]
	mov	DWORD PTR [r11+8], eax
	mov	BYTE PTR [rsp+32], 2
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN5@SetProcAli

; 548  :         return( ERROR );

	or	eax, eax

; 562  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN5@SetProcAli:

; 549  :     if ( opndx.kind != EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	je	SHORT $LN6@SetProcAli

; 550  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError

; 562  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN6@SetProcAli:

; 551  :     }
; 552  :     if( opndx.value > MAX_STRUCT_ALIGN ) {

	mov	edx, DWORD PTR opndx$[rsp]
	cmp	edx, 32					; 00000020H
	jle	SHORT $LN7@SetProcAli

; 553  :         EmitError( STRUCT_ALIGN_TOO_HIGH );

	mov	ecx, 214				; 000000d6H
	call	EmitError
	mov	edx, DWORD PTR opndx$[rsp]
$LN7@SetProcAli:

; 554  :     }
; 555  :     for( temp = 1, temp2 = 0; temp < opndx.value ; temp <<= 1, temp2++ );

	mov	eax, 1
	xor	ecx, ecx
	cmp	eax, edx
	jge	SHORT $LN14@SetProcAli
	npad	7
$LL4@SetProcAli:
	add	eax, eax
	inc	ecx
	cmp	eax, edx
	jl	SHORT $LL4@SetProcAli
$LN14@SetProcAli:

; 556  :     if( temp != opndx.value ) {

	je	SHORT $LN8@SetProcAli

; 557  :         return( EmitErr( POWER_OF_2, opndx.value ) );

	mov	ecx, 129				; 00000081H
	call	EmitErr

; 562  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN8@SetProcAli:

; 558  :     }
; 559  :     ModuleInfo.procalign = temp2;
; 560  :     *pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	BYTE PTR ModuleInfo+399, cl
	mov	DWORD PTR [rbx], eax

; 561  :     return( NOT_ERROR );

	xor	eax, eax

; 562  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
SetProcAlign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opndx$ = 48
i$ = 176
pi$ = 176
tokenarray$ = 184
SetFieldAlign PROC

; 514  : {

	mov	r11, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 515  :     int i = *pi;

	mov	eax, DWORD PTR [rcx]

; 516  :     unsigned temp, temp2;
; 517  :     struct expr opndx;
; 518  : 
; 519  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, EXPF_NOUNDEF ) == ERROR )

	lea	r9, QWORD PTR [r11-120]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rbx, rcx
	lea	rcx, QWORD PTR [r11+8]
	mov	DWORD PTR [r11+8], eax
	mov	BYTE PTR [rsp+32], 2
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN5@SetFieldAl

; 520  :         return( ERROR );

	or	eax, eax

; 534  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN5@SetFieldAl:

; 521  :     if ( opndx.kind != EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	je	SHORT $LN6@SetFieldAl

; 522  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError

; 534  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN6@SetFieldAl:

; 523  :     }
; 524  :     if( opndx.uvalue > MAX_STRUCT_ALIGN ) {

	mov	edx, DWORD PTR opndx$[rsp]
	cmp	edx, 32					; 00000020H
	jbe	SHORT $LN7@SetFieldAl

; 525  :         return( EmitError( STRUCT_ALIGN_TOO_HIGH ) );

	mov	ecx, 214				; 000000d6H
	call	EmitError

; 534  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN7@SetFieldAl:

; 526  :     }
; 527  :     for( temp = 1, temp2 = 0; temp < opndx.uvalue ; temp <<= 1, temp2++ );

	mov	eax, 1
	xor	ecx, ecx
	cmp	eax, edx
	jae	SHORT $LN14@SetFieldAl
	npad	2
$LL4@SetFieldAl:
	add	eax, eax
	inc	ecx
	cmp	eax, edx
	jb	SHORT $LL4@SetFieldAl
$LN14@SetFieldAl:

; 528  :     if( temp != opndx.uvalue ) {

	je	SHORT $LN8@SetFieldAl

; 529  :         return( EmitErr( POWER_OF_2, opndx.value ) );

	mov	ecx, 129				; 00000081H
	call	EmitErr

; 534  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN8@SetFieldAl:

; 530  :     }
; 531  :     ModuleInfo.fieldalign = temp2;
; 532  :     *pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	BYTE PTR ModuleInfo+397, cl
	mov	DWORD PTR [rbx], eax

; 533  :     return( NOT_ERROR );

	xor	eax, eax

; 534  : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
SetFieldAlign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetSegment PROC

; 483  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 484  :     int i = *pi;

	movsxd	rsi, DWORD PTR [rcx]
	mov	rdi, rcx

; 485  : 
; 486  :     if ( tokenarray[i].token == T_RES_ID && tokenarray[i].tokval == T_FLAT ) {

	mov	rax, rsi
	shl	rax, 5
	lea	rbx, QWORD PTR [rax+rdx]
	movzx	eax, BYTE PTR [rax+rdx]
	cmp	al, 7
	jne	SHORT $LN2@SetSegment
	cmp	DWORD PTR [rbx+16], 261			; 00000105H
	jne	SHORT $LN6@SetSegment

; 487  : #if AMD64_SUPPORT
; 488  :         if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_64 )

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 112				; 00000070H
	setge	al
	inc	al
	mov	BYTE PTR ModuleInfo+405, al

; 503  :     }
; 504  :     i++;

	lea	eax, DWORD PTR [rsi+1]

; 505  :     *pi = i;

	mov	DWORD PTR [rcx], eax

; 506  :     return( NOT_ERROR );

	xor	eax, eax

; 507  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@SetSegment:

; 489  :             ModuleInfo.defOfssize = USE64;
; 490  :         else
; 491  : #endif
; 492  :             ModuleInfo.defOfssize = USE32;
; 493  :     } else if ( tokenarray[i].token == T_ID && _stricmp( tokenarray[i].string_ptr, "USE16" ) == 0) {

	cmp	al, 8
	jne	SHORT $LN6@SetSegment
	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG11008
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetSegment

; 494  :         ModuleInfo.defOfssize = USE16;

	mov	BYTE PTR ModuleInfo+405, al

; 503  :     }
; 504  :     i++;

	lea	eax, DWORD PTR [rsi+1]

; 505  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 506  :     return( NOT_ERROR );

	xor	eax, eax

; 507  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@SetSegment:

; 495  :     } else if ( tokenarray[i].token == T_ID && _stricmp( tokenarray[i].string_ptr, "USE32" ) == 0) {

	cmp	BYTE PTR [rbx], 8
	jne	SHORT $LN10@SetSegment
	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG11011
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN8@SetSegment

; 503  :     }
; 504  :     i++;

	lea	eax, DWORD PTR [rsi+1]
	mov	BYTE PTR ModuleInfo+405, 1

; 505  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 506  :     return( NOT_ERROR );

	xor	eax, eax

; 507  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@SetSegment:

; 496  :         ModuleInfo.defOfssize = USE32;
; 497  : #if AMD64_SUPPORT
; 498  :     } else if ( tokenarray[i].token == T_ID && _stricmp( tokenarray[i].string_ptr, "USE64" ) == 0) {

	cmp	BYTE PTR [rbx], 8
	jne	SHORT $LN10@SetSegment
	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG11014
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN10@SetSegment

; 503  :     }
; 504  :     i++;

	lea	eax, DWORD PTR [rsi+1]
	mov	BYTE PTR ModuleInfo+405, 2

; 505  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 506  :     return( NOT_ERROR );

	xor	eax, eax

; 507  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN10@SetSegment:

; 499  :         ModuleInfo.defOfssize = USE64;
; 500  : #endif
; 501  :     } else {
; 502  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	mov	rdx, QWORD PTR [rbx+8]
	mov	ecx, 209				; 000000d1H

; 507  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 499  :         ModuleInfo.defOfssize = USE64;
; 500  : #endif
; 501  :     } else {
; 502  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	jmp	EmitErr
SetSegment ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetProc	PROC

; 449  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 450  :     int i = *pi;

	movsxd	rbx, DWORD PTR [rcx]
	mov	rsi, rcx

; 451  : 
; 452  :     switch ( tokenarray[i].token ) {

	mov	rax, rbx
	shl	rax, 5
	lea	rdi, QWORD PTR [rax+rdx]
	movzx	eax, BYTE PTR [rax+rdx]
	cmp	al, 3
	je	SHORT $LN8@SetProc
	cmp	al, 8
	jne	SHORT $LN9@SetProc

; 453  :     case T_ID:
; 454  :         if ( 0 == _stricmp( tokenarray[i].string_ptr, "PRIVATE" ) ) {

	mov	rcx, QWORD PTR [rdi+8]
	lea	rdx, OFFSET FLAT:$SG10990
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN5@SetProc

; 455  :             ModuleInfo.procs_private = TRUE;
; 456  :             ModuleInfo.procs_export = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -9					; fffffff7H
	or	eax, 4
	mov	DWORD PTR ModuleInfo+408, eax

; 457  :             i++;

	jmp	SHORT $LN11@SetProc
$LN5@SetProc:

; 458  :         } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "EXPORT" ) ) {

	mov	rcx, QWORD PTR [rdi+8]
	lea	rdx, OFFSET FLAT:$SG10992
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN9@SetProc

; 459  :             ModuleInfo.procs_private = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -5					; fffffffbH

; 460  :             ModuleInfo.procs_export = TRUE;

	or	eax, 8
	mov	DWORD PTR ModuleInfo+408, eax

; 461  :             i++;
; 462  :         }
; 463  :         break;

	jmp	SHORT $LN11@SetProc
$LN8@SetProc:

; 464  :     case T_DIRECTIVE: /* word PUBLIC is a directive */
; 465  :         if ( tokenarray[i].tokval == T_PUBLIC ) {

	cmp	DWORD PTR [rdi+16], 426			; 000001aaH
	jne	SHORT $LN9@SetProc

; 466  :             ModuleInfo.procs_private = FALSE;
; 467  :             ModuleInfo.procs_export = FALSE;

	and	DWORD PTR ModuleInfo+408, -13		; fffffff3H
$LN11@SetProc:

; 468  :             i++;

	inc	ebx
$LN9@SetProc:

; 469  :         }
; 470  :         break;
; 471  :     }
; 472  :     *pi = i;

	mov	DWORD PTR [rsi], ebx

; 473  :     return( NOT_ERROR );

	xor	eax, eax

; 474  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetProc	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetOffset PROC

; 428  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 429  :     int i = *pi;

	movsxd	rsi, DWORD PTR [rcx]
	mov	rdi, rcx

; 430  : 
; 431  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "GROUP" ) ) {

	mov	rbx, rsi
	shl	rbx, 5
	add	rbx, rdx
	lea	rdx, OFFSET FLAT:$SG10971
	mov	rcx, QWORD PTR [rbx+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetOffset

; 432  :         ModuleInfo.offsettype = OT_GROUP;

	mov	DWORD PTR ModuleInfo+384, eax

; 439  :     }
; 440  :     i++;

	lea	eax, DWORD PTR [rsi+1]

; 441  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 442  :     return( NOT_ERROR );

	xor	eax, eax

; 443  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@SetOffset:

; 433  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "FLAT" ) ) {

	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG10974
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetOffset

; 439  :     }
; 440  :     i++;

	lea	eax, DWORD PTR [rsi+1]
	mov	DWORD PTR ModuleInfo+384, 1

; 441  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 442  :     return( NOT_ERROR );

	xor	eax, eax

; 443  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN4@SetOffset:

; 434  :         ModuleInfo.offsettype = OT_FLAT;
; 435  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "SEGMENT" ) ) {

	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG10977
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetOffset

; 439  :     }
; 440  :     i++;

	lea	eax, DWORD PTR [rsi+1]
	mov	DWORD PTR ModuleInfo+384, 2

; 441  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 442  :     return( NOT_ERROR );

	xor	eax, eax

; 443  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@SetOffset:

; 436  :         ModuleInfo.offsettype = OT_SEGMENT;
; 437  :     } else {
; 438  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	mov	rdx, QWORD PTR [rbx+8]
	mov	ecx, 209				; 000000d1H

; 443  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 436  :         ModuleInfo.offsettype = OT_SEGMENT;
; 437  :     } else {
; 438  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	jmp	EmitErr
SetOffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetEpilogue PROC

; 396  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 397  :     int i = *pi;

	movsxd	rsi, DWORD PTR [rcx]
	mov	rdi, rcx

; 398  : 
; 399  :     if ( tokenarray[i].token != T_ID ) {

	mov	rbx, rsi
	shl	rbx, 5
	add	rbx, rdx
	cmp	BYTE PTR [rbx], 8
	je	SHORT $LN2@SetEpilogu

; 400  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	mov	rdx, QWORD PTR [rbx+24]
	mov	ecx, 209				; 000000d1H

; 415  :     }
; 416  : 
; 417  :     i++;
; 418  :     *pi = i;
; 419  :     return( NOT_ERROR );
; 420  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 400  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	jmp	EmitErr
$LN2@SetEpilogu:

; 401  :     }
; 402  :     if ( ModuleInfo.proc_epilogue ) {

	mov	QWORD PTR ModuleInfo+328, 0

; 403  :         LclFree( ModuleInfo.proc_epilogue );
; 404  :         ModuleInfo.proc_epilogue = NULL;
; 405  :     }
; 406  : 
; 407  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "NONE" ) ) {

	lea	rdx, OFFSET FLAT:$SG10958
	mov	rcx, QWORD PTR [rbx+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetEpilogu

; 408  :         ModuleInfo.epiloguemode = PEM_NONE;

	mov	BYTE PTR ModuleInfo+425, 2
	jmp	SHORT $LN7@SetEpilogu
$LN4@SetEpilogu:

; 409  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "EPILOGUEDEF" ) ) {

	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG10961
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetEpilogu

; 410  :         ModuleInfo.epiloguemode = PEM_DEFAULT;

	mov	BYTE PTR ModuleInfo+425, al

; 411  :     } else {

	jmp	SHORT $LN7@SetEpilogu
$LN6@SetEpilogu:

; 412  :         ModuleInfo.epiloguemode = PEM_MACRO;

	mov	BYTE PTR ModuleInfo+425, 1

; 413  :         ModuleInfo.proc_epilogue = LclAlloc( strlen( tokenarray[i].string_ptr ) + 1);

	or	rcx, -1
	mov	rax, QWORD PTR [rbx+8]
$LL13@SetEpilogu:
	inc	rcx
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL13@SetEpilogu
	inc	rcx
	call	LclAlloc
	mov	QWORD PTR ModuleInfo+328, rax

; 414  :         strcpy( ModuleInfo.proc_epilogue, tokenarray[i].string_ptr );

	mov	rdx, QWORD PTR [rbx+8]
$LL9@SetEpilogu:
	movzx	ecx, BYTE PTR [rdx]
	lea	rdx, QWORD PTR [rdx+1]
	mov	BYTE PTR [rax], cl
	lea	rax, QWORD PTR [rax+1]
	test	cl, cl
	jne	SHORT $LL9@SetEpilogu
$LN7@SetEpilogu:

; 415  :     }
; 416  : 
; 417  :     i++;
; 418  :     *pi = i;
; 419  :     return( NOT_ERROR );
; 420  : }

	mov	rbx, QWORD PTR [rsp+48]
	lea	eax, DWORD PTR [rsi+1]
	mov	rsi, QWORD PTR [rsp+56]
	mov	DWORD PTR [rdi], eax
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetEpilogue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetPrologue PROC

; 364  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 365  :     int i = *pi;

	movsxd	rsi, DWORD PTR [rcx]
	mov	rdi, rcx

; 366  : 
; 367  :     if ( tokenarray[i].token != T_ID ) {

	mov	rbx, rsi
	shl	rbx, 5
	add	rbx, rdx
	cmp	BYTE PTR [rbx], 8
	je	SHORT $LN2@SetPrologu

; 368  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	mov	rdx, QWORD PTR [rbx+24]
	mov	ecx, 209				; 000000d1H

; 382  :     }
; 383  : 
; 384  :     i++;
; 385  :     *pi = i;
; 386  :     return( NOT_ERROR );
; 387  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 368  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	jmp	EmitErr
$LN2@SetPrologu:

; 369  :     }
; 370  :     if ( ModuleInfo.proc_prologue ) {

	mov	QWORD PTR ModuleInfo+320, 0

; 371  :         LclFree( ModuleInfo.proc_prologue );
; 372  :         ModuleInfo.proc_prologue = NULL;
; 373  :     }
; 374  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "NONE" ) ) {

	lea	rdx, OFFSET FLAT:$SG10942
	mov	rcx, QWORD PTR [rbx+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetPrologu

; 375  :         ModuleInfo.prologuemode = PEM_NONE;

	mov	BYTE PTR ModuleInfo+424, 2
	jmp	SHORT $LN7@SetPrologu
$LN4@SetPrologu:

; 376  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "PROLOGUEDEF" ) ) {

	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG10945
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetPrologu

; 377  :         ModuleInfo.prologuemode = PEM_DEFAULT;

	mov	BYTE PTR ModuleInfo+424, al

; 378  :     } else {

	jmp	SHORT $LN7@SetPrologu
$LN6@SetPrologu:

; 379  :         ModuleInfo.prologuemode = PEM_MACRO;

	mov	BYTE PTR ModuleInfo+424, 1

; 380  :         ModuleInfo.proc_prologue = LclAlloc( strlen( tokenarray[i].string_ptr ) + 1);

	or	rcx, -1
	mov	rax, QWORD PTR [rbx+8]
$LL13@SetPrologu:
	inc	rcx
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL13@SetPrologu
	inc	rcx
	call	LclAlloc
	mov	QWORD PTR ModuleInfo+320, rax

; 381  :         strcpy( ModuleInfo.proc_prologue, tokenarray[i].string_ptr );

	mov	rdx, QWORD PTR [rbx+8]
$LL9@SetPrologu:
	movzx	ecx, BYTE PTR [rdx]
	lea	rdx, QWORD PTR [rdx+1]
	mov	BYTE PTR [rax], cl
	lea	rax, QWORD PTR [rax+1]
	test	cl, cl
	jne	SHORT $LL9@SetPrologu
$LN7@SetPrologu:

; 382  :     }
; 383  : 
; 384  :     i++;
; 385  :     *pi = i;
; 386  :     return( NOT_ERROR );
; 387  : }

	mov	rbx, QWORD PTR [rsp+48]
	lea	eax, DWORD PTR [rsi+1]
	mov	rsi, QWORD PTR [rsp+56]
	mov	DWORD PTR [rdi], eax
	xor	eax, eax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetPrologue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetSetIF2 PROC

; 331  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 332  :     int i = *pi;

	movsxd	rbx, DWORD PTR [rcx]
	mov	rdi, rcx

; 333  : 
; 334  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "TRUE" ) ) {

	mov	rsi, rbx
	shl	rsi, 5
	add	rsi, rdx
	lea	rdx, OFFSET FLAT:$SG10927
	mov	rcx, QWORD PTR [rsi+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetSetIF2

; 335  :         ModuleInfo.setif2 = TRUE;

	or	DWORD PTR ModuleInfo+408, 1024		; 00000400H

; 336  :         i++;

	jmp	SHORT $LN7@SetSetIF2
$LN2@SetSetIF2:

; 337  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "FALSE" ) ) {

	mov	rcx, QWORD PTR [rsi+8]
	lea	rdx, OFFSET FLAT:$SG10929
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetSetIF2

; 338  :         ModuleInfo.setif2 = FALSE;

	and	DWORD PTR ModuleInfo+408, -1025		; fffffbffH
$LN7@SetSetIF2:

; 339  :         i++;

	inc	ebx
$LN6@SetSetIF2:

; 340  :     }
; 341  :     *pi = i;
; 342  :     return( NOT_ERROR );
; 343  : }

	mov	rsi, QWORD PTR [rsp+56]
	xor	eax, eax
	mov	DWORD PTR [rdi], ebx
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetSetIF2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 48
pi$ = 48
tokenarray$ = 56
SetLanguage PROC

; 308  : {

	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 309  :     int i = *pi;

	movsxd	r8, DWORD PTR [rcx]
	mov	rbx, rdx

; 310  :     //lang_type langtype;
; 311  :     //int language = ERROR;
; 312  : 
; 313  :     if ( tokenarray[i].token == T_RES_ID ) {

	mov	rax, r8
	mov	DWORD PTR i$[rsp], r8d
	shl	rax, 5
	mov	rdi, rcx
	cmp	BYTE PTR [rax+rdx], 7
	jne	SHORT $LN3@SetLanguag

; 314  :         if ( GetLangType( &i, tokenarray, &ModuleInfo.langtype ) == NOT_ERROR ) {

	lea	r8, OFFSET FLAT:ModuleInfo+364
	lea	rcx, QWORD PTR i$[rsp]
	call	GetLangType
	test	eax, eax
	jne	SHORT $LN6@SetLanguag

; 315  :             /* update @Interface assembly time variable */
; 316  :             if ( ModuleInfo.model != MODEL_NONE && sym_Interface )

	cmp	DWORD PTR ModuleInfo+360, eax
	je	SHORT $LN4@SetLanguag
	mov	rcx, QWORD PTR sym_Interface
	test	rcx, rcx
	je	SHORT $LN4@SetLanguag

; 317  :                 sym_Interface->value = ModuleInfo.langtype;

	mov	eax, DWORD PTR ModuleInfo+364
	mov	DWORD PTR [rcx+16], eax
$LN4@SetLanguag:

; 318  :             *pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rdi], eax

; 319  :             return( NOT_ERROR );

	xor	eax, eax

; 323  : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@SetLanguag:

; 319  :             return( NOT_ERROR );

	mov	r8d, DWORD PTR i$[rsp]
$LN3@SetLanguag:

; 320  :         }
; 321  :     }
; 322  :     return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rdx, r8d
	mov	ecx, 209				; 000000d1H
	shl	rdx, 5
	mov	rdx, QWORD PTR [rdx+rbx+24]
	call	EmitErr

; 323  : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetLanguage ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetNoKeyword PROC

; 260  : {

	mov	QWORD PTR [rsp+32], rbp
	push	r14
	sub	rsp, 32					; 00000020H

; 261  :     int i = *pi;

	movsxd	rbp, DWORD PTR [rcx]
	mov	r8, rdx

; 262  :     //struct ReservedWord *resw;
; 263  :     unsigned index;
; 264  :     char *p;
; 265  : 
; 266  :     if( Parse_Pass != PASS_1 ) {
; 267  :         SkipOption( pi, tokenarray );

	mov	rax, rbp
	mov	r14, rcx
	shl	rax, 5
	cmp	DWORD PTR Parse_Pass, 0
	je	SHORT $LN12@SetNoKeywo
	cmp	BYTE PTR [rax+rdx], 0
	je	SHORT $LN49@SetNoKeywo
	npad	6
$LL24@SetNoKeywo:
	movsxd	rdx, DWORD PTR [r14]
	mov	rax, rdx
	shl	rax, 5
	cmp	BYTE PTR [rax+r8], 44			; 0000002cH
	je	SHORT $LN49@SetNoKeywo
	lea	eax, DWORD PTR [rdx+1]
	movsxd	rcx, eax
	shl	rcx, 5
	mov	DWORD PTR [r14], eax
	cmp	BYTE PTR [rcx+r8], 0
	jne	SHORT $LL24@SetNoKeywo
$LN49@SetNoKeywo:

; 268  :         return( NOT_ERROR);

	xor	eax, eax

; 302  : }

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN12@SetNoKeywo:

; 269  :     }
; 270  :     if ( tokenarray[i].token != T_STRING || tokenarray[i].string_delim != '<' ) {

	add	rdx, rax
	cmp	BYTE PTR [rdx], 9
	jne	$LN14@SetNoKeywo
	cmp	BYTE PTR [rdx+1], 60			; 0000003cH
	jne	$LN14@SetNoKeywo

; 272  :     }
; 273  :     for ( p = tokenarray[i].string_ptr; *p; ) {

	mov	QWORD PTR [rsp+48], rbx
	mov	rbx, QWORD PTR [rdx+8]
	mov	QWORD PTR [rsp+56], rsi
	mov	QWORD PTR [rsp+64], rdi
	movzx	eax, BYTE PTR [rbx]
	test	al, al
	je	$LN48@SetNoKeywo
$LL2@SetNoKeywo:

; 274  :         while ( isspace( *p ) ) p++;

	movsx	ecx, al
	call	isspace
	test	eax, eax
	je	SHORT $LN6@SetNoKeywo
$LL5@SetNoKeywo:
	movsx	ecx, BYTE PTR [rbx+1]
	inc	rbx
	call	isspace
	test	eax, eax
	jne	SHORT $LL5@SetNoKeywo
$LN6@SetNoKeywo:

; 275  :         if ( *p ) {

	movzx	eax, BYTE PTR [rbx]
	test	al, al
	je	SHORT $LN31@SetNoKeywo

; 276  :             char *p2 = p;

	mov	rsi, rbx
	npad	3
$LL9@SetNoKeywo:

; 280  :                 if ( isspace( *p ) || *p == ',' )

	movsx	ecx, al
	call	isspace
	test	eax, eax
	jne	SHORT $LN32@SetNoKeywo
	cmp	BYTE PTR [rbx], 44			; 0000002cH
	je	SHORT $LN32@SetNoKeywo

; 277  :             unsigned char cnt;
; 278  :             //struct instr_item *instruct;
; 279  :             for ( ;*p; p++ ) {

	movzx	eax, BYTE PTR [rbx+1]
	inc	rbx
	test	al, al
	jne	SHORT $LL9@SetNoKeywo
$LN32@SetNoKeywo:

; 281  :                     break;
; 282  :             }
; 283  :             cnt = p - p2;

	movzx	edi, bl

; 284  :             /* todo: if MAX_ID_LEN can be > 255, then check size,
; 285  :              * since a reserved word's size must be <= 255
; 286  :              */
; 287  :             index = FindResWord( p2, cnt );

	mov	rcx, rsi
	sub	dil, sil
	movzx	edx, dil
	call	FindResWord

; 288  :             if ( index != 0 )

	test	eax, eax
	je	SHORT $LN18@SetNoKeywo

; 289  :                 DisableKeyword( index );

	mov	ecx, eax
	call	DisableKeyword
	jmp	SHORT $LN31@SetNoKeywo
$LN18@SetNoKeywo:

; 290  :             else {
; 291  :                 if ( IsKeywordDisabled( p2, cnt ) ) {

	movzx	edx, dil
	mov	rcx, rsi
	call	IsKeywordDisabled
	test	al, al
	jne	SHORT $LN33@SetNoKeywo
$LN31@SetNoKeywo:

; 293  :                 }
; 294  :             }
; 295  :         }
; 296  :         while ( isspace(*p) ) p++;

	movsx	ecx, BYTE PTR [rbx]
	call	isspace
	test	eax, eax
	je	SHORT $LN11@SetNoKeywo
	npad	9
$LL10@SetNoKeywo:
	movsx	ecx, BYTE PTR [rbx+1]
	inc	rbx
	call	isspace
	test	eax, eax
	jne	SHORT $LL10@SetNoKeywo
$LN11@SetNoKeywo:

; 297  :         if (*p == ',') p++;

	cmp	BYTE PTR [rbx], 44			; 0000002cH
	jne	SHORT $LN21@SetNoKeywo
	inc	rbx
$LN21@SetNoKeywo:

; 272  :     }
; 273  :     for ( p = tokenarray[i].string_ptr; *p; ) {

	movzx	eax, BYTE PTR [rbx]
	test	al, al
	jne	$LL2@SetNoKeywo
$LN48@SetNoKeywo:

; 298  :     }
; 299  :     i++;

	lea	eax, DWORD PTR [rbp+1]

; 300  :     *pi = i;

	mov	DWORD PTR [r14], eax

; 301  :     return( NOT_ERROR );

	xor	eax, eax
$LN52@SetNoKeywo:
	mov	rsi, QWORD PTR [rsp+56]
	mov	rbx, QWORD PTR [rsp+48]
	mov	rdi, QWORD PTR [rsp+64]

; 302  : }

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14
	ret	0
$LN33@SetNoKeywo:

; 292  :                     return( EmitError( RESERVED_WORD_EXPECTED ) );

	mov	ecx, 158				; 0000009eH
	call	EmitError
	jmp	SHORT $LN52@SetNoKeywo
$LN14@SetNoKeywo:

; 271  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	mov	rdx, QWORD PTR [rdx+24]
	mov	ecx, 209				; 000000d1H

; 302  : }

	mov	rbp, QWORD PTR [rsp+72]
	add	rsp, 32					; 00000020H
	pop	r14

; 271  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	jmp	EmitErr
SetNoKeyword ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
;	COMDAT SkipOption
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SkipOption PROC						; COMDAT

; 250  :     while ( tokenarray[*pi].token != T_FINAL &&

	movsxd	rax, DWORD PTR [rcx]
	mov	r9, rcx
	shl	rax, 5
	cmp	BYTE PTR [rax+rdx], 0
	je	SHORT $LN3@SkipOption
$LL2@SkipOption:
	movsxd	r8, DWORD PTR [r9]
	mov	rax, r8
	shl	rax, 5
	cmp	BYTE PTR [rax+rdx], 44			; 0000002cH
	je	SHORT $LN3@SkipOption

; 251  :            tokenarray[*pi].token != T_COMMA )
; 252  :         (*pi)++;

	lea	eax, DWORD PTR [r8+1]
	movsxd	rcx, eax
	shl	rcx, 5
	mov	DWORD PTR [r9], eax
	cmp	BYTE PTR [rcx+rdx], 0
	jne	SHORT $LL2@SkipOption
$LN3@SkipOption:

; 253  : }

	ret	0
SkipOption ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoSignExt PROC

; 243  :     ModuleInfo.NoSignExtend = TRUE;

	or	DWORD PTR ModuleInfo+408, 262144	; 00040000H

; 244  :     return( NOT_ERROR );

	xor	eax, eax

; 245  : }

	ret	0
SetNoSignExt ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetExpr32 PROC

; 236  :     /* default, nothing to do */
; 237  :     return( NOT_ERROR );

	xor	eax, eax

; 238  : }

	ret	0
SetExpr32 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoOldmacros PROC

; 227  :     /* default, nothing to do */
; 228  :     return( NOT_ERROR );

	xor	eax, eax

; 229  : }

	ret	0
SetNoOldmacros ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoReadonly PROC

; 218  :     /* default, nothing to do */
; 219  :     return( NOT_ERROR );

	xor	eax, eax

; 220  : }

	ret	0
SetNoReadonly ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoLJmp PROC

; 209  :     ModuleInfo.ljmp = FALSE;

	and	DWORD PTR ModuleInfo+408, -33		; ffffffdfH

; 210  :     return( NOT_ERROR );

	xor	eax, eax

; 211  : }

	ret	0
SetNoLJmp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetLJmp	PROC

; 200  :     ModuleInfo.ljmp = TRUE;

	or	DWORD PTR ModuleInfo+408, 32		; 00000020H

; 201  :     return( NOT_ERROR );

	xor	eax, eax

; 202  : }

	ret	0
SetLJmp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoEmulator PROC

; 191  :     ModuleInfo.emulator = FALSE;

	and	DWORD PTR ModuleInfo+408, -513		; fffffdffH

; 192  :     return( NOT_ERROR );

	xor	eax, eax

; 193  : }

	ret	0
SetNoEmulator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetEmulator PROC

; 182  :     ModuleInfo.emulator = TRUE;

	or	DWORD PTR ModuleInfo+408, 512		; 00000200H

; 183  :     return( NOT_ERROR );

	xor	eax, eax

; 184  : }

	ret	0
SetEmulator ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoOldStructs PROC

; 173  :     ModuleInfo.oldstructs = FALSE;

	and	DWORD PTR ModuleInfo+408, -257		; fffffeffH

; 174  :     return( NOT_ERROR );

	xor	eax, eax

; 175  : }

	ret	0
SetNoOldStructs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetOldStructs PROC

; 164  :     ModuleInfo.oldstructs = TRUE;

	or	DWORD PTR ModuleInfo+408, 256		; 00000100H

; 165  :     return( NOT_ERROR );

	xor	eax, eax

; 166  : }

	ret	0
SetOldStructs ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoScoped PROC

; 155  :     ModuleInfo.scoped = FALSE;

	and	DWORD PTR ModuleInfo+408, -129		; ffffff7fH

; 156  :     return( NOT_ERROR );

	xor	eax, eax

; 157  : }

	ret	0
SetNoScoped ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetScoped PROC

; 146  :     ModuleInfo.scoped = TRUE;

	or	DWORD PTR ModuleInfo+408, 128		; 00000080H

; 147  :     return( NOT_ERROR );

	xor	eax, eax

; 148  : }

	ret	0
SetScoped ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetNoM510 PROC

; 136  : {

	sub	rsp, 40					; 00000028H

; 137  :     SetMasm510(FALSE);

	xor	ecx, ecx
	call	SetMasm510

; 138  :     return( NOT_ERROR );

	xor	eax, eax

; 139  : }

	add	rsp, 40					; 00000028H
	ret	0
SetNoM510 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetM510	PROC

; 127  : {

	sub	rsp, 40					; 00000028H

; 128  :     SetMasm510( TRUE );

	mov	cl, 1
	call	SetMasm510

; 129  :     return( NOT_ERROR );

	xor	eax, eax

; 130  : }

	add	rsp, 40					; 00000028H
	ret	0
SetM510	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetCaseMap PROC

; 98   : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 99   :     int i = *pi;

	movsxd	rsi, DWORD PTR [rcx]
	mov	rdi, rcx

; 100  :     if ( tokenarray[i].token == T_ID ) {

	mov	rbx, rsi
	shl	rbx, 5
	add	rbx, rdx
	cmp	BYTE PTR [rbx], 8
	jne	$LN2@SetCaseMap

; 101  :         if ( 0 == _stricmp( tokenarray[i].string_ptr, "NONE" ) ) {

	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG10778
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetCaseMap

; 102  :             ModuleInfo.case_sensitive = TRUE;        /* -Cx */
; 103  :             ModuleInfo.convert_uppercase = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -3					; fffffffdH
	or	eax, 1
	jmp	SHORT $LN11@SetCaseMap
$LN4@SetCaseMap:

; 104  :         } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "NOTPUBLIC" ) ) {

	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG10781
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetCaseMap

; 105  :             ModuleInfo.case_sensitive = FALSE;       /* -Cp */
; 106  :             ModuleInfo.convert_uppercase = FALSE;

	and	DWORD PTR ModuleInfo+408, -4		; fffffffcH

; 110  :         } else {
; 111  :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );
; 112  :         }
; 113  :         DebugMsg1(("SetCaseMap(%s) ok\n", tokenarray[i].string_ptr ));
; 114  :         i++;
; 115  :         SymSetCmpFunc();

	call	SymSetCmpFunc
	lea	eax, DWORD PTR [rsi+1]

; 118  :     }
; 119  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 120  :     return( NOT_ERROR );

	xor	eax, eax

; 121  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN6@SetCaseMap:

; 107  :         } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "ALL" ) ) {

	mov	rcx, QWORD PTR [rbx+8]
	lea	rdx, OFFSET FLAT:$SG10784
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetCaseMap

; 108  :             ModuleInfo.case_sensitive = FALSE;       /* -Cu */

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -2					; fffffffeH

; 109  :             ModuleInfo.convert_uppercase = TRUE;

	or	eax, 2
$LN11@SetCaseMap:
	mov	DWORD PTR ModuleInfo+408, eax

; 110  :         } else {
; 111  :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );
; 112  :         }
; 113  :         DebugMsg1(("SetCaseMap(%s) ok\n", tokenarray[i].string_ptr ));
; 114  :         i++;
; 115  :         SymSetCmpFunc();

	call	SymSetCmpFunc
	lea	eax, DWORD PTR [rsi+1]

; 118  :     }
; 119  :     *pi = i;

	mov	DWORD PTR [rdi], eax

; 120  :     return( NOT_ERROR );

	xor	eax, eax

; 121  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN2@SetCaseMap:

; 116  :     } else {
; 117  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	mov	rdx, QWORD PTR [rbx+24]
	mov	ecx, 209				; 000000d1H

; 121  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 116  :     } else {
; 117  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	jmp	EmitErr
SetCaseMap ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoDotName PROC

; 90   :     ModuleInfo.dotname = FALSE;

	and	DWORD PTR ModuleInfo+408, -17		; ffffffefH

; 91   :     return( NOT_ERROR );

	xor	eax, eax

; 92   : }

	ret	0
SetNoDotName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetDotName PROC

; 81   :     ModuleInfo.dotname = TRUE;

	or	DWORD PTR ModuleInfo+408, 16

; 82   :     return( NOT_ERROR );

	xor	eax, eax

; 83   : }

	ret	0
SetDotName ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opndx$ = 48
i$ = 176
pi$ = 176
tokenarray$ = 184
SetZeroLocals PROC

; 58   : {

	mov	r11, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 59   : 	int i = *pi;

	mov	eax, DWORD PTR [rcx]

; 60   : 	struct expr opndx;
; 61   : 
; 62   : 	if (EvalOperand(&i, tokenarray, Token_Count, &opndx, 0) == ERROR)

	lea	r9, QWORD PTR [r11-120]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rbx, rcx
	lea	rcx, QWORD PTR [r11+8]
	mov	DWORD PTR [r11+8], eax
	mov	BYTE PTR [rsp+32], 0
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetZeroLoc

; 63   : 		return(ERROR);

	or	eax, eax

; 75   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN2@SetZeroLoc:

; 64   : 	if (opndx.kind == EXPR_CONST) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN3@SetZeroLoc

; 65   : 		if (opndx.llvalue > 1) {

	mov	rax, QWORD PTR opndx$[rsp]
	cmp	rax, 1
	jbe	SHORT $LN5@SetZeroLoc

; 66   : 			return(EmitConstError(&opndx));

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError

; 75   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN5@SetZeroLoc:

; 67   : 		}
; 68   : 		ZEROLOCALS = opndx.llvalue;

	mov	BYTE PTR ZEROLOCALS, al

; 72   : 	}
; 73   : 	*pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rbx], eax

; 74   : 	return(NOT_ERROR);

	xor	eax, eax

; 75   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN3@SetZeroLoc:

; 69   : 	}
; 70   : 	else {
; 71   : 		return(EmitError(CONSTANT_EXPECTED));

	mov	ecx, 65					; 00000041H
	call	EmitError

; 75   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
SetZeroLocals ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
opndx$ = 48
i$ = 176
pi$ = 176
tokenarray$ = 184
SetEvex	PROC

; 37   : {

	mov	r11, rsp
	push	rbx
	sub	rsp, 160				; 000000a0H

; 38   : 	int i = *pi;

	mov	eax, DWORD PTR [rcx]

; 39   : 	struct expr opndx;
; 40   : 
; 41   : 	if (EvalOperand(&i, tokenarray, Token_Count, &opndx, 0) == ERROR)

	lea	r9, QWORD PTR [r11-120]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rbx, rcx
	lea	rcx, QWORD PTR [r11+8]
	mov	DWORD PTR [r11+8], eax
	mov	BYTE PTR [rsp+32], 0
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetEvex

; 42   : 		return(ERROR);

	or	eax, eax

; 54   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN2@SetEvex:

; 43   : 	if (opndx.kind == EXPR_CONST) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN3@SetEvex

; 44   : 		if (opndx.llvalue > 1) {

	mov	rax, QWORD PTR opndx$[rsp]
	cmp	rax, 1
	jbe	SHORT $LN5@SetEvex

; 45   : 			return(EmitConstError(&opndx));

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError

; 54   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN5@SetEvex:

; 46   : 		}
; 47   : 		evex = opndx.llvalue;

	mov	BYTE PTR evex, al

; 51   : 	}
; 52   : 	*pi = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rbx], eax

; 53   : 	return(NOT_ERROR);

	xor	eax, eax

; 54   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
$LN3@SetEvex:

; 48   : 	}
; 49   : 	else {
; 50   : 		return(EmitError(CONSTANT_EXPECTED));

	mov	ecx, 65					; 00000041H
	call	EmitError

; 54   : }

	add	rsp, 160				; 000000a0H
	pop	rbx
	ret	0
SetEvex	ENDP
_TEXT	ENDS
END
