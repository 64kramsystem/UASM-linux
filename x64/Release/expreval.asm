; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG11618 DB	01H DUP (?)
$SG11769 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
_DATA	ENDS
_BSS	SEGMENT
$SG11148 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG11079 DB	'rn-sae', 00H
	ORG $+1
$SG11082 DB	'rd-sae', 00H
	ORG $+1
$SG11085 DB	'ru-sae', 00H
	ORG $+1
$SG11088 DB	'rz-sae', 00H
	ORG $+1
$SG11091 DB	'sae', 00H
$SG11151 DB	'@@', 00H
_DATA	ENDS
PUBLIC	EvalOperand
PUBLIC	ExprEvalInit
PUBLIC	EmitConstError
PUBLIC	myatoi128
EXTRN	isalpha:PROC
EXTRN	_strupr:PROC
EXTRN	EmitErr:PROC
EXTRN	SymAlloc:PROC
EXTRN	SymLookup:PROC
EXTRN	SymFind:PROC
EXTRN	SizeFromMemtype:PROC
EXTRN	MemtypeFromSize:PROC
EXTRN	SizeFromRegister:PROC
EXTRN	sym_add_table:PROC
EXTRN	GetResWName:PROC
EXTRN	SetSymSegOfs:PROC
EXTRN	GetSymOfssize:PROC
EXTRN	DefineFlatGroup:PROC
EXTRN	GetStdAssumeEx:PROC
EXTRN	CreateTypeSymbol:PROC
EXTRN	SearchNameInStruct:PROC
EXTRN	GetAnonymousLabel:PROC
EXTRN	atofloat:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	Parse_Pass:DWORD
EXTRN	SymTables:BYTE
EXTRN	SpecialTable:BYTE
EXTRN	CurrProc:QWORD
EXTRN	CurrStruct:QWORD
EXTRN	__ImageBase:BYTE
_BSS	SEGMENT
	ALIGN	8

thissym	DQ	01H DUP (?)
nullstruct DQ	01H DUP (?)
nullmbr	DQ	01H DUP (?)
fnEmitErr DQ	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$EvalOperand DD imagerel $LN15
	DD	imagerel $LN15+220
	DD	imagerel $unwind$EvalOperand
$pdata$EmitConstError DD imagerel $LN7
	DD	imagerel $LN7+55
	DD	imagerel $unwind$EmitConstError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_precedence DD imagerel get_precedence
	DD	imagerel get_precedence+268
	DD	imagerel $unwind$get_precedence
pdata	ENDS
pdata	SEGMENT
$pdata$myatoi128 DD imagerel $LN37
	DD	imagerel $LN37+104
	DD	imagerel $unwind$myatoi128
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$get_operand DD imagerel get_operand
	DD	imagerel get_operand+2316
	DD	imagerel $unwind$get_operand
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ConstError DD imagerel ConstError
	DD	imagerel ConstError+53
	DD	imagerel $unwind$ConstError
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$invalid_operand DD imagerel invalid_operand
	DD	imagerel invalid_operand+49
	DD	imagerel $unwind$invalid_operand
pdata	ENDS
pdata	SEGMENT
$pdata$sizlen_op DD imagerel sizlen_op
	DD	imagerel sizlen_op+544
	DD	imagerel $unwind$sizlen_op
$pdata$type_op DD imagerel type_op
	DD	imagerel type_op+880
	DD	imagerel $unwind$type_op
$pdata$offset_op DD imagerel offset_op
	DD	imagerel offset_op+246
	DD	imagerel $unwind$offset_op
$pdata$low32_op DD imagerel low32_op
	DD	imagerel low32_op+222
	DD	imagerel $unwind$low32_op
$pdata$high32_op DD imagerel high32_op
	DD	imagerel high32_op+219
	DD	imagerel $unwind$high32_op
$pdata$this_op DD imagerel this_op
	DD	imagerel this_op+227
	DD	imagerel $unwind$this_op
$pdata$wimask_op DD imagerel wimask_op
	DD	imagerel wimask_op+239
	DD	imagerel $unwind$wimask_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$plus_op DD imagerel plus_op
	DD	imagerel plus_op+699
	DD	imagerel $unwind$plus_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$minus_op DD imagerel minus_op
	DD	imagerel minus_op+690
	DD	imagerel $unwind$minus_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$dot_op DD imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$dot_op DD imagerel dot_op+64
	DD	imagerel dot_op+246
	DD	imagerel $chain$0$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$dot_op DD imagerel dot_op+246
	DD	imagerel dot_op+301
	DD	imagerel $chain$2$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$dot_op DD imagerel dot_op+301
	DD	imagerel dot_op+381
	DD	imagerel $chain$4$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$6$dot_op DD imagerel dot_op+381
	DD	imagerel dot_op+476
	DD	imagerel $chain$6$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$8$dot_op DD imagerel dot_op+476
	DD	imagerel dot_op+591
	DD	imagerel $chain$8$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$10$dot_op DD imagerel dot_op+591
	DD	imagerel dot_op+731
	DD	imagerel $chain$10$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$12$dot_op DD imagerel dot_op+731
	DD	imagerel dot_op+849
	DD	imagerel $chain$12$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$14$dot_op DD imagerel dot_op+849
	DD	imagerel dot_op+884
	DD	imagerel $chain$14$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$16$dot_op DD imagerel dot_op+884
	DD	imagerel dot_op+915
	DD	imagerel $chain$16$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$18$dot_op DD imagerel dot_op+915
	DD	imagerel dot_op+944
	DD	imagerel $chain$18$dot_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$positive_op DD imagerel positive_op
	DD	imagerel positive_op+105
	DD	imagerel $unwind$positive_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$negative_op DD imagerel negative_op
	DD	imagerel negative_op+129
	DD	imagerel $unwind$negative_op
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckAssume DD imagerel CheckAssume
	DD	imagerel CheckAssume+183
	DD	imagerel $unwind$CheckAssume
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$cmp_types DD imagerel cmp_types
	DD	imagerel cmp_types+42
	DD	imagerel $unwind$cmp_types
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$cmp_types DD imagerel cmp_types+42
	DD	imagerel cmp_types+131
	DD	imagerel $chain$0$cmp_types
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$cmp_types DD imagerel cmp_types+131
	DD	imagerel cmp_types+223
	DD	imagerel $chain$1$cmp_types
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$calculate DD imagerel calculate
	DD	imagerel calculate+94
	DD	imagerel $unwind$calculate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$calculate DD imagerel calculate+94
	DD	imagerel calculate+2032
	DD	imagerel $chain$0$calculate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$calculate DD imagerel calculate+2032
	DD	imagerel calculate+2200
	DD	imagerel $chain$1$calculate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$calculate DD imagerel calculate+2200
	DD	imagerel calculate+2219
	DD	imagerel $chain$2$calculate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$4$calculate DD imagerel calculate+2219
	DD	imagerel calculate+2354
	DD	imagerel $chain$4$calculate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$5$calculate DD imagerel calculate+2354
	DD	imagerel calculate+2536
	DD	imagerel $chain$5$calculate
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$evaluate DD imagerel evaluate
	DD	imagerel evaluate+1100
	DD	imagerel $unwind$evaluate
pdata	ENDS
CONST	SEGMENT
unaryop	DQ	FLAT:low_op
	DQ	FLAT:high_op
	DQ	FLAT:lowword_op
	DQ	FLAT:highword_op
	DQ	FLAT:low32_op
	DQ	FLAT:high32_op
	DQ	FLAT:offset_op
	DQ	FLAT:offset_op
	DQ	FLAT:offset_op
	DQ	FLAT:offset_op
	DQ	FLAT:seg_op
	DQ	FLAT:opattr_op
	DQ	FLAT:opattr_op
	DQ	FLAT:sizlen_op
	DQ	FLAT:sizlen_op
	DQ	FLAT:sizlen_op
	DQ	FLAT:sizlen_op
	DQ	FLAT:short_op
	DQ	FLAT:this_op
	DQ	FLAT:type_op
	DQ	FLAT:wimask_op
	DQ	FLAT:wimask_op
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$evaluate DD 072301H
	DD	01b3423H
	DD	0160123H
	DD	060167017H
	DD	05015H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$5$calculate DD 020021H
	DD	0a5400H
	DD	imagerel calculate
	DD	imagerel calculate+94
	DD	imagerel $unwind$calculate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$calculate DD 040021H
	DD	0bf400H
	DD	0a5400H
	DD	imagerel calculate
	DD	imagerel calculate+94
	DD	imagerel $unwind$calculate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$calculate DD 021H
	DD	imagerel calculate+94
	DD	imagerel calculate+2032
	DD	imagerel $chain$0$calculate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$calculate DD 020521H
	DD	0bf405H
	DD	imagerel calculate+94
	DD	imagerel calculate+2032
	DD	imagerel $chain$0$calculate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$calculate DD 020521H
	DD	0a5405H
	DD	imagerel calculate
	DD	imagerel calculate+94
	DD	imagerel $unwind$calculate
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$calculate DD 060d01H
	DD	0c340dH
	DD	0e009520dH
	DD	060067007H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$cmp_types DD 021H
	DD	imagerel cmp_types
	DD	imagerel cmp_types+42
	DD	imagerel $unwind$cmp_types
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$cmp_types DD 020521H
	DD	066405H
	DD	imagerel cmp_types
	DD	imagerel cmp_types+42
	DD	imagerel $unwind$cmp_types
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$cmp_types DD 060f01H
	DD	08540fH
	DD	07340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckAssume DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$negative_op DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$positive_op DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$18$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$16$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$14$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$12$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$10$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$8$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$6$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$4$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$dot_op DD 020021H
	DD	066400H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$dot_op DD 020521H
	DD	066405H
	DD	imagerel dot_op
	DD	imagerel dot_op+64
	DD	imagerel $unwind$dot_op
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$dot_op DD 040a01H
	DD	07340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$minus_op DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$plus_op DD 040a01H
	DD	06340aH
	DD	07006320aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$invalid_operand DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ConstError DD 010401H
	DD	04204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_operand DD 0c1c01H
	DD	0e641cH
	DD	0d541cH
	DD	0c341cH
	DD	0f018521cH
	DD	0d014e016H
	DD	07010c012H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$get_precedence DD 010401H
	DD	04204H
xdata	ENDS
xdata	SEGMENT
$unwind$EvalOperand DD 040a01H
	DD	08340aH
	DD	07006520aH
$unwind$EmitConstError DD 010401H
	DD	04204H
$unwind$myatoi128 DD 020501H
	DD	013405H
$unwind$sizlen_op DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$type_op DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
$unwind$offset_op DD 020601H
	DD	030023206H
$unwind$low32_op DD 060f01H
	DD	09640fH
	DD	08340fH
	DD	0700b520fH
$unwind$high32_op DD 040a01H
	DD	08340aH
	DD	07006520aH
$unwind$this_op DD 040a01H
	DD	06340aH
	DD	07006320aH
$unwind$wimask_op DD 010401H
	DD	04204H
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT is_expr_item
_TEXT	SEGMENT
item$ = 8
is_expr_item PROC					; COMDAT

; 3411 : {

	mov	rdx, rcx

; 3412 :     switch( item->token ) {

	movzx	ecx, BYTE PTR [rcx]
	sub	ecx, 1
	je	SHORT $LN6@is_expr_it
	sub	ecx, 2
	je	SHORT $LN13@is_expr_it
	sub	ecx, 4
	je	SHORT $LN11@is_expr_it
	cmp	ecx, 37					; 00000025H
	jne	$LN19@is_expr_it
$LN4@is_expr_it:

; 3433 :         }
; 3434 :         return( FALSE );

	xor	al, al

; 3455 : }

	ret	0
$LN11@is_expr_it:

; 3435 :     case T_RES_ID:
; 3436 :         if ( item->tokval == T_DUP ) /* DUP must terminate the expression */

	cmp	DWORD PTR [rdx+16], 259			; 00000103H
	je	SHORT $LN4@is_expr_it

; 3446 :             return( TRUE );
; 3447 :         }
; 3448 :         /* fall through. Other directives will end the expression */
; 3449 :     case T_COMMA:
; 3450 :     //case T_FLOAT: /* v2.05: floats are now handled */
; 3451 :     //case T_QUESTION_MARK: /* v2.08: no need to be handled here */
; 3452 :         return( FALSE );
; 3453 :     }
; 3454 :     return( TRUE );

	mov	al, 1

; 3455 : }

	ret	0
$LN13@is_expr_it:

; 3437 :             return( FALSE );
; 3438 :         break;
; 3439 :     case T_DIRECTIVE:
; 3440 :         /* PROC is converted to a type */
; 3441 :         if ( item->tokval == T_PROC ) {

	cmp	DWORD PTR [rdx+16], 428			; 000001acH
	jne	SHORT $LN4@is_expr_it

; 3442 :             item->token = T_STYPE;

	mov	BYTE PTR [rdx], 6

; 3443 :             /* v2.06: avoid to use ST_PROC */
; 3444 :             //item->bytval = ST_PROC;
; 3445 :             item->tokval = ( ( SIZE_CODEPTR & ( 1 << ModuleInfo.model ) ) ? T_FAR : T_NEAR );

	mov	eax, 1
	mov	ecx, DWORD PTR ModuleInfo+360
	shl	eax, cl
	test	al, 112					; 00000070H
	mov	eax, 0
	setne	al
	add	eax, 221				; 000000ddH
	mov	DWORD PTR [rdx+16], eax
	mov	al, 1

; 3455 : }

	ret	0
$LN6@is_expr_it:

; 3413 :     case T_INSTRUCTION:
; 3414 :         switch( item->tokval ) {

	mov	eax, DWORD PTR [rdx+16]
	add	eax, -501				; fffffe0bH
	cmp	eax, 75					; 0000004bH
	ja	SHORT $LN4@is_expr_it
	lea	r8, OFFSET FLAT:__ImageBase
	movzx	eax, BYTE PTR $LN17@is_expr_it[r8+rax]
	mov	ecx, DWORD PTR $LN18@is_expr_it[r8+rax*4]
	add	rcx, r8
	jmp	rcx
$LN7@is_expr_it:

; 3415 :         case T_SHL:
; 3416 :         case T_SHR:
; 3417 :             item->token = T_BINARY_OPERATOR;

	mov	WORD PTR [rdx], 2053			; 00000805H

; 3418 :             item->precedence = 8;
; 3419 :             return( TRUE );

	mov	al, 1

; 3455 : }

	ret	0
$LN8@is_expr_it:

; 3420 :         case T_NOT:
; 3421 :             item->token = T_UNARY_OPERATOR;

	mov	WORD PTR [rdx], 2820			; 00000b04H

; 3422 :             item->precedence = 11;
; 3423 :             return( TRUE );

	mov	al, 1

; 3455 : }

	ret	0
$LN9@is_expr_it:

; 3424 :         case T_AND:
; 3425 :             item->token = T_BINARY_OPERATOR;

	mov	WORD PTR [rdx], 3077			; 00000c05H

; 3426 :             item->precedence = 12;
; 3427 :             return( TRUE );

	mov	al, 1

; 3455 : }

	ret	0
$LN10@is_expr_it:

; 3428 :         case T_OR:
; 3429 :         case T_XOR:
; 3430 :             item->token = T_BINARY_OPERATOR;

	mov	WORD PTR [rdx], 3333			; 00000d05H
$LN19@is_expr_it:

; 3431 :             item->precedence = 13;
; 3432 :             return( TRUE );

	mov	al, 1

; 3455 : }

	ret	0
	npad	3
$LN18@is_expr_it:
	DD	$LN10@is_expr_it
	DD	$LN9@is_expr_it
	DD	$LN7@is_expr_it
	DD	$LN8@is_expr_it
	DD	$LN4@is_expr_it
$LN17@is_expr_it:
	DB	0
	DB	4
	DB	4
	DB	1
	DB	4
	DB	0
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	2
	DB	2
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	4
	DB	3
is_expr_item ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT evaluate
_TEXT	SEGMENT
exp_token$1$ = 48
oper$1$ = 56
opnd2$1 = 64
opnd1$ = 208
i$ = 216
tokenarray$ = 224
end$ = 232
flags$ = 240
evaluate PROC						; COMDAT

; 3245 : {

	mov	QWORD PTR [rsp+16], rbx
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	lea	rbp, QWORD PTR [rsp-63]
	sub	rsp, 176				; 000000b0H
	mov	r11, rcx

; 3246 :     ret_code rc = NOT_ERROR;

	xor	esi, esi

; 3247 :     unsigned char c;
; 3248 :     char *p;
; 3249 :     DebugMsg1(("%u evaluate(i=%d, end=%d, flags=%X) enter [opnd1: kind=%d type=%s]\n",
; 3250 :                ++evallvl, *i, end, flags, opnd1->kind, opnd1->type ? opnd1->type->name : "NULL" ));
; 3251 : 
; 3252 :     /* v2.07: this function has been "simplified".
; 3253 :      * it's ensured now that if any operator is involved
; 3254 :      * - including () and [] - then calculate() will be called.
; 3255 :      * v2.10: removed the 'return( ERROR )' branches, to make
; 3256 :      * OPATTR work better.
; 3257 :      * v2.10: loop changed from 'do {} while' to 'while () {}'.
; 3258 :      * v2.10: 'flags' argument contains "inside []" information.
; 3259 :      */
; 3260 : 
; 3261 :     /*
; 3262 :      * First token may be either an unary operator or an operand
; 3263 :      */
; 3264 :     if ( opnd1->kind == EXPR_EMPTY &&  !is_unary_op( tokenarray[*i].token ) ) {

	movzx	ecx, BYTE PTR flags$[rbp-113]
	mov	rbx, r8
	mov	rdi, rdx
	mov	r8, 45079976738832			; 0000290000000010H
	cmp	DWORD PTR [r11+60], -2
	jne	SHORT $LL2@evaluate
	movsxd	rax, DWORD PTR [rdx]
	shl	rax, 5
	movzx	edx, BYTE PTR [rax+rbx]
	cmp	dl, 45					; 0000002dH
	ja	SHORT $LN86@evaluate
	bt	r8, rdx
	jb	SHORT $LL2@evaluate
$LN86@evaluate:
	cmp	dl, 91					; 0000005bH
	je	SHORT $LL2@evaluate

; 3265 :         rc = get_operand( opnd1, i, tokenarray, flags );

	movzx	r9d, cl
	mov	r8, rbx
	mov	rcx, r11
	mov	rdx, rdi
	call	get_operand
	mov	esi, eax

; 3266 :     }
; 3267 :     /* now handle operators. */
; 3268 :     while ( rc == NOT_ERROR && *i < end && !IsCurrToken( T_CL_BRACKET ) && !IsCurrToken( T_CL_SQ_BRACKET ) ) {

	test	eax, eax
$LN119@evaluate:
	jne	$LN103@evaluate
	mov	r11, QWORD PTR opnd1$[rbp-113]
	mov	r9d, DWORD PTR end$[rbp-113]
$LL2@evaluate:
	movsxd	rdx, DWORD PTR [rdi]
	cmp	edx, r9d
	jge	$LN103@evaluate
	mov	rax, rdx
	shl	rax, 5
	movzx	ecx, BYTE PTR [rax+rbx]
	cmp	cl, 41					; 00000029H
	je	$LN103@evaluate
	cmp	cl, 93					; 0000005dH
	je	$LN103@evaluate

; 3269 : 
; 3270 :         int curr_operator;
; 3271 :         struct expr opnd2;
; 3272 : 
; 3273 :         curr_operator = *i;
; 3274 :         DebugMsg1(("%u evaluate loop, operator=>%s< opnd1->sym=%X, type=%s\n",
; 3275 :                    evallvl, tokenarray[curr_operator].string_ptr, opnd1->sym, (opnd1->type ? opnd1->type->name : "NULL") ));
; 3276 : 
; 3277 :         if ( opnd1->kind != EXPR_EMPTY ) {

	cmp	DWORD PTR [r11+60], -2
	je	SHORT $LN13@evaluate

; 3278 :             /* check operator behind operand. Must be binary or open bracket */
; 3279 :             if ( tokenarray[curr_operator].token == '+' || tokenarray[curr_operator].token == '-' )

	mov	r8, rdx
	shl	r8, 5
	movzx	ecx, BYTE PTR [r8+rbx]
	lea	eax, DWORD PTR [rcx-43]
	test	al, 253					; 000000fdH
	je	SHORT $LN12@evaluate
	cmp	cl, 5
	je	SHORT $LN13@evaluate
	cmp	cl, 40					; 00000028H
	jae	SHORT $LN13@evaluate

; 3281 :             else if( !is_operator( tokenarray[curr_operator].token ) || tokenarray[curr_operator].token == T_UNARY_OPERATOR ) {
; 3282 :                 DebugMsg(("%u evaluate: unexpected token at idx=%u, token=%X >%s<\n", evallvl, curr_operator, tokenarray[curr_operator].token, tokenarray[curr_operator].tokpos ));
; 3283 :                 rc = ERROR;

	or	esi, -1

; 3284 :                 //if ( !opnd2.is_opattr )  /* v2.11: opnd2 was accessed before initialization */
; 3285 :                 
; 3286 :                 if ( !opnd1->is_opattr )

	test	BYTE PTR [r11+76], 16
	jne	$LN103@evaluate

; 3287 :                     OperErr( curr_operator, tokenarray );

	cmp	cl, 12
	ja	$LN43@evaluate
	mov	ecx, 150				; 00000096H
	call	QWORD PTR fnEmitErr
	jmp	$LN103@evaluate
$LN12@evaluate:

; 3280 :                 tokenarray[curr_operator].specval = BINARY_PLUSMINUS;

	mov	BYTE PTR [r8+rbx+1], 1
$LN13@evaluate:

; 3288 :                 break;
; 3289 :             }
; 3290 :         }
; 3291 : 
; 3292 :         (*i)++;

	inc	DWORD PTR [rdi]

; 3293 : 
; 3294 :         init_expr( &opnd2 );

	xor	esi, esi

; 3295 :         PrepareOp( &opnd2, opnd1, &tokenarray[curr_operator] );

	mov	r8d, DWORD PTR [r11+76]
	xorps	xmm0, xmm0
	mov	BYTE PTR opnd2$1[rbp-37], sil
	mov	eax, r8d
	mov	ecx, DWORD PTR opnd2$1[rbp-37]
	mov	r10, rdx
	xor	eax, ecx
	shl	r10, 5
	and	eax, 16
	mov	QWORD PTR opnd2$1[rbp-113], rsi
	add	r10, rbx
	mov	QWORD PTR opnd2$1[rbp-105], rsi
	xor	ecx, eax
	movdqa	XMMWORD PTR opnd2$1[rbp-97], xmm0
	xorps	xmm1, xmm1
	mov	DWORD PTR opnd2$1[rbp-37], ecx
	movdqa	XMMWORD PTR opnd2$1[rbp-81], xmm1
	mov	QWORD PTR opnd2$1[rbp-65], rsi
	mov	DWORD PTR opnd2$1[rbp-57], -2
	mov	DWORD PTR opnd2$1[rbp-53], -2
	mov	DWORD PTR opnd2$1[rbp-49], 192		; 000000c0H
	mov	WORD PTR opnd2$1[rbp-45], 65024		; 0000fe00H
	movdqa	XMMWORD PTR opnd2$1[rbp-33], xmm0
	mov	QWORD PTR opnd2$1[rbp-17], rsi
	movzx	eax, BYTE PTR [r10]
	mov	QWORD PTR oper$1$[rbp-113], r10
	cmp	al, 4
	je	SHORT $LN57@evaluate
	cmp	al, 46					; 0000002eH
	jne	SHORT $LN51@evaluate
	mov	rax, QWORD PTR [r11+96]
	test	rax, rax
	je	SHORT $LN54@evaluate
	mov	QWORD PTR opnd2$1[rbp-17], rax
	bts	ecx, 7
	jmp	SHORT $LN116@evaluate
$LN54@evaluate:
	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
	jne	SHORT $LN51@evaluate
	mov	rax, QWORD PTR [r11+80]
	test	rax, rax
	je	SHORT $LN51@evaluate
	cmp	DWORD PTR [rax+32], esi
	jne	SHORT $LN51@evaluate
	mov	QWORD PTR opnd2$1[rbp-17], rsi
	bts	ecx, 7
	jmp	SHORT $LN116@evaluate
$LN57@evaluate:
	mov	edx, DWORD PTR [r10+16]
	sub	edx, 229				; 000000e5H
	je	SHORT $LN58@evaluate
	cmp	edx, 13
	jne	SHORT $LN51@evaluate
$LN58@evaluate:
	or	ecx, 16
$LN116@evaluate:
	mov	DWORD PTR opnd2$1[rbp-37], ecx
$LN51@evaluate:

; 3296 : 
; 3297 :         /* read the (next) operand.
; 3298 :          */
; 3299 : 
; 3300 :         if( tokenarray[curr_operator].token == T_OP_BRACKET ||

	movzx	eax, BYTE PTR [r10]
	cmp	al, 40					; 00000028H
	je	SHORT $LN19@evaluate
	cmp	al, 91					; 0000005bH
	je	SHORT $LN19@evaluate

; 3330 :             }
; 3331 : 
; 3332 :         } else if( is_unary_op( tokenarray[*i].token ) ) { /* brackets, +, -, T_UNARY_OPERATOR? */

	movsxd	rax, DWORD PTR [rdi]
	shl	rax, 5
	movzx	ecx, BYTE PTR [rax+rbx]
	cmp	cl, 45					; 0000002dH
	ja	SHORT $LN91@evaluate
	mov	rdx, 45079976738832			; 0000290000000010H
	bt	rdx, rcx
	jb	SHORT $LN29@evaluate
$LN91@evaluate:
	cmp	cl, 91					; 0000005bH
	je	SHORT $LN29@evaluate

; 3335 :             /* get either:
; 3336 :              * - operand of unary operator OR
; 3337 :              * - 2. operand of binary operator
; 3338 :              */
; 3339 :             rc = get_operand( &opnd2, i, tokenarray, flags );

	movzx	r9d, BYTE PTR flags$[rbp-113]
	lea	rcx, QWORD PTR opnd2$1[rbp-113]
	mov	r8, rbx
	mov	rdx, rdi
	call	get_operand
	mov	esi, eax
	jmp	$LN24@evaluate
$LN29@evaluate:

; 3333 :             rc = evaluate( &opnd2, i, tokenarray, end, flags | EXPF_ONEOPND );

	movzx	eax, BYTE PTR flags$[rbp-113]
	lea	rcx, QWORD PTR opnd2$1[rbp-113]
	or	al, 4
	mov	r8, rbx
	mov	rdx, rdi
	mov	BYTE PTR [rsp+32], al
	call	evaluate
	mov	esi, eax

; 3334 :         } else {

	jmp	$LN24@evaluate
$LN19@evaluate:

; 3301 :            tokenarray[curr_operator].token == T_OP_SQ_BRACKET ) {
; 3302 :             int exp_token = T_CL_BRACKET;

	mov	edx, 41					; 00000029H
	mov	DWORD PTR exp_token$1$[rbp-113], edx

; 3303 :             if( tokenarray[curr_operator].token == T_OP_SQ_BRACKET ) {

	cmp	al, 91					; 0000005bH
	jne	SHORT $LN20@evaluate

; 3304 :                 exp_token = T_CL_SQ_BRACKET;

	mov	edx, 93					; 0000005dH
	mov	DWORD PTR exp_token$1$[rbp-113], edx
	jmp	SHORT $LN22@evaluate
$LN20@evaluate:

; 3305 : #if 1 /* v2.10: slightly hackish; see regression test dotop5.asm */
; 3306 :             } else if ( opnd1->is_dot ) {

	test	r8b, r8b
	jns	SHORT $LN22@evaluate

; 3307 :                 opnd2.type = opnd1->type;

	mov	rax, QWORD PTR [r11+96]

; 3308 :                 opnd2.is_dot = TRUE;

	bts	ecx, 7
	mov	QWORD PTR opnd2$1[rbp-17], rax
	mov	DWORD PTR opnd2$1[rbp-37], ecx
$LN22@evaluate:

; 3309 : #endif
; 3310 :             }
; 3311 : 
; 3312 :             rc = evaluate( &opnd2, i, tokenarray, end, ( flags | ( exp_token == T_CL_SQ_BRACKET ? EXPF_IN_SQBR : 0 ) ) & ~EXPF_ONEOPND );

	cmp	edx, 93					; 0000005dH
	mov	eax, esi
	mov	ecx, 8
	mov	r8, rbx
	cmove	eax, ecx
	mov	rdx, rdi
	or	al, BYTE PTR flags$[rbp-113]
	lea	rcx, QWORD PTR opnd2$1[rbp-113]
	and	al, 251					; 000000fbH
	mov	BYTE PTR [rsp+32], al
	call	evaluate

; 3313 : 
; 3314 :             if( !IsCurrToken( exp_token ) ) {

	movsxd	rcx, DWORD PTR [rdi]
	mov	esi, eax
	mov	rax, rcx
	shl	rax, 5
	movzx	eax, BYTE PTR [rax+rbx]
	cmp	eax, DWORD PTR exp_token$1$[rbp-113]
	je	SHORT $LN23@evaluate

; 3315 :                 DebugMsg(("%u evaluate: error, missing '%c', i=%u\n", evallvl, exp_token, *i ));
; 3316 :                 if ( rc != ERROR ) {

	cmp	esi, -1
	je	SHORT $LN26@evaluate

; 3317 :                     fnEmitErr( MISSING_RIGHT_PARENTHESIS_IN_EXPRESSION );

	mov	ecx, 227				; 000000e3H
	call	QWORD PTR fnEmitErr

; 3318 :                     /* v2.12: if curr token is a comma, the intention might be to call a macro function
; 3319 :                      * - using an undefined ( or not yet defined ) macro. The problem is that the name
; 3320 :                      * of this undefined macro isn't displayed in pass one, making it hard to see the
; 3321 :                      * reason for the error msg. However, if a comma is found, then it's surely no valid
; 3322 :                      * expression - in this case an "undefined symbol" err msg may be helpful.
; 3323 :                      */
; 3324 :                     if ( IsCurrToken( T_COMMA ) && opnd1->sym && opnd1->sym->state == SYM_UNDEFINED )

	movsxd	rax, DWORD PTR [rdi]
	shl	rax, 5
	cmp	BYTE PTR [rax+rbx], 44			; 0000002cH
	jne	SHORT $LN26@evaluate
	mov	rdx, QWORD PTR opnd1$[rbp-113]
	mov	rdx, QWORD PTR [rdx+80]
	test	rdx, rdx
	je	SHORT $LN26@evaluate
	cmp	DWORD PTR [rdx+32], 0
	jne	SHORT $LN26@evaluate

; 3325 :                         fnEmitErr( SYMBOL_NOT_DEFINED, opnd1->sym->name );

	mov	rdx, QWORD PTR [rdx+8]
	mov	ecx, 102				; 00000066H
	call	QWORD PTR fnEmitErr
$LN26@evaluate:

; 3326 :                 }
; 3327 :                 rc = ERROR;

	or	esi, -1

; 3328 :             } else {

	jmp	$LN110@evaluate
$LN23@evaluate:

; 3329 :                 (*i)++;

	lea	eax, DWORD PTR [rcx+1]
	mov	DWORD PTR [rdi], eax
$LN24@evaluate:

; 3340 :         }
; 3341 : 
; 3342 :         /*
; 3343 :          * parse expression until either the end or an operator with a higher priority is found.
; 3344 :          */
; 3345 : 
; 3346 :         while( rc != ERROR && *i < end && !IsCurrToken( T_CL_BRACKET ) && !IsCurrToken( T_CL_SQ_BRACKET ) ) {

	cmp	esi, -1
	je	$LN110@evaluate
	npad	11
$LL4@evaluate:
	movsxd	rax, DWORD PTR [rdi]
	cmp	eax, DWORD PTR end$[rbp-113]
	jge	$LN62@evaluate
	shl	rax, 5
	lea	rdx, QWORD PTR [rax+rbx]
	movzx	eax, BYTE PTR [rax+rbx]
	cmp	al, 41					; 00000029H
	je	$LN62@evaluate
	cmp	al, 93					; 0000005dH
	je	$LN62@evaluate
	lea	ecx, DWORD PTR [rax-43]
	test	cl, 253					; 000000fdH
	je	SHORT $LN32@evaluate
	cmp	al, 5
	je	SHORT $LN33@evaluate
	cmp	al, 40					; 00000028H
	jae	SHORT $LN33@evaluate

; 3350 :             else if( !is_operator( tokenarray[*i].token ) || tokenarray[*i].token == T_UNARY_OPERATOR ) {
; 3351 :                 DebugMsg(("%u evaluate: unexpected token at %u, token=%X >%s<\n", evallvl, *i, tokenarray[*i].token, tokenarray[*i].tokpos ));
; 3352 :                 rc = ERROR;

	or	esi, -1

; 3353 :                 if ( !opnd2.is_opattr ) /* don't emit error if expression is OPATTR operand */

	test	BYTE PTR opnd2$1[rbp-37], 16
	jne	$LN118@evaluate

; 3354 :                     OperErr( *i, tokenarray );

	movsxd	rdx, DWORD PTR [rdi]
	shl	rdx, 5
	cmp	BYTE PTR [rdx+rbx], 12
	ja	SHORT $LN61@evaluate
	mov	ecx, 150				; 00000096H
	call	QWORD PTR fnEmitErr
	jmp	SHORT $LN110@evaluate
$LN32@evaluate:

; 3347 :             
; 3348 :             if ( tokenarray[*i].token == '+' || tokenarray[*i].token == '-' )
; 3349 :                 tokenarray[*i].specval = BINARY_PLUSMINUS;

	mov	BYTE PTR [rdx+1], 1
$LN33@evaluate:

; 3355 :                 break;
; 3356 :             }
; 3357 : 
; 3358 :             if( get_precedence( &tokenarray[*i] ) >= get_precedence( &tokenarray[curr_operator] ) )

	movsxd	rcx, DWORD PTR [rdi]
	shl	rcx, 5
	add	rcx, rbx
	call	get_precedence
	mov	rcx, QWORD PTR oper$1$[rbp-113]
	mov	ebx, eax
	call	get_precedence
	cmp	ebx, eax

; 3359 :                 break;
; 3360 : 
; 3361 :             rc = evaluate( &opnd2, i, tokenarray, end, flags | EXPF_ONEOPND );

	mov	rbx, QWORD PTR tokenarray$[rbp-113]
	jge	SHORT $LN62@evaluate
	movzx	eax, BYTE PTR flags$[rbp-113]
	lea	rcx, QWORD PTR opnd2$1[rbp-113]
	mov	r9d, DWORD PTR end$[rbp-113]
	or	al, 4
	mov	r8, rbx
	mov	BYTE PTR [rsp+32], al
	mov	rdx, rdi
	call	evaluate
	mov	esi, eax
	cmp	eax, -1
	jne	$LL4@evaluate

; 3340 :         }
; 3341 : 
; 3342 :         /*
; 3343 :          * parse expression until either the end or an operator with a higher priority is found.
; 3344 :          */
; 3345 : 
; 3346 :         while( rc != ERROR && *i < end && !IsCurrToken( T_CL_BRACKET ) && !IsCurrToken( T_CL_SQ_BRACKET ) ) {

	jmp	SHORT $LN110@evaluate

; 3354 :                     OperErr( *i, tokenarray );

$LN61@evaluate:
	mov	rdx, QWORD PTR [rdx+rbx+8]
	mov	ecx, 209				; 000000d1H
	call	QWORD PTR fnEmitErr

; 3362 : 
; 3363 :         }
; 3364 : 
; 3365 :         /* v2.10: OPATTR special handling */
; 3366 :         if ( rc == ERROR && opnd2.is_opattr ) {

	jmp	SHORT $LN110@evaluate

; 3354 :                     OperErr( *i, tokenarray );

$LN62@evaluate:

; 3362 : 
; 3363 :         }
; 3364 : 
; 3365 :         /* v2.10: OPATTR special handling */
; 3366 :         if ( rc == ERROR && opnd2.is_opattr ) {

	cmp	esi, -1
	jne	SHORT $LN77@evaluate
$LN110@evaluate:
	test	BYTE PTR opnd2$1[rbp-37], 16
	je	SHORT $LN38@evaluate
$LN118@evaluate:

; 3367 :             /* skip tokens until the end */
; 3368 :             while( *i < end && !IsCurrToken( T_CL_BRACKET ) && !IsCurrToken( T_CL_SQ_BRACKET ) ) {

	mov	r8d, DWORD PTR end$[rbp-113]
	cmp	DWORD PTR [rdi], r8d
	jge	SHORT $LN111@evaluate
	npad	11
$LL6@evaluate:
	movsxd	rdx, DWORD PTR [rdi]
	mov	rax, rdx
	shl	rax, 5
	movzx	ecx, BYTE PTR [rax+rbx]
	cmp	cl, 41					; 00000029H
	je	SHORT $LN111@evaluate
	cmp	cl, 93					; 0000005dH
	je	SHORT $LN111@evaluate

; 3369 :                 (*i)++;

	lea	eax, DWORD PTR [rdx+1]
	mov	DWORD PTR [rdi], eax
	cmp	eax, r8d
	jl	SHORT $LL6@evaluate
$LN111@evaluate:

; 3370 :             }
; 3371 :             opnd2.kind = EXPR_EMPTY;

	mov	DWORD PTR opnd2$1[rbp-53], -2

; 3372 :             rc = NOT_ERROR;
; 3373 :         }
; 3374 :         if( rc != ERROR )

	jmp	SHORT $LN77@evaluate
$LN38@evaluate:
	cmp	esi, -1
	je	SHORT $LN39@evaluate
$LN77@evaluate:

; 3375 :             rc = calculate( opnd1, &opnd2, &tokenarray[curr_operator] );

	mov	r8, QWORD PTR oper$1$[rbp-113]
	lea	rdx, QWORD PTR opnd2$1[rbp-113]
	mov	rcx, QWORD PTR opnd1$[rbp-113]
	call	calculate
	mov	esi, eax
$LN39@evaluate:

; 3376 : 
; 3377 :         if( flags & EXPF_ONEOPND ) /* stop after one operand? */

	movzx	ecx, BYTE PTR flags$[rbp-113]
	test	cl, 4
	jne	SHORT $LN103@evaluate

; 3266 :     }
; 3267 :     /* now handle operators. */
; 3268 :     while ( rc == NOT_ERROR && *i < end && !IsCurrToken( T_CL_BRACKET ) && !IsCurrToken( T_CL_SQ_BRACKET ) ) {

	test	esi, esi
	jmp	$LN119@evaluate

; 3287 :                     OperErr( curr_operator, tokenarray );

$LN43@evaluate:
	shl	rdx, 5
	mov	ecx, 209				; 000000d1H
	mov	rdx, QWORD PTR [rdx+rbx+8]
	call	QWORD PTR fnEmitErr
$LN103@evaluate:

; 3378 :             break;
; 3379 :     }
; 3380 : 
; 3381 : #ifdef DEBUG_OUT
; 3382 :     if ( opnd1->hvalue != -1 && opnd1->hvalue != 0 ) {
; 3383 :         DebugMsg1(("%u evaluate exit, rc=%d, kind=%d value=%" I64_SPEC "d(0x%" I64_SPEC "X) memtype=%Xh string=%s indirect=%u type=>%s<\n",
; 3384 :                    evallvl--, rc, opnd1->kind, opnd1->llvalue, opnd1->llvalue, opnd1->mem_type,
; 3385 :                    opnd1->quoted_string ? opnd1->quoted_string->string_ptr : "NULL",
; 3386 :                    opnd1->indirect,
; 3387 :                    opnd1->type ? opnd1->type->name : "NULL" ));
; 3388 :     } else {
; 3389 :         DebugMsg1(("%u evaluate exit, rc=%d, kind=%d value=%" I32_SPEC "d(0x%" I32_SPEC "X) memtype=%Xh string=%s ind=%u exp=%u ofssiz=%d instr=%s type=>%s<\n",
; 3390 :                    evallvl--, rc, opnd1->kind, opnd1->value, opnd1->value, opnd1->mem_type,
; 3391 :                    opnd1->quoted_string ? opnd1->quoted_string->string_ptr : "NULL",
; 3392 :                    opnd1->indirect, opnd1->explicit, opnd1->Ofssize,
; 3393 :                    opnd1->instr == EMPTY ? "" : GetResWName( opnd1->instr, NULL ),
; 3394 :                    opnd1->type ? opnd1->type->name : "NULL" ));
; 3395 :     }
; 3396 : #endif
; 3397 :     return( rc );

	mov	eax, esi

; 3398 : }

	mov	rbx, QWORD PTR [rsp+216]
	add	rsp, 176				; 000000b0H
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
evaluate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT OperErr
_TEXT	SEGMENT
i$ = 8
tokenarray$ = 16
OperErr	PROC						; COMDAT

; 3233 :     if ( tokenarray[i].token <= T_BAD_NUM ) {

	movsxd	rax, ecx
	shl	rax, 5
	cmp	BYTE PTR [rdx+rax], 12
	ja	SHORT $LN2@OperErr

; 3234 :         fnEmitErr( MISSING_OPERATOR_IN_EXPRESSION ); ERRLOC(i);

	mov	ecx, 150				; 00000096H
	rex_jmp	QWORD PTR fnEmitErr
$LN2@OperErr:

; 3235 :     } else
; 3236 :         fnEmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr );

	mov	rdx, QWORD PTR [rdx+rax+8]
	mov	ecx, 209				; 000000d1H
	rex_jmp	QWORD PTR fnEmitErr
OperErr	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT PrepareOp
_TEXT	SEGMENT
opnd$ = 8
old$ = 16
oper$ = 24
PrepareOp PROC						; COMDAT

; 3186 :     opnd->is_opattr = old->is_opattr;

	mov	eax, DWORD PTR [rdx+76]
	xor	eax, DWORD PTR [rcx+76]
	and	eax, 16
	xor	DWORD PTR [rcx+76], eax

; 3187 : 
; 3188 :     switch ( oper->token ) {

	movzx	eax, BYTE PTR [r8]
	cmp	al, 4
	je	SHORT $LN10@PrepareOp
	cmp	al, 46					; 0000002eH
	jne	SHORT $LN4@PrepareOp

; 3189 :     case T_DOT:
; 3190 :         DebugMsg(("PrepareOp: DOT operator found, old.sym=%X, old.type=%s, expr=%s\n", old->sym, (old->type ? old->type->name : "NULL" ), oper->tokpos + strlen( oper->string_ptr ) ));
; 3191 :         if ( old->type ) {

	mov	rax, QWORD PTR [rdx+96]
	test	rax, rax
	je	SHORT $LN7@PrepareOp

; 3192 :             DebugMsg1(("PrepareOp: implicit type: %s\n", old->type->name));
; 3193 :             opnd->type = old->type;

	mov	QWORD PTR [rcx+96], rax

; 3194 :             opnd->is_dot = TRUE;

	or	DWORD PTR [rcx+76], 128			; 00000080H

; 3224 :             break;
; 3225 :         }
; 3226 :         break;
; 3227 :     }
; 3228 : }

	ret	0
$LN7@PrepareOp:

; 3195 : #if 0
; 3196 :         /* v2.09 (type field is now set in get_operand();
; 3197 :          * it's problematic to use old->sym here, because this field
; 3198 :          * is not necessarily set by the operand just before the dot.
; 3199 :          */
; 3200 :         //} else if ( old->sym && old->sym->mem_type == MT_TYPE ) {
; 3201 :         } else if ( old->sym && old->sym->mem_type == MT_TYPE && old->instr == EMPTY ) {
; 3202 :             DebugMsg1(("PrepareOp: label %s, implicit type: %s\n", old->sym->name, old->sym->type->name));
; 3203 :             for ( opnd->type = old->sym->type; opnd->type->type; opnd->type = opnd->type->type );
; 3204 : #endif
; 3205 :         /* v2.07: changed */
; 3206 :         //} else if ( !ModuleInfo.oldstructs ) {
; 3207 :         /* v2.08: reverted, replaced by changes in dot_op() and get_operand(), case T_STYPE */
; 3208 :         //} else if ( old->sym && old->sym->mem_type == MT_EMPTY && !ModuleInfo.oldstructs ) {
; 3209 :         /* v2.11: nullstruct not used here. Set type to NULL and is_dot==TRUE */
; 3210 :         //} else if ( !ModuleInfo.oldstructs ) {
; 3211 :         } else if ( !ModuleInfo.oldstructs && old->sym && old->sym->state == SYM_UNDEFINED ) {

	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
	jne	SHORT $LN4@PrepareOp
	mov	rax, QWORD PTR [rdx+80]
	test	rax, rax
	je	SHORT $LN4@PrepareOp
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN4@PrepareOp

; 3212 :             DebugMsg1(("PrepareOp: forward ref to %s, type will be NULL\n", old->sym->name ));
; 3213 :             opnd->type = NULL;

	mov	QWORD PTR [rcx+96], 0

; 3214 :             opnd->is_dot = TRUE;

	or	DWORD PTR [rcx+76], 128			; 00000080H

; 3224 :             break;
; 3225 :         }
; 3226 :         break;
; 3227 :     }
; 3228 : }

	ret	0
$LN10@PrepareOp:

; 3215 :         }
; 3216 :         break;
; 3217 :     case T_UNARY_OPERATOR:
; 3218 :         switch ( oper->tokval ) {

	mov	edx, DWORD PTR [r8+16]
	sub	edx, 229				; 000000e5H
	je	SHORT $LN11@PrepareOp
	cmp	edx, 13
	jne	SHORT $LN4@PrepareOp
$LN11@PrepareOp:

; 3219 :         case T_OPATTR:
; 3220 :         case T_DOT_TYPE:
; 3221 :             DebugMsg(("PrepareOp: OPATTR operator found, old.sym=%X, old.type=%s, expr=%s\n",
; 3222 :                       old->sym, (old->type ? old->type->name : "NULL" ), oper->tokpos + strlen( oper->string_ptr ) ));
; 3223 :             opnd->is_opattr = TRUE;

	or	DWORD PTR [rcx+76], 16
$LN4@PrepareOp:

; 3224 :             break;
; 3225 :         }
; 3226 :         break;
; 3227 :     }
; 3228 : }

	ret	0
PrepareOp ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT calculate
_TEXT	SEGMENT
opnd1$ = 80
opnd2$ = 88
oper$ = 96
calculate PROC						; COMDAT

; 2587 : {

	mov	QWORD PTR [rsp+24], rbx
	push	rsi
	push	rdi
	push	r14
	sub	rsp, 48					; 00000030H

; 2588 :     int_32              temp;
; 2589 :     struct asym         *sym;
; 2590 :     char                *name;
; 2591 : 
; 2592 :     /* avoid to use the <string> member once it's part of an expression!
; 2593 :      * the <value> member is the one to be used then.
; 2594 :      * test case: db "a"+80h
; 2595 :      * v2.08: first: this is too early; second: the current operand is opnd2.
; 2596 :      * third: the space is also used by float_tok member, which cannot be cleared.
; 2597 :      * probably the best solution - at calculate()'s end:
; 2598 :      * if ( opnd1->kind == EXPR_CONST ) opnd1->quoted_string = NULL;
; 2599 :      */
; 2600 :     opnd1->quoted_string = NULL;

	xor	esi, esi
	mov	rdi, rdx
	mov	QWORD PTR [rcx+16], rsi
	mov	r14, r8

; 2601 : 
; 2602 :     /* v2.11: added check to ensure constant fits in 64-bits */
; 2603 :     if ( opnd2->hlvalue ) {

	mov	rdx, QWORD PTR [rdx+8]
	mov	rbx, rcx
	test	rdx, rdx
	je	SHORT $LN11@calculate

; 2604 :         /* opattr and unary +/- are ok, they can handle 128-bits */
; 2605 :         if ( opnd2->is_opattr || ( ( oper->token == '+' || oper->token == '-' ) && oper->specval == UNARY_PLUSMINUS ) )

	test	BYTE PTR [rdi+76], 16
	jne	SHORT $LN11@calculate
	movzx	eax, BYTE PTR [r8]
	sub	al, 43					; 0000002bH
	test	al, 253					; 000000fdH
	jne	SHORT $LN9@calculate
	cmp	BYTE PTR [r8+1], sil
	je	SHORT $LN11@calculate
$LN9@calculate:

; 2606 :             ;
; 2607 :         else {
; 2608 :             DebugMsg(("%u calculate(%s): value too large\n", evallvl, oper->string_ptr ));
; 2609 :             return( fnEmitErr( CONSTANT_VALUE_TOO_LARGE_EX, opnd2->hlvalue, opnd2->value64 ) );

	mov	r8, QWORD PTR [rdi]
	mov	ecx, 272				; 00000110H

; 3179 : }

	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rsi

; 2606 :             ;
; 2607 :         else {
; 2608 :             DebugMsg(("%u calculate(%s): value too large\n", evallvl, oper->string_ptr ));
; 2609 :             return( fnEmitErr( CONSTANT_VALUE_TOO_LARGE_EX, opnd2->hlvalue, opnd2->value64 ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN11@calculate:

; 2610 :         }
; 2611 :     }
; 2612 : 
; 2613 :     switch( oper->token ) {

	movzx	eax, BYTE PTR [r8]
	add	eax, -4
	mov	QWORD PTR [rsp+80], rbp
	cmp	eax, 87					; 00000057H
	ja	$LN126@calculate
	lea	rbp, OFFSET FLAT:__ImageBase
	cdqe
	movzx	eax, BYTE PTR $LN178@calculate[rax+rbp]
	mov	ecx, DWORD PTR $LN179@calculate[rbp+rax*4]
	add	rcx, rbp
	jmp	rcx
$LN13@calculate:

; 2614 :     case T_OP_SQ_BRACKET:
; 2615 :         /* v2.07: the ASSUMEs are now checked only when operator [] is done.
; 2616 :          * this is compatible with Masm:
; 2617 :          *   assume ebx:ptr <struct>
; 2618 :          *   mov eax, [ebx.<member>]             ;is to fail
; 2619 :          *   mov eax, [ebx.<struct>.<member>]    ;is to be ok
; 2620 :          * previously both variants were accepted by jwasm.
; 2621 :          */
; 2622 :         if ( opnd2->assumecheck == TRUE ) {

	mov	eax, DWORD PTR [rdi+76]
	test	al, 64					; 00000040H
	je	SHORT $LN15@calculate

; 2623 :             opnd2->assumecheck = FALSE;   /* check ONE time only! */

	and	eax, -65				; ffffffbfH
	mov	DWORD PTR [rdi+76], eax

; 2624 :             if ( opnd1->sym == NULL ) /* v2.10: added; see assume10.asm */

	cmp	QWORD PTR [rbx+80], rsi
	jne	SHORT $LN15@calculate

; 2625 :                 CheckAssume( opnd2 );

	mov	rcx, rdi
	call	CheckAssume
$LN15@calculate:

; 2626 :         }
; 2627 : 
; 2628 :         if ( opnd1->kind == EXPR_EMPTY ) {

	cmp	DWORD PTR [rbx+60], -2
	jne	SHORT $LN16@calculate

; 2629 :             DebugMsg1(("%u calculate(%s): single item\n", evallvl, oper->string_ptr ));
; 2630 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1

; 2631 :             opnd1->type = opnd2->type;

	mov	rax, QWORD PTR [rdi+96]
	mov	QWORD PTR [rbx+96], rax

; 2632 :             if ( opnd1->is_type && opnd1->kind == EXPR_CONST )

	mov	eax, DWORD PTR [rbx+76]
	test	al, 8
	je	$LN2@calculate
	cmp	DWORD PTR [rbx+60], esi
	jne	$LN2@calculate

; 2633 :                 opnd1->is_type = 0;

	and	eax, -9					; fffffff7H
	mov	DWORD PTR [rbx+76], eax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN16@calculate:

; 2634 :             break;
; 2635 :         }
; 2636 : 
; 2637 :         /* v2.03: make HJWasm reject syntax variants
; 2638 :          * "mov eax, DWORD [EBX]"
; 2639 :          * "mov eax, DWORD [var_name]"
; 2640 :          * variants still valid:
; 2641 :          * "mov eax, DWORD [WORD]"
; 2642 :          * "mov eax, DWORD [4]"
; 2643 :          * "mov eax, [DWORD][EBX]"
; 2644 :          */
; 2645 :         /* v2.08: structure/union names are ok: mov eax, S1[ebx] */
; 2646 :         //if ( opnd1->is_type == TRUE &&
; 2647 :         if ( opnd1->is_type == TRUE && opnd1->type == NULL &&

	test	BYTE PTR [rbx+76], 8
	je	SHORT $LN23@calculate
	cmp	QWORD PTR [rbx+96], rsi
	jne	SHORT $LN23@calculate

; 2648 :             (opnd2->kind == EXPR_ADDR || opnd2->kind == EXPR_REG ) ) {
; 2649 :             DebugMsg(("calculate(%s): incompatible usage of (simple) type\n", oper->string_ptr ));
; 2650 :             return( fnEmitErr( SYNTAX_ERROR_IN_EXPRESSION ) );

	mov	eax, DWORD PTR [rdi+60]
	dec	eax
	cmp	eax, 1
	jbe	$LN192@calculate
$LN23@calculate:

; 2678 :         }
; 2679 : 
; 2680 :         /* v2.08: moved here from get_operand() */
; 2681 :         if ( opnd1->base_reg && opnd1->base_reg->tokval == T_ST )

	mov	rax, QWORD PTR [rbx+24]
	test	rax, rax
	je	$LN26@calculate
	cmp	DWORD PTR [rax+16], 31
	jne	$LN26@calculate

; 2682 :             return( check_streg( opnd1, opnd2 ) );

	movzx	eax, BYTE PTR [rbx+68]
	test	al, al
	je	SHORT $LN140@calculate
	mov	ecx, 170				; 000000aaH
	call	QWORD PTR fnEmitErr
	mov	esi, eax
	jmp	$LN180@calculate
$LN21@calculate:

; 2651 :         }
; 2652 : 
; 2653 :         /* v2.08: moved here from get_operand() */
; 2654 :         if ( opnd1->base_reg && opnd1->base_reg->tokval == T_ST )
; 2655 :             return( check_streg( opnd1, opnd2 ) );
; 2656 : 
; 2657 : #ifdef DEBUG_OUT
; 2658 :         if ( plus_op( opnd1, opnd2 ) == ERROR )
; 2659 :             return( ERROR );
; 2660 :         break;
; 2661 : #else
; 2662 :         return( plus_op( opnd1, opnd2 ) );
; 2663 : #endif
; 2664 :     case T_OP_BRACKET:
; 2665 : 
; 2666 :         if ( opnd1->kind == EXPR_EMPTY ) {

	cmp	DWORD PTR [rbx+60], -2
	jne	SHORT $LN22@calculate

; 2667 :             DebugMsg1(("%u calculate(%s): single item\n", evallvl, oper->string_ptr ));
; 2668 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1

; 2669 :             opnd1->type = opnd2->type;

	mov	rax, QWORD PTR [rdi+96]
	mov	QWORD PTR [rbx+96], rax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN22@calculate:

; 2670 :             break;
; 2671 :         }
; 2672 :         /* v2.03: make HJWasm reject syntax variants
; 2673 :          * "mov eax, DWORD (<label>)"
; 2674 :          */
; 2675 :         if ( opnd1->is_type == TRUE && opnd2->kind == EXPR_ADDR ) {

	test	BYTE PTR [rbx+76], 8
	je	SHORT $LN23@calculate
	cmp	DWORD PTR [rdi+60], 1
	jne	SHORT $LN23@calculate
$LN192@calculate:

; 2676 :             DebugMsg(("calculate(%s): incompatible usage of (simple) type\n", oper->string_ptr ));
; 2677 :             return( fnEmitErr( SYNTAX_ERROR_IN_EXPRESSION ) );

	mov	ecx, 263				; 00000107H

; 2841 :                     DebugMsg(("calculate(PTR): register size doesn't match type size; %u != %u\n", SizeFromRegister( temp ), opnd1->value ));
; 2842 :                     return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate

; 2682 :             return( check_streg( opnd1, opnd2 ) );

$LN140@calculate:
	inc	al
	mov	BYTE PTR [rbx+68], al
	cmp	DWORD PTR [rdi+60], esi
	je	SHORT $LN141@calculate
	mov	ecx, 252				; 000000fcH
	call	QWORD PTR fnEmitErr
	mov	esi, eax
	jmp	$LN180@calculate
$LN141@calculate:
	mov	eax, DWORD PTR [rdi]
	mov	DWORD PTR [rbx], eax
	mov	eax, esi
	jmp	$LN180@calculate
$LN25@calculate:

; 2683 : 
; 2684 :         DebugMsg1(("calculate(%s): calling plus_op()\n", oper->string_ptr ));
; 2685 : #ifdef DEBUG_OUT
; 2686 :         if ( plus_op( opnd1, opnd2 ) == ERROR )
; 2687 :             return( ERROR );
; 2688 :         break;
; 2689 : #else
; 2690 :         return( plus_op( opnd1, opnd2 ) );
; 2691 : #endif
; 2692 :     case '+':
; 2693 :         if ( oper->specval == UNARY_PLUSMINUS ) /* unary op? */

	cmp	BYTE PTR [r8+1], sil
	jne	SHORT $LN26@calculate

; 2694 :             return( positive_op( opnd1, opnd2 ) );

	mov	rcx, rdi
	call	MakeConst
	mov	ecx, DWORD PTR [rdi+60]
	test	ecx, ecx
	jne	SHORT $LN144@calculate
	mov	DWORD PTR [rbx+60], esi
	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR [rbx], rax
	mov	rax, QWORD PTR [rdi+8]
	mov	QWORD PTR [rbx+8], rax
	mov	eax, esi
	jmp	$LN180@calculate
$LN144@calculate:
	cmp	ecx, 3
	jne	SHORT $LN146@calculate
	mov	DWORD PTR [rbx+60], ecx
	mov	rax, QWORD PTR [rdi+16]
	mov	QWORD PTR [rbx+16], rax
	mov	eax, DWORD PTR [rdi+76]
	xor	eax, DWORD PTR [rbx+76]
	and	eax, 32					; 00000020H
	xor	DWORD PTR [rbx+76], eax
	mov	eax, esi
	jmp	$LN180@calculate
$LN146@calculate:
	mov	ecx, 65					; 00000041H
	call	QWORD PTR fnEmitErr
	mov	esi, eax
	jmp	$LN180@calculate
$LN26@calculate:

; 2695 : #ifdef DEBUG_OUT
; 2696 :         if ( plus_op( opnd1, opnd2 ) == ERROR )
; 2697 :             return( ERROR );
; 2698 :         break;
; 2699 : #else
; 2700 :         return( plus_op( opnd1, opnd2 ) );

	mov	rdx, rdi
	mov	rcx, rbx
	call	plus_op
	jmp	$LN180@calculate
$LN27@calculate:

; 2701 : #endif
; 2702 :     case '-':
; 2703 :         if ( oper->specval == UNARY_PLUSMINUS ) /* unary op? */
; 2704 :             return( negative_op( opnd1, opnd2 ) );

	mov	rdx, rdi
	mov	rcx, rbx
	cmp	BYTE PTR [r8+1], sil
	jne	SHORT $LN28@calculate
	call	negative_op
	jmp	$LN180@calculate
$LN28@calculate:

; 2705 : #ifdef DEBUG_OUT
; 2706 :         if ( minus_op( opnd1, opnd2 ) == ERROR )
; 2707 :             return( ERROR );
; 2708 :         break;
; 2709 : #else
; 2710 :         return( minus_op( opnd1, opnd2 ) );

	call	minus_op
	jmp	$LN180@calculate
$LN29@calculate:

; 2711 : #endif
; 2712 :     case T_DOT:
; 2713 : #ifdef DEBUG_OUT
; 2714 :         if ( dot_op( opnd1, opnd2 ) == ERROR )
; 2715 :             return( ERROR );
; 2716 :         break;
; 2717 : #else
; 2718 :         return( dot_op( opnd1, opnd2 ) );

	mov	rdx, rdi
	mov	rcx, rbx
	call	dot_op
	jmp	$LN180@calculate
$LN30@calculate:

; 2719 : #endif
; 2720 :     case T_COLON:
; 2721 : #ifdef DEBUG_OUT
; 2722 :         if ( colon_op( opnd1, opnd2 ) == ERROR )
; 2723 :             return( ERROR );
; 2724 :         break;
; 2725 : #else
; 2726 :         return( colon_op( opnd1, opnd2 ) );

	mov	rdx, rdi
	mov	rcx, rbx
	call	colon_op
	jmp	$LN180@calculate
$LN31@calculate:

; 2727 : #endif
; 2728 :     case '*':
; 2729 :         /*
; 2730 :          * The only formats allowed are:
; 2731 :          *        constant * constant
; 2732 :          *        register * scaling factor ( 1, 2, 4 or 8 )
; 2733 :          *                   386 only
; 2734 :          */
; 2735 :         DebugMsg1(("calculate(*): kind=%d/%d value=%" I64_SPEC "d-%" I64_SPEC "d mbr=%X-%X\n",
; 2736 :                    opnd1->kind,    opnd2->kind,
; 2737 :                    opnd1->value64, opnd2->value64,
; 2738 :                    opnd1->mbr,     opnd2->mbr ));
; 2739 : 
; 2740 :         MakeConst( opnd1 );

	mov	rcx, rbx
	call	MakeConst

; 2741 :         MakeConst( opnd2 );

	mov	rcx, rdi
	call	MakeConst

; 2742 : 
; 2743 :         if( check_same( opnd1, opnd2, EXPR_CONST ) ) {

	mov	ecx, DWORD PTR [rbx+60]
	test	ecx, ecx
	jne	SHORT $LN32@calculate
	cmp	DWORD PTR [rdi+60], esi
	jne	SHORT $LN32@calculate

; 2744 :             opnd1->llvalue *= opnd2->llvalue;

	mov	rax, QWORD PTR [rbx]
	imul	rax, QWORD PTR [rdi]

; 3015 :             opnd1->llvalue = ~(opnd2->llvalue);

	mov	QWORD PTR [rbx], rax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN32@calculate:

; 2745 :         } else if( check_both( opnd1, opnd2, EXPR_REG, EXPR_CONST ) ) {

	cmp	ecx, 2
	jne	SHORT $LN150@calculate
	mov	eax, DWORD PTR [rdi+60]
	test	eax, eax
	je	SHORT $LN169@calculate
$LN150@calculate:
	test	ecx, ecx
	jne	$LN62@calculate
	mov	eax, DWORD PTR [rdi+60]
	cmp	eax, 2
	jne	$LN62@calculate
$LN169@calculate:

; 2746 :             if( check_direct_reg( opnd1, opnd2 ) == ERROR ) {

	cmp	ecx, 2
	jne	SHORT $LN156@calculate
	test	BYTE PTR [rbx+76], 1
	je	$LN170@calculate
$LN156@calculate:
	cmp	eax, 2
	jne	SHORT $LN37@calculate
	test	BYTE PTR [rdi+76], 1
	je	$LN170@calculate

; 2747 :                 DebugMsg(("calculate(*) error direct register\n"));
; 2748 :                 return( fnEmitErr( INVALID_USE_OF_REGISTER ) );
; 2749 :             }
; 2750 :             /* scaling factor */
; 2751 :             if( opnd2->kind == EXPR_REG ) {

	cmp	eax, eax
	jne	SHORT $LN37@calculate

; 2752 :                 /* scale * reg */
; 2753 :                 opnd1->idx_reg = opnd2->base_reg;

	mov	rax, QWORD PTR [rdi+24]
	mov	QWORD PTR [rbx+32], rax

; 2754 :                 opnd1->scale = opnd1->value;

	movzx	eax, BYTE PTR [rbx]

; 2755 :                 opnd1->value = 0;

	mov	DWORD PTR [rbx], esi

; 2756 :                 //opnd2->base_reg = NULL;
; 2757 :             } else {

	jmp	SHORT $LN184@calculate
$LN37@calculate:

; 2758 :                 /* reg * scale */
; 2759 :                 opnd1->idx_reg = opnd1->base_reg;

	mov	rax, QWORD PTR [rbx+24]
	mov	QWORD PTR [rbx+32], rax

; 2760 :                 opnd1->scale = opnd2->value;

	movzx	eax, BYTE PTR [rdi]
$LN184@calculate:
	mov	BYTE PTR [rbx+68], al

; 2761 :             }
; 2762 :             /* v2.08: check 0 (the default value) here */
; 2763 :             if ( opnd1->scale == 0 ) {

	cmp	al, sil
	jne	SHORT $LN39@calculate

; 2764 :                 return( fnEmitErr( SCALE_FACTOR_MUST_BE_1_2_4_OR_8 ) );

	mov	ecx, 36					; 00000024H

; 2841 :                     DebugMsg(("calculate(PTR): register size doesn't match type size; %u != %u\n", SizeFromRegister( temp ), opnd1->value ));
; 2842 :                     return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN39@calculate:

; 2765 :             }
; 2766 : 
; 2767 :             opnd1->base_reg = NULL;
; 2768 :             opnd1->indirect = TRUE;

	or	DWORD PTR [rbx+76], 1

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	mov	QWORD PTR [rbx+24], rsi
	mov	DWORD PTR [rbx+60], 1
	jmp	$LN180@calculate
$LN40@calculate:

; 2769 :             opnd1->kind = EXPR_ADDR;
; 2770 :         } else {
; 2771 :             DebugMsg(("calculate(*) error 2\n"));
; 2772 :             return( ConstError( opnd1, opnd2 ) );
; 2773 :         }
; 2774 :         break;
; 2775 :     case '/':
; 2776 :         /*
; 2777 :          * The only formats allowed are:
; 2778 :          *        constant / constant
; 2779 :          */
; 2780 :         DebugMsg1(("calculate(/): t1-t2 kind %u-%u values %" I64_SPEC "d-%" I64_SPEC "d\n",
; 2781 :                    opnd1->kind,    opnd2->kind,
; 2782 :                    opnd1->value64, opnd2->value64 ));
; 2783 :         MakeConst( opnd1 );

	mov	rcx, rbx
	call	MakeConst

; 2784 :         MakeConst( opnd2 );

	mov	rcx, rdi
	call	MakeConst

; 2785 : 
; 2786 :         if( check_same( opnd1, opnd2, EXPR_CONST ) == FALSE ) {

	cmp	DWORD PTR [rbx+60], esi
	jne	$LN62@calculate
	cmp	DWORD PTR [rdi+60], esi
	jne	$LN62@calculate

; 2787 :             DebugMsg(("calculate(/) error 1\n"));
; 2788 :             return( ConstError( opnd1, opnd2 ) );
; 2789 :         }
; 2790 : 
; 2791 :         if ( opnd2->llvalue == 0 ) {

	mov	rcx, QWORD PTR [rdi]
	test	rcx, rcx
	je	$LN188@calculate

; 2792 :             DebugMsg(("calculate(/) error 2\n"));
; 2793 :             return( fnEmitErr( DIVIDE_BY_ZERO_IN_EXPR ) );
; 2794 :         }
; 2795 : 
; 2796 :         opnd1->value64 /= opnd2->value64;

	mov	rax, QWORD PTR [rbx]
	cdq
	idiv	rcx

; 3015 :             opnd1->llvalue = ~(opnd2->llvalue);

	mov	QWORD PTR [rbx], rax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN43@calculate:

; 2797 :         break;
; 2798 :     case T_BINARY_OPERATOR:
; 2799 :         DebugMsg1(("calculate(%s [T_BINARY_OPERATOR] ): t1-t2 kind %d/%d memtype %X-%X sym %s-%s type %s-%s\n",
; 2800 :                    oper->string_ptr,
; 2801 :                    opnd1->kind, opnd2->kind,
; 2802 :                    opnd1->mem_type, opnd2->mem_type,
; 2803 :                    opnd1->sym  ? opnd1->sym->name  : "NULL",
; 2804 :                    opnd2->sym  ? opnd2->sym->name  : "NULL",
; 2805 :                    opnd1->type ? opnd1->type->name : "NULL",
; 2806 :                    opnd2->type ? opnd2->type->name : "NULL" ));
; 2807 : 
; 2808 :         if ( oper->tokval == T_PTR ) {

	cmp	DWORD PTR [r8+16], 258			; 00000102H
	jne	$LN44@calculate

; 2809 :             if ( opnd1->is_type == FALSE ) {

	test	BYTE PTR [rbx+76], 8
	jne	SHORT $LN47@calculate

; 2810 :                 if ( opnd1->sym && opnd1->sym->state == SYM_UNDEFINED ) {

	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN46@calculate
	cmp	DWORD PTR [rcx+32], esi
	jne	SHORT $LN46@calculate

; 2811 :                     CreateTypeSymbol( opnd1->sym, NULL, TRUE );

	mov	r8b, 1
	xor	edx, edx
	call	CreateTypeSymbol

; 2812 :                     opnd1->type = opnd1->sym;

	mov	rax, QWORD PTR [rbx+80]

; 2813 :                     opnd1->sym = NULL;
; 2814 :                     opnd1->is_type = TRUE;

	or	DWORD PTR [rbx+76], 8
	mov	QWORD PTR [rbx+96], rax
	mov	QWORD PTR [rbx+80], rsi
$LN47@calculate:

; 2818 :                 }
; 2819 :             }
; 2820 :             opnd2->explicit = TRUE;

	mov	eax, DWORD PTR [rdi+76]

; 2821 :             /* v2.02: if operand is a register, make sure
; 2822 :              * that invalid combinations ("DWORD PTR AX") are flagged.
; 2823 :              *
; 2824 :              * v2.10: must also be checked inside []. However, it's
; 2825 :              * a problem to properly handle this case, since opnd->indirect
; 2826 :              * is just a flag.
; 2827 :              * Curr. hackish fix: to query state of assumecheck if indirect==TRUE.
; 2828 :              * Proposed "good" fix: change EXPR_REG to EXPR_ADDR in
; 2829 :              * CheckAssume(), that is, when the terminating  ']' was found.
; 2830 :              */
; 2831 :             //if ( opnd2->kind == EXPR_REG && opnd2->indirect == FALSE ) {
; 2832 :             if ( opnd2->kind == EXPR_REG && ( opnd2->indirect == FALSE || opnd2->assumecheck == TRUE ) ) {

	mov	ecx, DWORD PTR [rdi+60]
	or	eax, 2
	mov	DWORD PTR [rdi+76], eax
	cmp	ecx, 2
	jne	SHORT $LN48@calculate
	and	al, 65					; 00000041H
	cmp	al, 1
	je	SHORT $LN48@calculate

; 2833 :                 temp = opnd2->base_reg->tokval;

	mov	rax, QWORD PTR [rdi+24]
	movsxd	rdx, DWORD PTR [rax+16]

; 2834 :                 /* for segment registers, both size 2 and 4 is ok.*/
; 2835 :                 if ( GetValueSp( temp ) & OP_SR ) {

	lea	rcx, QWORD PTR [rdx+rdx*2]
	test	DWORD PTR SpecialTable[rbp+rcx*4], 24576 ; 00006000H
	je	SHORT $LN51@calculate

; 2836 :                     if ( opnd1->value != 2 && opnd1->value != 4 ) {
; 2837 :                         DebugMsg(("calculate(PTR): segment register size (=2/4) doesn't match type size (=%u)\n", opnd1->value ));
; 2838 :                         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	eax, DWORD PTR [rbx]
	sub	eax, 2
	test	eax, -3					; fffffffdH
	jmp	SHORT $LN189@calculate
$LN46@calculate:

; 2815 :                 } else {
; 2816 :                     DebugMsg(("calculate(PTR), error 1: t1 is_type == FALSE\n"));
; 2817 :                     return( fnEmitErr( INVALID_TYPE_EXPRESSION ) );

	mov	ecx, 179				; 000000b3H

; 2841 :                     DebugMsg(("calculate(PTR): register size doesn't match type size; %u != %u\n", SizeFromRegister( temp ), opnd1->value ));
; 2842 :                     return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN51@calculate:

; 2839 :                     }
; 2840 :                 } else if ( opnd1->value != SizeFromRegister( temp ) ) {

	mov	ecx, edx
	call	SizeFromRegister
	cmp	DWORD PTR [rbx], eax
$LN189@calculate:
	je	SHORT $LN56@calculate
$LN170@calculate:

; 2841 :                     DebugMsg(("calculate(PTR): register size doesn't match type size; %u != %u\n", SizeFromRegister( temp ), opnd1->value ));
; 2842 :                     return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	ecx, 170				; 000000aaH
	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN48@calculate:

; 2843 :                 }
; 2844 :             } else if ( opnd2->kind == EXPR_FLOAT ) {

	cmp	ecx, 3
	jne	SHORT $LN56@calculate

; 2845 :                 if ( !( opnd1->mem_type & MT_FLOAT ) ) {

	test	BYTE PTR [rbx+64], 32			; 00000020H
	jne	SHORT $LN56@calculate

; 2846 :                     DebugMsg(("calculate(PTR): type memtype=%Xh ( MT_FLOAT not set, although right op is FLOAT )\n", opnd1->mem_type ));
; 2847 :                     return( fnEmitErr( REAL_OR_BCD_NUMBER_NOT_ALLOWED ) );

	mov	ecx, 270				; 0000010eH
	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN56@calculate:

; 2848 :                 }
; 2849 :             }
; 2850 :             opnd2->mem_type = opnd1->mem_type;
; 2851 :             opnd2->Ofssize  = opnd1->Ofssize;
; 2852 :             /* v2.04: added */
; 2853 :             if ( opnd2->is_type )

	test	BYTE PTR [rdi+76], 8
	mov	eax, DWORD PTR [rbx+64]
	mov	DWORD PTR [rdi+64], eax
	movzx	eax, BYTE PTR [rbx+69]
	mov	BYTE PTR [rdi+69], al
	je	SHORT $LN57@calculate

; 2854 :                 opnd2->value  = opnd1->value;

	mov	eax, DWORD PTR [rbx]
	mov	DWORD PTR [rdi], eax
$LN57@calculate:

; 2855 : 
; 2856 :             /* todo: describe which case is handled here. How is the left
; 2857 :              * operand of PTR supposed to get an override? And why is
; 2858 :              * it necessary to change kind to EXPR_ADDR here? */
; 2859 :             if ( opnd1->override != NULL ) {

	mov	rax, QWORD PTR [rbx+48]
	test	rax, rax
	je	SHORT $LN58@calculate

; 2860 :                 if ( opnd2->override == NULL )

	cmp	QWORD PTR [rdi+48], rsi
	jne	SHORT $LN59@calculate

; 2861 :                     opnd2->override = opnd1->override;

	mov	QWORD PTR [rdi+48], rax
$LN59@calculate:

; 2862 :                 opnd2->kind = EXPR_ADDR;

	mov	DWORD PTR [rdi+60], 1
$LN58@calculate:

; 2863 :             }
; 2864 :             //if ( opnd1->mbr )
; 2865 :             //    opnd2->mbr = opnd1->mbr;
; 2866 :             //if ( opnd1->sym )
; 2867 :             //    opnd2->sym = opnd1->sym;
; 2868 :             //opnd2->instr = opnd1->instr;
; 2869 : 
; 2870 :             /* note: member type isn't copied, IOW: value of opnd1->type is kept. */
; 2871 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1
	jmp	$LN180@calculate
$LN44@calculate:

; 2872 :             break;
; 2873 :         }
; 2874 : 
; 2875 :         MakeConst( opnd1 );

	mov	rcx, rbx
	call	MakeConst

; 2876 :         MakeConst( opnd2 );

	mov	rcx, rdi
	call	MakeConst

; 2877 : 
; 2878 :         if ( check_same( opnd1, opnd2, EXPR_CONST ) )

	mov	eax, DWORD PTR [rbx+60]
	test	eax, eax
	jne	SHORT $LN60@calculate
	cmp	DWORD PTR [rdi+60], esi
	je	$LN68@calculate
$LN60@calculate:

; 2879 :             ;
; 2880 :         /* if it's EQ, NE, LE [, ...], operands may be either constants
; 2881 :          or relocatable labels */
; 2882 :         else if ( oper->precedence == CMP_PRECEDENCE &&

	cmp	BYTE PTR [r14+1], 10
	jne	$LN62@calculate
	test	eax, eax
	je	$LN62@calculate

; 2883 :                  opnd1->kind != EXPR_CONST ) {
; 2884 :             if ( opnd1->kind == EXPR_ADDR && opnd1->indirect == FALSE && opnd1->sym )

	cmp	eax, 1
	jne	$LN64@calculate
	test	BYTE PTR [rbx+76], al
	jne	$LN64@calculate
	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	$LN64@calculate

; 2885 :                 if ( opnd2->kind == EXPR_ADDR && opnd2->indirect == FALSE && opnd2->sym ) {

	cmp	DWORD PTR [rdi+60], eax
	jne	$LN66@calculate
	test	BYTE PTR [rdi+76], al
	jne	$LN66@calculate
	mov	rdx, QWORD PTR [rdi+80]
	test	rdx, rdx
	je	$LN66@calculate

; 2886 :                     if ( MakeConst2( opnd1, opnd2 ) == ERROR ) {

	mov	r8d, DWORD PTR [rcx+32]
	cmp	r8d, 2
	jne	SHORT $LN161@calculate
	mov	rdx, QWORD PTR [rcx+8]
	mov	ecx, 193				; 000000c1H
	call	QWORD PTR fnEmitErr
	jmp	SHORT $LN160@calculate
$LN161@calculate:
	mov	rax, QWORD PTR [rdx+24]
	cmp	QWORD PTR [rcx+24], rax
	je	SHORT $LN165@calculate
	test	r8d, r8d
	je	SHORT $LN165@calculate
	cmp	DWORD PTR [rdx+32], esi
	jne	SHORT $LN164@calculate
$LN165@calculate:
	cmp	DWORD PTR [rdx+32], 2
	jne	SHORT $LN163@calculate
$LN164@calculate:
	mov	ecx, 192				; 000000c0H
	call	QWORD PTR fnEmitErr
$LN160@calculate:
	cmp	eax, -1
	jne	SHORT $LN68@calculate

; 2887 :                         DebugMsg(("calculate(%s) error 1\n", oper->string_ptr ));
; 2888 :                         return( ERROR );

	or	rax, -1
	jmp	$LN180@calculate

; 2886 :                     if ( MakeConst2( opnd1, opnd2 ) == ERROR ) {

$LN163@calculate:
	mov	DWORD PTR [rbx+60], esi
	mov	eax, DWORD PTR [rcx+16]
	add	DWORD PTR [rbx], eax
	mov	rax, QWORD PTR [rdi+80]
	mov	DWORD PTR [rdi+60], esi
	mov	ecx, DWORD PTR [rax+16]
	add	DWORD PTR [rdi], ecx
$LN68@calculate:

; 2903 :         }
; 2904 : 
; 2905 :         DebugMsg1(("calculate(%s): values=%" I64_SPEC "d/%" I64_SPEC "d is_type=%u/%u memtypes=%X/%X\n", oper->string_ptr,
; 2906 :                    opnd1->value64, opnd2->value64, opnd1->is_type, opnd2->is_type, opnd1->mem_type, opnd2->mem_type  ));
; 2907 :         switch( oper->tokval ) {

	mov	eax, DWORD PTR [r14+16]
	cmp	eax, 501				; 000001f5H
	ja	$LN130@calculate
	je	$LN94@calculate
	add	eax, -251				; ffffff05H
	cmp	eax, 6
	ja	$LN2@calculate
	mov	ecx, DWORD PTR $LN177@calculate[rbp+rax*4]
	add	rcx, rbp
	jmp	rcx
$LN69@calculate:

; 2908 :         case T_EQ:
; 2909 : #if 1 /* v2.03: added */
; 2910 :             /* if both operands are types, do a more comprehensive comparison! */
; 2911 :             if ( opnd1->is_type && opnd2->is_type ) {

	test	BYTE PTR [rbx+76], 8
	je	SHORT $LN70@calculate
	test	BYTE PTR [rdi+76], 8
	je	SHORT $LN70@calculate

; 2912 :                 cmp_types( opnd1, opnd2, -1 );

	or	r8, -1
	mov	rdx, rdi
	mov	rcx, rbx
	call	cmp_types

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN70@calculate:

; 2913 :             } else
; 2914 : #endif
; 2915 :             opnd1->value64 = ( opnd1->value64 == opnd2->value64 ? -1:0 );

	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [rbx], rax
	setne	sil
	dec	rsi
$LN185@calculate:
	mov	QWORD PTR [rbx], rsi

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN72@calculate:

; 2916 :             break;
; 2917 :         case T_NE:
; 2918 : #if 1 /* v2.03: added */
; 2919 :             /* if both operands are types, do a more comprehensive comparison! */
; 2920 :             if ( opnd1->is_type && opnd2->is_type ) {

	test	BYTE PTR [rbx+76], 8
	je	SHORT $LN73@calculate
	test	BYTE PTR [rdi+76], 8
	je	SHORT $LN73@calculate

; 2921 :                 cmp_types( opnd1, opnd2, 0 );

	xor	r8d, r8d
	mov	rdx, rdi
	mov	rcx, rbx
	call	cmp_types

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN73@calculate:

; 2922 :             } else
; 2923 : #endif
; 2924 :             opnd1->value64 = ( opnd1->value64 != opnd2->value64 ? -1:0 );

	mov	rax, QWORD PTR [rbx]
	sub	rax, QWORD PTR [rdi]
	neg	rax
	sbb	rax, rax

; 3015 :             opnd1->llvalue = ~(opnd2->llvalue);

	mov	QWORD PTR [rbx], rax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN75@calculate:

; 2925 :             break;
; 2926 :         case T_LT:
; 2927 :             opnd1->value64 = ( opnd1->value64 <  opnd2->value64 ? -1:0 );

	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [rbx], rax
	setge	sil
	dec	rsi
	mov	QWORD PTR [rbx], rsi

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN76@calculate:

; 2928 :             break;
; 2929 :         case T_LE:
; 2930 :             opnd1->value64 = ( opnd1->value64 <= opnd2->value64 ? -1:0 );

	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [rbx], rax
	setg	sil
	dec	rsi
	mov	QWORD PTR [rbx], rsi

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN77@calculate:

; 2931 :             break;
; 2932 :         case T_GT:
; 2933 :             opnd1->value64 = ( opnd1->value64 >  opnd2->value64 ? -1:0 );

	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [rbx], rax
	setle	sil
	dec	rsi
	mov	QWORD PTR [rbx], rsi

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN78@calculate:

; 2934 :             break;
; 2935 :         case T_GE:
; 2936 :             opnd1->value64 = ( opnd1->value64 >= opnd2->value64 ? -1:0 );

	mov	rax, QWORD PTR [rdi]
	cmp	QWORD PTR [rbx], rax
	setl	sil
	dec	rsi
	mov	QWORD PTR [rbx], rsi

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN79@calculate:

; 2937 :             break;
; 2938 :         case T_MOD:
; 2939 :             if ( opnd2->llvalue == 0 ) {

	mov	rcx, QWORD PTR [rdi]
	test	rcx, rcx
	jne	SHORT $LN80@calculate
$LN188@calculate:

; 2940 :                 return( fnEmitErr( DIVIDE_BY_ZERO_IN_EXPR ) );

	mov	ecx, 167				; 000000a7H
	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN80@calculate:

; 2941 :             } else
; 2942 :                 opnd1->llvalue %= opnd2->llvalue;

	mov	rax, QWORD PTR [rbx]
	xor	edx, edx
	div	rcx

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	mov	QWORD PTR [rbx], rdx
	jmp	$LN180@calculate
$LN94@calculate:

; 2988 :             break;
; 2989 :         case T_OR:
; 2990 :             opnd1->llvalue |= opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	or	QWORD PTR [rbx], rax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN130@calculate:

; 2903 :         }
; 2904 : 
; 2905 :         DebugMsg1(("calculate(%s): values=%" I64_SPEC "d/%" I64_SPEC "d is_type=%u/%u memtypes=%X/%X\n", oper->string_ptr,
; 2906 :                    opnd1->value64, opnd2->value64, opnd1->is_type, opnd2->is_type, opnd1->mem_type, opnd2->mem_type  ));
; 2907 :         switch( oper->tokval ) {

	sub	eax, 504				; 000001f8H
	je	$LN93@calculate
	sub	eax, 2
	je	SHORT $LN95@calculate
	sub	eax, 8
	je	SHORT $LN82@calculate
	cmp	eax, 1
	jne	$LN2@calculate

; 2962 :                 opnd1->hlvalue = 0;
; 2963 :             }
; 2964 :             break;
; 2965 :         case T_SHR:
; 2966 :             /* Masm v8 works with unsigned 64-bit,
; 2967 :              * Masm v6 masks shift count with 0x3F.
; 2968 :              * v2.04: does behave like Masm v8+.
; 2969 :              * there is a problem with some compilers if shift
; 2970 :              * count is >= 64. So in this case the result is zeroed manually
; 2971 :              */
; 2972 : #if 0
; 2973 :             if ( opnd1->hvalue == -1 ) {
; 2974 :                 opnd1->hvalue = 0;
; 2975 :                 opnd1->hlvalue = 0;
; 2976 :             }
; 2977 : #endif
; 2978 :             /* v2.04: check for shift count < 0 */
; 2979 :             if ( opnd2->value < 0 )

	movsxd	rcx, DWORD PTR [rdi]
	test	ecx, ecx
	jns	SHORT $LN89@calculate

; 2980 :                 fnEmitErr( COUNT_MUST_BE_POSITIVE_OR_ZERO );

	mov	ecx, 208				; 000000d0H
	call	QWORD PTR fnEmitErr

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN89@calculate:

; 2981 :             else if ( opnd2->value >= ( 8 * sizeof( opnd1->llvalue ) ) )

	cmp	rcx, 64					; 00000040H
	jae	$LN185@calculate

; 2982 :                 opnd1->llvalue = 0;
; 2983 :             else
; 2984 :                 opnd1->llvalue = opnd1->llvalue >> opnd2->value;

	shr	QWORD PTR [rbx], cl

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN82@calculate:

; 2943 :             break;
; 2944 :         case T_SHL:
; 2945 :             /* v2.04: check for shift count < 0 */
; 2946 :             DebugMsg1(("calculate(SHL): value=%" I64_SPEC "X << %" I32_SPEC "u (max=%u)\n", opnd1->llvalue, opnd2->value, 8 * sizeof( opnd1->llvalue ) ));
; 2947 :             if ( opnd2->value < 0 )

	movsxd	rcx, DWORD PTR [rdi]
	test	ecx, ecx
	jns	SHORT $LN83@calculate

; 2948 :                 fnEmitErr( COUNT_MUST_BE_POSITIVE_OR_ZERO );

	mov	ecx, 208				; 000000d0H
	call	QWORD PTR fnEmitErr
	jmp	SHORT $LN86@calculate
$LN83@calculate:

; 2949 :             else if ( opnd2->value >= ( 8 * sizeof( opnd1->llvalue ) ) )

	cmp	rcx, 64					; 00000040H
	jb	SHORT $LN85@calculate

; 2950 :                 opnd1->llvalue = 0;

	mov	QWORD PTR [rbx], rsi
	jmp	SHORT $LN86@calculate
$LN85@calculate:

; 2951 :             else
; 2952 :                 opnd1->llvalue = opnd1->llvalue << opnd2->value;

	shl	QWORD PTR [rbx], cl
$LN86@calculate:

; 2953 :             /* v2.01: result is 64-bit only if mode is USE64 */
; 2954 :             /* v2.06: for -Zm only. This is not entirely correct,
; 2955 :              * since Masm v6x also does 32-bit shifts, but since v2.06
; 2956 :              * HJWasm intends to behave like Masm v8+.
; 2957 :              * Might be better to implement OPTION EXPR16|32|64.
; 2958 :              */
; 2959 :             //if ( ModuleInfo.Ofssize <= USE32 ) {
; 2960 :             if ( ModuleInfo.m510 ) {

	test	BYTE PTR ModuleInfo+408, 64		; 00000040H
	je	$LN2@calculate

; 2961 :                 opnd1->hvalue = 0;

	mov	DWORD PTR [rbx+4], esi

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	mov	QWORD PTR [rbx+8], rsi
	jmp	$LN180@calculate
$LN95@calculate:

; 2991 :             break;
; 2992 :         case T_XOR:
; 2993 :             opnd1->llvalue ^= opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	xor	QWORD PTR [rbx], rax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN93@calculate:

; 2985 :             break;
; 2986 :         case T_AND:
; 2987 :             opnd1->llvalue &= opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	and	QWORD PTR [rbx], rax

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN66@calculate:

; 2889 :                     }
; 2890 :                 } else {
; 2891 :                     DebugMsg(("calculate(%s) error 2, token2.kind=%d indirect=%u sym=%s\n",
; 2892 :                               oper->string_ptr, opnd2->kind, opnd2->indirect,
; 2893 :                               opnd2->sym ? opnd2->sym->name : "NULL" ));
; 2894 :                     return( fnEmitErr( OPERAND_MUST_BE_RELOCATABLE ) );

	mov	ecx, 188				; 000000bcH
	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN64@calculate:

; 2895 :                 }
; 2896 :             else {
; 2897 :                 DebugMsg(("calculate(%s) error 3\n", oper->string_ptr ));
; 2898 :                 return( fnEmitErr( CONSTANT_OR_RELOCATABLE_LABEL_EXPECTED ) );

	mov	ecx, 189				; 000000bdH
	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN62@calculate:

; 2899 :             }
; 2900 :         } else {
; 2901 :             DebugMsg(("calculate(%s) error 4\n", oper->string_ptr ));
; 2902 :             return( ConstError( opnd1, opnd2 ) );

	mov	rdx, rdi
	mov	rcx, rbx
	call	ConstError
	jmp	$LN180@calculate
$LN96@calculate:

; 2994 :             break;
; 2995 :         }
; 2996 :         break; /* end case T_BINARY_OPERATOR */
; 2997 :     case T_UNARY_OPERATOR:
; 2998 :         DebugMsg1(("calculate(%s [T_UNARY_OPERATOR]): opnd2 kind=%d sym=%s mbr=%s type=%s memtype=%X is_type=%u indirect=%u\n",
; 2999 :                    oper->string_ptr,
; 3000 :                    opnd2->kind,
; 3001 :                    opnd2->sym ? opnd2->sym->name : "NULL",
; 3002 :                    opnd2->mbr ? opnd2->mbr->name : "NULL",
; 3003 :                    opnd2->type ? opnd2->type->name : "NULL",
; 3004 :                    opnd2->mem_type, opnd2->is_type, opnd2->indirect ));
; 3005 :         /* NOT is an instruction and hence has no valid
; 3006 :          * value to be returned by GetValueSp() or GetSflagsSp()!
; 3007 :          */
; 3008 :         if( oper->tokval == T_NOT ) {

	mov	r11d, DWORD PTR [r8+16]
	cmp	r11d, 576				; 00000240H
	jne	SHORT $LN97@calculate

; 3009 :             MakeConst( opnd2 );

	mov	rcx, rdi
	call	MakeConst

; 3010 :             if( opnd2->kind != EXPR_CONST ) {

	cmp	DWORD PTR [rdi+60], esi
	je	SHORT $LN98@calculate

; 3011 :                 DebugMsg(("calculate(%s) error 1\n", oper->string_ptr ));
; 3012 :                 return( fnEmitErr( CONSTANT_OPERAND_EXPECTED ) );

	mov	ecx, 66					; 00000042H
	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
$LN98@calculate:

; 3013 :             }
; 3014 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1

; 3015 :             opnd1->llvalue = ~(opnd2->llvalue);

	mov	rax, QWORD PTR [rdi]
	not	rax
	mov	QWORD PTR [rbx], rax
$LN2@calculate:

; 3147 :     } /* end switch( oper->token ) */
; 3148 : 
; 3149 : #ifdef DEBUG_OUT
; 3150 :     if ( opnd1->hlvalue ) {
; 3151 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=0x%" I64_SPEC "X_%016" I64_SPEC "X memtype=0x%X indirect=%u type=>%s<\n",
; 3152 :                    evallvl,
; 3153 :                    oper->string_ptr,
; 3154 :                    opnd1->kind,
; 3155 :                    opnd1->hlvalue, opnd1->llvalue,
; 3156 :                    opnd1->mem_type,
; 3157 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3158 :     } else if ( opnd1->hvalue ) {
; 3159 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%" I64_SPEC"d(0x%" I64_SPEC "X) memtype=0x%X indirect=%u type=>%s<\n",
; 3160 :                    evallvl,
; 3161 :                    oper->string_ptr,
; 3162 :                    opnd1->kind,
; 3163 :                    opnd1->llvalue, opnd1->llvalue,
; 3164 :                    opnd1->mem_type,
; 3165 :                    opnd1->indirect, opnd1->type ? opnd1->type->name : "NULL" ));
; 3166 :     } else {
; 3167 :         DebugMsg1(("%u calculate(%s) exit, ok kind=%d value=%d(0x%X) memtype=0x%X ind=%u exp=%u type=%s mbr=%s\n",
; 3168 :                    evallvl,
; 3169 :                    oper->string_ptr,
; 3170 :                    opnd1->kind,
; 3171 :                    opnd1->value, opnd1->value,
; 3172 :                    opnd1->mem_type,
; 3173 :                    opnd1->indirect, opnd1->explicit,
; 3174 :                    opnd1->type ? opnd1->type->name : "NULL",
; 3175 :                    opnd1->mbr ? opnd1->mbr->name : "NULL" ));
; 3176 :     }
; 3177 : #endif
; 3178 :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN180@calculate
$LN97@calculate:

; 3016 :             break;
; 3017 :         }
; 3018 : 
; 3019 :         /* operator         accepts
; 3020 :          ----------------------------------------------
; 3021 :          SIZEOF/SIZE        label, type, struct field
; 3022 :          LENGTHOF/LENGTH    label, struct field
; 3023 :          TYPE               label, type, struct field, register, number
; 3024 :          LOW                constant, label (OMF+BIN only)
; 3025 :          HIGH               constant, label (OMF+BIN only)
; 3026 :          LOWWORD            constant, label
; 3027 :          HIGHWORD           constant
; 3028 :          LOW32              constant, label, float
; 3029 :          HIGH32             constant, float
; 3030 :          THIS               type
; 3031 :          OPATTR/.TYPE       label, type, struct field, register, number
; 3032 :          SHORT              label
; 3033 :          SEG                label
; 3034 :          OFFSET/LROFFSET    label, struct field, number
; 3035 :          IMAGEREL           label
; 3036 :          SECTIONREL         label
; 3037 :          WIDTH/MASK         bitfields or RECORD type
; 3038 :          */
; 3039 : 
; 3040 :         temp = GetValueSp( oper->tokval );
; 3041 : 
; 3042 :         sym = opnd2->sym;
; 3043 :         if( opnd2->mbr != NULL )

	mov	r9, QWORD PTR [rdi+88]
	lea	rcx, QWORD PTR [r11+r11*2]
	mov	rsi, QWORD PTR [rdi+80]
	test	r9, r9
	mov	r10, rsi
	mov	QWORD PTR [rsp+88], r15
	cmovne	r10, r9
	lea	r15, QWORD PTR [rcx*4]

; 3044 :             sym = opnd2->mbr;
; 3045 : 
; 3046 :         /* for error displays, get the position of the operand that
; 3047 :          * caused the trouble.
; 3048 :          */
; 3049 :         if ( opnd2->instr != EMPTY )

	cmp	DWORD PTR [rdi+56], -2
	mov	r8d, DWORD PTR SpecialTable[r15+rbp]
	je	SHORT $LN100@calculate

; 3050 :             name = oper->tokpos + strlen( oper->string_ptr ) + 1;

	mov	rax, QWORD PTR [r14+8]
	or	rcx, -1
$LL176@calculate:
	inc	rcx
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL176@calculate
	jmp	SHORT $LN186@calculate
$LN100@calculate:

; 3051 :         else if ( sym )

	test	r10, r10
	je	SHORT $LN102@calculate

; 3052 :             name = sym->name;

	mov	rdx, QWORD PTR [r10+8]
	jmp	SHORT $LN105@calculate
$LN102@calculate:

; 3053 :         else if ( opnd2->base_reg != NULL && opnd2->indirect == FALSE )

	mov	rdx, QWORD PTR [rdi+24]
	test	rdx, rdx
	je	SHORT $LN104@calculate
	test	BYTE PTR [rdi+76], 1
	jne	SHORT $LN104@calculate

; 3054 :             name = opnd2->base_reg->string_ptr;

	mov	rdx, QWORD PTR [rdx+8]
	jmp	SHORT $LN105@calculate
$LN104@calculate:

; 3055 :         else
; 3056 :             name = oper->tokpos + strlen( oper->string_ptr ) + 1;

	mov	rax, QWORD PTR [r14+8]
	or	rcx, -1
	npad	6
$LL175@calculate:
	inc	rcx
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL175@calculate
$LN186@calculate:
	mov	rdx, QWORD PTR [r14+24]
	inc	rdx
	add	rdx, rcx
$LN105@calculate:

; 3057 : 
; 3058 :         switch ( opnd2->kind ) {

	mov	ecx, DWORD PTR [rdi+60]
	test	ecx, ecx
	je	SHORT $LN106@calculate
	sub	ecx, 1
	je	SHORT $LN117@calculate
	sub	ecx, 1
	je	SHORT $LN122@calculate
	cmp	ecx, 1
	jne	$LN116@calculate

; 3127 :             }
; 3128 :             break;
; 3129 :         case EXPR_FLOAT: /* v2.05: added */
; 3130 :             if ( ( temp & AT_FLOAT ) == 0 ) {

	bt	r8d, 8
	jb	$LN116@calculate

; 3131 :                 DebugMsg(("calculate %s 'float' error\n", oper->string_ptr ));
; 3132 :                 return( fnEmitErr( REAL_OR_BCD_NUMBER_NOT_ALLOWED ) );

	mov	ecx, 270				; 0000010eH
	call	QWORD PTR fnEmitErr
$LN181@calculate:
	mov	r15, QWORD PTR [rsp+88]
$LN180@calculate:
	mov	rbp, QWORD PTR [rsp+80]

; 3179 : }

	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 48					; 00000030H
	pop	r14
	pop	rdi
	pop	rsi
	ret	0
$LN122@calculate:

; 3092 :                 }
; 3093 :             }
; 3094 : #if 0 /* v2.08: this if() obsolete? */
; 3095 :             if( opnd2->instr != EMPTY ) {
; 3096 :                 /* if instr is set, it's not a full address */
; 3097 :                 switch ( oper->tokval ) {
; 3098 :                 case T_LOW:
; 3099 :                 case T_HIGH:
; 3100 :                 case T_LOWWORD:
; 3101 :                 case T_HIGHWORD:
; 3102 : #if LOHI32
; 3103 :                 case T_LOW32:
; 3104 :                 case T_HIGH32:
; 3105 : #endif
; 3106 :                 case T_TYPE:
; 3107 :                 case T_OPATTR:
; 3108 :                 case T_DOT_TYPE:
; 3109 :                 case T_OFFSET: /* v2.08: added, to allow OFFSET OFFSET <addr> */
; 3110 :                     break;
; 3111 :                 default:
; 3112 :                     /* remaining: OFFSET, LROFFSET, IMAGEREL, SECTIONREL, SEG,
; 3113 :                      * SHORT
; 3114 :                      * THIS (won't set opnd.instr)
; 3115 :                      * (SIZE, SIZEOF, LENGTH, LENGHTOF, MASK, WIDTH) -> EXPR_CONST
; 3116 :                      *
; 3117 :                      */
; 3118 :                     DebugMsg(("calculate %s error 2\n", oper->string_ptr ));
; 3119 :                     return( fnEmitErr( LABEL_EXPECTED ) );
; 3120 :                 }
; 3121 :             }
; 3122 : #endif
; 3123 :             break;
; 3124 :         case EXPR_REG:
; 3125 :             if ( ( temp & AT_REG ) == 0 ) {

	test	r8b, 8

; 3126 :                 return( invalid_operand( opnd2, oper->string_ptr, name ) );

	jmp	SHORT $LN187@calculate
$LN117@calculate:

; 3080 :                 }
; 3081 :             }
; 3082 :             break;
; 3083 :         case EXPR_ADDR:
; 3084 :             /* an indirect memory operand? (not an auto variable) */
; 3085 :             if ( opnd2->indirect == TRUE && opnd2->sym == NULL ) {

	test	BYTE PTR [rdi+76], 1
	je	SHORT $LN118@calculate
	test	rsi, rsi
	jne	SHORT $LN118@calculate

; 3086 :                 if ( ( temp & AT_IND ) == 0 ) {

	test	r8b, 4

; 3087 :                     return( invalid_operand( opnd2, oper->string_ptr, name ) );

	jmp	SHORT $LN187@calculate
$LN118@calculate:

; 3088 :                 }
; 3089 :             } else {
; 3090 :                 if ( ( temp & AT_LABEL ) == 0 ) {

	test	r8b, 2

; 3091 :                     return( invalid_operand( opnd2, oper->string_ptr, name ) );

	jmp	SHORT $LN187@calculate
$LN106@calculate:

; 3059 :         case EXPR_CONST:
; 3060 :             /* v2.05: conditions "struct-field" and "istype" exchanged */
; 3061 :             /* is item a struct field? */
; 3062 :             /* v2.10: fixme: EXPR_CONST & mbr!=NULL - what's that supposed to be? */
; 3063 :             if ( opnd2->mbr != NULL && opnd2->mbr->state != SYM_TYPE ) {

	test	r9, r9
	je	SHORT $LN107@calculate
	cmp	DWORD PTR [r9+32], 7
	je	SHORT $LN107@calculate

; 3064 :                 if ( opnd2->mbr->mem_type == MT_BITS ) { /* bitfield? */

	cmp	DWORD PTR [r9+36], 193			; 000000c1H
	jne	SHORT $LN109@calculate

; 3065 :                     if ( ( temp & AT_BF ) == 0 ) {

	test	r8b, 64					; 00000040H

; 3066 :                         return( invalid_operand( opnd2, oper->string_ptr, name ) );

	jmp	SHORT $LN187@calculate
$LN109@calculate:

; 3067 :                     }
; 3068 :                 } else {
; 3069 :                     if ( ( temp & AT_FIELD ) == 0 ) {

	test	r8b, 16

; 3070 :                         return( invalid_operand( opnd2, oper->string_ptr, name ) );

	jmp	SHORT $LN187@calculate
$LN107@calculate:

; 3071 :                     }
; 3072 :                 }
; 3073 :             } else if ( opnd2->is_type ) { /* is item a type? */

	test	BYTE PTR [rdi+76], 8
	je	SHORT $LN113@calculate

; 3074 :                 if ( ( temp & AT_TYPE ) == 0 ) {

	test	r8b, 1

; 3075 :                     return( invalid_operand( opnd2, oper->string_ptr, name ) );

	jmp	SHORT $LN187@calculate
$LN113@calculate:

; 3076 :                 }
; 3077 :             } else { /*  or is it a number? */
; 3078 :                 if ( ( temp & AT_NUM ) == 0 ) {

	test	r8b, 32					; 00000020H
$LN187@calculate:
	jne	SHORT $LN116@calculate

; 3079 :                     return( invalid_operand( opnd2, oper->string_ptr, name ) );

	mov	r8, rdx
	mov	rcx, rdi
	mov	rdx, QWORD PTR [r14+8]
	call	invalid_operand
	jmp	SHORT $LN181@calculate
$LN116@calculate:

; 3133 :             }
; 3134 :             break;
; 3135 :         }
; 3136 : #ifdef DEBUG_OUT
; 3137 :         if ( unaryop[ GetSflagsSp( oper->tokval ) ]( oper->tokval, opnd1, opnd2, sym, name ) == ERROR )
; 3138 :             return( ERROR );
; 3139 :         break;
; 3140 : #else
; 3141 :         return( unaryop[ GetSflagsSp( oper->tokval ) ]( oper->tokval, opnd1, opnd2, sym, name ) );

	mov	eax, DWORD PTR SpecialTable[r15+rbp+4]
	mov	r9, r10
	mov	QWORD PTR [rsp+32], rdx
	mov	r8, rdi
	mov	rdx, rbx
	mov	ecx, r11d
	call	QWORD PTR unaryop[rbp+rax*8]
	jmp	$LN181@calculate
$LN126@calculate:

; 3142 : #endif
; 3143 :     //case T_RES_ID:
; 3144 :     default: /* shouldn't happen */
; 3145 :         DebugMsg(("calculate(%s): unknown operator\n", oper->string_ptr ));
; 3146 :         return( fnEmitErr( SYNTAX_ERROR_EX, oper->string_ptr ) );

	mov	rdx, QWORD PTR [r8+8]
	mov	ecx, 209				; 000000d1H
	call	QWORD PTR fnEmitErr
	jmp	$LN180@calculate
	npad	2
$LN179@calculate:

; 3179 : }

	DD	$LN96@calculate
	DD	$LN43@calculate
	DD	$LN21@calculate
	DD	$LN31@calculate
	DD	$LN25@calculate
	DD	$LN27@calculate
	DD	$LN29@calculate
	DD	$LN40@calculate
	DD	$LN30@calculate
	DD	$LN13@calculate
	DD	$LN126@calculate
$LN178@calculate:
	DB	0
	DB	1
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	2
	DB	10
	DB	3
	DB	4
	DB	10
	DB	5
	DB	6
	DB	7
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	8
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	10
	DB	9
$LN177@calculate:
	DD	$LN69@calculate
	DD	$LN72@calculate
	DD	$LN78@calculate
	DD	$LN77@calculate
	DD	$LN76@calculate
	DD	$LN75@calculate
	DD	$LN79@calculate
calculate ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT cmp_types
_TEXT	SEGMENT
opnd1$ = 48
opnd2$ = 56
trueval$ = 64
cmp_types PROC						; COMDAT

; 2534 : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rdi
	sub	rsp, 32					; 00000020H

; 2535 :     struct asym *type1;
; 2536 :     struct asym *type2;
; 2537 : 
; 2538 :     /* v2.10: special handling of pointer types. */
; 2539 :     //if ( opnd1->mem_type == MT_PTR && opnd2->mem_type == MT_PTR && opnd1->type && opnd2->type ) {
; 2540 :     if ( opnd1->mem_type == MT_PTR && opnd2->mem_type == MT_PTR ) {

	cmp	DWORD PTR [rcx+64], 195			; 000000c3H
	mov	ebx, r8d
	mov	rbp, rdx
	mov	rdi, rcx
	jne	SHORT $LN2@cmp_types
	cmp	DWORD PTR [rdx+64], 195			; 000000c3H
	jne	SHORT $LN2@cmp_types

; 2541 :         /**/myassert( ( opnd1->type || opnd1->type_tok ) && ( opnd2->type || opnd2->type_tok ) );
; 2542 :         type1 = ( opnd1->type ? opnd1->type : SymSearch( opnd1->type_tok->string_ptr ) );

	mov	QWORD PTR [rsp+48], rsi
	mov	rsi, QWORD PTR [rcx+96]
	test	rsi, rsi
	jne	SHORT $LN8@cmp_types
	mov	rcx, QWORD PTR [rcx+40]
	mov	rcx, QWORD PTR [rcx+8]
	call	SymFind
	mov	rsi, rax
$LN8@cmp_types:

; 2543 :         type2 = ( opnd2->type ? opnd2->type : SymSearch( opnd2->type_tok->string_ptr ) );

	mov	rax, QWORD PTR [rbp+96]
	test	rax, rax
	jne	SHORT $LN10@cmp_types
	mov	rcx, QWORD PTR [rbp+40]
	mov	rcx, QWORD PTR [rcx+8]
	call	SymFind
$LN10@cmp_types:

; 2544 :         //opnd1->value64 = ( ( type1->is_ptr == type2->is_ptr &&
; 2545 :         opnd1->value64 = ( ( type1->is_ptr == type2->is_ptr &&

	movzx	ecx, BYTE PTR [rax+45]
	cmp	BYTE PTR [rsi+45], cl
	jne	SHORT $LN11@cmp_types
	movzx	ecx, BYTE PTR [rax+46]
	cmp	BYTE PTR [rsi+46], cl
	jne	SHORT $LN11@cmp_types
	mov	rax, QWORD PTR [rax+48]
	cmp	QWORD PTR [rsi+48], rax
	je	SHORT $LN12@cmp_types
$LN11@cmp_types:
	not	ebx
$LN12@cmp_types:
	mov	rsi, QWORD PTR [rsp+48]

; 2546 :                             type1->ptr_memtype == type2->ptr_memtype &&
; 2547 :                             type1->target_type == type2->target_type ) ? trueval : ~trueval );
; 2548 :         DebugMsg1(("cmp_types: MT_PTR-MT_PTR is_ptr=%u-%u ptr_memtype=%X-%X target_type=%X-%X\n",
; 2549 :                    type1->is_ptr, type2->is_ptr,
; 2550 :                    type1->ptr_memtype, type2->ptr_memtype,
; 2551 :                    type1->target_type, type2->target_type ));
; 2552 :     } else {

	jmp	SHORT $LN14@cmp_types
$LN2@cmp_types:

; 2553 :         DebugMsg1(("cmp_types: memtype=%X-%X type=%X-%X\n",
; 2554 :                    opnd1->mem_type, opnd2->mem_type, opnd1->type, opnd2->type ));
; 2555 :         /* v2.09: include type member in comparison, but ignore typedef types */
; 2556 :         if ( opnd1->type && opnd1->type->typekind == TYPE_TYPEDEF && opnd1->type->is_ptr == 0 )

	mov	rax, QWORD PTR [rcx+96]
	xor	ecx, ecx
	test	rax, rax
	je	SHORT $LN4@cmp_types
	cmp	BYTE PTR [rax+66], 3
	jne	SHORT $LN4@cmp_types
	cmp	BYTE PTR [rax+45], cl
	jne	SHORT $LN4@cmp_types

; 2557 :             opnd1->type = NULL;

	mov	QWORD PTR [rdi+96], rcx
$LN4@cmp_types:

; 2558 :         if ( opnd2->type && opnd2->type->typekind == TYPE_TYPEDEF && opnd2->type->is_ptr == 0 )

	mov	rax, QWORD PTR [rdx+96]
	test	rax, rax
	je	SHORT $LN5@cmp_types
	cmp	BYTE PTR [rax+66], 3
	jne	SHORT $LN5@cmp_types
	cmp	BYTE PTR [rax+45], cl
	jne	SHORT $LN5@cmp_types

; 2559 :             opnd2->type = NULL;

	mov	QWORD PTR [rdx+96], rcx
$LN5@cmp_types:

; 2560 :         opnd1->value64 = ( ( opnd1->mem_type == opnd2->mem_type &&

	mov	eax, DWORD PTR [rdx+64]
	cmp	DWORD PTR [rdi+64], eax
	jne	SHORT $LN13@cmp_types
	mov	rax, QWORD PTR [rdx+96]
	cmp	QWORD PTR [rdi+96], rax
	je	SHORT $LN14@cmp_types
$LN13@cmp_types:
	not	ebx
$LN14@cmp_types:

; 2561 :                             opnd1->type == opnd2->type ) ? trueval : ~trueval );
; 2562 :     }
; 2563 : }

	mov	rbp, QWORD PTR [rsp+64]
	movsxd	rax, ebx
	mov	rbx, QWORD PTR [rsp+56]
	mov	QWORD PTR [rdi], rax
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
cmp_types ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT check_streg
_TEXT	SEGMENT
opnd1$ = 8
opnd2$ = 16
check_streg PROC					; COMDAT

; 2519 :     if ( opnd1->scale > 0 ) {

	movzx	eax, BYTE PTR [rcx+68]
	test	al, al
	je	SHORT $LN2@check_stre

; 2520 :         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	ecx, 170				; 000000aaH
	rex_jmp	QWORD PTR fnEmitErr
$LN2@check_stre:

; 2521 :     }
; 2522 :     opnd1->scale++; /* make sure there's only ONE bracket pair */

	inc	al
	mov	BYTE PTR [rcx+68], al

; 2523 :     if ( opnd2->kind != EXPR_CONST ) {

	cmp	DWORD PTR [rdx+60], 0
	je	SHORT $LN3@check_stre

; 2524 :         return( fnEmitErr( INVALID_COPROCESSOR_REGISTER ) );

	mov	ecx, 252				; 000000fcH
	rex_jmp	QWORD PTR fnEmitErr
$LN3@check_stre:

; 2525 :     }
; 2526 :     opnd1->st_idx = opnd2->value;

	mov	eax, DWORD PTR [rdx]
	mov	DWORD PTR [rcx], eax

; 2527 :     return( NOT_ERROR );

	xor	eax, eax

; 2528 : }

	ret	0
check_streg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT CheckAssume
_TEXT	SEGMENT
opnd$ = 48
CheckAssume PROC					; COMDAT

; 2456 : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 2457 :     struct asym *sym = NULL;
; 2458 : 
; 2459 : #if 1 /* v2.10: see regression test ptr2.asm */
; 2460 :     if ( opnd->explicit ) { /* perhaps check mem_type instead of explicit */

	test	BYTE PTR [rcx+76], 2
	mov	rbx, rcx
	je	SHORT $LN4@CheckAssum

; 2461 :         if ( opnd->type && opnd->type->mem_type == MT_PTR ) {

	mov	rcx, QWORD PTR [rcx+96]
	test	rcx, rcx
	je	SHORT $LN4@CheckAssum
	cmp	DWORD PTR [rcx+36], 195			; 000000c3H
	jne	SHORT $LN4@CheckAssum

; 2462 :             DebugMsg1(( "CheckAssume(%s, MT_PTR type=>%s< )\n", opnd->type->name ));
; 2463 :             if ( opnd->type->is_ptr == 1 ) { /* dereference only if indirection is 1 */

	cmp	BYTE PTR [rcx+45], 1
	jne	SHORT $LN4@CheckAssum

; 2464 :                 opnd->mem_type = opnd->type->ptr_memtype;

	movzx	eax, BYTE PTR [rcx+46]
	mov	DWORD PTR [rbx+64], eax

; 2465 :                 opnd->type = opnd->type->target_type;

	mov	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR [rbx+96], rax

; 2510 :         }
; 2511 :     }
; 2512 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN4@CheckAssum:

; 2466 :                 return; /* ignore assumes in this case */
; 2467 :             }
; 2468 :         }
; 2469 :     }
; 2470 : #endif
; 2471 :     /* in jwasm < v2.10, the idx_reg had higher priority than base_reg.
; 2472 :      * However, the base reg is supposed to have a higher priority.
; 2473 :      * This wasn't fully clear, because in Masm 6, if no register has
; 2474 :      * a scaling factor, the second one becomes base - something that
; 2475 :      * HJWasm didn't do, unless -Zg was set.
; 2476 :      * Since v2.10, HJWasm behaves like Masm v6+: base and index registers
; 2477 :      * are swapped, and assume for base has higher priority than assume for
; 2478 :      * index.
; 2479 :      */
; 2480 :     if ( opnd->base_reg ) {

	mov	rax, QWORD PTR [rbx+24]
	test	rax, rax
	je	SHORT $LN15@CheckAssum

; 2481 :         sym = GetStdAssumeEx( opnd->base_reg->bytval );

	movzx	ecx, BYTE PTR [rax+1]
	call	GetStdAssumeEx
	mov	rcx, rax

; 2482 :     }
; 2483 :     if (!sym && opnd->idx_reg ) {

	test	rax, rax
	jne	SHORT $LN14@CheckAssum
$LN15@CheckAssum:
	mov	rax, QWORD PTR [rbx+32]
	test	rax, rax
	je	SHORT $LN12@CheckAssum

; 2484 :         sym = GetStdAssumeEx( opnd->idx_reg->bytval );

	movzx	ecx, BYTE PTR [rax+1]
	call	GetStdAssumeEx
	mov	rcx, rax

; 2485 :     }
; 2486 :     if ( sym ) {

	test	rax, rax
	je	SHORT $LN12@CheckAssum
$LN14@CheckAssum:

; 2487 :         DebugMsg1(( "CheckAssume(%s, type=>%s<, mbr=>%s<): assume=%s [memtype=%X isptr=%u type=%s target_type=%s ptr_memt=%X]\n",
; 2488 :                    GetResWName( ( opnd->idx_reg ? opnd->idx_reg->tokval : opnd->base_reg->tokval ), NULL ),
; 2489 :                    opnd->type ? opnd->type->name : "NULL",
; 2490 :                    opnd->mbr ? opnd->mbr->name : "NULL",
; 2491 :                    sym->name, sym->mem_type, sym->is_ptr,
; 2492 :                    sym->type ? sym->type->name : "NULL",
; 2493 :                    sym->target_type ? sym->target_type->name : "NULL",
; 2494 :                    sym->ptr_memtype ));
; 2495 :         /* v2.08: skip ASSUMEd type if type or mbr is set */
; 2496 :         //if ( opnd->type || opnd->mbr )
; 2497 :         //    return;
; 2498 :         /* skip "alias" types */
; 2499 :         /* v2.05: obsolete */
; 2500 :         //for ( ; sym->type; sym = sym->type );
; 2501 :         /* v2.05: new */
; 2502 :         if ( sym->mem_type == MT_TYPE )

	cmp	DWORD PTR [rcx+36], 196			; 000000c4H
	jne	SHORT $LN8@CheckAssum

; 2503 :             opnd->type = sym->type;

	mov	rax, QWORD PTR [rcx+80]
	mov	QWORD PTR [rbx+96], rax

; 2510 :         }
; 2511 :     }
; 2512 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN8@CheckAssum:

; 2504 :         else if ( sym->is_ptr == 1 ) { /* v2.10: only dereference if indirection is 1 */

	cmp	BYTE PTR [rcx+45], 1
	jne	SHORT $LN12@CheckAssum

; 2505 :             opnd->type = sym->target_type;

	mov	rax, QWORD PTR [rcx+48]
	mov	QWORD PTR [rbx+96], rax

; 2506 :             if ( sym->target_type )

	mov	rax, QWORD PTR [rcx+48]
	test	rax, rax
	je	SHORT $LN11@CheckAssum

; 2507 :                 opnd->mem_type = sym->target_type->mem_type;

	mov	eax, DWORD PTR [rax+36]

; 2508 :             else
; 2509 :                 opnd->mem_type = sym->ptr_memtype;

	mov	DWORD PTR [rbx+64], eax

; 2510 :         }
; 2511 :     }
; 2512 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN11@CheckAssum:

; 2508 :             else
; 2509 :                 opnd->mem_type = sym->ptr_memtype;

	movzx	eax, BYTE PTR [rcx+46]
	mov	DWORD PTR [rbx+64], eax
$LN12@CheckAssum:

; 2510 :         }
; 2511 :     }
; 2512 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
CheckAssume ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT negative_op
_TEXT	SEGMENT
opnd1$ = 48
opnd2$ = 56
negative_op PROC					; COMDAT

; 2421 : {

	sub	rsp, 40					; 00000028H
	mov	r9, rcx
	mov	r10, rdx

; 2422 :     DebugMsg1(("negative_op: value=%" I64_SPEC "X high=%" I64_SPEC "X\n", opnd2->llvalue, opnd2->hlvalue ));
; 2423 :     /*
; 2424 :      * The formats allowed are:
; 2425 :      *        - constant
; 2426 :      *        - float
; 2427 :      */
; 2428 : 
; 2429 :     MakeConst( opnd2 );

	mov	rcx, rdx
	call	MakeConst

; 2430 :     if( opnd2->kind == EXPR_CONST ) {

	mov	ecx, DWORD PTR [rcx+60]
	test	ecx, ecx
	jne	SHORT $LN2@negative_o

; 2431 :         opnd1->kind = EXPR_CONST;

	mov	DWORD PTR [r9+60], ecx

; 2432 :         opnd1->llvalue = -opnd2->llvalue;

	mov	rax, QWORD PTR [r10]
	neg	rax
	mov	QWORD PTR [r9], rax

; 2433 :         /* v2.06: the unary '-' operator is to work with
; 2434 :          * magnitudes > 64-bit. Current implementation is
; 2435 :          * a bit hackish.
; 2436 :          */
; 2437 :         if ( opnd2->hlvalue )

	mov	rcx, QWORD PTR [r10+8]
	test	rcx, rcx
	je	SHORT $LN4@negative_o

; 2438 :             opnd1->hlvalue = -opnd2->hlvalue - 1;

	or	rax, -1
	sub	rax, rcx
	mov	QWORD PTR [r9+8], rax

; 2439 :         opnd1->negative = 1 - opnd2->negative; /* ??? supposed to be used for EXPR_FLOAT only! */

	jmp	SHORT $LN4@negative_o
$LN2@negative_o:

; 2440 :     } else if( opnd2->kind == EXPR_FLOAT ) {

	cmp	ecx, 3
	jne	SHORT $LN5@negative_o

; 2441 :         opnd1->kind = EXPR_FLOAT;

	mov	DWORD PTR [r9+60], ecx

; 2442 :         opnd1->float_tok = opnd2->float_tok;

	mov	rax, QWORD PTR [r10+16]
	mov	QWORD PTR [r9+16], rax
$LN4@negative_o:

; 2443 :         opnd1->negative = 1 - opnd2->negative;

	mov	eax, DWORD PTR [r10+76]
	or	ecx, -1					; ffffffffH
	shr	eax, 5
	and	eax, 1
	sub	ecx, eax
	shl	ecx, 5
	xor	ecx, DWORD PTR [r9+76]
	and	ecx, 32					; 00000020H
	xor	DWORD PTR [r9+76], ecx

; 2447 :     }
; 2448 :     return( NOT_ERROR );

	xor	eax, eax

; 2449 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@negative_o:

; 2444 :     } else {
; 2445 :         DebugMsg(("negative_op: unexpected opnd2.kind=%d\n", opnd2->kind ));
; 2446 :         return( fnEmitErr( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H

; 2449 : }

	add	rsp, 40					; 00000028H

; 2444 :     } else {
; 2445 :         DebugMsg(("negative_op: unexpected opnd2.kind=%d\n", opnd2->kind ));
; 2446 :         return( fnEmitErr( CONSTANT_EXPECTED ) );

	rex_jmp	QWORD PTR fnEmitErr
negative_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT positive_op
_TEXT	SEGMENT
opnd1$ = 48
opnd2$ = 56
positive_op PROC					; COMDAT

; 2393 : {

	sub	rsp, 40					; 00000028H
	mov	r9, rcx
	mov	r10, rdx

; 2394 :     DebugMsg1(("positive_op: value=%" I64_SPEC "X high=%" I64_SPEC "X\n", opnd2->llvalue, opnd2->hlvalue ));
; 2395 :     /*
; 2396 :      * The formats allowed are:
; 2397 :      *        + constant
; 2398 :      *        + float
; 2399 :      * v2.06: unlike the other operators unary + will
; 2400 :      * handle 128-bit values (needed for TBYTE integers)
; 2401 :      */
; 2402 : 
; 2403 :     MakeConst( opnd2 );

	mov	rcx, rdx
	call	MakeConst

; 2404 :     if( opnd2->kind == EXPR_CONST ) {

	mov	ecx, DWORD PTR [rcx+60]
	test	ecx, ecx
	jne	SHORT $LN2@positive_o

; 2405 :         opnd1->kind = EXPR_CONST;

	mov	DWORD PTR [r9+60], ecx

; 2406 :         opnd1->llvalue = opnd2->llvalue;

	mov	rax, QWORD PTR [r10]
	mov	QWORD PTR [r9], rax

; 2407 :         opnd1->hlvalue = opnd2->hlvalue; /* v2.06: added */

	mov	rax, QWORD PTR [r10+8]
	mov	QWORD PTR [r9+8], rax

; 2415 :     }
; 2416 :     return( NOT_ERROR );

	xor	eax, eax

; 2417 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@positive_o:

; 2408 :     } else if( opnd2->kind == EXPR_FLOAT ) {

	cmp	ecx, 3
	jne	SHORT $LN4@positive_o

; 2409 :         opnd1->kind = EXPR_FLOAT;

	mov	DWORD PTR [r9+60], ecx

; 2410 :         opnd1->float_tok = opnd2->float_tok;

	mov	rax, QWORD PTR [r10+16]
	mov	QWORD PTR [r9+16], rax

; 2411 :         opnd1->negative = opnd2->negative;

	mov	eax, DWORD PTR [r10+76]
	xor	eax, DWORD PTR [r9+76]
	and	eax, 32					; 00000020H
	xor	DWORD PTR [r9+76], eax

; 2415 :     }
; 2416 :     return( NOT_ERROR );

	xor	eax, eax

; 2417 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN4@positive_o:

; 2412 :     } else {
; 2413 :         DebugMsg(("positive_op: error 1\n"));
; 2414 :         return( fnEmitErr( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H

; 2417 : }

	add	rsp, 40					; 00000028H

; 2412 :     } else {
; 2413 :         DebugMsg(("positive_op: error 1\n"));
; 2414 :         return( fnEmitErr( CONSTANT_EXPECTED ) );

	rex_jmp	QWORD PTR fnEmitErr
positive_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT colon_op
_TEXT	SEGMENT
opnd1$ = 8
opnd2$ = 16
colon_op PROC						; COMDAT

; 2263 :     int_32              temp;
; 2264 :     struct asym         *sym;
; 2265 :     /*
; 2266 :      * The only formats allowed are:
; 2267 :      *     seg_reg : const
; 2268 :      *     seg_reg : address
; 2269 :      *     seg_label : const
; 2270 :      *     seg_label : address
; 2271 :      *     ( seg_label = segment or group symbol )
; 2272 :      *     inside square brackets, seg_reg : register is not accepted
; 2273 :      *     if Masm-syntax is on.
; 2274 :      */
; 2275 :     DebugMsg1(("colon_op: t1-t2 kind=%d/%d type=%s-%s is_type=%u-%u\n",
; 2276 :                opnd1->kind, opnd2->kind,
; 2277 :                opnd1->type ? opnd1->type->name : "NULL",
; 2278 :                opnd2->type ? opnd2->type->name : "NULL",
; 2279 :                opnd1->is_type, opnd2->is_type ));
; 2280 :     if( opnd2->override != NULL ) {

	mov	rax, QWORD PTR [rdx+48]
	mov	r8, rcx
	test	rax, rax
	je	SHORT $LN5@colon_op

; 2281 :         /* v2.07a: was too rigid */
; 2282 :         if ( ( opnd1->kind == EXPR_REG && opnd2->override->token == T_REG ) ||

	mov	ecx, DWORD PTR [rcx+60]
	cmp	ecx, 2
	jne	SHORT $LN7@colon_op
	cmp	BYTE PTR [rax], cl
	je	SHORT $LN6@colon_op
$LN7@colon_op:
	cmp	ecx, 1
	jne	SHORT $LN5@colon_op
	cmp	BYTE PTR [rax], 8
	jne	SHORT $LN5@colon_op
$LN6@colon_op:

; 2283 :             ( opnd1->kind == EXPR_ADDR && opnd2->override->token == T_ID ) ) {
; 2284 :             DebugMsg(("colon_op: multiple override=%s\n", opnd2->override->string_ptr ));
; 2285 :             return( fnEmitErr( MULTIPLE_OVERRIDES ) );

	mov	ecx, 68					; 00000044H

; 2381 :             DebugMsg(("colon_op error 4\n"));
; 2382 :             return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );
; 2383 :         }
; 2384 :     } else {
; 2385 :         DebugMsg(("colon_op error 5\n"));
; 2386 :         return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN5@colon_op:

; 2286 :         }
; 2287 :     }
; 2288 :     switch ( opnd2->kind ) {

	mov	r9d, DWORD PTR [rdx+60]
	mov	ecx, r9d
	sub	ecx, 2
	je	SHORT $LN8@colon_op
	cmp	ecx, 1
	jne	SHORT $LN9@colon_op

; 2294 :         }
; 2295 :         break;
; 2296 :     case EXPR_FLOAT:
; 2297 :         return( fnEmitErr( REAL_OR_BCD_NUMBER_NOT_ALLOWED ) );

	mov	ecx, 270				; 0000010eH

; 2381 :             DebugMsg(("colon_op error 4\n"));
; 2382 :             return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );
; 2383 :         }
; 2384 :     } else {
; 2385 :         DebugMsg(("colon_op error 5\n"));
; 2386 :         return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN8@colon_op:

; 2289 :     case EXPR_REG:
; 2290 :         /* v2.05: register as second operand must be enclosed in [] */
; 2291 :         if ( opnd2->indirect == FALSE ) {

	test	BYTE PTR [rdx+76], 1
	jne	SHORT $LN9@colon_op
$LN34@colon_op:

; 2292 :             DebugMsg(("colon_op: register after : not enclosed in []\n" ));
; 2293 :             return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	ecx, 170				; 000000aaH

; 2381 :             DebugMsg(("colon_op error 4\n"));
; 2382 :             return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );
; 2383 :         }
; 2384 :     } else {
; 2385 :         DebugMsg(("colon_op error 5\n"));
; 2386 :         return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN9@colon_op:

; 2298 :     }
; 2299 : 
; 2300 :     if( opnd1->kind == EXPR_REG ) {

	mov	eax, DWORD PTR [r8+60]
	cmp	eax, 2
	jne	$LN11@colon_op

; 2301 : 
; 2302 :         /* the item before the ':' must be a single register */
; 2303 :         if( opnd1->idx_reg != NULL ) {

	cmp	QWORD PTR [r8+32], 0
	jne	SHORT $LN34@colon_op

; 2304 :             DebugMsg(("colon_op: register before ':' has idx_reg set!?\n"));
; 2305 :             return( fnEmitErr( INVALID_USE_OF_REGISTER ) );
; 2306 :         }
; 2307 :         /* segment override inside bracket not allowed with -Zne.
; 2308 :          * [ds:0] is ok, but [ds:ebx] is rejected.
; 2309 :          */
; 2310 :         /* v2.08: test moved here from get_operand() */
; 2311 :         /* v2.10: regression in v2.08-2.09: check was way too simple.
; 2312 :          * problem: indirect-flag isn't set for segment regs (anymore?).
; 2313 :          * error check moved back to get_operand().
; 2314 :          */
; 2315 : #if 0
; 2316 :         if ( Options.strict_masm_compat ) {
; 2317 :             return( fnEmitErr( INVALID_USE_OF_REGISTER ) );
; 2318 :         }
; 2319 : #endif
; 2320 :         /* make sure first operand is a segment register */
; 2321 :         temp = opnd1->base_reg->tokval;

	mov	r10, QWORD PTR [r8+24]

; 2322 :         if ( ( GetValueSp( temp ) & OP_SR ) == 0 ) {

	movsxd	rax, DWORD PTR [r10+16]
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rax, OFFSET FLAT:SpecialTable
	test	DWORD PTR [rax+rcx*4], 24576		; 00006000H
	je	$LN18@colon_op

; 2323 :             return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );
; 2324 :         }
; 2325 : 
; 2326 :         opnd2->override = opnd1->base_reg;
; 2327 :         opnd2->indirect |= opnd1->indirect;

	mov	eax, DWORD PTR [rdx+76]
	mov	QWORD PTR [rdx+48], r10
	mov	ecx, DWORD PTR [r8+76]
	or	ecx, eax
	xor	ecx, eax
	and	ecx, 1
	xor	ecx, eax
	mov	DWORD PTR [rdx+76], ecx

; 2328 : 
; 2329 :         if ( opnd2->kind == EXPR_CONST ) {

	test	r9d, r9d
	jne	SHORT $LN15@colon_op

; 2330 :             opnd2->kind = EXPR_ADDR;

	mov	DWORD PTR [rdx+60], 1
$LN15@colon_op:

; 2331 :             /* v2.05: type flag cleared HERE, not in dot_op()
; 2332 :              * v2.05rc17 problem: mov es:byte ptr <var>,0
; 2333 :              * so the flag isn't cleared at all now.
; 2334 :              */
; 2335 :             //opnd2->is_type = FALSE;
; 2336 :         }
; 2337 : 
; 2338 :         if( opnd1->explicit ) {

	mov	eax, DWORD PTR [r8+76]
	test	al, 2
	je	SHORT $LN16@colon_op

; 2339 :             opnd2->explicit = opnd1->explicit;

	and	DWORD PTR [rdx+76], -3			; fffffffdH
	and	eax, 2
	or	DWORD PTR [rdx+76], eax

; 2340 :             opnd2->mem_type = opnd1->mem_type;

	mov	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [rdx+64], eax

; 2341 :             opnd2->Ofssize  = opnd1->Ofssize;

	movzx	eax, BYTE PTR [r8+69]
	mov	BYTE PTR [rdx+69], al
$LN16@colon_op:

; 2342 :         }
; 2343 :         TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [r8], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [r8+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [r8+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [r8+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	XMMWORD PTR [r8+64], xmm0
	movups	xmm1, XMMWORD PTR [rdx+80]
	movups	XMMWORD PTR [r8+80], xmm1

; 2344 : 
; 2345 :         /*
; 2346 :          * currently the <type> token isn't copied by
; 2347 :          * TokenAssign (which is probably just for historical reasons).
; 2348 :          * So copy it manually!
; 2349 :          * v1.95: only copy if it is != NULL!
; 2350 :          * Testcase: (<type> ptr DS:[0]).<struct_field> ...
; 2351 :          * In this case the DS:[] will clear the <type>, as a result
; 2352 :          * the dot operator won't have a valid assume and the code fails.
; 2353 :          */
; 2354 :         if ( opnd2->type )

	mov	rax, QWORD PTR [rdx+96]
	test	rax, rax
	je	$LN24@colon_op

; 2378 :             opnd1->type = opnd2->type;

	mov	QWORD PTR [r8+96], rax

; 2387 :     }
; 2388 :     return( NOT_ERROR );

	xor	eax, eax

; 2389 : }

	ret	0
$LN11@colon_op:

; 2355 :             opnd1->type = opnd2->type;
; 2356 : 
; 2357 :     } else if( opnd1->kind == EXPR_ADDR &&
; 2358 :               /* opnd2->kind == EXPR_ADDR && */
; 2359 :               opnd1->override == NULL &&
; 2360 :               opnd1->instr == EMPTY &&
; 2361 :               opnd1->value == 0 &&
; 2362 :               opnd1->sym &&
; 2363 :               opnd1->base_reg == NULL &&

	cmp	eax, 1
	jne	SHORT $LN18@colon_op
	cmp	QWORD PTR [r8+48], 0
	jne	SHORT $LN18@colon_op
	cmp	DWORD PTR [r8+56], -2
	jne	SHORT $LN18@colon_op
	cmp	DWORD PTR [r8], 0
	jne	SHORT $LN18@colon_op
	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN18@colon_op
	cmp	QWORD PTR [r8+24], 0
	jne	SHORT $LN18@colon_op
	cmp	QWORD PTR [r8+32], 0
	jne	SHORT $LN18@colon_op

; 2364 :               opnd1->idx_reg == NULL ) {
; 2365 : 
; 2366 :         sym = opnd1->sym;
; 2367 : 
; 2368 :         if( sym->state == SYM_GRP || sym->state == SYM_SEG ) {

	mov	ecx, DWORD PTR [rax+32]
	lea	eax, DWORD PTR [rcx-3]
	cmp	eax, 1
	jbe	SHORT $LN22@colon_op

; 2379 : 
; 2380 :         } else if( Parse_Pass > PASS_1 || sym->state != SYM_UNDEFINED ) {

	cmp	DWORD PTR Parse_Pass, 0
	ja	SHORT $LN18@colon_op
	test	ecx, ecx
	je	$LN24@colon_op
$LN18@colon_op:

; 2381 :             DebugMsg(("colon_op error 4\n"));
; 2382 :             return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );
; 2383 :         }
; 2384 :     } else {
; 2385 :         DebugMsg(("colon_op error 5\n"));
; 2386 :         return( fnEmitErr( SEGMENT_GROUP_OR_SEGREG_EXPECTED ) );

	mov	ecx, 69					; 00000045H
	rex_jmp	QWORD PTR fnEmitErr
$LN22@colon_op:

; 2369 :             opnd2->kind = EXPR_ADDR;

	mov	DWORD PTR [rdx+60], 1

; 2370 :             opnd2->override = opnd1->label_tok;

	mov	rax, QWORD PTR [r8+40]
	mov	QWORD PTR [rdx+48], rax

; 2371 :             opnd2->indirect |= opnd1->indirect;

	mov	eax, DWORD PTR [rdx+76]
	mov	ecx, DWORD PTR [r8+76]
	or	ecx, eax
	xor	ecx, eax
	and	ecx, 1
	xor	ecx, eax
	mov	DWORD PTR [rdx+76], ecx

; 2372 :             if( opnd1->explicit ) {

	mov	eax, DWORD PTR [r8+76]
	test	al, 2
	je	SHORT $LN23@colon_op

; 2373 :                 opnd2->explicit = opnd1->explicit;

	xor	eax, ecx
	and	eax, 2
	xor	eax, ecx
	mov	DWORD PTR [rdx+76], eax

; 2374 :                 opnd2->mem_type = opnd1->mem_type;

	mov	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [rdx+64], eax

; 2375 :                 opnd2->Ofssize  = opnd1->Ofssize;

	movzx	eax, BYTE PTR [r8+69]
	mov	BYTE PTR [rdx+69], al
$LN23@colon_op:

; 2376 :             }
; 2377 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [r8], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [r8+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [r8+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [r8+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	XMMWORD PTR [r8+64], xmm0
	movups	xmm1, XMMWORD PTR [rdx+80]
	movups	XMMWORD PTR [r8+80], xmm1

; 2378 :             opnd1->type = opnd2->type;

	mov	rax, QWORD PTR [rdx+96]
	mov	QWORD PTR [r8+96], rax
$LN24@colon_op:

; 2387 :     }
; 2388 :     return( NOT_ERROR );

	xor	eax, eax

; 2389 : }

	ret	0
colon_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT dot_op
_TEXT	SEGMENT
opnd1$ = 48
opnd2$ = 56
dot_op	PROC						; COMDAT

; 2058 : {

	mov	QWORD PTR [rsp+16], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 2059 :     /* this code needs cleanup! some stuff is obsolete. */
; 2060 : 
; 2061 :     DebugMsg1(("dot_op: op1-op2 kind=%d/%d sym=%s-%s type=%s-%s mbr=%s-%s\n",
; 2062 :                opnd1->kind, opnd2->kind,
; 2063 :                opnd1->sym  ? opnd1->sym->name  : "NULL",
; 2064 :                opnd2->sym  ? opnd2->sym->name  : "NULL",
; 2065 :                opnd1->type ? opnd1->type->name : "NULL",
; 2066 :                opnd2->type ? opnd2->type->name : "NULL",
; 2067 :                opnd1->mbr  ? opnd1->mbr->name  : "NULL",
; 2068 :                opnd2->mbr  ? opnd2->mbr->name  : "NULL" ));
; 2069 : 
; 2070 :     /*
; 2071 :      * The formats allowed are:
; 2072 :      *        [register]      . (type) constant
; 2073 :      *        label           . (type) constant
; 2074 :      *        (type) constant . (type) constant
; 2075 :      *
; 2076 :      * with OPTION OLDSTRUCTS:
; 2077 :      *        [register]      . address
; 2078 :      *        address         . address
; 2079 :      */
; 2080 : 
; 2081 :     if( check_direct_reg( opnd1, opnd2 ) == ERROR ) {

	mov	eax, DWORD PTR [rcx+60]
	mov	rdi, rdx
	mov	rbx, rcx
	cmp	eax, 2
	jne	SHORT $LN42@dot_op
	test	BYTE PTR [rcx+76], 1
	je	SHORT $LN61@dot_op
$LN42@dot_op:
	cmp	DWORD PTR [rdx+60], 2
	jne	SHORT $LN2@dot_op
	test	BYTE PTR [rdx+76], 1
	jne	SHORT $LN2@dot_op
$LN61@dot_op:

; 2082 :         DebugMsg(("dot_op: error direct register\n"));
; 2083 :         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	ecx, 170				; 000000aaH

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 2082 :         DebugMsg(("dot_op: error direct register\n"));
; 2083 :         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN2@dot_op:
	mov	QWORD PTR [rsp+48], rsi

; 2084 :     }
; 2085 : 
; 2086 :     /* v2.08: remove EXPR_REG variants */
; 2087 :     if ( opnd1->kind == EXPR_REG )

	cmp	eax, 2
	jne	SHORT $LN3@dot_op

; 2088 :         opnd1->kind = EXPR_ADDR;

	mov	DWORD PTR [rcx+60], 1
$LN3@dot_op:

; 2089 :     if ( opnd2->kind == EXPR_REG )

	cmp	DWORD PTR [rdx+60], 2
	jne	SHORT $LN4@dot_op

; 2090 :         opnd2->kind = EXPR_ADDR;

	mov	DWORD PTR [rdx+60], 1
$LN4@dot_op:

; 2091 : 
; 2092 :     /* forward ref to a struct: [reg].<struct> */
; 2093 :     if ( opnd2->sym && opnd2->sym->state == SYM_UNDEFINED && Parse_Pass == PASS_1 ) {

	mov	rax, QWORD PTR [rdx+80]
	xor	esi, esi
	test	rax, rax
	je	SHORT $LN5@dot_op
	cmp	DWORD PTR [rax+32], esi
	jne	SHORT $LN5@dot_op
	cmp	DWORD PTR Parse_Pass, esi
	jne	SHORT $LN5@dot_op

; 2094 :         DebugMsg(("dot_op: forward reference %s, replaced by null struct type\n", opnd2->sym->name ));
; 2095 :         if ( !nullstruct )

	mov	rax, QWORD PTR nullstruct
	test	rax, rax
	jne	SHORT $LN6@dot_op

; 2096 :             nullstruct = CreateTypeSymbol( NULL, "", FALSE );

	xor	r8d, r8d
	lea	rdx, OFFSET FLAT:$SG11769
	xor	ecx, ecx
	call	CreateTypeSymbol
	mov	QWORD PTR nullstruct, rax
$LN6@dot_op:

; 2097 :         opnd2->type = nullstruct;
; 2098 :         opnd2->is_type = TRUE; /* v2.10: added */

	or	DWORD PTR [rdi+76], 8
	mov	QWORD PTR [rdi+96], rax

; 2099 :         opnd2->sym = NULL;

	mov	QWORD PTR [rdi+80], rsi

; 2100 :         opnd2->kind = EXPR_CONST;

	mov	DWORD PTR [rdi+60], esi
$LN5@dot_op:

; 2101 :     }
; 2102 : 
; 2103 :     if( check_same( opnd1, opnd2, EXPR_ADDR ) ) {

	mov	eax, DWORD PTR [rbx+60]
	cmp	eax, 1
	jne	$LN7@dot_op
	cmp	DWORD PTR [rdi+60], eax
	jne	$LN7@dot_op

; 2104 : 
; 2105 :         DebugMsg1(("dot_op, ADDR - ADDR, t1-t2 memtype=%X-%X sym=%s-%s\n",
; 2106 :                    opnd1->mem_type, opnd2->mem_type,
; 2107 :                    opnd1->sym  ? opnd1->sym->name  : "NULL",
; 2108 :                    opnd2->sym  ? opnd2->sym->name  : "NULL" ));
; 2109 : 
; 2110 : #if 1 /* v2.05: error */
; 2111 :         if ( opnd2->mbr == NULL && !ModuleInfo.oldstructs ) {

	cmp	QWORD PTR [rdi+88], rsi
	jne	SHORT $LN9@dot_op
	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
	je	$LN29@dot_op
$LN9@dot_op:

; 2112 :             DebugMsg(("dot_op: error, mbr 2 is NULL\n"));
; 2113 :             return( struct_field_error( opnd1 ) );
; 2114 :         }
; 2115 : #endif
; 2116 :         if ( index_connect( opnd1, opnd2 ) == ERROR )

	mov	rdx, rdi
	mov	rcx, rbx
	call	index_connect
	cmp	eax, -1
	jne	SHORT $LN10@dot_op

; 2117 :             return( ERROR );

	or	eax, eax
	mov	rsi, QWORD PTR [rsp+48]

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN10@dot_op:

; 2118 : 
; 2119 :         if( opnd2->sym != NULL ) {

	mov	rax, QWORD PTR [rdi+80]
	test	rax, rax
	je	SHORT $LN11@dot_op

; 2120 :             if( opnd1->sym != NULL &&
; 2121 :                 opnd1->sym->state != SYM_UNDEFINED &&

	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN12@dot_op
	cmp	DWORD PTR [rcx+32], esi
	je	SHORT $LN12@dot_op
	cmp	DWORD PTR [rax+32], esi
	je	SHORT $LN12@dot_op

; 2122 :                 opnd2->sym->state != SYM_UNDEFINED ) {
; 2123 :                 DebugMsg(("dot_op: error, two relocatable labels: %s - %s \n", opnd1->sym->name, opnd2->sym->name ));
; 2124 :                 return( fnEmitErr( CANNOT_ADD_TWO_RELOCATABLE_LABELS ) );

	mov	ecx, 173				; 000000adH
	mov	rsi, QWORD PTR [rsp+48]

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi

; 2122 :                 opnd2->sym->state != SYM_UNDEFINED ) {
; 2123 :                 DebugMsg(("dot_op: error, two relocatable labels: %s - %s \n", opnd1->sym->name, opnd2->sym->name ));
; 2124 :                 return( fnEmitErr( CANNOT_ADD_TWO_RELOCATABLE_LABELS ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN12@dot_op:

; 2125 :             }
; 2126 :             opnd1->label_tok = opnd2->label_tok;

	mov	rax, QWORD PTR [rdi+40]
	mov	QWORD PTR [rbx+40], rax

; 2127 :             opnd1->sym = opnd2->sym;

	mov	rax, QWORD PTR [rdi+80]
	mov	QWORD PTR [rbx+80], rax
$LN11@dot_op:

; 2128 :         }
; 2129 :         if( opnd2->mbr != NULL ) {

	mov	rax, QWORD PTR [rdi+88]
	test	rax, rax
	je	SHORT $LN13@dot_op

; 2130 :             opnd1->mbr = opnd2->mbr;

	mov	QWORD PTR [rbx+88], rax
$LN13@dot_op:

; 2131 :         }
; 2132 :         opnd1->value += opnd2->value;

	mov	eax, DWORD PTR [rdi]
	add	DWORD PTR [rbx], eax

; 2133 :         if( opnd1->explicit == FALSE ) {

	test	BYTE PTR [rbx+76], 2
	jne	SHORT $LN14@dot_op

; 2134 :             opnd1->mem_type = opnd2->mem_type;

	mov	eax, DWORD PTR [rdi+64]
	mov	DWORD PTR [rbx+64], eax
$LN14@dot_op:

; 2135 :         }
; 2136 :         if ( opnd2->type )

	mov	rax, QWORD PTR [rdi+96]
	test	rax, rax
	je	$LN33@dot_op

; 2137 :             opnd1->type = opnd2->type;

	mov	rsi, QWORD PTR [rsp+48]
	mov	QWORD PTR [rbx+96], rax

; 2256 :     }
; 2257 :     return( NOT_ERROR );

	xor	eax, eax

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN7@dot_op:

; 2138 : 
; 2139 :     } else if( ( opnd1->kind == EXPR_CONST ) && ( opnd2->kind == EXPR_ADDR ) ) {

	test	eax, eax
	jne	$LN16@dot_op
	cmp	DWORD PTR [rdi+60], 1
	jne	$LN16@dot_op

; 2140 : 
; 2141 :         DebugMsg1(("dot_op, CONST - ADDR: t1-t2 memtype=%Xh-%Xh istype=%u-%u\n",
; 2142 :                    opnd1->mem_type, opnd2->mem_type, opnd1->is_type, opnd2->is_type ));
; 2143 :         /* v2.08 added (copied from branch EXPR_ADDR-EXPR_REG )*/
; 2144 :         if ( opnd1->is_type && opnd1->type ) {

	test	BYTE PTR [rbx+76], 8
	je	SHORT $LN18@dot_op
	cmp	QWORD PTR [rbx+96], rsi
	je	SHORT $LN18@dot_op

; 2145 :             opnd2->assumecheck = FALSE;

	and	DWORD PTR [rdi+76], -65			; ffffffbfH

; 2146 :             opnd1->llvalue = 0;  /* v2.08: this was previously done in get_operand() */

	mov	QWORD PTR [rbx], rsi
$LN18@dot_op:

; 2147 :         }
; 2148 : #if 1 /* v2.05: error */
; 2149 :         /* <structname>.<member>[<index_reg>] is ALWAYS ok! */
; 2150 :         if ( ( !ModuleInfo.oldstructs ) && ( opnd1->is_type == FALSE && opnd1->mbr == NULL ) )

	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
	jne	SHORT $LN19@dot_op
	mov	eax, DWORD PTR [rbx+76]
	test	al, 8
	jne	SHORT $LN19@dot_op
	cmp	QWORD PTR [rbx+88], rsi
	jne	SHORT $LN19@dot_op

; 2151 :             return( struct_field_error( opnd1 ) );

	test	al, 16
	je	$LN59@dot_op

; 2252 :         }
; 2253 :     } else {
; 2254 :         DebugMsg(("dot_op: error, unknown kind combination, opnd1->kind=%d, opnd2->kind=%d\n", opnd1->kind, opnd2->kind ));
; 2255 :         return( struct_field_error( opnd1 ) );

	mov	eax, esi
	mov	DWORD PTR [rbx+60], -1
	mov	rsi, QWORD PTR [rsp+48]

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN19@dot_op:

; 2152 : #endif
; 2153 :         /* for TYPE.xxx, return offset instead of size */
; 2154 :         if ( opnd1->mbr && opnd1->mbr->state == SYM_TYPE )

	mov	rax, QWORD PTR [rbx+88]
	test	rax, rax
	je	SHORT $LN20@dot_op
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN20@dot_op

; 2155 :             opnd1->llvalue = opnd1->mbr->offset;

	movsxd	rax, DWORD PTR [rax+16]
	mov	QWORD PTR [rbx], rax
$LN20@dot_op:

; 2156 :         opnd2->indirect |= opnd1->indirect;

	mov	eax, DWORD PTR [rbx+76]
	and	eax, 1
	or	DWORD PTR [rdi+76], eax

; 2157 :         opnd2->llvalue += opnd1->llvalue;

	mov	rax, QWORD PTR [rbx]
	add	QWORD PTR [rdi], rax

; 2158 :         DebugMsg1(("dot_op, CONST - ADDR, t1.type=%X (%s), t2.type=%X (%s)\n",
; 2159 :                    opnd1->type,
; 2160 :                    opnd1->type ? opnd1->type->name : "",
; 2161 :                    opnd2->type,
; 2162 :                    opnd2->type ? opnd2->type->name : "" ));
; 2163 :         /* v2.06: added. test case: INVOKE struct.mbr[edx] ( mbr has a type ) */
; 2164 :         if ( opnd2->mbr )

	cmp	QWORD PTR [rdi+88], rsi
	je	SHORT $LN21@dot_op

; 2165 :             opnd1->type = opnd2->type;

	mov	rax, QWORD PTR [rdi+96]
	mov	QWORD PTR [rbx+96], rax
$LN21@dot_op:

; 2166 :         TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]
	mov	rsi, QWORD PTR [rsp+48]

; 2256 :     }
; 2257 :     return( NOT_ERROR );

	xor	eax, eax
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN16@dot_op:

; 2167 : 
; 2168 :     } else if( ( opnd1->kind == EXPR_ADDR ) && ( opnd2->kind == EXPR_CONST ) ) {

	cmp	eax, 1
	jne	$LN22@dot_op
	cmp	DWORD PTR [rdi+60], esi
	jne	SHORT $LN22@dot_op

; 2169 : 
; 2170 :         DebugMsg1(("dot_op, ADDR - CONST: t1-t2 memtype=%Xh-%Xh t1.explicit=%u\n",
; 2171 :                    opnd1->mem_type, opnd2->mem_type, opnd1->explicit ));
; 2172 : 
; 2173 :         /* v2.08: changed to catch [ebx].<num> or [ebx].<simple type> */
; 2174 :         //if ( (!ModuleInfo.oldstructs) && opnd2->type == NULL && opnd2->mbr == NULL ) {
; 2175 :         if ( (!ModuleInfo.oldstructs) && ( opnd2->type == NULL || opnd2->is_type == FALSE ) && opnd2->mbr == NULL ) {

	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
	jne	SHORT $LN24@dot_op
	cmp	QWORD PTR [rdi+96], rsi
	je	SHORT $LN25@dot_op
	test	BYTE PTR [rdi+76], 8
	jne	SHORT $LN64@dot_op
$LN25@dot_op:
	cmp	QWORD PTR [rdi+88], rsi
	je	$LN29@dot_op
$LN24@dot_op:

; 2176 :             DebugMsg(("dot_op: error, constant or simple type after dot\n"));
; 2177 :             return( struct_field_error( opnd1 ) );
; 2178 :         }
; 2179 : 
; 2180 :         /* v2.08 added (copied from branch EXPR_ADDR-EXPR_REG )*/
; 2181 :         if ( opnd2->is_type && opnd2->type ) {

	test	BYTE PTR [rdi+76], 8
	je	SHORT $LN26@dot_op
$LN64@dot_op:
	cmp	QWORD PTR [rdi+96], rsi
	je	SHORT $LN26@dot_op

; 2182 :             opnd1->assumecheck = FALSE;

	and	DWORD PTR [rbx+76], -65			; ffffffbfH

; 2183 :             opnd2->llvalue = 0;  /* v2.08: this was previously done in get_operand() */

	mov	QWORD PTR [rdi], rsi
$LN26@dot_op:

; 2184 :         }
; 2185 :         /* for [var].TYPE | STRUCT_FIELD, use offset instead of size */
; 2186 :         if ( opnd2->mbr && opnd2->mbr->state == SYM_TYPE )

	mov	rax, QWORD PTR [rdi+88]
	test	rax, rax
	je	SHORT $LN27@dot_op
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN27@dot_op

; 2187 :             opnd2->llvalue = opnd2->mbr->offset;

	movsxd	rax, DWORD PTR [rax+16]
	mov	QWORD PTR [rdi], rax
$LN27@dot_op:

; 2188 :         opnd1->llvalue += opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	add	QWORD PTR [rbx], rax

; 2189 :         opnd1->mem_type = opnd2->mem_type; /* v2.08: now always done */

	mov	eax, DWORD PTR [rdi+64]
	mov	DWORD PTR [rbx+64], eax

; 2190 :         if( opnd2->mbr != NULL ) {

	mov	rax, QWORD PTR [rdi+88]
	test	rax, rax
	je	SHORT $LN28@dot_op

; 2191 :             opnd1->mbr = opnd2->mbr;

	mov	QWORD PTR [rbx+88], rax
$LN28@dot_op:

; 2192 : #if 0 /* v2.07 */
; 2193 :             /* temp. disabled in v1.95, test case:
; 2194 :              * mov eax,(<struct> ptr [ebx]).F1
; 2195 :              * however: mov ax, word ptr var[bx].F1 ???
; 2196 :              * the condition can't be disabled. Instead the PTR
; 2197 :              * operator must NOT set the explicit flag if the
; 2198 :              * first operand is a structure.
; 2199 :              */
; 2200 :             if( opnd1->explicit == FALSE )
; 2201 : #endif
; 2202 :                 //opnd1->mem_type = opnd2->mem_type; /* v2.08: obsolete */
; 2203 :         }
; 2204 : 
; 2205 :         DebugMsg1(("dot_op, ADDR - CONST, t1.type=%X (%s), t2.type=%X (%s)\n",
; 2206 :                    opnd1->type,
; 2207 :                    opnd1->type ? opnd1->type->name : "",
; 2208 :                    opnd2->type,
; 2209 :                    opnd2->type ? opnd2->type->name : "" ));
; 2210 : #if 0 /* v1.96 */
; 2211 :         if ( opnd2->type )
; 2212 : #endif
; 2213 :             opnd1->type = opnd2->type;

	mov	rax, QWORD PTR [rdi+96]
	mov	rsi, QWORD PTR [rsp+48]
	mov	QWORD PTR [rbx+96], rax

; 2256 :     }
; 2257 :     return( NOT_ERROR );

	xor	eax, eax

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN22@dot_op:

; 2214 : 
; 2215 :     } else if ( opnd1->kind == EXPR_CONST && opnd2->kind == EXPR_CONST ) {

	test	eax, eax
	jne	$LN29@dot_op
	cmp	DWORD PTR [rdi+60], esi
	jne	$LN29@dot_op

; 2216 : 
; 2217 :         DebugMsg1(("dot_op, CONST - CONST, t1-t2 value=%u-%u, memtype=%Xh-%Xh istype=%u-%u\n",
; 2218 :                    opnd1->value, opnd2->value, opnd1->mem_type, opnd2->mem_type, opnd1->is_type, opnd2->is_type));
; 2219 :         if ( opnd2->mbr == NULL && !ModuleInfo.oldstructs ) {

	cmp	QWORD PTR [rdi+88], rsi
	jne	SHORT $LN31@dot_op
	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
	je	SHORT $LN29@dot_op
$LN31@dot_op:

; 2220 :             DebugMsg(("dot_op: error, opnd2.mbr=NULL\n" ));
; 2221 :             return( struct_field_error( opnd1 ) );
; 2222 :         }
; 2223 :         if ( opnd1->type != NULL ) {

	mov	rcx, QWORD PTR [rbx+96]

; 2229 :                 opnd1->llvalue += opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	test	rcx, rcx
	je	SHORT $LN32@dot_op

; 2224 :             /*
; 2225 :              * v2.06: the token1 value must NOT be ignored if the token is a
; 2226 :              * struct member: mov ax, [offset] <struct>.<mbr>.<mbr>
; 2227 :              */
; 2228 :             if ( opnd1->mbr != NULL )

	cmp	QWORD PTR [rbx+88], rsi
	je	SHORT $LN34@dot_op

; 2229 :                 opnd1->llvalue += opnd2->llvalue;

	add	QWORD PTR [rbx], rax
	jmp	SHORT $LN35@dot_op
$LN34@dot_op:

; 2230 :             else {
; 2231 :                 /* old token is a type - the value (=size) is ignored then. */
; 2232 :                 opnd1->llvalue = opnd2->llvalue;

	mov	QWORD PTR [rbx], rax
$LN35@dot_op:

; 2233 :             }
; 2234 :             opnd1->mbr = opnd2->mbr;

	mov	rax, QWORD PTR [rdi+88]
	mov	QWORD PTR [rbx+88], rax

; 2235 :             /* v2.0: copy mem_type (test case: mov ds:[<struct>.<mbr>], 123) */
; 2236 :             opnd1->mem_type = opnd2->mem_type;

	mov	eax, DWORD PTR [rdi+64]
	mov	DWORD PTR [rbx+64], eax

; 2237 :             /* v2.05: removed, it's still a type constant */
; 2238 :             //opnd1->is_type = FALSE;
; 2239 :             opnd1->is_type = opnd2->is_type;

	mov	eax, DWORD PTR [rdi+76]
	xor	eax, DWORD PTR [rbx+76]
	and	eax, 8
	xor	DWORD PTR [rbx+76], eax

; 2240 :             /* either clear <type> or use the renewed one */
; 2241 :             if ( opnd1->type != opnd2->type )

	cmp	rcx, QWORD PTR [rdi+96]
	cmovne	rsi, QWORD PTR [rdi+96]

; 2256 :     }
; 2257 :     return( NOT_ERROR );

	xor	eax, eax
	mov	QWORD PTR [rbx+96], rsi
	mov	rsi, QWORD PTR [rsp+48]

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN32@dot_op:

; 2242 :                 opnd1->type = opnd2->type;
; 2243 :             else
; 2244 :                 opnd1->type = NULL;
; 2245 :         } else {
; 2246 :             /* old token is NOT a type */
; 2247 :             /* most likely a number or an MT_ABS symbol! */
; 2248 :             /* so the TOTAL of both constants is required */
; 2249 :             opnd1->llvalue += opnd2->llvalue;

	add	QWORD PTR [rbx], rax

; 2250 :             opnd1->mbr = opnd2->mbr;

	mov	rax, QWORD PTR [rdi+88]
	mov	QWORD PTR [rbx+88], rax

; 2251 :             opnd1->mem_type = opnd2->mem_type;

	mov	eax, DWORD PTR [rdi+64]
	mov	DWORD PTR [rbx+64], eax
$LN33@dot_op:

; 2256 :     }
; 2257 :     return( NOT_ERROR );

	xor	eax, eax
	mov	rsi, QWORD PTR [rsp+48]

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN29@dot_op:

; 2252 :         }
; 2253 :     } else {
; 2254 :         DebugMsg(("dot_op: error, unknown kind combination, opnd1->kind=%d, opnd2->kind=%d\n", opnd1->kind, opnd2->kind ));
; 2255 :         return( struct_field_error( opnd1 ) );

	test	BYTE PTR [rbx+76], 16
	je	SHORT $LN59@dot_op
	mov	eax, esi
	mov	DWORD PTR [rbx+60], -1
	mov	rsi, QWORD PTR [rsp+48]

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0

; 2252 :         }
; 2253 :     } else {
; 2254 :         DebugMsg(("dot_op: error, unknown kind combination, opnd1->kind=%d, opnd2->kind=%d\n", opnd1->kind, opnd2->kind ));
; 2255 :         return( struct_field_error( opnd1 ) );

$LN59@dot_op:
	mov	ecx, 271				; 0000010fH

; 2258 : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	esi, eax
	mov	rsi, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 2252 :         }
; 2253 :     } else {
; 2254 :         DebugMsg(("dot_op: error, unknown kind combination, opnd1->kind=%d, opnd2->kind=%d\n", opnd1->kind, opnd2->kind ));
; 2255 :         return( struct_field_error( opnd1 ) );

	rex_jmp	QWORD PTR fnEmitErr
dot_op	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT struct_field_error
_TEXT	SEGMENT
opnd$ = 8
struct_field_error PROC					; COMDAT

; 2049 :     if ( opnd->is_opattr ) {

	test	BYTE PTR [rcx+76], 16
	je	SHORT $LN2@struct_fie

; 2050 :         opnd->kind = EXPR_ERROR;

	mov	DWORD PTR [rcx+60], -1

; 2051 :         return( NOT_ERROR );

	xor	eax, eax

; 2054 : }

	ret	0
$LN2@struct_fie:

; 2052 :     }
; 2053 :     return( fnEmitErr( STRUCTURE_FIELD_EXPECTED ) );

	mov	ecx, 271				; 0000010fH
	rex_jmp	QWORD PTR fnEmitErr
struct_field_error ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT minus_op
_TEXT	SEGMENT
opnd1$ = 48
opnd2$ = 56
minus_op PROC						; COMDAT

; 1902 : {

	sub	rsp, 40					; 00000028H
	mov	r9, rcx
	mov	r10, rdx

; 1903 :     struct asym      *sym;
; 1904 :     /*
; 1905 :      * The only formats allowed are:
; 1906 :      *        constant - constant
; 1907 :      *         address - constant       ( only in this order )
; 1908 :      *         address - address
; 1909 :      *        register - constant       ( only inside [] and in this
; 1910 :      *                                    order )
; 1911 :      */
; 1912 : 
; 1913 :     DebugMsg1(("minus_op: kind tok1=%u, tok2=%u\n", opnd1->kind, opnd2->kind ));
; 1914 : 
; 1915 :     if( check_direct_reg( opnd1, opnd2 ) == ERROR ) {

	mov	ecx, DWORD PTR [rcx+60]
	cmp	ecx, 2
	jne	SHORT $LN33@minus_op
	test	BYTE PTR [r9+76], 1
	je	SHORT $LN50@minus_op
$LN33@minus_op:
	mov	eax, DWORD PTR [rdx+60]
	cmp	eax, 2
	jne	SHORT $LN2@minus_op
	test	BYTE PTR [rdx+76], 1
	jne	SHORT $LN2@minus_op
$LN50@minus_op:

; 1916 :         DebugMsg(("minus_op: error direct register\n"));
; 1917 :         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	ecx, 170				; 000000aaH

; 2042 : }

	add	rsp, 40					; 00000028H

; 1916 :         DebugMsg(("minus_op: error direct register\n"));
; 1917 :         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN2@minus_op:

; 1918 :     }
; 1919 : 
; 1920 :     /* added for v1.94. It's related to the change done in MakeConst()!
; 1921 :      * todo: find out why flag no_error_msg was checked in v1.94-2.09.
; 1922 :      */
; 1923 :     if ( opnd1->kind == EXPR_ADDR &&
; 1924 :         opnd2->kind == EXPR_ADDR &&
; 1925 :         opnd2->sym &&

	cmp	ecx, 1
	jne	SHORT $LN3@minus_op
	cmp	eax, ecx
	jne	SHORT $LN3@minus_op
	mov	rax, QWORD PTR [rdx+80]
	test	rax, rax
	je	SHORT $LN3@minus_op
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN4@minus_op
$LN3@minus_op:

; 1926 :         opnd2->sym->state == SYM_UNDEFINED /* && !no_error_msg */ )
; 1927 :         ; /* don't convert token2 to a constant! */
; 1928 :     else
; 1929 :         MakeConst( opnd2 );

	mov	rcx, rdx
	call	MakeConst
$LN4@minus_op:

; 1930 : 
; 1931 :     if( check_same( opnd1, opnd2, EXPR_CONST ) ) {

	mov	eax, DWORD PTR [r9+60]
	test	eax, eax
	jne	SHORT $LN5@minus_op
	cmp	DWORD PTR [r10+60], eax
	jne	SHORT $LN5@minus_op

; 1932 : 
; 1933 :         DebugMsg1(("minus_op: CONST-CONST\n" ));
; 1934 :         opnd1->llvalue -= opnd2->llvalue;

	mov	rax, QWORD PTR [r10]
	sub	QWORD PTR [r9], rax

; 2040 :     }
; 2041 :     return( NOT_ERROR );

	xor	eax, eax

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@minus_op:

; 1935 : 
; 1936 :     } else if( opnd1->kind == EXPR_ADDR &&

	cmp	eax, 1
	jne	$LN9@minus_op
	cmp	DWORD PTR [r10+60], 0
	jne	SHORT $LN7@minus_op

; 1937 :               opnd2->kind == EXPR_CONST ) {
; 1938 : 
; 1939 :         DebugMsg1(("minus_op: ADDR-CONST\n" ));
; 1940 :         opnd1->llvalue -= opnd2->llvalue;

	mov	rax, QWORD PTR [r10]
	sub	QWORD PTR [r9], rax

; 1941 :         fix_struct_value( opnd1 );

	mov	rax, QWORD PTR [r9+88]
	test	rax, rax
	je	$LN28@minus_op
	cmp	DWORD PTR [rax+32], 7
	jne	$LN28@minus_op
	mov	eax, DWORD PTR [rax+56]
	xor	ecx, ecx
	add	DWORD PTR [r9], eax

; 2040 :     }
; 2041 :     return( NOT_ERROR );

	xor	eax, eax
	mov	QWORD PTR [r9+88], rcx

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@minus_op:

; 1942 : 
; 1943 :     } else if( check_same( opnd1, opnd2, EXPR_ADDR ) ){

	cmp	eax, 1
	jne	$LN9@minus_op
	cmp	DWORD PTR [r10+60], eax
	jne	$LN9@minus_op

; 1944 : 
; 1945 :         DebugMsg1(("minus_op: ADDR-ADDR\n" ));
; 1946 :         fix_struct_value( opnd1 );

	mov	rax, QWORD PTR [r9+88]
	xor	ecx, ecx
	test	rax, rax
	je	SHORT $LN39@minus_op
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN39@minus_op
	mov	eax, DWORD PTR [rax+56]
	add	DWORD PTR [r9], eax
	mov	QWORD PTR [r9+88], rcx
$LN39@minus_op:

; 1947 :         fix_struct_value( opnd2 );

	mov	rax, QWORD PTR [r10+88]
	test	rax, rax
	je	SHORT $LN42@minus_op
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN42@minus_op
	mov	eax, DWORD PTR [rax+56]
	add	DWORD PTR [r10], eax
	mov	QWORD PTR [r10+88], rcx
$LN42@minus_op:

; 1948 :         //if( opnd2->base_reg != NULL || opnd2->idx_reg != NULL ) { /* v2.09: just check 'indirect' */
; 1949 :         if( opnd2->indirect ) {

	test	BYTE PTR [r10+76], 1
	jne	$LN50@minus_op

; 1950 :             DebugMsg(("minus_op error, opnd2->indirect==TRUE\n"));
; 1951 :             return( fnEmitErr( INVALID_USE_OF_REGISTER ) );
; 1952 :         }
; 1953 :         if( opnd2->label_tok == NULL ) {

	cmp	QWORD PTR [r10+40], rcx
	jne	SHORT $LN12@minus_op

; 1954 :             /* v2.06c: do 64-bit arithmetic (more rigid test in data.c) */
; 1955 :             //opnd1->value -= opnd2->value;
; 1956 :             opnd1->value64 -= opnd2->value64;

	mov	rax, QWORD PTR [r10]
	sub	QWORD PTR [r9], rax

; 1957 :             opnd1->indirect |= opnd2->indirect;

	mov	eax, DWORD PTR [r10+76]

; 2034 :         opnd1->indirect |= opnd2->indirect;

	and	eax, 1
	or	DWORD PTR [r9+76], eax

; 2040 :     }
; 2041 :     return( NOT_ERROR );

	xor	eax, eax

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN12@minus_op:

; 1958 :         } else {
; 1959 :             if( opnd1->label_tok == NULL || opnd1->sym == NULL || opnd2->sym == NULL ) {

	cmp	QWORD PTR [r9+40], rcx
	je	$LN15@minus_op
	mov	rdx, QWORD PTR [r9+80]
	test	rdx, rdx
	je	$LN15@minus_op
	cmp	QWORD PTR [r10+80], rcx
	je	$LN15@minus_op

; 1964 :             }
; 1965 :             /* handle first operand */
; 1966 :             sym = opnd1->sym;
; 1967 :             opnd1->value += sym->offset;

	mov	eax, DWORD PTR [rdx+16]
	add	DWORD PTR [r9], eax

; 1968 : 
; 1969 :             /* handle second operand */
; 1970 :             sym = opnd2->sym;
; 1971 :             if( Parse_Pass > PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, ecx
	mov	r8, QWORD PTR [r10+80]
	jbe	SHORT $LN19@minus_op

; 1972 :                 /* if symbol is external, error - unless it's the same symbol */
; 1973 :                 if ( ( sym->state == SYM_EXTERNAL ||
; 1974 :                      opnd1->sym->state == SYM_EXTERNAL) &&

	cmp	DWORD PTR [r8+32], 2
	je	SHORT $LN18@minus_op
	cmp	DWORD PTR [rdx+32], 2
	jne	SHORT $LN17@minus_op
$LN18@minus_op:
	cmp	r8, rdx
	je	SHORT $LN17@minus_op

; 1975 :                     sym != opnd1->sym ) {
; 1976 :                     DebugMsg(("minus_op error 6\n"));
; 1977 :                     return( fnEmitErr(INVALID_USE_OF_EXTERNAL_SYMBOL, opnd1->sym->name ) );

	mov	rdx, QWORD PTR [rdx+8]
	mov	ecx, 193				; 000000c1H

; 2042 : }

	add	rsp, 40					; 00000028H

; 1975 :                     sym != opnd1->sym ) {
; 1976 :                     DebugMsg(("minus_op error 6\n"));
; 1977 :                     return( fnEmitErr(INVALID_USE_OF_EXTERNAL_SYMBOL, opnd1->sym->name ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN17@minus_op:

; 1978 :                 }
; 1979 :                 /* check if the 2 offsets belong to the same segment */
; 1980 :                 if ( sym->segment != opnd1->sym->segment ) {

	mov	rax, QWORD PTR [rdx+24]
	cmp	QWORD PTR [r8+24], rax
	je	SHORT $LN19@minus_op

; 1981 :                     DebugMsg(("minus_op error, sym.segm=%X opnd1->sym.segm=%X\n", sym->segment, opnd1->sym->segment ));
; 1982 :                     return( fnEmitErr( OPERANDS_MUST_BE_IN_SAME_SEGMENT ) );

	mov	ecx, 192				; 000000c0H

; 2042 : }

	add	rsp, 40					; 00000028H

; 1981 :                     DebugMsg(("minus_op error, sym.segm=%X opnd1->sym.segm=%X\n", sym->segment, opnd1->sym->segment ));
; 1982 :                     return( fnEmitErr( OPERANDS_MUST_BE_IN_SAME_SEGMENT ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN19@minus_op:

; 1983 :                 }
; 1984 :             }
; 1985 : 
; 1986 :             /* the type changes from address to constant.
; 1987 :              * but only if both labels are defined and no indirect addressing.
; 1988 :              */
; 1989 :             opnd1->kind = EXPR_CONST;

	mov	DWORD PTR [r9+60], ecx

; 1990 : 
; 1991 :             /* v2.05: if at least one label is undefined, assume result=1 */
; 1992 :             if ( opnd1->sym->state == SYM_UNDEFINED ||

	cmp	DWORD PTR [rdx+32], ecx
	je	SHORT $LN22@minus_op
	mov	rax, QWORD PTR [r10+80]
	cmp	DWORD PTR [rax+32], ecx
	je	SHORT $LN22@minus_op

; 2007 :             } else {
; 2008 :                 /* v2.06c: do 64-bit arithmetic (more rigid test in data.c) */
; 2009 :                 //opnd1->value -= sym->offset;
; 2010 :                 //opnd1->value -= opnd2->value;
; 2011 :                 opnd1->value64 -= sym->offset;

	movsxd	rax, DWORD PTR [r8+16]
	sub	QWORD PTR [r9], rax
	mov	rax, QWORD PTR [r9]

; 2012 :                 opnd1->value64 -= opnd2->value64;

	sub	rax, QWORD PTR [r10]
	mov	QWORD PTR [r9], rax

; 2013 :                 opnd1->label_tok = NULL;

	mov	QWORD PTR [r9+40], rcx

; 2014 :                 opnd1->sym = NULL;

	mov	QWORD PTR [r9+80], rcx
	jmp	SHORT $LN21@minus_op
$LN22@minus_op:

; 1993 :                 opnd2->sym->state == SYM_UNDEFINED ) {
; 1994 :                 opnd1->value = 1;

	mov	DWORD PTR [r9], 1

; 1995 :                 /* 2.09: make sure an undefined label is returned in opnd.sym.
; 1996 :                  * expression type has to be ADDR then; see equate22.aso.
; 1997 :                  * 2.11: returning EXPR_ADDR may cause problems -
; 1998 :                  * it may make the code longer than necessary, thus
; 1999 :                  * triggering an unnecessary jump extension.
; 2000 :                  * so it is returned only if the expression is used to define an equate.
; 2001 :                  */
; 2002 :                 if ( opnd1->sym->state != SYM_UNDEFINED ) {

	cmp	DWORD PTR [rdx+32], ecx
	je	SHORT $LN23@minus_op

; 2003 :                     opnd1->sym = opnd2->sym;

	mov	rax, QWORD PTR [r10+80]
	mov	QWORD PTR [r9+80], rax

; 2004 :                     opnd1->label_tok = opnd2->label_tok;

	mov	rax, QWORD PTR [r10+40]
	mov	QWORD PTR [r9+40], rax
$LN23@minus_op:

; 2005 :                 }
; 2006 :                 opnd1->kind = EXPR_ADDR;

	mov	DWORD PTR [r9+60], 1
$LN21@minus_op:

; 2015 :             }
; 2016 :             //if( opnd1->base_reg == NULL && opnd1->idx_reg == NULL ) { /* v2.09: just check 'indirect' */
; 2017 :             if( opnd1->indirect == FALSE ) {

	mov	eax, DWORD PTR [r9+76]
	test	al, 1
	jne	SHORT $LN24@minus_op

; 2018 :                 if( opnd1->instr == T_OFFSET && opnd2->instr == T_OFFSET )

	cmp	DWORD PTR [r9+56], 241			; 000000f1H
	jne	SHORT $LN25@minus_op
	cmp	DWORD PTR [r10+56], 241			; 000000f1H
	jne	SHORT $LN25@minus_op

; 2024 :                 //opnd1->indirect |= opnd2->indirect;  /* v2.09: op1->indirect is always 1, op2->indirect is always 0 */
; 2025 :             }
; 2026 :             opnd1->explicit = FALSE;

	and	eax, -3					; fffffffdH
	mov	DWORD PTR [r9+56], -2
	mov	DWORD PTR [r9+76], eax

; 2040 :     }
; 2041 :     return( NOT_ERROR );

	xor	eax, eax
	mov	DWORD PTR [r9+64], 192			; 000000c0H

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN24@minus_op:

; 2019 :                     opnd1->instr = EMPTY;
; 2020 :                 //opnd1->indirect = FALSE; /* v2.09: not needed */
; 2021 :             } else {
; 2022 :                 DebugMsg1(("minus_op, exit, ADDR, base=%X, idx=%X\n", opnd1->base_reg, opnd1->idx_reg ));
; 2023 :                 opnd1->kind = EXPR_ADDR;

	mov	DWORD PTR [r9+60], 1
$LN25@minus_op:

; 2024 :                 //opnd1->indirect |= opnd2->indirect;  /* v2.09: op1->indirect is always 1, op2->indirect is always 0 */
; 2025 :             }
; 2026 :             opnd1->explicit = FALSE;

	and	eax, -3					; fffffffdH

; 2027 :             opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [r9+64], 192			; 000000c0H
	mov	DWORD PTR [r9+76], eax

; 2040 :     }
; 2041 :     return( NOT_ERROR );

	xor	eax, eax

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN15@minus_op:

; 1960 :                 DebugMsg(("minus_op error, label_tok=%X opnd1.sym=%X opnd2.sym=%X\n", opnd1->label_tok, opnd1->sym, opnd2->sym ));
; 1961 :                 /* v2.05: error msg changed */
; 1962 :                 //fnEmitErr( SYNTAX_ERROR );
; 1963 :                 return( fnEmitErr( OPERAND_MUST_BE_RELOCATABLE ) );

	mov	ecx, 188				; 000000bcH

; 2042 : }

	add	rsp, 40					; 00000028H

; 1960 :                 DebugMsg(("minus_op error, label_tok=%X opnd1.sym=%X opnd2.sym=%X\n", opnd1->label_tok, opnd1->sym, opnd2->sym ));
; 1961 :                 /* v2.05: error msg changed */
; 1962 :                 //fnEmitErr( SYNTAX_ERROR );
; 1963 :                 return( fnEmitErr( OPERAND_MUST_BE_RELOCATABLE ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN9@minus_op:

; 2028 :         }
; 2029 : 
; 2030 :     } else if( opnd1->kind == EXPR_REG &&

	cmp	eax, 2
	jne	SHORT $LN27@minus_op
	cmp	DWORD PTR [r10+60], 0
	jne	SHORT $LN27@minus_op

; 2031 :               opnd2->kind == EXPR_CONST ) {
; 2032 : 
; 2033 :         opnd1->llvalue = -1 * opnd2->llvalue;

	mov	rax, QWORD PTR [r10]
	neg	rax
	mov	QWORD PTR [r9], rax

; 2034 :         opnd1->indirect |= opnd2->indirect;

	mov	eax, DWORD PTR [r10+76]
	and	eax, 1

; 2035 :         opnd1->kind = EXPR_ADDR;

	mov	DWORD PTR [r9+60], 1
	or	DWORD PTR [r9+76], eax
$LN28@minus_op:

; 2040 :     }
; 2041 :     return( NOT_ERROR );

	xor	eax, eax

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN27@minus_op:

; 2036 : 
; 2037 :     } else {
; 2038 :         DebugMsg(("minus_op, exit, error: kinds tok1=%u, tok2=%u\n", opnd1->kind, opnd2->kind ));
; 2039 :         return( ConstError( opnd1, opnd2 ) );

	test	BYTE PTR [r9+76], 16
	je	SHORT $LN45@minus_op
	xor	ecx, ecx
	mov	eax, ecx

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0

; 2036 : 
; 2037 :     } else {
; 2038 :         DebugMsg(("minus_op, exit, error: kinds tok1=%u, tok2=%u\n", opnd1->kind, opnd2->kind ));
; 2039 :         return( ConstError( opnd1, opnd2 ) );

$LN45@minus_op:
	cmp	eax, 3
	je	SHORT $LN48@minus_op
	cmp	DWORD PTR [r10+60], 3
	mov	ecx, 65					; 00000041H
	jne	SHORT $LN53@minus_op
$LN48@minus_op:
	mov	ecx, 270				; 0000010eH
$LN53@minus_op:
	call	QWORD PTR fnEmitErr
	or	ecx, -1
	mov	eax, ecx

; 2042 : }

	add	rsp, 40					; 00000028H
	ret	0
minus_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT plus_op
_TEXT	SEGMENT
opnd1$ = 48
opnd2$ = 56
plus_op	PROC						; COMDAT

; 1775 : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1776 :     DebugMsg1(("plus_op: kind=%d/%d memtype=%Xh-%Xh value=%d-%d sym=%s-%s mbr=%s-%s type=%s-%s\n",
; 1777 :                opnd1->kind, opnd2->kind,
; 1778 :                opnd1->mem_type, opnd2->mem_type, 
; 1779 :                opnd1->value, opnd2->value,
; 1780 :                opnd1->sym ? opnd1->sym->name : "NULL",
; 1781 :                opnd2->sym ? opnd2->sym->name : "NULL",
; 1782 :                opnd1->mbr ? opnd1->mbr->name : "NULL",
; 1783 :                opnd2->mbr ? opnd2->mbr->name : "NULL",
; 1784 :                opnd1->type ? opnd1->type->name : "NULL",
; 1785 :                opnd2->type ? opnd2->type->name : "NULL" ));
; 1786 :     /*
; 1787 :      * The formats allowed are (registers inside [] only!):
; 1788 :      *        constant + constant  CONST-CONST
; 1789 :      *        constant + address   CONST-ADDR
; 1790 :      *        register + constant  ADDR-CONST
; 1791 :      *        address + register   ADDR-ADDR
; 1792 :      *        register + register  ADDR-ADDR
; 1793 :      *        address  + address   ADDR-ADDR
; 1794 :      */
; 1795 : 
; 1796 :     if( check_direct_reg( opnd1, opnd2 ) == ERROR ) {

	mov	eax, DWORD PTR [rcx+60]
	mov	rdi, rdx
	mov	rbx, rcx
	cmp	eax, 2
	jne	SHORT $LN34@plus_op
	test	BYTE PTR [rcx+76], 1
	je	SHORT $LN57@plus_op
$LN34@plus_op:
	cmp	DWORD PTR [rdx+60], 2
	jne	SHORT $LN2@plus_op
	test	BYTE PTR [rdx+76], 1
	jne	SHORT $LN2@plus_op
$LN57@plus_op:

; 1797 :         DebugMsg(("plus_op: error direct register\n" ));
; 1798 :         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	ecx, 170				; 000000aaH

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1797 :         DebugMsg(("plus_op: error direct register\n" ));
; 1798 :         return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN2@plus_op:

; 1799 :     }
; 1800 :     /* v2.08: remove EXPR_REG variants */
; 1801 :     if ( opnd1->kind == EXPR_REG )

	cmp	eax, 2
	jne	SHORT $LN3@plus_op

; 1802 :         opnd1->kind = EXPR_ADDR;

	mov	DWORD PTR [rcx+60], 1
$LN3@plus_op:

; 1803 :     if ( opnd2->kind == EXPR_REG )

	cmp	DWORD PTR [rdx+60], 2
	jne	SHORT $LN4@plus_op

; 1804 :         opnd2->kind = EXPR_ADDR;

	mov	DWORD PTR [rdx+60], 1
$LN4@plus_op:

; 1805 : 
; 1806 :     /* v2.07: don't allow multiple overrides */
; 1807 :     if ( opnd2->override ) {

	mov	rcx, QWORD PTR [rdx+48]
	test	rcx, rcx
	je	SHORT $LN5@plus_op

; 1808 :         if ( opnd1->override ) {

	mov	rdx, QWORD PTR [rbx+48]
	test	rdx, rdx
	je	SHORT $LN7@plus_op

; 1809 :             /* v2.07a: both T_REG or both T_ID is rejected */
; 1810 :             if ( opnd1->override->token == opnd2->override->token ) {

	movzx	eax, BYTE PTR [rcx]
	cmp	BYTE PTR [rdx], al
	jne	SHORT $LN7@plus_op

; 1811 :                 DebugMsg(("plus_op: multiple overrides\n" ));
; 1812 :                 return( fnEmitErr( MULTIPLE_OVERRIDES ) );

	mov	ecx, 68					; 00000044H

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1811 :                 DebugMsg(("plus_op: multiple overrides\n" ));
; 1812 :                 return( fnEmitErr( MULTIPLE_OVERRIDES ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN7@plus_op:

; 1813 :             }
; 1814 :         }
; 1815 :         opnd1->override = opnd2->override;

	mov	QWORD PTR [rbx+48], rcx
$LN5@plus_op:

; 1816 :     }
; 1817 : 
; 1818 :     if( check_same( opnd1, opnd2, EXPR_CONST ) ) {

	mov	eax, DWORD PTR [rbx+60]
	test	eax, eax
	jne	SHORT $LN8@plus_op
	cmp	DWORD PTR [rdi+60], eax
	jne	SHORT $LN8@plus_op

; 1819 : 
; 1820 :         DebugMsg1(("plus_op: CONST - CONST\n" ));
; 1821 :         opnd1->llvalue += opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	add	QWORD PTR [rbx], rax

; 1896 :     }
; 1897 :     return( NOT_ERROR );

	xor	eax, eax

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@plus_op:

; 1822 : 
; 1823 :     } else if( check_same( opnd1, opnd2, EXPR_ADDR ) ) {

	cmp	eax, 1
	jne	$LN10@plus_op
	cmp	DWORD PTR [rdi+60], eax
	jne	$LN10@plus_op

; 1824 : 
; 1825 :         DebugMsg1(("plus_op: ADDR - ADDR\n" ));
; 1826 :         fix_struct_value( opnd1 );

	mov	rax, QWORD PTR [rbx+88]
	xor	ecx, ecx
	test	rax, rax
	je	SHORT $LN37@plus_op
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN37@plus_op
	mov	eax, DWORD PTR [rax+56]
	add	DWORD PTR [rbx], eax
	mov	QWORD PTR [rbx+88], rcx
$LN37@plus_op:

; 1827 :         fix_struct_value( opnd2 );

	mov	rax, QWORD PTR [rdi+88]
	test	rax, rax
	je	SHORT $LN40@plus_op
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN40@plus_op
	mov	eax, DWORD PTR [rax+56]
	add	DWORD PTR [rdi], eax
	mov	QWORD PTR [rdi+88], rcx
$LN40@plus_op:

; 1828 :         if ( index_connect( opnd1, opnd2 ) == ERROR )

	mov	rdx, rdi
	mov	rcx, rbx
	call	index_connect
	cmp	eax, -1
	jne	SHORT $LN12@plus_op

; 1829 :             return( ERROR );

	or	eax, eax

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN12@plus_op:

; 1830 :         if( opnd2->sym != NULL ) {

	mov	rax, QWORD PTR [rdi+80]
	test	rax, rax
	je	SHORT $LN16@plus_op

; 1831 :             /* two relocatable labels not allowed */
; 1832 :             /* v2.05: changed */
; 1833 :             //if ( ( opnd1->sym != NULL ) && ( Parse_Pass > PASS_1 || error_msg == FALSE ) ) {
; 1834 :             if ( opnd1->sym != NULL &&
; 1835 :                 opnd1->sym->state != SYM_UNDEFINED &&

	mov	rcx, QWORD PTR [rbx+80]
	test	rcx, rcx
	je	SHORT $LN14@plus_op
	cmp	DWORD PTR [rcx+32], 0
	je	SHORT $LN14@plus_op
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN14@plus_op

; 1836 :                 opnd2->sym->state != SYM_UNDEFINED ) {
; 1837 :                 DebugMsg(("plus_op: two relocatable labels: %s - %s \n", opnd1->sym->name, opnd2->sym->name ));
; 1838 :                 return( fnEmitErr( CANNOT_ADD_TWO_RELOCATABLE_LABELS ) );

	mov	ecx, 173				; 000000adH

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1836 :                 opnd2->sym->state != SYM_UNDEFINED ) {
; 1837 :                 DebugMsg(("plus_op: two relocatable labels: %s - %s \n", opnd1->sym->name, opnd2->sym->name ));
; 1838 :                 return( fnEmitErr( CANNOT_ADD_TWO_RELOCATABLE_LABELS ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN14@plus_op:

; 1839 :             }
; 1840 :             opnd1->label_tok = opnd2->label_tok;
; 1841 :             opnd1->sym = opnd2->sym;
; 1842 :             /* v2.05: added */
; 1843 :             if ( opnd1->mem_type == MT_EMPTY )

	cmp	DWORD PTR [rbx+64], 192			; 000000c0H
	mov	rax, QWORD PTR [rdi+40]
	mov	QWORD PTR [rbx+40], rax
	mov	rax, QWORD PTR [rdi+80]
	mov	QWORD PTR [rbx+80], rax
	jne	SHORT $LN15@plus_op

; 1844 :                 opnd1->mem_type = opnd2->mem_type;

	mov	eax, DWORD PTR [rdi+64]
	mov	DWORD PTR [rbx+64], eax
$LN15@plus_op:

; 1845 :             /* v2.10: copy qualifier ( [<reg>+imagerel xxx] */
; 1846 :             if ( opnd2->instr != EMPTY )

	mov	eax, DWORD PTR [rdi+56]
	cmp	eax, -2
	je	SHORT $LN16@plus_op

; 1847 :                 opnd1->instr = opnd2->instr;

	mov	DWORD PTR [rbx+56], eax
$LN16@plus_op:

; 1848 :         }
; 1849 :         opnd1->llvalue += opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	add	QWORD PTR [rbx], rax

; 1850 :         /* v2.08: added, test case [ecx+ebx.<struc>].<mbr> */
; 1851 :         if ( opnd2->type )

	mov	rax, QWORD PTR [rdi+96]
	test	rax, rax
	je	$LN49@plus_op

; 1852 :             opnd1->type = opnd2->type;

	mov	QWORD PTR [rbx+96], rax

; 1896 :     }
; 1897 :     return( NOT_ERROR );

	xor	eax, eax

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN10@plus_op:

; 1853 : 
; 1854 :     } else if( check_both( opnd1, opnd2, EXPR_CONST, EXPR_ADDR ) ) {

	test	eax, eax
	jne	SHORT $LN43@plus_op
	cmp	DWORD PTR [rdi+60], 1
	je	SHORT $LN58@plus_op
$LN43@plus_op:
	cmp	eax, 1
	jne	$LN18@plus_op
	cmp	DWORD PTR [rdi+60], 0
	jne	$LN18@plus_op
$LN58@plus_op:

; 1855 : 
; 1856 :         if( opnd1->kind == EXPR_CONST ) {

	test	eax, eax
	jne	SHORT $LN20@plus_op

; 1857 :             DebugMsg1(("plus_op: CONST - ADDR\n" ));
; 1858 :             opnd2->llvalue += opnd1->llvalue;

	mov	rax, QWORD PTR [rbx]
	add	QWORD PTR [rdi], rax

; 1859 :             opnd2->indirect |= opnd1->indirect;

	mov	eax, DWORD PTR [rbx+76]
	and	eax, 1
	or	eax, DWORD PTR [rdi+76]
	mov	DWORD PTR [rdi+76], eax

; 1860 : 
; 1861 :             if( opnd1->explicit == TRUE ) {

	test	BYTE PTR [rbx+76], 2
	je	SHORT $LN22@plus_op

; 1862 :                 opnd2->explicit = TRUE;

	or	eax, 2
	mov	DWORD PTR [rdi+76], eax

; 1863 :                 opnd2->mem_type = opnd1->mem_type;

	jmp	SHORT $LN59@plus_op
$LN22@plus_op:

; 1864 :             } else if ( opnd2->mem_type == MT_EMPTY )

	cmp	DWORD PTR [rdi+64], 192			; 000000c0H
	jne	SHORT $LN24@plus_op
$LN59@plus_op:

; 1865 :                 opnd2->mem_type = opnd1->mem_type;

	mov	eax, DWORD PTR [rbx+64]
	mov	DWORD PTR [rdi+64], eax
$LN24@plus_op:

; 1866 : 
; 1867 :             /* v2.05: added. See dotop2.asm, "mov eax, v2.f1[ebx*2]" */
; 1868 :             if ( opnd2->mbr == NULL )

	cmp	QWORD PTR [rdi+88], 0
	jne	SHORT $LN25@plus_op

; 1869 :                 opnd2->mbr = opnd1->mbr;

	mov	rax, QWORD PTR [rbx+88]
	mov	QWORD PTR [rdi+88], rax
$LN25@plus_op:

; 1870 : 
; 1871 :             /* v2.08: added, test case [4+ebx.<struc>].<mbr> */
; 1872 :             if ( opnd2->type )

	mov	rax, QWORD PTR [rdi+96]
	test	rax, rax
	je	SHORT $LN26@plus_op

; 1873 :                 opnd1->type = opnd2->type; /* set <type> in op1! */

	mov	QWORD PTR [rbx+96], rax
$LN26@plus_op:

; 1874 : 
; 1875 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1

; 1876 : 
; 1877 :         } else {

	jmp	SHORT $LN29@plus_op
$LN20@plus_op:

; 1878 :             DebugMsg1(("plus_op: ADDR - CONST\n" ));
; 1879 :             opnd1->llvalue += opnd2->llvalue;

	mov	rax, QWORD PTR [rdi]
	add	QWORD PTR [rbx], rax

; 1880 :             /* v2.04: added. to make this case behave like
; 1881 :              * the CONST - REG case (see below).
; 1882 :              */
; 1883 :             /* v2.08: changed, test case [reg+struct] */
; 1884 :             //if ( opnd1->mem_type == MT_EMPTY )
; 1885 :             if ( opnd2->mbr ) { /* v2.10: added; regression test dotop5.asm */

	mov	rax, QWORD PTR [rdi+88]
	test	rax, rax
	je	SHORT $LN27@plus_op

; 1886 :                 opnd1->mbr = opnd2->mbr;

	mov	QWORD PTR [rbx+88], rax

; 1887 :                 opnd1->mem_type = opnd2->mem_type;
; 1888 :             } else

	jmp	SHORT $LN60@plus_op
$LN27@plus_op:

; 1889 :             if ( opnd1->mem_type == MT_EMPTY && opnd2->is_type == FALSE )

	cmp	DWORD PTR [rbx+64], 192			; 000000c0H
	jne	SHORT $LN29@plus_op
	test	BYTE PTR [rdi+76], 8
	jne	SHORT $LN29@plus_op
$LN60@plus_op:

; 1890 :                 opnd1->mem_type = opnd2->mem_type;

	mov	eax, DWORD PTR [rdi+64]
	mov	DWORD PTR [rbx+64], eax
$LN29@plus_op:

; 1891 :         }
; 1892 :         fix_struct_value( opnd1 );

	mov	rax, QWORD PTR [rbx+88]
	test	rax, rax
	je	SHORT $LN49@plus_op
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN49@plus_op
	mov	eax, DWORD PTR [rax+56]
	add	DWORD PTR [rbx], eax
	xor	ecx, ecx
	mov	QWORD PTR [rbx+88], rcx
$LN49@plus_op:

; 1896 :     }
; 1897 :     return( NOT_ERROR );

	xor	eax, eax

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN18@plus_op:

; 1893 :     } else {
; 1894 :         DebugMsg(("plus_op: error, unexpected format: %u - %u\n", opnd1->kind, opnd2->kind ));
; 1895 :         return( ConstError( opnd1, opnd2 ) );

	test	BYTE PTR [rbx+76], 16
	je	SHORT $LN52@plus_op
	xor	ecx, ecx
	mov	eax, ecx

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0

; 1893 :     } else {
; 1894 :         DebugMsg(("plus_op: error, unexpected format: %u - %u\n", opnd1->kind, opnd2->kind ));
; 1895 :         return( ConstError( opnd1, opnd2 ) );

$LN52@plus_op:
	cmp	eax, 3
	je	SHORT $LN55@plus_op
	cmp	DWORD PTR [rdi+60], 3
	mov	ecx, 65					; 00000041H
	jne	SHORT $LN61@plus_op
$LN55@plus_op:
	mov	ecx, 270				; 0000010eH
$LN61@plus_op:
	call	QWORD PTR fnEmitErr

; 1898 : }

	mov	rbx, QWORD PTR [rsp+48]
	or	ecx, -1
	mov	eax, ecx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
plus_op	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 48
opnd1$ = 56
opnd2$ = 64
sym$ = 72
name$ = 80
wimask_op PROC

; 1719 : {

	sub	rsp, 40					; 00000028H

; 1720 :     /* additional check needed if operand is a type */
; 1721 :     if ( opnd2->is_type ) {

	mov	eax, DWORD PTR [r8+76]
	mov	r11, rdx
	shr	eax, 3
	and	eax, 1
	je	SHORT $LN8@wimask_op

; 1722 :         sym = opnd2->type;

	mov	rdx, QWORD PTR [r8+96]

; 1723 :         if (sym->typekind != TYPE_RECORD ) {

	cmp	BYTE PTR [rdx+66], 4
	je	SHORT $LN12@wimask_op

; 1724 :             return( fnEmitErr( OPERAND_MUST_BE_RECORD ) );

	mov	ecx, 161				; 000000a1H

; 1763 : }

	add	rsp, 40					; 00000028H

; 1724 :             return( fnEmitErr( OPERAND_MUST_BE_RECORD ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN8@wimask_op:

; 1725 :         }
; 1726 :     } else if ( opnd2->kind == EXPR_CONST ) {

	cmp	DWORD PTR [r8+60], 0
	jne	SHORT $LN11@wimask_op

; 1727 :         sym = opnd2->mbr;

	mov	rdx, QWORD PTR [r8+88]

; 1728 :     } else {

	jmp	SHORT $LN12@wimask_op
$LN11@wimask_op:

; 1729 :         sym = opnd2->sym;

	mov	rdx, QWORD PTR [r8+80]
$LN12@wimask_op:

; 1730 :     }
; 1731 :     if ( oper == T_MASK ) {

	cmp	ecx, 240				; 000000f0H
	jne	SHORT $LN13@wimask_op

; 1732 :         int i;
; 1733 :         opnd1->value = 0;

	mov	DWORD PTR [r11], 0

; 1734 :         if ( opnd2->is_type ) { /* get mask of the RECORD? */

	test	BYTE PTR [r8+76], 8
	je	SHORT $LN15@wimask_op

; 1735 : #if AMD64_SUPPORT
; 1736 :             opnd1->llvalue = GetRecordMask( (struct dsym *)sym );

	mov	rcx, rdx
	call	GetRecordMask
	mov	QWORD PTR [r11], rax

; 1762 :     return( NOT_ERROR );

	xor	eax, eax
	mov	DWORD PTR [r11+60], 0

; 1763 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN15@wimask_op:

; 1737 : #else
; 1738 :             opnd1->value = GetRecordMask( (struct dsym *)sym );
; 1739 : #endif
; 1740 :         } else { /* get mask of the bitfield */
; 1741 :             for ( i = sym->offset ;i < sym->offset + sym->total_size; i++ )

	mov	r8d, DWORD PTR [rdx+16]
	mov	ecx, DWORD PTR [rdx+56]
	add	ecx, r8d
	cmp	r8d, ecx
	jae	SHORT $LN18@wimask_op
	npad	3
$LL4@wimask_op:

; 1742 : #if AMD64_SUPPORT
; 1743 : #if defined(LLONG_MAX) || defined(__GNUC__) || defined(__TINYC__)
; 1744 :                 opnd1->llvalue |= 1ULL << i;

	mov	rcx, QWORD PTR [r11]
	movsxd	rax, r8d
	inc	r8d
	bts	rcx, rax
	mov	QWORD PTR [r11], rcx
	mov	eax, DWORD PTR [rdx+16]
	add	eax, DWORD PTR [rdx+56]
	cmp	r8d, eax
	jb	SHORT $LL4@wimask_op

; 1760 :     }
; 1761 :     opnd1->kind = EXPR_CONST;

	mov	DWORD PTR [r11+60], 0

; 1762 :     return( NOT_ERROR );

	xor	eax, eax

; 1763 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN13@wimask_op:

; 1745 : #else
; 1746 :                 opnd1->llvalue |= 1i64 << i;
; 1747 : #endif
; 1748 : #else
; 1749 :                 opnd1->value |= 1 << i;
; 1750 : #endif
; 1751 :         }
; 1752 :     } else {
; 1753 :         if ( opnd2->is_type ) { /* get width of the RECORD? */

	test	eax, eax
	je	SHORT $LN17@wimask_op

; 1754 :             struct dsym *dir = (struct dsym *)sym;
; 1755 :             struct sfield *fl;
; 1756 :             for ( fl = dir->e.structinfo->head; fl; fl = fl->next )

	mov	rax, QWORD PTR [rdx+96]
	mov	rcx, QWORD PTR [rax]
	test	rcx, rcx
	je	SHORT $LN18@wimask_op
	npad	6
$LL7@wimask_op:

; 1757 :                 opnd1->value += fl->sym.total_size;

	mov	eax, DWORD PTR [rcx+56]
	add	DWORD PTR [r11], eax
	mov	rcx, QWORD PTR [rcx+96]
	test	rcx, rcx
	jne	SHORT $LL7@wimask_op

; 1760 :     }
; 1761 :     opnd1->kind = EXPR_CONST;

	mov	DWORD PTR [r11+60], ecx

; 1762 :     return( NOT_ERROR );

	xor	eax, eax

; 1763 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN17@wimask_op:

; 1758 :         } else
; 1759 :             opnd1->value = sym->total_size;

	mov	eax, DWORD PTR [rdx+56]
	mov	DWORD PTR [r11], eax
$LN18@wimask_op:

; 1760 :     }
; 1761 :     opnd1->kind = EXPR_CONST;

	mov	DWORD PTR [r11+60], 0

; 1762 :     return( NOT_ERROR );

	xor	eax, eax

; 1763 : }

	add	rsp, 40					; 00000028H
	ret	0
wimask_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 48
opnd1$ = 56
opnd2$ = 64
sym$ = 72
name$ = 80
this_op	PROC

; 1676 : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1677 :     if ( opnd2->is_type == FALSE ) {

	test	BYTE PTR [r8+76], 8
	mov	rbx, r8
	mov	rdi, rdx
	jne	SHORT $LN2@this_op

; 1678 :         return( fnEmitErr( INVALID_TYPE_EXPRESSION ) );

	mov	ecx, 179				; 000000b3H

; 1712 :     return( NOT_ERROR );
; 1713 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1678 :         return( fnEmitErr( INVALID_TYPE_EXPRESSION ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN2@this_op:

; 1679 :     }
; 1680 :     /* v2.06: won't work inside structs */
; 1681 :     if ( CurrStruct ) {

	cmp	QWORD PTR CurrStruct, 0
	je	SHORT $LN3@this_op

; 1682 :         return( fnEmitErr( MUST_BE_IN_SEGMENT_BLOCK ) );

	mov	ecx, 82					; 00000052H

; 1712 :     return( NOT_ERROR );
; 1713 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1682 :         return( fnEmitErr( MUST_BE_IN_SEGMENT_BLOCK ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN3@this_op:

; 1683 :     }
; 1684 :     /* v2.06: won't work outside segments */
; 1685 :     if ( CurrSeg == NULL ) {

	cmp	QWORD PTR ModuleInfo+432, 0
	jne	SHORT $LN4@this_op

; 1686 :         return( EmitErr( MUST_BE_IN_SEGMENT_BLOCK ) ); /* error displayed even in EQU, hence EmitErr()! */

	mov	ecx, 82					; 00000052H

; 1712 :     return( NOT_ERROR );
; 1713 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1686 :         return( EmitErr( MUST_BE_IN_SEGMENT_BLOCK ) ); /* error displayed even in EQU, hence EmitErr()! */

	jmp	EmitErr
$LN4@this_op:

; 1687 :     }
; 1688 : 
; 1689 :     if ( thissym == NULL ) {

	mov	rdx, QWORD PTR thissym
	test	rdx, rdx
	jne	SHORT $LN5@this_op

; 1690 :         thissym = SymAlloc( "" );

	lea	rcx, OFFSET FLAT:$SG11618
	call	SymAlloc
	mov	rdx, rax
	mov	QWORD PTR thissym, rax

; 1691 :         /* fixme: set thissym->variable? */
; 1692 :         thissym->state = SYM_INTERNAL;
; 1693 :         thissym->isdefined = TRUE;

	or	BYTE PTR [rax+40], 2
	mov	DWORD PTR [rax+32], 1
$LN5@this_op:

; 1694 :     }
; 1695 : 
; 1696 :     DebugMsg1(("this_op: memtype=%Xh type=%s\n", opnd2->mem_type, opnd2->type ? opnd2->type->name : "NULL" ));
; 1697 :     opnd1->kind = EXPR_ADDR;

	mov	DWORD PTR [rdi+60], 1

; 1698 : 
; 1699 :     /* v2.09: a label is not a valid argument */
; 1700 :     //if ( opnd2->sym && opnd2->sym->mem_type == MT_TYPE )
; 1701 :     //    thissym->type = opnd2->sym->type;
; 1702 :     /* v2.09: set structured type */
; 1703 :     thissym->type = opnd2->type;

	mov	rcx, QWORD PTR [rbx+96]
	mov	QWORD PTR [rdx+80], rcx

; 1704 :     if ( opnd2->type ) {

	cmp	QWORD PTR [rbx+96], 0
	je	SHORT $LN6@this_op

; 1705 :         thissym->mem_type = MT_TYPE;

	mov	DWORD PTR [rdx+36], 196			; 000000c4H

; 1706 :     } else

	jmp	SHORT $LN7@this_op
$LN6@this_op:

; 1707 :         thissym->mem_type = opnd2->mem_type;

	mov	eax, DWORD PTR [rbx+64]
	mov	DWORD PTR [rdx+36], eax
$LN7@this_op:

; 1708 : 
; 1709 :     opnd1->sym  = thissym;
; 1710 :     SetSymSegOfs( thissym );

	mov	rcx, rdx
	mov	QWORD PTR [rdi+80], rdx
	call	SetSymSegOfs

; 1711 :     opnd1->mem_type = thissym->mem_type;

	mov	rax, QWORD PTR thissym

; 1712 :     return( NOT_ERROR );
; 1713 : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	ecx, DWORD PTR [rax+36]
	xor	eax, eax
	mov	DWORD PTR [rdi+64], ecx
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
this_op	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 64
opnd1$ = 72
opnd2$ = 80
sym$ = 88
name$ = 96
high32_op PROC

; 1653 : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H

; 1654 :     /* v2.06: added support for double constants */
; 1655 :     if ( opnd2->kind == EXPR_FLOAT ) {

	cmp	DWORD PTR [r8+60], 3
	mov	rdi, r8
	mov	rbx, rdx
	jne	SHORT $LN2@high32_op

; 1656 :         if ( Options.strict_masm_compat )

	cmp	BYTE PTR Options+127, 0
	je	SHORT $LN3@high32_op

; 1657 :             return( ConstError( opnd1, opnd2 ) );

	test	BYTE PTR [rdx+76], 16
	je	SHORT $LN7@high32_op
	xor	eax, eax

; 1669 :     return( NOT_ERROR );
; 1670 : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0

; 1657 :             return( ConstError( opnd1, opnd2 ) );

$LN7@high32_op:
	mov	ecx, 270				; 0000010eH
	call	QWORD PTR fnEmitErr
	or	eax, -1

; 1669 :     return( NOT_ERROR );
; 1670 : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN3@high32_op:

; 1658 :         atofloat( &opnd2->llvalue, opnd2->float_tok->string_ptr, sizeof( opnd2->llvalue), opnd2->negative, opnd2->float_tok->floattype );

	mov	rdx, QWORD PTR [r8+16]
	mov	rcx, rdi
	mov	r9d, DWORD PTR [r8+76]
	mov	r8d, 8
	shr	r9d, 5
	and	r9b, 1
	movzx	eax, BYTE PTR [rdx+1]
	mov	rdx, QWORD PTR [rdx+8]
	mov	BYTE PTR [rsp+32], al
	call	atofloat

; 1659 :         opnd2->kind = EXPR_CONST;

	xor	eax, eax
	mov	DWORD PTR [rdi+60], eax

; 1660 :         opnd2->float_tok = NULL;

	mov	QWORD PTR [rdi+16], rax
$LN2@high32_op:

; 1661 :     }
; 1662 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1

; 1663 :     if ( opnd2->kind == EXPR_ADDR && opnd2->instr != T_SEG ) {

	cmp	DWORD PTR [rdi+60], 1
	jne	SHORT $LN4@high32_op
	cmp	DWORD PTR [rdi+56], 244			; 000000f4H
	je	SHORT $LN4@high32_op

; 1664 :         opnd1->instr = T_HIGH32;

	mov	DWORD PTR [rbx+56], 231			; 000000e7H

; 1665 :         //opnd1->mem_type = MT_DWORD; /* v2.10: changed - also see change in parser.c, idata_fixup() */
; 1666 :         opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [rbx+64], 192			; 000000c0H
$LN4@high32_op:

; 1667 :     }
; 1668 :     opnd1->llvalue = opnd1->llvalue >> 32;

	shr	QWORD PTR [rbx], 32			; 00000020H

; 1669 :     return( NOT_ERROR );
; 1670 : }

	mov	rbx, QWORD PTR [rsp+64]
	xor	eax, eax
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
high32_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 64
opnd1$ = 72
opnd2$ = 80
sym$ = 88
name$ = 96
low32_op PROC

; 1632 : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 48					; 00000030H

; 1633 :     /* v2.06: added support for double constants */
; 1634 :     if ( opnd2->kind == EXPR_FLOAT ) {

	xor	esi, esi
	mov	rdi, r8
	cmp	DWORD PTR [r8+60], 3
	mov	rbx, rdx
	jne	SHORT $LN2@low32_op

; 1635 :         if ( Options.strict_masm_compat )

	cmp	BYTE PTR Options+127, sil
	je	SHORT $LN3@low32_op

; 1636 :             return( ConstError( opnd1, opnd2 ) );

	test	BYTE PTR [rdx+76], 16
	jne	SHORT $LN6@low32_op
	mov	ecx, 270				; 0000010eH
	call	QWORD PTR fnEmitErr
	or	esi, -1
$LN6@low32_op:
	mov	eax, esi

; 1649 : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN3@low32_op:

; 1637 :         atofloat( &opnd2->llvalue, opnd2->float_tok->string_ptr, sizeof( opnd2->llvalue), opnd2->negative, opnd2->float_tok->floattype );

	mov	rdx, QWORD PTR [r8+16]
	mov	rcx, rdi
	mov	r9d, DWORD PTR [r8+76]
	mov	r8d, 8
	shr	r9d, 5
	and	r9b, 1
	movzx	eax, BYTE PTR [rdx+1]
	mov	rdx, QWORD PTR [rdx+8]
	mov	BYTE PTR [rsp+32], al
	call	atofloat

; 1638 :         opnd2->kind = EXPR_CONST;

	mov	DWORD PTR [rdi+60], esi

; 1639 :         opnd2->float_tok = NULL;

	mov	QWORD PTR [rdi+16], rsi
$LN2@low32_op:

; 1640 :     }
; 1641 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [rdi]
	movups	XMMWORD PTR [rbx], xmm0
	movups	xmm1, XMMWORD PTR [rdi+16]
	movups	XMMWORD PTR [rbx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdi+32]
	movups	XMMWORD PTR [rbx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdi+48]
	movups	XMMWORD PTR [rbx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdi+64]
	movups	XMMWORD PTR [rbx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdi+80]
	movups	XMMWORD PTR [rbx+80], xmm1

; 1642 :     if ( opnd2->kind == EXPR_ADDR && opnd2->instr != T_SEG ) {

	cmp	DWORD PTR [rdi+60], 1
	jne	SHORT $LN4@low32_op
	cmp	DWORD PTR [rdi+56], 244			; 000000f4H
	je	SHORT $LN4@low32_op

; 1643 :         opnd1->instr = T_LOW32;

	mov	DWORD PTR [rbx+56], 237			; 000000edH

; 1644 :         //opnd1->mem_type = MT_DWORD; /* v2.10: changed - also see change in parser.c, idata_fixup() */
; 1645 :         opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [rbx+64], 192			; 000000c0H
$LN4@low32_op:

; 1646 :     }
; 1647 :     opnd1->llvalue &= 0xffffffff;

	mov	DWORD PTR [rbx+4], esi

; 1648 :     return( NOT_ERROR );

	xor	eax, eax

; 1649 : }

	mov	rbx, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
low32_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 8
opnd1$ = 16
opnd2$ = 24
sym$ = 32
name$ = 40
high_op	PROC

; 1609 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1610 :     if ( opnd2->kind == EXPR_ADDR && opnd2->instr != T_SEG ) {

	cmp	DWORD PTR [r8+60], 1
	jne	SHORT $LN2@high_op
	cmp	DWORD PTR [r8+56], 244			; 000000f4H
	je	SHORT $LN2@high_op

; 1611 :         /* v2.07: don't check any format-specific rules in the
; 1612 :          * expression evaluator!
; 1613 :          */
; 1614 : #if 0
; 1615 :         if ( Options.output_format != OFORMAT_OMF &&
; 1616 :             Options.output_format != OFORMAT_BIN && opnd2->sym ) {
; 1617 :             return( fnEmitErr( SYMBOL_TYPE_CONFLICT, opnd2->sym->name ) );
; 1618 :         }
; 1619 : #endif
; 1620 :         opnd1->instr = T_HIGH;

	mov	DWORD PTR [rdx+56], 230			; 000000e6H

; 1621 :         opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [rdx+64], 192			; 000000c0H
$LN2@high_op:

; 1622 :     }
; 1623 :     opnd1->value = opnd1->value >> 8;

	sar	DWORD PTR [rdx], 8

; 1624 :     opnd1->llvalue &= 0xff;
; 1625 :     return( NOT_ERROR );

	xor	eax, eax
	and	QWORD PTR [rdx], 255			; 000000ffH

; 1626 : }

	ret	0
high_op	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 8
opnd1$ = 16
opnd2$ = 24
sym$ = 32
name$ = 40
low_op	PROC

; 1587 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1588 :     if ( opnd2->kind == EXPR_ADDR && opnd2->instr != T_SEG ) {

	cmp	DWORD PTR [r8+60], 1
	jne	SHORT $LN6@low_op
	cmp	DWORD PTR [r8+56], 244			; 000000f4H
	je	SHORT $LN6@low_op

; 1589 : #if 0
; 1590 :         /* LOW works for OMF/BIN only */
; 1591 :         /* v2.07: don't check any format-specific rules in the
; 1592 :          * expression evaluator!
; 1593 :          */
; 1594 :         if ( Options.output_format != OFORMAT_OMF &&
; 1595 :             Options.output_format != OFORMAT_BIN && opnd2->sym ) {
; 1596 :             return( fnEmitErr( SYMBOL_TYPE_CONFLICT, opnd2->sym->name ) );
; 1597 :         }
; 1598 : #endif
; 1599 :         opnd1->instr = T_LOW;

	mov	DWORD PTR [rdx+56], 236			; 000000ecH

; 1600 :         opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [rdx+64], 192			; 000000c0H
$LN6@low_op:

; 1601 :     }
; 1602 :     opnd1->llvalue &= 0xff;

	and	QWORD PTR [rdx], 255			; 000000ffH

; 1603 :     return( NOT_ERROR );

	xor	eax, eax

; 1604 : }

	ret	0
low_op	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 8
opnd1$ = 16
opnd2$ = 24
sym$ = 32
name$ = 40
highword_op PROC

; 1574 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1575 :     if ( opnd2->kind == EXPR_ADDR && opnd2->instr != T_SEG ) {

	cmp	DWORD PTR [r8+60], 1
	jne	SHORT $LN2@highword_o
	cmp	DWORD PTR [r8+56], 244			; 000000f4H
	je	SHORT $LN2@highword_o

; 1576 :         opnd1->instr = T_HIGHWORD;

	mov	DWORD PTR [rdx+56], 232			; 000000e8H

; 1577 :         //opnd1->mem_type = MT_WORD; /* v2.05 */
; 1578 :         opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [rdx+64], 192			; 000000c0H
$LN2@highword_o:

; 1579 :     }
; 1580 :     opnd1->value = opnd1->value >> 16;

	movsx	eax, WORD PTR [rdx+2]
	mov	DWORD PTR [rdx], eax

; 1581 :     return( NOT_ERROR );

	xor	eax, eax

; 1582 : }

	ret	0
highword_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 8
opnd1$ = 16
opnd2$ = 24
sym$ = 32
name$ = 40
lowword_op PROC

; 1561 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1562 :     if ( opnd2->kind == EXPR_ADDR && opnd2->instr != T_SEG ) {

	cmp	DWORD PTR [r8+60], 1
	jne	SHORT $LN6@lowword_op
	cmp	DWORD PTR [r8+56], 244			; 000000f4H
	je	SHORT $LN6@lowword_op

; 1563 :         opnd1->instr = T_LOWWORD;

	mov	DWORD PTR [rdx+56], 238			; 000000eeH

; 1564 :         //opnd1->mem_type = MT_WORD; /* v2.05 */
; 1565 :         opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [rdx+64], 192			; 000000c0H
$LN6@lowword_op:

; 1566 :     }
; 1567 :     opnd1->llvalue &= 0xffff;

	and	QWORD PTR [rdx], 65535			; 0000ffffH

; 1568 :     return( NOT_ERROR );

	xor	eax, eax

; 1569 : }

	ret	0
lowword_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 48
opnd1$ = 56
opnd2$ = 64
sym$ = 72
name$ = 80
offset_op PROC

; 1522 : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, r8

; 1523 :     if ( oper == T_OFFSET ) {

	cmp	ecx, 241				; 000000f1H
	jne	SHORT $LN3@offset_op

; 1524 :         /* if operand is a constant value, skip OFFSET operator */
; 1525 :         if ( opnd2->kind == EXPR_CONST ) {

	cmp	DWORD PTR [r8+60], 0
	jne	SHORT $LN3@offset_op

; 1526 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]

; 1549 :     /* clear overrides ("offset SEG:xxx") */
; 1550 :     /* v2.01: override information is important for fixup creation!
; 1551 :      * the reason why it was cleared probably was to avoid creation
; 1552 :      * of a segment prefix. This case is now handled in the parser.
; 1553 :      */
; 1554 :     // opnd1->override = NULL;
; 1555 :     return( NOT_ERROR );

	xor	eax, eax
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1556 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN3@offset_op:

; 1527 :             return( NOT_ERROR );
; 1528 :         }
; 1529 :     }
; 1530 :     if ( (sym && sym->state == SYM_GRP) || opnd2->instr == T_SEG ) {

	test	r9, r9
	je	SHORT $LN6@offset_op
	cmp	DWORD PTR [r9+32], 4
	je	SHORT $LN5@offset_op
$LN6@offset_op:
	cmp	DWORD PTR [r8+56], 244			; 000000f4H
	jne	SHORT $LN4@offset_op
$LN5@offset_op:

; 1531 :         return( invalid_operand( opnd2, GetResWName( oper, NULL ), name ) );

	xor	edx, edx
	call	GetResWName
	test	BYTE PTR [rbx+76], 16
	jne	SHORT $LN13@offset_op
	mov	rcx, rax
	call	_strupr
	mov	r8, QWORD PTR name$[rsp]
	mov	rdx, rax
	mov	ecx, 228				; 000000e4H
	call	QWORD PTR fnEmitErr
$LN13@offset_op:
	or	eax, -1

; 1556 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN4@offset_op:

; 1532 :     }
; 1533 :     /* offset operator accepts types, but returns always 0 */
; 1534 :     if ( opnd2->is_type )

	test	BYTE PTR [r8+76], 8
	je	SHORT $LN7@offset_op

; 1535 :         opnd2->value = 0;

	mov	DWORD PTR [r8], 0
$LN7@offset_op:

; 1536 : 
; 1537 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1538 :     opnd1->instr = oper;

	mov	DWORD PTR [rdx+56], ecx

; 1539 : 
; 1540 :     if ( opnd2->indirect ) {

	test	BYTE PTR [r8+76], 1
	jne	SHORT $LN5@offset_op

; 1541 :         /* Masm v5.1 allows indirect operands, but Masm v6 with -Zm
; 1542 :          * won't accept it.
; 1543 :          */
; 1544 :         return( invalid_operand( opnd2, GetResWName( oper, NULL ), name ) );
; 1545 :     }
; 1546 :     /* skip memory type of operand, just address is needed */
; 1547 :     //opnd1->mem_type = MT_NEAR;
; 1548 :     opnd1->mem_type = MT_EMPTY;

	mov	DWORD PTR [rdx+64], 192			; 000000c0H

; 1549 :     /* clear overrides ("offset SEG:xxx") */
; 1550 :     /* v2.01: override information is important for fixup creation!
; 1551 :      * the reason why it was cleared probably was to avoid creation
; 1552 :      * of a segment prefix. This case is now handled in the parser.
; 1553 :      */
; 1554 :     // opnd1->override = NULL;
; 1555 :     return( NOT_ERROR );

	xor	eax, eax

; 1556 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
offset_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 8
opnd1$ = 16
opnd2$ = 24
sym$ = 32
name$ = 40
seg_op	PROC

; 1504 :     /* v2.10: check for sym==NULL ( seg ds:[0] ) added */
; 1505 :     if ( opnd2->sym == NULL || opnd2->sym->state == SYM_STACK || opnd2->is_abs ) {

	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN3@seg_op
	cmp	DWORD PTR [rax+32], 5
	je	SHORT $LN3@seg_op
	test	BYTE PTR [r8+76], 4
	jne	SHORT $LN3@seg_op

; 1507 :     }
; 1508 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1509 :     opnd1->instr = oper;
; 1510 :     if ( opnd1->mbr ) /* v2.08: set value more selectively */

	cmp	QWORD PTR [rdx+88], 0
	mov	DWORD PTR [rdx+56], ecx
	je	SHORT $LN4@seg_op

; 1511 :         opnd1->value = 0;    /* v2.07: added ( SEG <member> ) */

	mov	DWORD PTR [rdx], 0
$LN4@seg_op:

; 1512 :     opnd1->mem_type = MT_EMPTY; /* v2.04a */

	mov	DWORD PTR [rdx+64], 192			; 000000c0H

; 1513 :     return( NOT_ERROR );

	xor	eax, eax

; 1514 : }

	ret	0
$LN3@seg_op:

; 1506 :         return( fnEmitErr( OPERAND_MUST_BE_RELOCATABLE ) );

	mov	ecx, 188				; 000000bcH
	rex_jmp	QWORD PTR fnEmitErr
seg_op	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 8
opnd1$ = 16
opnd2$ = 24
sym$ = 32
name$ = 40
short_op PROC

; 1490 :     if ( opnd2->kind != EXPR_ADDR ||

	cmp	DWORD PTR [r8+60], 1
	jne	SHORT $LN3@short_op
	mov	eax, DWORD PTR [r8+64]
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN2@short_op
	add	eax, -129				; ffffff7fH
	cmp	eax, 1
	ja	SHORT $LN3@short_op
$LN2@short_op:

; 1495 :     }
; 1496 :     TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]

; 1497 :     opnd1->instr = oper;
; 1498 :     return( NOT_ERROR );

	xor	eax, eax
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1
	mov	DWORD PTR [rdx+56], ecx

; 1499 : }

	ret	0
$LN3@short_op:

; 1491 :         ( opnd2->mem_type != MT_EMPTY &&
; 1492 :          opnd2->mem_type != MT_NEAR &&
; 1493 :          opnd2->mem_type != MT_FAR ) ) {
; 1494 :         return( fnEmitErr( EXPRESSION_MUST_BE_A_CODE_ADDRESS ) );

	mov	ecx, 233				; 000000e9H
	rex_jmp	QWORD PTR fnEmitErr
short_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 8
opnd1$ = 16
opnd2$ = 24
sym$ = 32
name$ = 40
opattr_op PROC

; 1387 : 
; 1388 :     DebugMsg1(("opattr_op: arg kind=%d memtype=%X sym=%s\n",
; 1389 :                opnd2->kind, opnd2->mem_type,
; 1390 :                opnd2->sym ? opnd2->sym->name : "NULL" ));
; 1391 :     opnd1->kind = EXPR_CONST;
; 1392 :     opnd1->sym = NULL;  /* clear symbol in case it is undef */
; 1393 :     opnd1->value = 0;
; 1394 :     opnd1->mem_type = MT_EMPTY;
; 1395 :     opnd1->is_opattr = FALSE; /* v2: added */

	and	DWORD PTR [rdx+76], -17			; ffffffefH
	xor	eax, eax
	mov	DWORD PTR [rdx+60], eax
	mov	r9d, ecx
	mov	QWORD PTR [rdx+80], rax
	mov	DWORD PTR [rdx], eax
	mov	DWORD PTR [rdx+64], 192			; 000000c0H

; 1396 : 
; 1397 :     if ( opnd2->kind == EXPR_EMPTY )

	mov	eax, DWORD PTR [r8+60]
	cmp	eax, -2
	je	$LN30@opattr_op

; 1398 :         return( NOT_ERROR );
; 1399 : 
; 1400 :     /* bit 0: code label (near|far)? */
; 1401 :     if ( opnd2->kind == EXPR_ADDR ) {

	mov	r11d, 1345				; 00000541H
	cmp	eax, 1
	jne	$LN6@opattr_op

; 1402 :         if ( opnd2->sym && opnd2->sym->state != SYM_STACK &&

	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN4@opattr_op
	cmp	DWORD PTR [rax+32], 5
	je	SHORT $LN4@opattr_op
	movzx	eax, BYTE PTR [r8+64]
	mov	r10d, 1
	mov	ecx, DWORD PTR [rdx]
	and	al, -64					; ffffffffffffffc0H
	cmp	al, -128				; ffffffffffffff80H
	cmove	ecx, r10d
	mov	DWORD PTR [rdx], ecx
$LN4@opattr_op:

; 1403 :             ( opnd2->mem_type & MT_SPECIAL_MASK ) == MT_ADDRESS )
; 1404 :             opnd1->value |= OPATTR_CODELABEL;
; 1405 : 
; 1406 :         if ( IsOffset( opnd2 ) &&
; 1407 :             opnd2->sym &&

	cmp	DWORD PTR [r8+64], 192			; 000000c0H
	jne	SHORT $LN5@opattr_op
	mov	eax, DWORD PTR [r8+56]
	add	eax, -233				; ffffffffffffff17H
	cmp	eax, 10
	ja	SHORT $LN5@opattr_op
	bt	r11d, eax
	jae	SHORT $LN5@opattr_op
	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN5@opattr_op
	mov	eax, DWORD PTR [rax+36]
	and	eax, 192				; 000000c0H
	cmp	al, -128				; ffffffffffffff80H
	jne	SHORT $LN5@opattr_op

; 1408 :             ( opnd2->sym->mem_type & MT_SPECIAL_MASK ) == MT_ADDRESS )
; 1409 :             opnd1->value |= OPATTR_CODELABEL;

	or	DWORD PTR [rdx], 1
$LN5@opattr_op:

; 1410 : 
; 1411 :         /* bit 1: memory variable, relocatable data label? */
; 1412 :         if ( opnd2->sym &&

	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN6@opattr_op
	mov	ecx, DWORD PTR [rax+36]
	cmp	ecx, 196				; 000000c4H
	je	SHORT $LN7@opattr_op
	mov	eax, DWORD PTR [r8+64]
	test	al, al
	jns	SHORT $LN7@opattr_op
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN6@opattr_op
	test	cl, cl
	js	SHORT $LN6@opattr_op
$LN7@opattr_op:

; 1413 :             (( opnd2->sym->mem_type == MT_TYPE ||
; 1414 :               ( opnd2->mem_type & MT_SPECIAL ) == 0 ) ||
; 1415 :              ( opnd2->mem_type == MT_EMPTY &&
; 1416 :               ( opnd2->sym->mem_type & MT_SPECIAL ) == 0 )))
; 1417 :             opnd1->value |= OPATTR_DATALABEL;

	or	DWORD PTR [rdx], 2
$LN6@opattr_op:

; 1418 :     }
; 1419 :     /* kind==EXPR_ADDR is not reliably set for indirect register addressing! */
; 1420 :     /* v2.12: check if operand is valid */
; 1421 :     //if ( opnd2->indirect )
; 1422 :     if ( opnd2->kind != EXPR_ERROR && opnd2->indirect )

	cmp	DWORD PTR [r8+60], -1
	je	SHORT $LN8@opattr_op
	test	BYTE PTR [r8+76], 1
	je	SHORT $LN8@opattr_op

; 1423 :         opnd1->value |= OPATTR_DATALABEL;

	or	DWORD PTR [rdx], 2
$LN8@opattr_op:

; 1424 : 
; 1425 : 
; 1426 :     /* bit 2: immediate value? */
; 1427 : 	/* John Hankinson modified here to allow -Zne switch to treat literal string macro argument with opattr type = 0 */
; 1428 : 	if (Options.strict_masm_compat && opnd2->kind == EXPR_CONST && opnd2->mem_type != MT_SQWORD)

	cmp	BYTE PTR Options+127, 0
	je	SHORT $LN9@opattr_op
	cmp	DWORD PTR [r8+60], 0
	jne	SHORT $LN9@opattr_op
	cmp	DWORD PTR [r8+64], 71			; 00000047H
	jne	SHORT $LN11@opattr_op
$LN9@opattr_op:

; 1429 : 	{
; 1430 : 	}
; 1431 :     else if ( opnd2->kind == EXPR_CONST ||

	mov	eax, DWORD PTR [r8+60]
	test	eax, eax
	je	SHORT $LN15@opattr_op
	cmp	eax, 1
	jne	SHORT $LN11@opattr_op
	test	BYTE PTR [r8+76], al
	jne	SHORT $LN11@opattr_op
	mov	ecx, DWORD PTR [r8+64]
	cmp	ecx, 192				; 000000c0H
	jne	SHORT $LN49@opattr_op
	mov	eax, DWORD PTR [r8+56]
	add	eax, -233				; ffffffffffffff17H
	cmp	eax, 10
	ja	SHORT $LN39@opattr_op
	bt	r11d, eax
	jb	SHORT $LN13@opattr_op
$LN39@opattr_op:
	cmp	ecx, 192				; 000000c0H
	je	SHORT $LN13@opattr_op
$LN49@opattr_op:
	and	ecx, 192				; 000000c0H
	cmp	cl, -128				; ffffffffffffff80H
	jne	SHORT $LN11@opattr_op
$LN13@opattr_op:
	mov	rax, QWORD PTR [r8+80]
	mov	ecx, DWORD PTR [rax+32]
	dec	ecx
	cmp	ecx, 1
	ja	SHORT $LN11@opattr_op
$LN15@opattr_op:

; 1432 :         ( opnd2->kind == EXPR_ADDR &&
; 1433 :          opnd2->indirect == FALSE &&
; 1434 :          (( opnd2->mem_type == MT_EMPTY && IsOffset(opnd2) ) ||
; 1435 :           //( opnd2->mem_type == MT_ABS ) ||  /* v2.06: added (abs. external) */
; 1436 :           ( opnd2->mem_type == MT_EMPTY ) ||  /* v2.06: added (abs. external) */
; 1437 :           (( opnd2->mem_type & MT_SPECIAL_MASK ) == MT_ADDRESS )) &&
; 1438 :          ( opnd2->sym->state == SYM_INTERNAL ||
; 1439 :           opnd2->sym->state == SYM_EXTERNAL ) ) )
; 1440 :         opnd1->value |= OPATTR_IMMEDIATE;

	or	DWORD PTR [rdx], 4
$LN11@opattr_op:

; 1441 : 
; 1442 :     /* bit 3: uses direct memory addressing?
; 1443 :      */
; 1444 :     if ( opnd2->kind == EXPR_ADDR &&
; 1445 :         opnd2->indirect == FALSE &&
; 1446 :         //opnd2->base_reg == NULL &&
; 1447 :         (( opnd2->mem_type == MT_EMPTY && opnd2->instr == EMPTY ) ||
; 1448 :          ( opnd2->mem_type == MT_TYPE ) || /* v2.05: added */
; 1449 :          (( opnd2->mem_type & MT_SPECIAL ) == 0 ) ||
; 1450 :          opnd2->mem_type == MT_PTR ) &&

	cmp	DWORD PTR [r8+60], 1
	jne	SHORT $LN16@opattr_op
	test	BYTE PTR [r8+76], 1
	jne	SHORT $LN16@opattr_op
	mov	eax, DWORD PTR [r8+64]
	cmp	eax, 192				; 000000c0H
	jne	SHORT $LN18@opattr_op
	cmp	DWORD PTR [r8+56], -2
	je	SHORT $LN17@opattr_op
$LN18@opattr_op:
	cmp	eax, 196				; 000000c4H
	je	SHORT $LN17@opattr_op
	test	al, al
	jns	SHORT $LN17@opattr_op
	cmp	eax, 195				; 000000c3H
	jne	SHORT $LN16@opattr_op
$LN17@opattr_op:
	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN19@opattr_op
	mov	eax, DWORD PTR [rax+32]
	dec	eax
	cmp	eax, 1
	ja	SHORT $LN16@opattr_op
$LN19@opattr_op:

; 1451 :         (opnd2->sym == NULL ||
; 1452 :          opnd2->sym->state == SYM_INTERNAL ||
; 1453 :          opnd2->sym->state == SYM_EXTERNAL ) )
; 1454 :         opnd1->value |= OPATTR_DIRECTMEM;

	or	DWORD PTR [rdx], 8
$LN16@opattr_op:

; 1455 : 
; 1456 :     if ( opnd2->kind == EXPR_REG && opnd2->indirect == FALSE )

	cmp	DWORD PTR [r8+60], 2
	jne	SHORT $LN20@opattr_op
	test	BYTE PTR [r8+76], 1
	jne	SHORT $LN20@opattr_op

; 1457 :         opnd1->value |= OPATTR_REGISTER;

	or	DWORD PTR [rdx], 16
$LN20@opattr_op:

; 1458 : 
; 1459 :     //if ( opnd2->kind != EXPR_ERROR && ( opnd2->sym == 0 || opnd2->sym->isdefined == TRUE ) )
; 1460 : 	/* John Hankinson modified here to allow -Zne switch to treat literal string macro argument with opattr type = 0 */
; 1461 : 	if (Options.strict_masm_compat && opnd2->kind == EXPR_CONST && opnd2->mem_type != MT_SQWORD)

	cmp	BYTE PTR Options+127, 0
	je	SHORT $LN21@opattr_op
	cmp	DWORD PTR [r8+60], 0
	jne	SHORT $LN21@opattr_op
	cmp	DWORD PTR [r8+64], 71			; 00000047H
	jne	SHORT $LN23@opattr_op
$LN21@opattr_op:
	mov	eax, DWORD PTR [r8+60]
	inc	eax
	test	eax, -5					; fffffffbH
	je	SHORT $LN23@opattr_op

; 1462 : 	{
; 1463 : 	}
; 1464 :     else if ( opnd2->kind != EXPR_ERROR && opnd2->kind != EXPR_FLOAT && ( opnd2->sym == NULL || opnd2->sym->isdefined == TRUE ) )

	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN24@opattr_op
	test	BYTE PTR [rax+40], 2
	je	SHORT $LN23@opattr_op
$LN24@opattr_op:

; 1465 :         opnd1->value |= OPATTR_DEFINED; 

	or	DWORD PTR [rdx], 32			; 00000020H
$LN23@opattr_op:

; 1466 : 
; 1467 :     if ( ( opnd2->sym && opnd2->sym->state == SYM_STACK ) ||

	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN27@opattr_op
	cmp	DWORD PTR [rax+32], 5
	je	SHORT $LN26@opattr_op
$LN27@opattr_op:
	test	BYTE PTR [r8+76], 1
	je	SHORT $LN25@opattr_op
	mov	rax, QWORD PTR [r8+24]
	test	rax, rax
	je	SHORT $LN25@opattr_op
	mov	eax, DWORD PTR [rax+16]
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rax, OFFSET FLAT:SpecialTable+4
	test	BYTE PTR [rax+rcx*4], 64		; 00000040H
	je	SHORT $LN25@opattr_op
$LN26@opattr_op:

; 1468 :         ( opnd2->indirect && opnd2->base_reg &&
; 1469 :          /* v2.11: use new flag SFR_SSBASED */
; 1470 :          //( opnd2->base_reg->tokval == T_ESP || opnd2->base_reg->tokval == T_EBP || opnd2->base_reg->tokval == T_BP ) ) )
; 1471 :          ( GetSflagsSp( opnd2->base_reg->tokval ) & SFR_SSBASED ) ) )
; 1472 :             opnd1->value |= OPATTR_SSREL;

	or	DWORD PTR [rdx], 64			; 00000040H
$LN25@opattr_op:

; 1473 :     
; 1474 :     if ( opnd2->sym && opnd2->sym->state == SYM_EXTERNAL )

	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN28@opattr_op
	cmp	DWORD PTR [rax+32], 2
	jne	SHORT $LN28@opattr_op

; 1475 :         opnd1->value |= OPATTR_EXTRNREF;

	or	DWORD PTR [rdx], 128			; 00000080H
$LN28@opattr_op:

; 1476 : 
; 1477 :     if ( oper == T_OPATTR )

	cmp	r9d, 242				; 000000f2H
	jne	SHORT $LN30@opattr_op

; 1478 :         /* v2.12: no language if symbol isn't defined properly */
; 1479 :         //if ( opnd2->sym )
; 1480 :         if ( opnd2->sym && opnd2->kind != EXPR_ERROR )

	mov	rax, QWORD PTR [r8+80]
	test	rax, rax
	je	SHORT $LN30@opattr_op
	cmp	DWORD PTR [r8+60], -1
	je	SHORT $LN30@opattr_op

; 1481 :             opnd1->value |= opnd2->sym->langtype << 8;

	mov	eax, DWORD PTR [rax+76]
	shl	eax, 8
	or	DWORD PTR [rdx], eax
$LN30@opattr_op:

; 1482 : 
; 1483 :     DebugMsg1(("opattr_op returns %Xh\n", opnd1->value));
; 1484 :     return( NOT_ERROR );

	xor	eax, eax

; 1485 : }

	ret	0
opattr_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 48
opnd1$ = 56
opnd2$ = 64
sym$ = 72
name$ = 80
type_op	PROC

; 1205 : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 1206 :     DebugMsg1(("type_op: opnd2 kind=%d memtype=%X sym=%s type=%s instr=%d istype=%u explicit=%u\n",
; 1207 :                opnd2->kind,
; 1208 :                opnd2->mem_type,
; 1209 :                sym ? sym->name : "NULL",
; 1210 :                opnd2->type ? opnd2->type->name : "NULL",
; 1211 :                opnd2->instr,
; 1212 :                opnd2->is_type,
; 1213 :                opnd2->explicit ));
; 1214 :     opnd1->kind = EXPR_CONST;

	xor	ebp, ebp
	mov	rsi, r9
	mov	DWORD PTR [rdx+60], ebp
	mov	rdi, r8

; 1215 :     /* TYPE accepts arrays/structs/unions */
; 1216 :     /* v2.11: if memtype isn't empty, ignore any unary operator
; 1217 :      * test cases:
; 1218 :      * - type qword ptr sym.
; 1219 :      * - type qword ptr offset sym
; 1220 :      * operators LOW, HIGH, LOWWORD, HIGHWORD, LOW32, HIGH32,
; 1221 :      * OFFSET, IMAGEREL, SECTIONREL and LROFFSET
; 1222 :      * will set opnd.memtype to MT_EMPTY.
; 1223 :      */
; 1224 :     if( opnd2->instr != EMPTY && opnd2->mem_type != MT_EMPTY ) {

	cmp	DWORD PTR [r8+56], -2
	mov	rbx, rdx
	je	SHORT $LN4@type_op
	cmp	DWORD PTR [r8+64], 192			; 000000c0H
	je	SHORT $LN4@type_op

; 1225 :         opnd2->instr = EMPTY;

	mov	DWORD PTR [r8+56], -2

; 1226 :         sym = NULL;

	mov	esi, ebp
$LN4@type_op:

; 1227 :     }
; 1228 :     if( opnd2->instr != EMPTY ) {

	mov	eax, DWORD PTR [r8+56]
	cmp	eax, -2
	je	SHORT $LN5@type_op

; 1229 :         if ( opnd2->sym ) {

	mov	rcx, QWORD PTR [r8+80]
	test	rcx, rcx
	je	$LN40@type_op

; 1230 :             switch ( opnd2->instr ) {

	add	eax, -230				; ffffffffffffff1aH
	cmp	eax, 13
	ja	$LN40@type_op
	cdqe
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN44@type_op[rdx+rax*4]
	add	rax, rdx
	jmp	rax
$LN8@type_op:

; 1231 :             case T_LOW:
; 1232 :             case T_HIGH:
; 1233 :                 opnd1->value = 1;

	mov	DWORD PTR [rbx], 1

; 1234 :                 break;

	jmp	$LN40@type_op
$LN9@type_op:

; 1235 :             case T_LOWWORD:
; 1236 :             case T_HIGHWORD:
; 1237 :                 //case T_SEG: /* masm returns 0 for TYPE SEG <label>! */
; 1238 :                 opnd1->value = 2;

	mov	eax, 2

; 1239 :                 break;

	jmp	$LN45@type_op
$LN10@type_op:

; 1240 : #if LOHI32
; 1241 :             case T_LOW32:
; 1242 :             case T_HIGH32:
; 1243 :                 opnd1->value = 4;

	mov	DWORD PTR [rbx], 4

; 1244 :                 break;

	jmp	$LN40@type_op
$LN11@type_op:

; 1245 : #endif
; 1246 :             case T_OFFSET:
; 1247 :             case T_LROFFSET:
; 1248 : #if SECTIONRELSUPP
; 1249 :             case T_SECTIONREL: /* masm returns 0 for TYPE SECTIONREL <label>! */
; 1250 : #endif
; 1251 : #if IMAGERELSUPP
; 1252 :             case T_IMAGEREL: /* masm returns 0 for TYPE IMAGEREL <label>! */
; 1253 : #endif
; 1254 :                 opnd1->value = 2 << GetSymOfssize( opnd2->sym );

	call	GetSymOfssize
	mov	ecx, eax
	mov	eax, 2
	shl	eax, cl

; 1255 :                 opnd1->is_type = TRUE; /* v2.03: added */

	or	DWORD PTR [rbx+76], 8

; 1256 :                 break;
; 1257 :             }
; 1258 :         }

	jmp	$LN45@type_op
$LN5@type_op:

; 1259 :     } else if ( sym == NULL ) {

	test	rsi, rsi
	jne	$LN12@type_op

; 1260 :         //printf( "sym=NULL kind=%d mem_type=%X indirect=%u is_type=%u type=%s\n", opnd2->kind, opnd2->mem_type, opnd2->indirect, opnd2->is_type, opnd2->type ? opnd2->type->name : "NULL" );
; 1261 :         /* for types, return total_size */
; 1262 :         if ( opnd2->is_type == TRUE ) {

	mov	eax, DWORD PTR [r8+76]
	test	al, 8
	je	SHORT $LN14@type_op

; 1263 :             /* v2.06: default value of RECORD types is the mask! */
; 1264 :             if ( opnd2->type && opnd2->type->typekind == TYPE_RECORD )

	mov	rax, QWORD PTR [r8+96]
	test	rax, rax
	je	SHORT $LN16@type_op
	cmp	BYTE PTR [rax+66], 4
	jne	SHORT $LN16@type_op

; 1265 :                 opnd2->value = opnd2->type->total_size;

	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR [r8], eax
$LN16@type_op:

; 1266 :             //opnd1->value = opnd2->value;
; 1267 :             TokenAssign( opnd1, opnd2 );

	movups	xmm0, XMMWORD PTR [r8]
	movups	XMMWORD PTR [rdx], xmm0
	movups	xmm1, XMMWORD PTR [r8+16]
	movups	XMMWORD PTR [rdx+16], xmm1
	movups	xmm0, XMMWORD PTR [r8+32]
	movups	XMMWORD PTR [rdx+32], xmm0
	movups	xmm1, XMMWORD PTR [r8+48]
	movups	XMMWORD PTR [rdx+48], xmm1
	movups	xmm0, XMMWORD PTR [r8+64]
	movups	XMMWORD PTR [rdx+64], xmm0
	movups	xmm1, XMMWORD PTR [r8+80]
	movups	XMMWORD PTR [rdx+80], xmm1

; 1268 :             /* v2.05: added, (type procptr) ptr <reg>
; 1269 :              * the type probably should be set generally,
; 1270 :              * but this variant is the one used by INVOKE, other
; 1271 :              * usages are virtually irrelevant.
; 1272 :              * v2.10: opnd1->type now always set. Example:
; 1273 :              *   ( type x ) eq ( type y )
; 1274 :              * also see new function cmp_types()
; 1275 :              */
; 1276 :             //if ( opnd2->mem_type == MT_PROC )
; 1277 :             opnd1->type = opnd2->type;

	mov	rax, QWORD PTR [r8+96]
	mov	QWORD PTR [rdx+96], rax
	jmp	$LN40@type_op
$LN14@type_op:

; 1278 : 
; 1279 :         } else if ( opnd2->kind == EXPR_REG && opnd2->indirect == FALSE ) {

	cmp	DWORD PTR [r8+60], 2
	jne	$LN17@type_op
	test	al, 1
	jne	$LN17@type_op

; 1280 :             opnd1->value = SizeFromRegister( opnd2->base_reg->tokval );

	mov	rax, QWORD PTR [r8+24]
	mov	ecx, DWORD PTR [rax+16]
	call	SizeFromRegister

; 1281 :             opnd1->is_type = TRUE; /* v2.03: added */

	or	DWORD PTR [rbx+76], 8
	mov	DWORD PTR [rbx], eax

; 1282 :             /* v2.10: check for assumes if it's a full size GPR */
; 1283 :             if ( opnd1->value == CurrWordSize &&
; 1284 :                 opnd1->mem_type == MT_EMPTY &&
; 1285 :                 ( GetValueSp( opnd2->base_reg->tokval ) & OP_RGT8 ) &&

	movzx	ecx, BYTE PTR ModuleInfo+406
	cmp	eax, ecx
	jne	SHORT $LN19@type_op
	cmp	DWORD PTR [rbx+64], 192			; 000000c0H
	jne	SHORT $LN19@type_op
	mov	r8, QWORD PTR [rdi+24]
	lea	rdx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR [r8+16]
	lea	rcx, QWORD PTR [rax+rax*2]
	test	BYTE PTR SpecialTable[rdx+rcx*4], 14
	je	SHORT $LN19@type_op
	movzx	ecx, BYTE PTR [r8+1]
	call	GetStdAssumeEx
	test	rax, rax
	je	SHORT $LN19@type_op

; 1286 :                 ( sym = GetStdAssumeEx( opnd2->base_reg->bytval ) ) ) {
; 1287 :                 DebugMsg1(("type_op: assume type=%X [name=>%s< memtype=%X]\n", sym, sym->name, sym->mem_type ));
; 1288 :                 opnd1->type = sym;

	mov	QWORD PTR [rbx+96], rax

; 1289 :                 opnd1->mem_type = sym->mem_type;

	mov	ecx, DWORD PTR [rax+36]
	mov	DWORD PTR [rbx+64], ecx

; 1290 :                 opnd1->value = sym->total_size;

	mov	eax, DWORD PTR [rax+56]

; 1291 :             } else {

	jmp	$LN45@type_op
$LN19@type_op:

; 1292 :                 opnd1->mem_type = opnd2->mem_type; /* v2.10: added */

	mov	ecx, DWORD PTR [rdi+64]
	lea	rdx, QWORD PTR [rbx+64]
	mov	DWORD PTR [rdx], ecx

; 1293 :                 opnd1->type = opnd2->type; /* v2.10: added */

	mov	rax, QWORD PTR [rdi+96]
	mov	QWORD PTR [rbx+96], rax

; 1294 :                 if ( opnd1->mem_type == MT_EMPTY )

	cmp	ecx, 192				; 000000c0H
	jne	$LN40@type_op

; 1295 :                     MemtypeFromSize( opnd1->value, &opnd1->mem_type ); /* v2.03: added */

	mov	ecx, DWORD PTR [rbx]
	call	MemtypeFromSize

; 1296 :             }

	jmp	$LN40@type_op
$LN17@type_op:

; 1297 : 
; 1298 : #if 0 /* Masm returns 0 for TYPE <segment_register> */
; 1299 :             /* if it is a segment register, use default word size */
; 1300 :             if ( opnd1->value == 0 )
; 1301 :                 opnd1->value = Use32 ? 4 : 2;
; 1302 : #endif
; 1303 :         //} else if ( opnd2->explicit ) { /* v2.05: changed */
; 1304 :         //} else if ( opnd2->mem_type != MT_EMPTY ) { /* v2.10: changed */
; 1305 :         } else if ( opnd2->mem_type != MT_EMPTY || opnd2->explicit ) {

	mov	ecx, DWORD PTR [r8+64]
	cmp	ecx, 192				; 000000c0H
	jne	SHORT $LN47@type_op
	test	al, 2
	jne	SHORT $LN24@type_op

; 1317 :         } else /* it is a number or EXPR_REG + indirect */
; 1318 :             opnd1->value = 0;

	mov	DWORD PTR [rdx], ebp
	jmp	$LN40@type_op
$LN24@type_op:

; 1306 :             if ( opnd2->mem_type != MT_EMPTY ) {

	cmp	ecx, 192				; 000000c0H
	je	SHORT $LN25@type_op
$LN47@type_op:

; 1307 :                 opnd1->value = SizeFromMemtype( opnd2->mem_type, opnd2->Ofssize, opnd2->type );

	movzx	edx, BYTE PTR [r8+69]
	mov	r8, QWORD PTR [r8+96]
	call	SizeFromMemtype
	mov	DWORD PTR [rbx], eax

; 1308 :                 opnd1->mem_type = opnd2->mem_type; /* v2.04: added */

	mov	eax, DWORD PTR [rdi+64]

; 1313 :                 }
; 1314 :             }
; 1315 :             opnd1->is_type = TRUE; /* v2.04: added */

	or	DWORD PTR [rbx+76], 8
	mov	DWORD PTR [rbx+64], eax

; 1316 :             opnd1->type = opnd2->type; /* v2.09: added */

	mov	rax, QWORD PTR [rdi+96]
	mov	QWORD PTR [rbx+96], rax

; 1319 : #if 0
; 1320 :     } else if ( sym->state == SYM_TYPE ) {
; 1321 :         TokenAssign( opnd1, opnd2 );
; 1322 :         opnd1->type = sym;
; 1323 : #endif
; 1324 :     } else if ( sym->state == SYM_UNDEFINED ) { /* v2.10: added */

	jmp	$LN40@type_op
$LN25@type_op:

; 1309 :             } else {
; 1310 :                 if ( opnd2->type ) {

	mov	rax, QWORD PTR [r8+96]
	test	rax, rax
	je	SHORT $LN27@type_op

; 1311 :                     opnd1->value = opnd2->type->total_size;

	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR [rdx], eax

; 1312 :                     opnd1->mem_type = opnd2->type->mem_type;

	mov	rax, QWORD PTR [r8+96]
	mov	ecx, DWORD PTR [rax+36]
	mov	DWORD PTR [rdx+64], ecx
$LN27@type_op:

; 1313 :                 }
; 1314 :             }
; 1315 :             opnd1->is_type = TRUE; /* v2.04: added */

	or	DWORD PTR [rbx+76], 8

; 1316 :             opnd1->type = opnd2->type; /* v2.09: added */

	mov	rax, QWORD PTR [rdi+96]
	mov	QWORD PTR [rbx+96], rax

; 1319 : #if 0
; 1320 :     } else if ( sym->state == SYM_TYPE ) {
; 1321 :         TokenAssign( opnd1, opnd2 );
; 1322 :         opnd1->type = sym;
; 1323 : #endif
; 1324 :     } else if ( sym->state == SYM_UNDEFINED ) { /* v2.10: added */

	jmp	$LN40@type_op
$LN12@type_op:
	cmp	DWORD PTR [rsi+32], ebp
	jne	SHORT $LN28@type_op

; 1325 :         opnd1->kind = EXPR_ADDR;
; 1326 :         opnd1->sym = sym;
; 1327 :         /* is_type must be set, to avoid the forward referenced symbol be changed
; 1328 :          * to a type if the type expression is the left operand of PTR
; 1329 :          */
; 1330 :         opnd1->is_type = TRUE;

	or	DWORD PTR [rdx+76], 8
	mov	DWORD PTR [rdx+60], 1
	mov	QWORD PTR [rdx+80], rsi
	jmp	$LN40@type_op
$LN28@type_op:

; 1331 :         //} else if( sym->mem_type == MT_TYPE ) { /* v2.04: check for explicit */
; 1332 :     } else if( sym->mem_type == MT_TYPE && opnd2->explicit == FALSE ) {

	cmp	DWORD PTR [rsi+36], 196			; 000000c4H
	jne	SHORT $LN30@type_op
	test	BYTE PTR [r8+76], 2
	jne	SHORT $LN30@type_op

; 1333 :         opnd1->value = sym->type->total_size;

	mov	rax, QWORD PTR [rsi+80]
	mov	ecx, DWORD PTR [rax+56]

; 1334 :         opnd1->is_type = TRUE; /* v2.03: added */

	or	DWORD PTR [rdx+76], 8
	mov	DWORD PTR [rdx], ecx

; 1335 :         //if ( opnd1->mem_type == MT_EMPTY ) /* v2.09 */
; 1336 :         opnd1->mem_type = sym->type->mem_type; /* v2.09 */

	mov	rax, QWORD PTR [rsi+80]
	mov	ecx, DWORD PTR [rax+36]
	mov	DWORD PTR [rdx+64], ecx

; 1337 :         opnd1->type = sym->type; /* v2.09 */

	mov	rax, QWORD PTR [rsi+80]
	mov	QWORD PTR [rdx+96], rax

; 1338 :         //printf( "sym=%s MT_TYPE type=%s type->memt=%X\n", sym->name, sym->type->name, sym->type->mem_type );
; 1339 :     } else {

	jmp	$LN40@type_op
$LN30@type_op:

; 1340 : #if 1 /* v2.03: added */
; 1341 :         opnd1->is_type = TRUE;

	or	DWORD PTR [rdx+76], 8

; 1342 :         if ( opnd1->mem_type == MT_EMPTY )

	cmp	DWORD PTR [rdx+64], 192			; 000000c0H
	jne	SHORT $LN32@type_op

; 1343 :             opnd1->mem_type = opnd2->mem_type;

	mov	eax, DWORD PTR [r8+64]
	mov	DWORD PTR [rdx+64], eax
$LN32@type_op:

; 1344 : #endif
; 1345 :         //if ( opnd2->type ) { /* v2.10a: see types14.asm */
; 1346 :         if ( opnd2->type && opnd2->mbr == NULL ) {

	cmp	QWORD PTR [r8+96], rbp
	je	SHORT $LN33@type_op
	cmp	QWORD PTR [r8+88], rbp
	jne	SHORT $LN33@type_op

; 1347 :             opnd1->type_tok = opnd2->type_tok;

	mov	rax, QWORD PTR [r8+40]
	mov	QWORD PTR [rdx+40], rax

; 1348 :             opnd1->type = opnd2->type;

	mov	rax, QWORD PTR [r8+96]
	mov	QWORD PTR [rdx+96], rax

; 1349 :             opnd1->value = opnd1->type->total_size;

	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR [rdx], eax
	jmp	SHORT $LN40@type_op
$LN33@type_op:

; 1350 :         } else if ( sym->mem_type == MT_PTR ) {

	mov	eax, DWORD PTR [rsi+36]
	cmp	eax, 195				; 000000c3H
	jne	SHORT $LN35@type_op

; 1351 :             //printf( "sym=%s MT_PTR target_memt=%X target=%s\n", sym->name, sym->ptr_memtype, sym->target_type ? sym->target_type->name : "NULL" );
; 1352 :             opnd1->type_tok = opnd2->type_tok; /* v2.10: added */

	mov	rax, QWORD PTR [r8+40]
	mov	QWORD PTR [rdx+40], rax

; 1353 :             opnd1->value = SizeFromMemtype( sym->isfar ? MT_FAR : MT_NEAR, sym->Ofssize, NULL );

	test	BYTE PTR [rsi+47], 16
	movzx	edx, BYTE PTR [rsi+44]
	setne	bpl
	xor	r8d, r8d
	lea	ecx, DWORD PTR [rbp+129]
	jmp	SHORT $LN48@type_op
$LN35@type_op:

; 1354 :         } else if( sym->mem_type == MT_NEAR ) {
; 1355 :             /* v2.09: also handle 64-bit */
; 1356 :             //opnd1->value = GetSymOfssize( sym ) ? LS_NEAR32 : LS_NEAR16;
; 1357 :             opnd1->value = 0xFF00 | ( 2 << GetSymOfssize( sym ) );

	mov	rcx, rsi
	cmp	eax, 129				; 00000081H
	jne	SHORT $LN37@type_op
	call	GetSymOfssize
	mov	ecx, eax
	mov	eax, 2
	shl	eax, cl
	or	eax, 65280				; 0000ff00H
	jmp	SHORT $LN45@type_op
$LN37@type_op:

; 1358 :         } else if( sym->mem_type == MT_FAR ) {

	cmp	eax, 130				; 00000082H
	jne	SHORT $LN39@type_op

; 1359 :             opnd1->value = GetSymOfssize( sym ) ? LS_FAR32 : LS_FAR16;

	call	GetSymOfssize
	test	eax, eax
	setne	bpl
	add	ebp, 65285				; 0000ff05H
	mov	DWORD PTR [rbx], ebp

; 1360 :         } else

	jmp	SHORT $LN40@type_op
$LN39@type_op:

; 1361 :             opnd1->value = SizeFromMemtype( opnd2->mem_type, GetSymOfssize( sym ), sym->type );

	call	GetSymOfssize
	mov	r8, QWORD PTR [rsi+80]
	mov	edx, eax
	mov	ecx, DWORD PTR [rdi+64]
$LN48@type_op:
	call	SizeFromMemtype
$LN45@type_op:
	mov	DWORD PTR [rbx], eax
$LN40@type_op:

; 1362 :     }
; 1363 :     DebugMsg1(("type_op: result value=%u is_type=%u type=%s\n", opnd1->value, opnd1->is_type, opnd1->type ? opnd1->type->name : "NULL" ));
; 1364 :     return( NOT_ERROR );
; 1365 : }

	mov	rbx, QWORD PTR [rsp+48]
	xor	eax, eax
	mov	rbp, QWORD PTR [rsp+56]
	mov	rsi, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
	npad	1
$LN44@type_op:
	DD	$LN8@type_op
	DD	$LN10@type_op
	DD	$LN9@type_op
	DD	$LN11@type_op
	DD	$LN40@type_op
	DD	$LN40@type_op
	DD	$LN8@type_op
	DD	$LN10@type_op
	DD	$LN9@type_op
	DD	$LN11@type_op
	DD	$LN40@type_op
	DD	$LN11@type_op
	DD	$LN40@type_op
	DD	$LN11@type_op
type_op	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
oper$ = 48
opnd1$ = 56
opnd2$ = 64
sym$ = 72
name$ = 80
sizlen_op PROC

; 1090 : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 32					; 00000020H

; 1091 :     opnd1->kind = EXPR_CONST;

	xor	edi, edi
	mov	rbx, rdx
	mov	DWORD PTR [rdx+60], edi

; 1092 : 
; 1093 :     DebugMsg1(("sizlen_op(%s): sym=%X, mbr=%X, type=>%s<\n", GetResWName( oper, NULL ),
; 1094 :                opnd2->sym, opnd2->mbr, opnd2->type ? opnd2->type->name : "NULL" ));
; 1095 : 
; 1096 :     if ( sym ) {

	lea	edx, QWORD PTR [rdi+1]
	test	r9, r9
	je	SHORT $LN7@sizlen_op

; 1097 :         if ( sym->state == SYM_STRUCT_FIELD || sym->state == SYM_STACK )

	mov	r10d, DWORD PTR [r9+32]
	lea	eax, DWORD PTR [r10-5]
	cmp	eax, edx
	jbe	SHORT $LN7@sizlen_op

; 1098 :             ;
; 1099 :         else if ( sym->state == SYM_UNDEFINED ) {

	test	r10d, r10d
	jne	SHORT $LN8@sizlen_op

; 1100 :             /* v2.10: forward references should have attributes EXPR_ADDR + sym.state=SYM_UNDEFINED */
; 1101 :             opnd1->kind = EXPR_ADDR;

	mov	DWORD PTR [rbx+60], edx

; 1102 :             opnd1->sym = sym;

	mov	QWORD PTR [rbx+80], r9
$LN7@sizlen_op:

; 1117 :         }
; 1118 :     }
; 1119 : 
; 1120 :     switch( oper ) {

	sub	ecx, 234				; 000000eaH
	je	$LN19@sizlen_op
	sub	ecx, edx
	je	$LN20@sizlen_op
	sub	ecx, 11
	je	$LN25@sizlen_op
	cmp	ecx, edx
	jne	$LN44@sizlen_op

; 1167 :         } else {
; 1168 :             opnd1->value = GetSizeValue( sym );
; 1169 :         }
; 1170 :         DebugMsg1(("sizlen_op(SIZE): result=%u [symbol %s, first_size=%u]\n", opnd1->value, sym ? sym->name : "NULL", sym ? sym->first_size : 0 ));
; 1171 :         break;
; 1172 :     case T_SIZEOF:
; 1173 : #ifdef DEBUG_OUT
; 1174 :         if (sym)
; 1175 :             DebugMsg1(("sizlen_op(sizeof): symbol %s, state=%u, size=%u\n", sym->name, sym->state, sym->total_size ));
; 1176 :         else if ( opnd2->is_type && opnd2->type )
; 1177 :             DebugMsg1(("sizlen_op(sizeof): symbol %s (TYPE), opnd2.value=%u\n", opnd2->type->name, opnd2->value ));
; 1178 :         else
; 1179 :             DebugMsg1(("sizlen_op(sizeof): symbol NULL, opnd2.value=%u\n", opnd2->value ));
; 1180 : #endif
; 1181 :         /* if sym is NULL, then operand is a type constant */
; 1182 :         if ( sym == NULL ) {

	test	r9, r9
	jne	$LN39@sizlen_op

; 1183 :             /* v2.06: default value of RECORD types is the mask! */
; 1184 :             if ( opnd2->is_type && opnd2->type && opnd2->type->typekind == TYPE_RECORD )

	test	BYTE PTR [r8+76], 8
	je	SHORT $LN41@sizlen_op
	mov	rax, QWORD PTR [r8+96]
	test	rax, rax
	je	SHORT $LN41@sizlen_op
	cmp	BYTE PTR [rax+66], 4
	jne	SHORT $LN41@sizlen_op

; 1185 :                 opnd1->value = opnd2->type->total_size;

	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN8@sizlen_op:
	lea	eax, DWORD PTR [r10-1]
	cmp	eax, edx
	ja	SHORT $LN10@sizlen_op

; 1103 :         } else if ( ( sym->state == SYM_EXTERNAL ||
; 1104 :                  sym->state == SYM_INTERNAL) &&
; 1105 :                  //sym->mem_type != MT_ABS &&
; 1106 :                  sym->mem_type != MT_EMPTY &&
; 1107 :                  //sym->mem_type != MT_PROC && /* MT_PROC probably obsolete */
; 1108 :                  sym->mem_type != MT_FAR &&

	mov	eax, DWORD PTR [r9+36]
	cmp	eax, 192				; 000000c0H
	je	SHORT $LN10@sizlen_op
	add	eax, -129				; ffffff7fH
	cmp	eax, edx
	ja	SHORT $LN7@sizlen_op
$LN10@sizlen_op:
	lea	eax, DWORD PTR [r10-3]
	cmp	eax, edx
	jbe	SHORT $LN15@sizlen_op

; 1109 :                  sym->mem_type != MT_NEAR )
; 1110 :             ;
; 1111 :         else if ( sym->state == SYM_GRP || sym->state == SYM_SEG ) {
; 1112 :             return( fnEmitErr( EXPECTED_DATA_LABEL ) );
; 1113 :         } else if ( oper == T_SIZE || oper == T_LENGTH )

	cmp	ecx, 246				; 000000f6H
	je	$LN7@sizlen_op
	cmp	ecx, 234				; 000000eaH
	je	$LN7@sizlen_op
$LN15@sizlen_op:

; 1114 :             ;
; 1115 :         else {
; 1116 :             return( fnEmitErr( EXPECTED_DATA_LABEL ) );

	mov	ecx, 232				; 000000e8H

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi

; 1114 :             ;
; 1115 :         else {
; 1116 :             return( fnEmitErr( EXPECTED_DATA_LABEL ) );

	rex_jmp	QWORD PTR fnEmitErr
$LN41@sizlen_op:

; 1186 :             else
; 1187 :                 opnd1->value = opnd2->value;

	mov	eax, DWORD PTR [r8]
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN39@sizlen_op:

; 1188 : #if 1 /* v2.05: don't use total_size for externals anymore! */
; 1189 :         } else if ( sym->state == SYM_EXTERNAL && sym->iscomm == FALSE ) {

	cmp	DWORD PTR [r9+32], 2
	jne	SHORT $LN43@sizlen_op
	test	BYTE PTR [r9+47], 4
	jne	SHORT $LN43@sizlen_op
$LN52@sizlen_op:

; 1190 :             opnd1->value = GetSizeValue( sym );

	mov	rcx, r9
$LN36@sizlen_op:
	call	GetSizeValue
$LN28@sizlen_op:
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN43@sizlen_op:

; 1191 :             //if ( sym->iscomm == TRUE )
; 1192 :             //    opnd1->value *= sym->total_length;
; 1193 : #endif
; 1194 :         } else
; 1195 :             opnd1->value = sym->total_size;

	mov	eax, DWORD PTR [r9+56]
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN25@sizlen_op:

; 1143 :         }
; 1144 :         break;
; 1145 :     case T_SIZE:
; 1146 :         /* v2.04: first_size is no longer set for SYM_STACK. */
; 1147 :         if( sym == NULL ) {

	test	r9, r9
	jne	SHORT $LN26@sizlen_op

; 1148 :             /* v2.09: check memtype */
; 1149 :             if ( ( opnd2->mem_type & MT_SPECIAL_MASK ) == MT_ADDRESS )

	mov	eax, DWORD PTR [r8+64]
	and	eax, 192				; 000000c0H
	cmp	al, -128				; ffffffffffffff80H

; 1150 :                 opnd1->value = 0xFF00 | opnd2->value;

	mov	eax, DWORD PTR [r8]
	jne	SHORT $LN28@sizlen_op
	or	eax, 65280				; 0000ff00H
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN26@sizlen_op:

; 1151 :             else
; 1152 :                 opnd1->value = opnd2->value;
; 1153 :         } else if ( sym->isdata ) {

	test	BYTE PTR [r9+41], 4
	je	SHORT $LN30@sizlen_op

; 1154 :             opnd1->value = sym->first_size;

	mov	eax, DWORD PTR [r9+44]
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN30@sizlen_op:

; 1155 : #if 0 /* v2.09: can't happen, since for a type, sym is NULL */
; 1156 :         } else if( sym->state == SYM_TYPE ) {
; 1157 :             opnd1->value = sym->total_size;
; 1158 : #endif
; 1159 :         } else if( sym->state == SYM_STACK ) {

	cmp	DWORD PTR [r9+32], 5
	je	SHORT $LN52@sizlen_op

; 1160 :             opnd1->value = GetSizeValue( sym );
; 1161 :         } else if( sym->mem_type == MT_NEAR ) {

	mov	eax, DWORD PTR [r9+36]

; 1162 :             /* v2.09: also handle 64-bit */
; 1163 :             //opnd1->value = GetSymOfssize( sym ) ? LS_NEAR32 : LS_NEAR16;
; 1164 :             opnd1->value = 0xFF00 | ( 2 << GetSymOfssize( sym ) );

	mov	rcx, r9
	cmp	eax, 129				; 00000081H
	jne	SHORT $LN34@sizlen_op
	call	GetSymOfssize
	mov	ecx, eax
	mov	eax, 2
	shl	eax, cl
	or	eax, 65280				; 0000ff00H
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN34@sizlen_op:

; 1165 :         } else if( sym->mem_type == MT_FAR ) {

	cmp	eax, 130				; 00000082H
	jne	$LN36@sizlen_op

; 1166 :             opnd1->value = GetSymOfssize( sym ) ? LS_FAR32 : LS_FAR16;

	call	GetSymOfssize
	test	eax, eax
	setne	dil
	add	edi, 65285				; 0000ff05H
	mov	DWORD PTR [rbx], edi

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN20@sizlen_op:

; 1128 :         break;
; 1129 :     case T_LENGTHOF:
; 1130 :         /* LENGTHOF needs either a data label or a structure field */
; 1131 :         /* a TYPE (structure, typedef) is invalid */
; 1132 :         if( opnd2->kind == EXPR_CONST ) {

	cmp	DWORD PTR [r8+60], edi
	jne	SHORT $LN21@sizlen_op

; 1133 :             opnd1->value = opnd2->mbr->total_length;

	mov	rax, QWORD PTR [r8+88]
	mov	ecx, DWORD PTR [rax+64]

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax
	mov	DWORD PTR [rbx], ecx

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN21@sizlen_op:

; 1134 : #if 0 /* v2.09: unnecessary */
; 1135 :         } else if( sym->state == SYM_UNDEFINED && Parse_Pass == PASS_1 ) {
; 1136 :             opnd1->value = sym->total_length;
; 1137 : #endif
; 1138 :         } else if ( sym->state == SYM_EXTERNAL && sym->iscomm == FALSE ) {

	cmp	DWORD PTR [r9+32], 2
	jne	SHORT $LN23@sizlen_op
	test	BYTE PTR [r9+47], 4
	je	SHORT $LN46@sizlen_op
$LN23@sizlen_op:

; 1139 :             /* for externals other than COMM, total_length field is used otherwise */
; 1140 :             opnd1->value = 1;
; 1141 :         } else {
; 1142 :             opnd1->value = sym->total_length;

	mov	eax, DWORD PTR [r9+64]
	mov	DWORD PTR [rbx], eax

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN19@sizlen_op:

; 1121 :     case T_LENGTH:
; 1122 :         /* data items and struct fields have a "first" count.
; 1123 :          * for procedure locals (+arguments) and code labels, always 1 is returned.
; 1124 :          */
; 1125 :         /* v2.09: first_length is valid if isdata is set */
; 1126 :         //opnd1->value = ( sym->state != SYM_STACK && sym->isarray ) ? sym->first_length : 1;
; 1127 :         opnd1->value = sym->isdata ? sym->first_length : 1;

	test	BYTE PTR [r9+41], 4
	je	SHORT $LN46@sizlen_op
	mov	edx, DWORD PTR [r9+48]
$LN46@sizlen_op:
	mov	DWORD PTR [rbx], edx
$LN44@sizlen_op:

; 1196 :         break;
; 1197 :     }
; 1198 :     return( NOT_ERROR );

	xor	eax, eax

; 1199 : }

	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
sizlen_op ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT invalid_operand
_TEXT	SEGMENT
opnd$ = 48
oprtr$ = 56
operand$ = 64
invalid_operand PROC					; COMDAT

; 1070 : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 1071 :     if ( !opnd->is_opattr )

	test	BYTE PTR [rcx+76], 16
	mov	rbx, r8
	jne	SHORT $LN4@invalid_op

; 1072 :         fnEmitErr( INVALID_OPERAND_FOR_OPERATOR, _strupr( oprtr), operand );

	mov	rcx, rdx
	call	_strupr
	mov	rdx, rax
	mov	r8, rbx
	mov	ecx, 228				; 000000e4H
	call	QWORD PTR fnEmitErr
$LN4@invalid_op:

; 1073 :     return( ERROR );

	or	eax, -1

; 1074 : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
invalid_operand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT IsOffset
_TEXT	SEGMENT
opnd$ = 8
IsOffset PROC						; COMDAT

; 1055 :     if ( opnd->mem_type == MT_EMPTY )

	cmp	DWORD PTR [rcx+64], 192			; 000000c0H
	jne	SHORT $LN3@IsOffset
	mov	eax, DWORD PTR [rcx+56]
	add	eax, -233				; ffffffffffffff17H
	cmp	eax, 10
	ja	SHORT $LN3@IsOffset
	mov	ecx, 1345				; 00000541H
	bt	ecx, eax
	jae	SHORT $LN3@IsOffset

; 1056 :         if ( opnd->instr == T_OFFSET ||
; 1057 : #if IMAGERELSUPP
; 1058 :             opnd->instr == T_IMAGEREL ||
; 1059 : #endif
; 1060 : #if SECTIONRELSUPP
; 1061 :             opnd->instr == T_SECTIONREL ||
; 1062 : #endif
; 1063 :             opnd->instr == T_LROFFSET )
; 1064 :             return( 1 );

	mov	eax, 1

; 1066 : }

	ret	0
$LN3@IsOffset:

; 1065 :     return( 0 );

	xor	eax, eax

; 1066 : }

	ret	0
IsOffset ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT GetSizeValue
_TEXT	SEGMENT
sym$ = 8
GetSizeValue PROC					; COMDAT

; 1046 : {

	mov	r8, rcx

; 1047 :     if ( sym->mem_type == MT_PTR )

	mov	ecx, DWORD PTR [rcx+36]

; 1048 :         return( SizeFromMemtype( sym->isfar ? MT_FAR : MT_NEAR, sym->Ofssize, sym->type ) );

	movzx	edx, BYTE PTR [r8+44]
	cmp	ecx, 195				; 000000c3H
	jne	SHORT $LN2@GetSizeVal
	test	BYTE PTR [r8+47], 16
	mov	ecx, 0
	setne	cl
	add	ecx, 129				; 00000081H
$LN2@GetSizeVal:

; 1049 :     return( SizeFromMemtype( sym->mem_type, sym->Ofssize, sym->type ) );

	mov	r8, QWORD PTR [r8+80]
	jmp	SizeFromMemtype
GetSizeValue ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT check_direct_reg
_TEXT	SEGMENT
opnd1$ = 8
opnd2$ = 16
check_direct_reg PROC					; COMDAT

; 1037 :     if( ( opnd1->kind == EXPR_REG ) && ( opnd1->indirect == FALSE )
; 1038 :         || ( opnd2->kind == EXPR_REG ) && ( opnd2->indirect == FALSE ) ) {

	cmp	DWORD PTR [rcx+60], 2
	jne	SHORT $LN4@check_dire
	test	BYTE PTR [rcx+76], 1
	je	SHORT $LN3@check_dire
$LN4@check_dire:
	cmp	DWORD PTR [rdx+60], 2
	jne	SHORT $LN2@check_dire
	test	BYTE PTR [rdx+76], 1
	jne	SHORT $LN2@check_dire
$LN3@check_dire:

; 1039 :         return( ERROR );

	or	eax, -1

; 1042 : }

	ret	0
$LN2@check_dire:

; 1040 :     }
; 1041 :     return( NOT_ERROR );

	xor	eax, eax

; 1042 : }

	ret	0
check_direct_reg ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT fix_struct_value
_TEXT	SEGMENT
opnd$ = 8
fix_struct_value PROC					; COMDAT

; 1028 :     if( opnd->mbr && ( opnd->mbr->state == SYM_TYPE ) ) {

	mov	rax, QWORD PTR [rcx+88]
	test	rax, rax
	je	SHORT $LN2@fix_struct
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN2@fix_struct

; 1029 :         opnd->value += opnd->mbr->total_size;

	mov	eax, DWORD PTR [rax+56]
	add	DWORD PTR [rcx], eax

; 1030 :         opnd->mbr = NULL;

	mov	QWORD PTR [rcx+88], 0
$LN2@fix_struct:

; 1031 :     }
; 1032 : }

	ret	0
fix_struct_value ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT ConstError
_TEXT	SEGMENT
opnd1$ = 48
opnd2$ = 56
ConstError PROC						; COMDAT

; 1013 : {

	sub	rsp, 40					; 00000028H

; 1014 :     if ( opnd1->is_opattr )

	test	BYTE PTR [rcx+76], 16
	je	SHORT $LN2@ConstError

; 1015 :         return( NOT_ERROR );

	xor	eax, eax

; 1021 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@ConstError:

; 1016 :     if ( opnd1->kind == EXPR_FLOAT || opnd2->kind == EXPR_FLOAT )

	cmp	DWORD PTR [rcx+60], 3
	je	SHORT $LN5@ConstError
	cmp	DWORD PTR [rdx+60], 3

; 1018 :     else
; 1019 :         fnEmitErr( CONSTANT_EXPECTED );

	mov	ecx, 65					; 00000041H
	jne	SHORT $LN7@ConstError
$LN5@ConstError:

; 1017 :         fnEmitErr( REAL_OR_BCD_NUMBER_NOT_ALLOWED );

	mov	ecx, 270				; 0000010eH
$LN7@ConstError:
	call	QWORD PTR fnEmitErr

; 1020 :     return( ERROR );

	or	eax, -1

; 1021 : }

	add	rsp, 40					; 00000028H
	ret	0
ConstError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT MakeConst2
_TEXT	SEGMENT
opnd1$ = 8
opnd2$ = 16
MakeConst2 PROC						; COMDAT

; 993  : {

	mov	r8, rdx
	mov	r9, rcx

; 994  : 
; 995  :     if ( opnd1->sym->state == SYM_EXTERNAL ) {

	mov	rdx, QWORD PTR [rcx+80]
	mov	r10d, DWORD PTR [rdx+32]
	cmp	r10d, 2
	jne	SHORT $LN2@MakeConst2

; 996  :         return( fnEmitErr( INVALID_USE_OF_EXTERNAL_SYMBOL, opnd1->sym->name ) );

	mov	rdx, QWORD PTR [rdx+8]
	mov	ecx, 193				; 000000c1H
	rex_jmp	QWORD PTR fnEmitErr
$LN2@MakeConst2:

; 997  :     } else if ( ( opnd1->sym->segment != opnd2->sym->segment &&
; 998  :                  /* v2.07: ignore segments if at least one label is a fwd ref */
; 999  :                  opnd1->sym->state != SYM_UNDEFINED &&
; 1000 :                  opnd2->sym->state != SYM_UNDEFINED ) ||

	mov	rcx, QWORD PTR [r8+80]
	mov	rax, QWORD PTR [rcx+24]
	cmp	QWORD PTR [rdx+24], rax
	je	SHORT $LN6@MakeConst2
	test	r10d, r10d
	je	SHORT $LN6@MakeConst2
	cmp	DWORD PTR [rcx+32], 0
	jne	SHORT $LN5@MakeConst2
$LN6@MakeConst2:
	cmp	DWORD PTR [rcx+32], 2
	jne	SHORT $LN4@MakeConst2
$LN5@MakeConst2:

; 1001 :                opnd2->sym->state == SYM_EXTERNAL ) {
; 1002 :         return( fnEmitErr( OPERANDS_MUST_BE_IN_SAME_SEGMENT ) );

	mov	ecx, 192				; 000000c0H
	rex_jmp	QWORD PTR fnEmitErr
$LN4@MakeConst2:

; 1003 :     }
; 1004 :     opnd1->kind = EXPR_CONST;

	xor	ecx, ecx
	mov	DWORD PTR [r9+60], ecx

; 1005 :     opnd1->value += opnd1->sym->offset;

	mov	eax, DWORD PTR [rdx+16]
	add	DWORD PTR [r9], eax

; 1006 :     opnd2->kind = EXPR_CONST;
; 1007 :     opnd2->value += opnd2->sym->offset;

	mov	rax, QWORD PTR [r8+80]
	mov	DWORD PTR [r8+60], ecx
	mov	ecx, DWORD PTR [rax+16]
	add	DWORD PTR [r8], ecx

; 1008 :     return( NOT_ERROR );

	xor	eax, eax

; 1009 : }

	ret	0
MakeConst2 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT MakeConst
_TEXT	SEGMENT
opnd$ = 8
MakeConst PROC						; COMDAT

; 940  :     if( ( opnd->kind != EXPR_ADDR ) || opnd->indirect ) /* v2.09: check for indirect added */

	cmp	DWORD PTR [rcx+60], 1
	jne	SHORT $LN3@MakeConst
	mov	eax, DWORD PTR [rcx+76]
	test	al, 1
	jne	SHORT $LN3@MakeConst

; 941  :         return;
; 942  : 
; 943  :     if( opnd->sym ) {

	mov	rdx, QWORD PTR [rcx+80]
	test	rdx, rdx
	je	SHORT $LN4@MakeConst

; 944  :         if ( Parse_Pass > PASS_1 )

	cmp	DWORD PTR Parse_Pass, 0
	ja	SHORT $LN3@MakeConst

; 945  :             return;
; 946  :         /* added for v1.94: if the evaluator assumed an address because
; 947  :          * the label wasn't defined yet, then negate this. Also, an
; 948  :          * EXTERNDEF:ABS is to be accepted.
; 949  :          * v2.07: if the "not yet defined" label was an argument of
; 950  :          * an (OFFSET) operator, do NOT change the type!
; 951  :          */
; 952  :         if ( ( opnd->sym->state == SYM_UNDEFINED && opnd->instr == EMPTY ) ||

	mov	r8d, DWORD PTR [rdx+32]
	test	r8d, r8d
	jne	SHORT $LN9@MakeConst
	cmp	DWORD PTR [rcx+56], -2
	je	SHORT $LN8@MakeConst
$LN9@MakeConst:
	cmp	r8d, 2
	jne	SHORT $LN3@MakeConst
	test	BYTE PTR [rdx+47], 8
	je	SHORT $LN3@MakeConst
	test	al, 4
	je	SHORT $LN3@MakeConst
$LN8@MakeConst:

; 953  :             ( opnd->sym->state == SYM_EXTERNAL && opnd->sym->weak == TRUE && opnd->is_abs == TRUE ) )
; 954  :             ;
; 955  :         else
; 956  :             return;
; 957  :         /* assume a value != 0 to avoid problems with div */
; 958  :         opnd->value = 1;

	mov	DWORD PTR [rcx], 1
$LN4@MakeConst:

; 959  :     }
; 960  : 
; 961  :     opnd->label_tok = NULL;
; 962  :     if( opnd->mbr != NULL ) {

	mov	rdx, QWORD PTR [rcx+88]
	xor	r8d, r8d
	mov	QWORD PTR [rcx+40], r8
	test	rdx, rdx
	je	SHORT $LN12@MakeConst

; 963  :         if( opnd->mbr->state == SYM_STRUCT_FIELD ) {

	cmp	DWORD PTR [rdx+32], 6
	jne	SHORT $LN3@MakeConst
$LN12@MakeConst:

; 964  : #if 0 /* v2.09: mbr can only be SYM_STRUCT_FIELD or SYM_UNDEFINED (if nullmbr) */
; 965  :         } else if( opnd->mbr->state == SYM_TYPE ) {
; 966  :             opnd->value += opnd->mbr->total_size;
; 967  :             opnd->mbr = NULL;
; 968  : #endif
; 969  :         } else {
; 970  :             return;
; 971  :         }
; 972  :     }
; 973  : #if 0 /* v2.09: obsolete */
; 974  :     if( opnd->base_reg != NULL )
; 975  :         return;
; 976  :     if( opnd->idx_reg  != NULL )
; 977  :         return;
; 978  : #endif
; 979  :     if( opnd->override != NULL )

	cmp	QWORD PTR [rcx+48], r8
	jne	SHORT $LN3@MakeConst

; 980  :         return;
; 981  :     opnd->instr = EMPTY;
; 982  :     opnd->kind = EXPR_CONST;
; 983  :     //opnd->indirect = FALSE; /* not needed */
; 984  :     opnd->explicit = FALSE;

	and	eax, -3					; fffffffdH
	mov	DWORD PTR [rcx+56], -2
	mov	DWORD PTR [rcx+76], eax
	mov	DWORD PTR [rcx+60], r8d

; 985  :     opnd->mem_type = MT_EMPTY;

	mov	DWORD PTR [rcx+64], 192			; 000000c0H
$LN3@MakeConst:

; 986  : }

	ret	0
MakeConst ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT index_connect
_TEXT	SEGMENT
opnd1$ = 8
opnd2$ = 16
index_connect PROC					; COMDAT

; 895  :     /* move opnd2.base to either opnd1.base or opnd1.idx */
; 896  :     if ( opnd2->base_reg != NULL ) {

	mov	rax, QWORD PTR [rdx+24]
	test	rax, rax
	je	SHORT $LN2@index_conn

; 897  :         if ( opnd1->base_reg == NULL )

	mov	r8, QWORD PTR [rcx+24]
	test	r8, r8
	jne	SHORT $LN3@index_conn

; 898  :             opnd1->base_reg = opnd2->base_reg;

	mov	QWORD PTR [rcx+24], rax
	jmp	SHORT $LN8@index_conn
$LN3@index_conn:

; 899  :         else if ( opnd1->idx_reg == NULL ) {

	cmp	QWORD PTR [rcx+32], 0
	jne	SHORT $LN5@index_conn

; 900  :             /* v2.10: exchange base and index register.
; 901  :              * was previously in parser.c, and only done
; 902  :              * if -Zg was active.
; 903  :              */
; 904  :             if ( opnd1->base_reg->bytval != 4 ) {   /* if base isn't [E|R]SP, exchange regs */

	cmp	BYTE PTR [r8+1], 4
	je	SHORT $LN7@index_conn

; 905  :                 opnd1->idx_reg = opnd1->base_reg;

	mov	QWORD PTR [rcx+32], r8

; 906  :                 opnd1->base_reg = opnd2->base_reg;

	mov	rax, QWORD PTR [rdx+24]
	mov	QWORD PTR [rcx+24], rax

; 907  :             } else {

	jmp	SHORT $LN8@index_conn
$LN7@index_conn:

; 908  :                 opnd1->idx_reg = opnd2->base_reg;

	mov	QWORD PTR [rcx+32], rax
$LN8@index_conn:

; 912  :         }
; 913  :         opnd1->indirect = TRUE;

	or	DWORD PTR [rcx+76], 1
$LN2@index_conn:

; 914  :     }
; 915  :     /* move opnd2.idx to opnd1.index - if it is free */
; 916  :     if( opnd2->idx_reg != NULL ) {

	mov	rax, QWORD PTR [rdx+32]
	test	rax, rax
	je	SHORT $LN9@index_conn

; 917  :         //if ( opnd2->scale == 0 && opnd1->base_reg == NULL ) {
; 918  :         //    opnd1->base_reg = opnd2->idx_reg;
; 919  :         //} else if ( opnd1->idx_reg == NULL ) {
; 920  :         if ( opnd1->idx_reg == NULL ) {

	cmp	QWORD PTR [rcx+32], 0
	jne	SHORT $LN5@index_conn

; 921  :             opnd1->idx_reg = opnd2->idx_reg;

	mov	QWORD PTR [rcx+32], rax

; 922  :             opnd1->scale = opnd2->scale;

	movzx	eax, BYTE PTR [rdx+68]

; 923  :         } else {
; 924  :             return( fnEmitErr( MULTIPLE_INDEX_REGISTERS_NOT_ALLOWED ) );
; 925  :         }
; 926  :         opnd1->indirect = TRUE;

	or	DWORD PTR [rcx+76], 1
	mov	BYTE PTR [rcx+68], al
$LN9@index_conn:

; 927  :     }
; 928  :     return( NOT_ERROR );

	xor	eax, eax

; 929  : }

	ret	0
$LN5@index_conn:

; 909  :             }
; 910  :         } else {
; 911  :             return( fnEmitErr( MULTIPLE_INDEX_REGISTERS_NOT_ALLOWED ) );

	mov	ecx, 34					; 00000022H
	rex_jmp	QWORD PTR fnEmitErr
index_connect ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT check_both
_TEXT	SEGMENT
opnd1$ = 8
opnd2$ = 16
type1$ = 24
type2$ = 32
check_both PROC						; COMDAT

; 884  :     if( opnd1->kind == type1 && opnd2->kind == type2 )

	mov	eax, DWORD PTR [rcx+60]
	cmp	eax, r8d
	jne	SHORT $LN2@check_both
	cmp	DWORD PTR [rdx+60], r9d
	jne	SHORT $LN2@check_both
$LN5@check_both:

; 885  :         return( TRUE );

	mov	al, 1

; 889  : }

	ret	0
$LN2@check_both:

; 886  :     if( opnd1->kind == type2 && opnd2->kind == type1 )

	cmp	eax, r9d
	jne	SHORT $LN3@check_both
	cmp	DWORD PTR [rdx+60], r8d
	je	SHORT $LN5@check_both
$LN3@check_both:

; 887  :         return( TRUE );
; 888  :     return( FALSE );

	xor	al, al

; 889  : }

	ret	0
check_both ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT get_operand
_TEXT	SEGMENT
labelbuff$ = 32
opnd$ = 96
idx$ = 104
tokenarray$ = 112
flags$ = 120
get_operand PROC					; COMDAT

; 381  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 382  :     char        *tmp;
; 383  :     struct asym *sym;
; 384  :     int         i = *idx;
; 385  :     int         j;
; 386  :     char        labelbuff[16];/* for anonymous labels */
; 387  : 
; 388  :     DebugMsg1(("%u get_operand(idx=%u >%s<) enter [memtype=%Xh]\n", evallvl, i, tokenarray[i].tokpos, opnd->mem_type ));
; 389  :     switch( tokenarray[i].token ) {

	movsxd	r14, DWORD PTR [rdx]
	mov	rdi, rcx
	mov	rsi, r14
	movzx	r15d, r9b
	shl	rsi, 5
	mov	rbp, r8
	add	rsi, r8
	mov	r12, rdx
	movzx	ecx, BYTE PTR [rsi]
	lea	eax, DWORD PTR [rcx-2]
	cmp	eax, 9
	ja	$LN117@get_operan
	cdqe
	lea	r13, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN159@get_operan[r13+rax*4]
	add	rax, r13
	jmp	rax
$LN18@get_operan:

; 390  :     case T_NUM:
; 391  :         DebugMsg1(("%u get_operand: T_NUM, %s, base=%u, len=%u\n", evallvl, tokenarray[i].string_ptr, tokenarray[i].numbase, tokenarray[i].itemlen ));
; 392  :         opnd->kind = EXPR_CONST;

	xor	r14d, r14d

; 393  :         myatoi128( tokenarray[i].string_ptr, &opnd->llvalue, tokenarray[i].numbase, tokenarray[i].itemlen );

	mov	rdx, rdi
	mov	DWORD PTR [rdi+60], r14d
	movsx	r8d, BYTE PTR [rsi+1]
	mov	r9d, DWORD PTR [rsi+16]
	mov	rcx, QWORD PTR [rsi+8]
	call	myatoi128

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN19@get_operan:

; 394  :         //opnd->llvalue = tokenarray[i].value64;
; 395  :         //opnd->hlvalue = ( tokenarray[i].numflg == NF_NULL ? 0 : *(uint_64 *)( tokenarray[i].string_ptr - sizeof(uint_64) ) );
; 396  :         break;
; 397  :     case T_STRING:
; 398  :         DebugMsg1(("%u get_operand: T_STRING, %s, size=%u\n", evallvl, tokenarray[i].string_ptr, tokenarray[i].stringlen ));
; 399  :         /* string enclosed in <> or {} are rejected since v1.94! */
; 400  :         if ( tokenarray[i].string_delim != '"' && tokenarray[i].string_delim != '\'') {

	movzx	ecx, BYTE PTR [rsi+1]
	cmp	cl, 34					; 00000022H
	je	$LN20@get_operan
	cmp	cl, 39					; 00000027H
	je	$LN20@get_operan

; 401  :             /* here is handled EVEX Static Rounding Mode
; 402  :              * {sae},   {rn-sae},{rd-sae},{ru-sae} {rz-sae} 
; 403  :              * ZLLBVAAA ZLLBVAAA ZLLBVAAA ZLLBVAAA ZLLBVAAA
; 404  :              * 00010000 00010000 00110000 01010000 01110000
; 405  :              * to destinguish between SAE and RN  I added 0x10 
; 406  :              * to all 4 other decorators
; 407  :              * which will be subtracted in codegen.c 
; 408  :             */
; 409  :             if ((tokenarray[i].string_delim == '{')&&

	cmp	cl, 123					; 0000007bH
	jne	$LN29@get_operan
	mov	rdx, QWORD PTR [rsi+8]
	mov	eax, DWORD PTR [rdx]
	cmp	eax, DWORD PTR $SG11079
	jne	SHORT $LN21@get_operan
	movzx	eax, WORD PTR [rdx+4]
	cmp	ax, WORD PTR $SG11079+4
	jne	SHORT $LN21@get_operan

; 410  :               (0 == memcmp(tokenarray[i].string_ptr, "rn-sae", 6))){
; 411  :                 opnd->kind = EXPR_DECORATOR;

	mov	DWORD PTR [rdi+60], 4

; 412  :                 opnd->saeflags = 0x20;

	mov	BYTE PTR [rdi+70], 32			; 00000020H

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN21@get_operan:

; 413  :                 break;
; 414  :               }
; 415  :             else if ((tokenarray[i].string_delim == '{')&&

	cmp	cl, 123					; 0000007bH
	jne	$LN29@get_operan
	mov	rdx, QWORD PTR [rsi+8]
	mov	eax, DWORD PTR [rdx]
	cmp	eax, DWORD PTR $SG11082
	jne	SHORT $LN23@get_operan
	movzx	eax, WORD PTR [rdx+4]
	cmp	ax, WORD PTR $SG11082+4
	jne	SHORT $LN23@get_operan

; 416  :                 (0 == memcmp(tokenarray[i].string_ptr, "rd-sae", 6))){
; 417  :                 opnd->kind = EXPR_DECORATOR;

	mov	DWORD PTR [rdi+60], 4

; 418  :                 opnd->saeflags = 0x40;

	mov	BYTE PTR [rdi+70], 64			; 00000040H

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN23@get_operan:

; 419  :                 break;
; 420  :               }
; 421  :             else if ((tokenarray[i].string_delim == '{')&&

	cmp	cl, 123					; 0000007bH
	jne	$LN29@get_operan
	mov	rdx, QWORD PTR [rsi+8]
	mov	eax, DWORD PTR [rdx]
	cmp	eax, DWORD PTR $SG11085
	jne	SHORT $LN25@get_operan
	movzx	eax, WORD PTR [rdx+4]
	cmp	ax, WORD PTR $SG11085+4
	jne	SHORT $LN25@get_operan

; 422  :                 (0 == memcmp(tokenarray[i].string_ptr, "ru-sae", 6))){
; 423  :                 opnd->kind = EXPR_DECORATOR;

	mov	DWORD PTR [rdi+60], 4

; 424  :                 opnd->saeflags = 0x60;

	mov	BYTE PTR [rdi+70], 96			; 00000060H

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN25@get_operan:

; 425  :                 break;
; 426  :               }
; 427  :             else if ((tokenarray[i].string_delim == '{')&&

	cmp	cl, 123					; 0000007bH
	jne	SHORT $LN29@get_operan
	mov	rdx, QWORD PTR [rsi+8]
	mov	eax, DWORD PTR [rdx]
	cmp	eax, DWORD PTR $SG11088
	jne	SHORT $LN27@get_operan
	movzx	eax, WORD PTR [rdx+4]
	cmp	ax, WORD PTR $SG11088+4
	jne	SHORT $LN27@get_operan

; 428  :                 (0 == memcmp(tokenarray[i].string_ptr, "rz-sae", 6))){
; 429  :                 opnd->kind = EXPR_DECORATOR;

	mov	DWORD PTR [rdi+60], 4

; 430  :                 opnd->saeflags = 0x80;

	mov	BYTE PTR [rdi+70], 128			; 00000080H

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN27@get_operan:

; 431  :                 break;
; 432  :               }
; 433  :             else if ((tokenarray[i].string_delim == '{')&&

	cmp	cl, 123					; 0000007bH
	jne	SHORT $LN29@get_operan
	mov	rdx, QWORD PTR [rsi+8]
	movzx	eax, WORD PTR [rdx]
	cmp	ax, WORD PTR $SG11091
	jne	SHORT $LN29@get_operan
	movzx	eax, BYTE PTR [rdx+2]
	cmp	al, BYTE PTR $SG11091+2
	jne	SHORT $LN29@get_operan

; 434  :                 (0 == memcmp(tokenarray[i].string_ptr, "sae", 3))){
; 435  :                 opnd->kind = EXPR_DECORATOR;

	mov	DWORD PTR [rdi+60], 4

; 436  :                 opnd->saeflags = 0x10;

	mov	BYTE PTR [rdi+70], 16

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN29@get_operan:

; 437  :                 break;
; 438  :             }
; 439  :             else if ( opnd->is_opattr ) /* OPATTR operator accepts anything! */

	test	BYTE PTR [rdi+76], 16
	jne	$LN119@get_operan

; 440  :                 break;
; 441  :                 /* v2.0: display a comprehensible error msg if a quote is missing */
; 442  :             if ( tokenarray[i].string_delim == NULLC &&

	test	cl, cl
	jne	SHORT $LN32@get_operan
	mov	rax, QWORD PTR [rsi+8]
	movzx	ecx, BYTE PTR [rax]
	cmp	cl, 34					; 00000022H
	je	SHORT $LN34@get_operan
	cmp	cl, 39					; 00000027H
	jne	SHORT $LN32@get_operan
$LN34@get_operan:

; 443  :                 ( *tokenarray[i].string_ptr == '"' || *tokenarray[i].string_ptr == '\'' ))
; 444  :                 fnEmitErr( MISSING_QUOTATION_MARK_IN_STRING );

	mov	ecx, 166				; 000000a6H
	call	QWORD PTR fnEmitErr
	jmp	$LN126@get_operan
$LN32@get_operan:

; 445  :             else
; 446  :                 fnEmitErr( MISSING_QUOTATION_MARK_IN_STRING, tokenarray[i].tokpos );

	mov	ecx, 166				; 000000a6H

; 447  :             return( ERROR );

	jmp	$LN164@get_operan
$LN20@get_operan:

; 448  :         }
; 449  :         opnd->kind = EXPR_CONST;

	xor	r14d, r14d

; 450  :         opnd->quoted_string = &tokenarray[i];

	mov	QWORD PTR [rdi+16], rsi

; 451  :         //opnd->value = 0;
; 452  :         tmp = tokenarray[i].string_ptr + 1; /* skip the quote */
; 453  : 
; 454  :         /* v2.06: use max. 16 bytes to create the "value".
; 455  :          * Prior to 2.06, max 8 bytes were used for 64-bit and
; 456  :          * max 4 bytes were used for 16-/32-bit.
; 457  :          */
; 458  :         j = ( tokenarray[i].stringlen > sizeof( opnd->chararray ) ? sizeof( opnd->chararray ) : tokenarray[i].stringlen );

	mov	edx, 16
	mov	DWORD PTR [rdi+60], r14d
	mov	eax, DWORD PTR [rsi+16]
	mov	rcx, QWORD PTR [rsi+8]
	inc	rcx
	cmp	eax, edx
	cmova	eax, edx
	movsxd	rdx, eax

; 459  :         for( ; j; j-- )

	test	eax, eax
	je	$LN119@get_operan
	npad	10
$LL6@get_operan:

; 460  :             opnd->chararray[j-1] = *tmp++;

	movzx	eax, BYTE PTR [rcx]
	lea	rcx, QWORD PTR [rcx+1]
	mov	BYTE PTR [rdi+rdx-1], al
	sub	rdx, 1
	jne	SHORT $LL6@get_operan

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN35@get_operan:

; 461  :         break;
; 462  :     case T_REG:
; 463  :         DebugMsg1(( "%u get_operand: T_REG, string=%s, tokval=%u, regno=%u\n", evallvl, tokenarray[i].string_ptr, tokenarray[i].tokval, tokenarray[i].bytval ));        
; 464  :         opnd->kind = EXPR_REG;

	mov	DWORD PTR [rdi+60], 2

; 465  :         opnd->base_reg = &tokenarray[i];
; 466  :         j = tokenarray[i].tokval;
; 467  :         
; 468  :         /* check if cpu is sufficient for register */
; 469  :         if( ( ( GetCpuSp( j ) & P_EXT_MASK ) &&
; 470  :              (( GetCpuSp( j ) & ModuleInfo.curr_cpu & P_EXT_MASK) == 0) ||

	mov	r8d, 65280				; 0000ff00H
	mov	QWORD PTR [rdi+24], rsi
	movsxd	rax, DWORD PTR [rsi+16]
	mov	edx, DWORD PTR ModuleInfo+392
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rbx, QWORD PTR [rcx*4]
	movzx	ecx, WORD PTR SpecialTable[rbx+r13+8]
	test	cx, r8w
	je	SHORT $LN38@get_operan
	mov	eax, ecx
	and	eax, r8d
	test	eax, edx
	je	SHORT $LN37@get_operan
$LN38@get_operan:
	and	ecx, 240				; 000000f0H
	and	edx, 240				; 000000f0H
	cmp	edx, ecx
	jge	SHORT $LN40@get_operan
$LN37@get_operan:

; 471  :              ( ModuleInfo.curr_cpu & P_CPU_MASK ) < ( GetCpuSp( j ) & P_CPU_MASK ) ) ) {
; 472  :             /* v2.11: do not exit in indirect mode; avoids additional syntax error caused by ']' */
; 473  :             if ( flags & EXPF_IN_SQBR ) {
; 474  :                 opnd->kind = EXPR_ERROR;
; 475  :                 fnEmitErr( INSTRUCTION_OR_REGISTER_NOT_ACCEPTED_IN_CURRENT_CPU_MODE );

	mov	ecx, 30
	test	r15b, 8
	je	SHORT $LN39@get_operan
	mov	DWORD PTR [rdi+60], -1
	call	QWORD PTR fnEmitErr
$LN40@get_operan:

; 476  :             } else
; 477  :                 return( fnEmitErr( INSTRUCTION_OR_REGISTER_NOT_ACCEPTED_IN_CURRENT_CPU_MODE ) );
; 478  :         }
; 479  : 
; 480  :         if( flags & EXPF_IN_SQBR ) {

	test	r15b, 8
	je	$LN119@get_operan

; 481  :             /* a valid index register? */
; 482  :             if ( GetSflagsSp( j ) & SFR_IREG ) {

	test	BYTE PTR SpecialTable[rbx+r13+4], 32	; 00000020H
	je	SHORT $LN42@get_operan

; 483  :                 opnd->indirect = TRUE;
; 484  :                 opnd->assumecheck = TRUE;

	or	DWORD PTR [rdi+76], 65			; 00000041H

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN42@get_operan:

; 485  :             } else if ( GetValueSp( j ) & OP_SR ) {

	test	DWORD PTR SpecialTable[rbx+r13], 24576	; 00006000H
	je	SHORT $LN44@get_operan

; 486  :                 /* a segment register inside square brackets is only
; 487  :                  * accepted by Masm if it is the segment part of an
; 488  :                  * address (mov ax,[bx+cs:label])!
; 489  :                  */
; 490  :                 /* v2.10: check moved here avain. regression v2.08-2.09, where
; 491  :                  * it was in colon_op(). see regression test OVERRID3.ASC.
; 492  :                  */
; 493  :                 //if( tokenarray[i+1].token != T_COLON ) {
; 494  :                 if( tokenarray[i+1].token != T_COLON ||

	cmp	BYTE PTR [rsi+32], 58			; 0000003aH
	jne	SHORT $LN47@get_operan
	cmp	BYTE PTR Options+127, 0
	je	$LN119@get_operan
	lea	rax, QWORD PTR [r14+2]
	shl	rax, 5
	cmp	BYTE PTR [rax+rbp], 2
	jne	$LN119@get_operan
$LN47@get_operan:

; 495  :                    ( Options.strict_masm_compat && tokenarray[i+2].token == T_REG ) ) {
; 496  :                     return( fnEmitErr( INVALID_USE_OF_REGISTER ) );

	mov	ecx, 170				; 000000aaH
$LN39@get_operan:
	call	QWORD PTR fnEmitErr
	jmp	$LN1@get_operan
$LN44@get_operan:

; 497  :                 }
; 498  :             } else {
; 499  :                 if ( opnd->is_opattr ) /* v2.11: just set error for opattr */

	mov	eax, DWORD PTR [rdi+76]
	test	al, 16
	jne	$LN168@get_operan

; 500  :                     opnd->kind = EXPR_ERROR;
; 501  :                 else
; 502  :                   opnd->indirect = TRUE;

	or	eax, 1
	mov	DWORD PTR [rdi+76], eax

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN50@get_operan:

; 503  :                     //return( fnEmitErr( MUST_BE_INDEX_OR_BASE_REGISTER ) );
; 504  :             }
; 505  :         }
; 506  :         break;
; 507  :     case T_ID:
; 508  :         tmp = tokenarray[i].string_ptr;

	mov	rbp, QWORD PTR [rsi+8]

; 509  :         //if ( opnd->type ) { /* v2.11 */
; 510  :         if ( opnd->is_dot ) {

	xor	r14d, r14d
	test	BYTE PTR [rdi+76], 128			; 00000080H
	je	$LN51@get_operan

; 511  :             DebugMsg1(("%u get_operand: T_ID, is_dot=1, id=%s, opnd.type=%s\n", evallvl, tokenarray[i].string_ptr, opnd->type ? opnd->type->name : "NULL" ));
; 512  :             //__debugbreak();
; 513  :             opnd->value = 0;
; 514  :             sym = ( opnd->type ? SearchNameInStruct( opnd->type, tmp, &opnd->uvalue, 0 ) : NULL );

	mov	rcx, QWORD PTR [rdi+96]
	mov	DWORD PTR [rdi], r14d
	test	rcx, rcx
	je	SHORT $LN153@get_operan
	xor	r9d, r9d
	mov	r8, rdi
	mov	rdx, rbp
	call	SearchNameInStruct
	mov	rbx, rax

; 515  :             DebugMsg1(("get_operand(%s): is_dot, sym=%s, offset=%" I32_SPEC "Xh\n",
; 516  :                        tmp, sym ? sym->name : "NULL", opnd->uvalue ));
; 517  :             if ( sym == NULL ) {

	test	rax, rax
	jne	$LN152@get_operan
$LN153@get_operan:

; 518  :                 sym = SymSearch( tmp );

	mov	rcx, rbp
	call	SymFind
	mov	rbx, rax

; 519  :                 if ( sym ) {

	test	rax, rax
	je	SHORT $LN72@get_operan

; 520  :                     /*
; 521  :                      * skip a type specifier matching the data item's type
; 522  :                      * that's something like "<item>.<type>.<member>"
; 523  :                      */
; 524  :                     if ( sym->state == SYM_TYPE ) {

	mov	ecx, DWORD PTR [rax+32]
	cmp	ecx, 7
	jne	SHORT $LN55@get_operan

; 525  :                         /*
; 526  :                          * v2.07: "if" added.
; 527  :                          * Masm accepts a different type spec if the "assumed"
; 528  :                          * type is undefined
; 529  :                          * v2.09: the change in v2.07 is a regression. if it's a type,
; 530  :                          * then "usually" assume a type coercion and "switch" to the
; 531  :                          * new type - but not for register assume. This isn't fixed
; 532  :                          * yet, because there's no way to find out if a register assume
; 533  :                          * did set field 'type'.
; 534  :                          * v2.09: oldstructs condition added, see regression test dotop4.asm.
; 535  :                          * v2.11: fixme? opnd->type may be NULL here?
; 536  :                          * v2.12: for opnd->type==NULL test case, see expr5.aso.
; 537  :                          */
; 538  :                         //if ( sym == opnd->type || opnd->type->isdefined == FALSE )
; 539  :                         //if ( sym == opnd->type || opnd->type->isdefined == FALSE || ModuleInfo.oldstructs )
; 540  :                         if ( sym == opnd->type || ( opnd->type && opnd->type->isdefined == FALSE ) || ModuleInfo.oldstructs )

	mov	rax, QWORD PTR [rdi+96]
	cmp	rbx, rax
	je	$LN52@get_operan
	test	rax, rax
	je	SHORT $LN60@get_operan
	test	BYTE PTR [rax+40], 2
	je	$LN52@get_operan
$LN60@get_operan:
	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
$LN166@get_operan:
	jne	SHORT $LN52@get_operan
$LN61@get_operan:

; 546  :                                ( sym->state == SYM_STRUCT_FIELD ||
; 547  :                                 sym->state == SYM_EXTERNAL || /* v2.01: added */
; 548  :                                 /* v2.05: changed */
; 549  :                                 //( sym->state == SYM_INTERNAL && sym->mem_type == MT_ABS ) ) )
; 550  :                                 sym->state == SYM_INTERNAL ) )
; 551  :                         //opnd->sym = sym;
; 552  :                         ;
; 553  :                     else {
; 554  :                         /* fixme: clear sym?
; 555  :                          * if the symbol is not a type, it's an error which can
; 556  :                          * be detected in pass 1 already. dot_op() will emit
; 557  :                          * 'struct field expected' if sym isn't cleared.
; 558  :                          * v2.11: always clear sym.
; 559  :                          */
; 560  :                         //if ( opnd->type != nullstruct )
; 561  :                         sym = NULL;

	mov	rbx, r14
$LN72@get_operan:

; 589  :             sym->state == SYM_TMACRO ) {
; 590  : 
; 591  :             /* for OPATTR, anything is ok */
; 592  :             if ( opnd->is_opattr ) {

	test	BYTE PTR [rdi+76], 16
	je	$LN74@get_operan
$LN168@get_operan:

; 593  :                 DebugMsg1(( "get_operand(%s): OPATTR, symbol invalid\n", tokenarray[i].string_ptr ));
; 594  :                 opnd->kind = EXPR_ERROR;

	mov	DWORD PTR [rdi+60], -1

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN55@get_operan:

; 541  :                             ; //opnd->sym = sym;
; 542  :                         else {
; 543  :                             sym = NULL;
; 544  :                         }
; 545  :                     } else if ( ModuleInfo.oldstructs &&

	test	DWORD PTR ModuleInfo+408, 256		; 00000100H
	je	SHORT $LN61@get_operan
	lea	eax, DWORD PTR [rcx-1]
	test	eax, -6					; fffffffaH
	jne	SHORT $LN61@get_operan
	cmp	ecx, 5

; 562  :                     }
; 563  :                 }
; 564  :             }
; 565  :         } else {

	jmp	SHORT $LN166@get_operan
$LN51@get_operan:

; 566  :             DebugMsg1(("%u get_operand: T_ID, id=%s\n", evallvl, tokenarray[i].string_ptr ));
; 567  :             /* ensure anonym labels are uppercase */
; 568  :             /* v2.06: changed. Previously member 'string_ptr' was used to
; 569  :              * store the anonymous label, but one cannot safely assume that
; 570  :              * there's enough free space for a larger symbol name! It (partly)
; 571  :              * worked by accident, because @F/@B usually are the last tokens
; 572  :              * in a line [ but see: .if ( eax == @F && ecx == 2 ) ].
; 573  :              */
; 574  :             if ( *tmp == '@' && *(tmp+2 ) == NULLC ) {

	cmp	BYTE PTR [rbp], 64			; 00000040H
	jne	SHORT $LN68@get_operan
	cmp	BYTE PTR [rbp+2], r14b
	jne	SHORT $LN68@get_operan

; 575  :                 if ( *(tmp+1) == 'b' || *(tmp+1 ) == 'B' )

	movzx	ecx, BYTE PTR [rbp+1]
	lea	eax, DWORD PTR [rcx-66]
	test	al, 223					; 000000dfH
	je	SHORT $LN67@get_operan
	sub	cl, 70					; 00000046H
	test	cl, 223					; 000000dfH
	jne	SHORT $LN68@get_operan

; 577  :                 else if (*(tmp+1) == 'f' || *(tmp+1 ) == 'F' )
; 578  :                     tmp = GetAnonymousLabel( labelbuff, 1 );

	mov	edx, 1
	jmp	SHORT $LN165@get_operan
$LN67@get_operan:

; 576  :                     tmp = GetAnonymousLabel( labelbuff, 0 );

	xor	edx, edx
$LN165@get_operan:
	lea	rcx, QWORD PTR labelbuff$[rsp]
	call	GetAnonymousLabel
	mov	rbp, rax
$LN68@get_operan:

; 579  :             }
; 580  :             sym = SymSearch( tmp );

	mov	rcx, rbp
	call	SymFind
	mov	rbx, rax
$LN52@get_operan:

; 581  :         }
; 582  :         if ( sym == NULL ||
; 583  :             sym->state == SYM_UNDEFINED ||
; 584  :             ( sym->state == SYM_TYPE && sym->typekind == TYPE_NONE ) ||  /* v2.10: added */
; 585  : #if ALIAS_IN_EXPR == 0
; 586  :             sym->state == SYM_ALIAS || /* v2.04: added */
; 587  : #endif
; 588  :             sym->state == SYM_MACRO ||

	test	rbx, rbx
	je	SHORT $LN72@get_operan
$LN152@get_operan:
	mov	ecx, DWORD PTR [rbx+32]
	test	ecx, ecx
	je	$LN72@get_operan
	cmp	ecx, 7
	jne	SHORT $LN73@get_operan
	cmp	BYTE PTR [rbx+66], r14b
	je	$LN72@get_operan
$LN73@get_operan:
	lea	eax, DWORD PTR [rcx-9]
	cmp	eax, 1
	jbe	$LN72@get_operan

; 661  :             }
; 662  : #if ALIAS_IN_EXPR /* v2.04b: added */
; 663  :         } else if ( sym->state == SYM_ALIAS ) {

	cmp	ecx, 8
	jne	SHORT $LN83@get_operan

; 664  :             /* ALIAS symbols are not really useable in expressions.
; 665  :              * The alias' substitute symbol is, however.
; 666  :              */
; 667  :             sym = sym->substitute; /* can't be NULL */

	mov	rbx, QWORD PTR [rbx+16]
$LN83@get_operan:

; 668  : #endif
; 669  :         }
; 670  :         /* set default values */
; 671  :         sym->used = TRUE;

	or	BYTE PTR [rbx+40], 1

; 672  :         DebugMsg1(("get_operand(%s): sym->state=%u type=>%s< ofs=%X memtype=%Xh total_size=%u defined=%u\n",
; 673  :                 tokenarray[i].string_ptr, sym->state, sym->type ? sym->type->name : "NULL", sym->offset, sym->mem_type, sym->total_size, sym->isdefined ));
; 674  :         switch ( sym->state ) {

	mov	ecx, DWORD PTR [rbx+32]
	sub	ecx, 6
	je	$LN98@get_operan
	cmp	ecx, 1
	je	$LN90@get_operan

; 725  :             DebugMsg1(("get_operand: mem_type=%Xh type=%s\n", opnd->mem_type, opnd->type ? opnd->type->name : "NULL" ));
; 726  :             break;
; 727  :         default: /* SYM_INTERNAL, SYM_EXTERNAL, SYM_SEG, SYM_GRP, SYM_STACK */
; 728  :             opnd->kind = EXPR_ADDR;

	mov	DWORD PTR [rdi+60], 1

; 729  :             /* call internal function (@Line, ... ) */
; 730  :             if ( sym->predefined && sym->sfunc_ptr )

	test	BYTE PTR [rbx+40], 32			; 00000020H
	je	SHORT $LN100@get_operan
	mov	rax, QWORD PTR [rbx+64]
	test	rax, rax
	je	SHORT $LN100@get_operan

; 731  :                 sym->sfunc_ptr( sym, NULL );

	xor	edx, edx
	mov	rcx, rbx
	call	rax
$LN100@get_operan:

; 732  :             //if( opnd->sym->mem_type == MT_ABS ) {
; 733  :             if( sym->state == SYM_INTERNAL && sym->segment == NULL ) {

	mov	eax, DWORD PTR [rbx+32]
	cmp	eax, 1
	jne	$LN101@get_operan
	cmp	QWORD PTR [rbx+24], r14
	jne	$LN101@get_operan

; 734  :                 opnd->kind = EXPR_CONST;

	mov	DWORD PTR [rdi+60], r14d

; 735  :                 opnd->uvalue = sym->uvalue;

	mov	eax, DWORD PTR [rbx+16]
	mov	DWORD PTR [rdi], eax

; 736  :                 opnd->hvalue = sym->value3264;

	mov	eax, DWORD PTR [rbx+56]
	mov	DWORD PTR [rdi+4], eax

; 737  :                 DebugMsg1(("get_operand(%s): equate hval=%Xh, lval=%Xh\n", sym->name, opnd->hvalue, opnd->uvalue ));
; 738  :                 opnd->mem_type = sym->mem_type;

	mov	eax, DWORD PTR [rbx+36]
	mov	DWORD PTR [rdi+64], eax

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN74@get_operan:

; 595  :                 break;
; 596  :             }
; 597  : #if 0 /* v2.10: obsolete, since fnEmitErr() won't display anything in "EQU" mode */
; 598  :             /* if it is EQU, don't display an error, but return ERROR */
; 599  :             if ( flags & EXPF_NOERRMSG ) {
; 600  :                 DebugMsg1(("get_operand(%s): EQU, symbol invalid\n", tokenarray[i].string_ptr));
; 601  :                 return( ERROR );
; 602  :             }
; 603  : #endif
; 604  :             if ( sym && ( sym->state == SYM_MACRO ||

	test	rbx, rbx
	je	SHORT $LN75@get_operan
	mov	eax, DWORD PTR [rbx+32]
	sub	eax, 9
	cmp	eax, 1
	ja	SHORT $LN75@get_operan

; 605  : #if ALIAS_IN_EXPR == 0
; 606  :                          sym->state == SYM_ALIAS || /* v2.04: added */
; 607  : #endif
; 608  :                          sym->state == SYM_TMACRO ) ) {
; 609  :                 DebugMsg1(("get_operand(%s): symbol is macro/textmacro/alias!\n", tokenarray[i].string_ptr));
; 610  :                 fnEmitErr( INVALID_SYMBOL_TYPE_IN_EXPRESSION, sym->name );

	mov	rdx, QWORD PTR [rbx+8]
	mov	ecx, 243				; 000000f3H

; 611  :                 return( ERROR );

	jmp	$LN167@get_operan
$LN75@get_operan:

; 612  :             }
; 613  :             /* v2.11: flag EXPF_NOUNDEF won't accept undefined symbols anymore.
; 614  :              * previously, it did just avoid to create a label with state SYM_UNDEFINED -
; 615  :              * hence the old name, EXPF_NOLCREATE
; 616  :              */
; 617  :             //if( Parse_Pass == PASS_1 ) {
; 618  :             if( Parse_Pass == PASS_1 && !( flags & EXPF_NOUNDEF ) ) {

	cmp	DWORD PTR Parse_Pass, r14d
	jne	$LN77@get_operan
	test	r15b, 2
	jne	$LN77@get_operan

; 619  :                 /* if symbol wasn't found, assume it is a forward ref! */
; 620  :                 if ( sym == NULL ) {

	test	rbx, rbx
	jne	$LN83@get_operan

; 621  :                     /* v2.11: flag EXPF_NOLCREATE has got another meaning */
; 622  :                     //if ( opnd->type == NULL && !( flags & EXPF_NOLCREATE ) ) { /* added v1.95 */
; 623  :                     if ( opnd->type == NULL ) {

	mov	rax, QWORD PTR [rdi+96]
	test	rax, rax
	jne	SHORT $LN80@get_operan

; 624  :                         sym = SymLookup( tmp );

	mov	rcx, rbp
	call	SymLookup

; 625  :                         sym->state = SYM_UNDEFINED;
; 626  :                         sym_add_table( &SymTables[TAB_UNDEF], (struct dsym *)sym ); /* add UNDEFINED */

	mov	rdx, rax
	lea	rcx, OFFSET FLAT:SymTables
	mov	rbx, rax
	mov	DWORD PTR [rax+32], r14d
	call	sym_add_table
	jmp	$LN83@get_operan
$LN80@get_operan:

; 627  :                         DebugMsg1(("get_operand(%s): symbol not (yet) defined, CurrProc=%s\n", tmp, CurrProc ? CurrProc->sym.name : "NULL" ));
; 628  :                     
; 629  :                     // } else if ( opnd->type == NULL || opnd->type != nullstruct ) { /* v2.08: if changed */
; 630  :                     // } else if ( opnd->type == NULL || opnd->type->typekind != TYPE_NONE ) { /* v2.11: if changed */
; 631  :                     } else if ( opnd->type->typekind != TYPE_NONE ) {

	cmp	BYTE PTR [rax+66], r14b
	je	SHORT $LN82@get_operan

; 632  :                         /* no struct or struct is known and defined */
; 633  :                         DebugMsg(("get_operand(%s): symbol error (type=%s typekind=%u)\n", tmp, opnd->type ? opnd->type->name : "NULL", opnd->type ? opnd->type->typekind : 0 ));
; 634  :                         if ( *opnd->type->name )

	mov	rdx, QWORD PTR [rax+8]
	cmp	BYTE PTR [rdx], r14b
	je	$LN84@get_operan
$LN169@get_operan:

; 635  :                             fnEmitErr( MEMBER_NOT_DEFINED, opnd->type->name, tmp );

	mov	r8, rbp
	mov	ecx, 63					; 0000003fH
	call	QWORD PTR fnEmitErr
	jmp	$LN126@get_operan
$LN82@get_operan:

; 636  :                         else
; 637  :                             fnEmitErr( SYMBOL_NOT_DEFINED, tmp );
; 638  :                         return( ERROR );
; 639  :                     } else {
; 640  :                         /* forward reference to a struct.
; 641  :                          * In these cases, assume everything is ok.
; 642  :                          */
; 643  :                         if ( !nullmbr ) {

	mov	rax, QWORD PTR nullmbr
	test	rax, rax
	jne	SHORT $LN86@get_operan

; 644  :                             nullmbr = SymAlloc( "" );

	lea	rcx, OFFSET FLAT:$SG11148
	call	SymAlloc
	mov	QWORD PTR nullmbr, rax
$LN86@get_operan:

; 645  :                         }
; 646  :                         DebugMsg(("get_operand(%s): forward reference to a struct (using nullmbr)\n", tmp ));
; 647  :                         /* "break" because nullmbr has state SYM_UNDEFINED */
; 648  :                         opnd->mbr = nullmbr;

	mov	QWORD PTR [rdi+88], rax

; 649  :                         opnd->kind = EXPR_CONST;

	mov	DWORD PTR [rdi+60], r14d

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN101@get_operan:

; 739  :                 /* don't set the symbol reference, it isn't a label */
; 740  :             } else if( sym->state == SYM_EXTERNAL &&
; 741  :                       sym->mem_type == MT_EMPTY &&

	cmp	eax, 2
	jne	SHORT $LN103@get_operan
	cmp	DWORD PTR [rbx+36], 192			; 000000c0H
	jne	SHORT $LN103@get_operan
	test	BYTE PTR [rbx+47], 4
	jne	SHORT $LN103@get_operan

; 742  :                       sym->iscomm == FALSE ) {
; 743  :                 /* type remains EXPR_ADDR, to force fixup creation */
; 744  :                 //opnd->mem_type = sym->mem_type; /* v2.10: unnecessary, init value IS MT_EMPTY */
; 745  :                 opnd->is_abs = TRUE;

	or	DWORD PTR [rdi+76], 4

; 746  :                 opnd->sym = sym;

	mov	QWORD PTR [rdi+80], rbx

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN103@get_operan:

; 747  :             } else {
; 748  :                 opnd->label_tok = &tokenarray[i];

	mov	QWORD PTR [rdi+40], rsi

; 749  : 
; 750  :                 /* a variable with arbitrary type? */
; 751  :                 /* v2.05: added check for MT_EMPTY */
; 752  :                 //if( opnd->sym->type ) { 
; 753  :                 if( sym->type && sym->type->mem_type != MT_EMPTY ) {

	mov	rax, QWORD PTR [rbx+80]
	test	rax, rax
	je	SHORT $LN105@get_operan
	mov	ecx, DWORD PTR [rax+36]
	cmp	ecx, 192				; 000000c0H
	je	SHORT $LN105@get_operan

; 754  :                     /* skip "alias" types */
; 755  :                     /* v2.05: obsolete */
; 756  :                     //for ( sym2 = opnd->sym; sym2->type; sym2 = sym2->type );
; 757  :                     //opnd->mem_type = sym2->mem_type;
; 758  :                     opnd->mem_type = sym->type->mem_type;

	mov	DWORD PTR [rdi+64], ecx

; 759  :                 } else {

	jmp	SHORT $LN106@get_operan
$LN105@get_operan:

; 760  :                     opnd->mem_type = sym->mem_type;

	mov	eax, DWORD PTR [rbx+36]
	mov	DWORD PTR [rdi+64], eax
$LN106@get_operan:

; 761  :                 }
; 762  :                 /* since there is no fixup for auto variables, the "offset"
; 763  :                  must be stored in the <value> field */
; 764  :                 if ( sym->state == SYM_STACK ) {

	cmp	DWORD PTR [rbx+32], 5
	jne	SHORT $LN107@get_operan

; 765  : #if STACKBASESUPP
; 766  :                   opnd->llvalue = sym->offset;// +StackAdj;

	movsxd	rax, DWORD PTR [rbx+16]
	mov	QWORD PTR [rdi], rax

; 767  :                     if ((ModuleInfo.win64_flags & W64F_HABRAN) && sym->isparam){

	test	BYTE PTR ModuleInfo+413, 11
	je	SHORT $LN108@get_operan
	test	BYTE PTR [rbx+41], 128			; 00000080H
	je	SHORT $LN108@get_operan

; 768  :                       int cnt = CurrProc->e.procinfo->pushed_reg;

	mov	rax, QWORD PTR CurrProc
	mov	r8, QWORD PTR [rax+96]

; 769  :                       cnt = cnt * 8;
; 770  :                       cnt += sym->offset + CurrProc->e.procinfo->localsize + CurrProc->e.procinfo->xmmsize; //pointing to RSP
; 771  :                       cnt -= 8;     //pointing abowe RSP to the shadow space off RCX RDX R8 R9
; 772  :                       opnd->llvalue = cnt;

	mov	eax, DWORD PTR [r8+72]
	mov	edx, DWORD PTR [r8+64]
	sub	eax, 8
	lea	edx, DWORD PTR [rax+rdx*8]
	mov	eax, DWORD PTR [rbx+16]
	add	edx, DWORD PTR [r8+36]
	add	eax, edx
	cdqe
	mov	QWORD PTR [rdi], rax
$LN108@get_operan:

; 773  :                     }
; 774  : #else
; 775  :                     opnd->llvalue = sym->offset;
; 776  : #endif
; 777  :                     opnd->indirect = TRUE;

	or	DWORD PTR [rdi+76], 1

; 778  :                     /* v2.10: base register values now set here */
; 779  :                     opnd->base_reg = &tokenarray[i];

	mov	QWORD PTR [rdi+24], rsi

; 780  : #if STACKBASESUPP
; 781  :                     tokenarray[i].tokval = CurrProc->e.procinfo->basereg;

	mov	rax, QWORD PTR CurrProc
	mov	rcx, QWORD PTR [rax+96]
	movzx	eax, WORD PTR [rcx+86]
	mov	DWORD PTR [rsi+16], eax

; 782  : #else
; 783  :                     tokenarray[i].tokval = basereg[ModuleInfo.Ofssize];
; 784  : #endif
; 785  :                     tokenarray[i].bytval = GetRegNo( tokenarray[i].tokval );

	lea	rcx, QWORD PTR [rax+rax*2]
	movzx	eax, BYTE PTR SpecialTable[r13+rcx*4+10]
	mov	BYTE PTR [rsi+1], al
$LN107@get_operan:

; 786  :                 }
; 787  :                 opnd->sym = sym;

	mov	QWORD PTR [rdi+80], rbx

; 788  :                 /* v2.09: added (also see change in PrepareOp() )
; 789  :                  * and see case SYM_STRUCT_FIELD.
; 790  :                  */
; 791  :                 for ( ; sym->type; sym = sym->type );

	mov	rax, QWORD PTR [rbx+80]
	test	rax, rax
	je	SHORT $LN16@get_operan
	npad	3
$LL17@get_operan:
	mov	rbx, rax
	mov	rax, QWORD PTR [rax+80]
	test	rax, rax
	jne	SHORT $LL17@get_operan
$LN16@get_operan:

; 792  :                 opnd->type = ( sym->state == SYM_TYPE && sym->typekind != TYPE_TYPEDEF ) ? sym : NULL;

	cmp	DWORD PTR [rbx+32], 7
	jne	$LN132@get_operan
	cmp	BYTE PTR [rbx+66], 3
	jne	$LN133@get_operan
	mov	rbx, r14
	mov	QWORD PTR [rdi+96], rbx

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN90@get_operan:

; 675  :         case SYM_TYPE: /* STRUCT, UNION, RECORD, TYPEDEF */
; 676  :             /* v2.09: no structinfo data for typedefs */
; 677  :             if ( sym->typekind != TYPE_TYPEDEF && ((struct dsym *)sym)->e.structinfo->isOpen ) {

	cmp	BYTE PTR [rbx+66], 3
	je	SHORT $LN91@get_operan
	mov	rax, QWORD PTR [rbx+96]
	test	BYTE PTR [rax+17], 2
	jne	$LN168@get_operan
$LN91@get_operan:

; 678  :                 DebugMsg1(("get_operand(%s): struct/union definition isn't closed!\n", sym->name ));
; 679  :                 opnd->kind = EXPR_ERROR;
; 680  :                 break;
; 681  :             }
; 682  :             /* skip "alias" types */
; 683  :             for ( ; sym->type; sym = sym->type );

	mov	rax, QWORD PTR [rbx+80]
	test	rax, rax
	je	SHORT $LN10@get_operan
	npad	1
$LL11@get_operan:
	mov	rbx, rax
	mov	rax, QWORD PTR [rax+80]
	test	rax, rax
	jne	SHORT $LL11@get_operan
$LN10@get_operan:

; 684  :             opnd->kind = EXPR_CONST;

	mov	DWORD PTR [rdi+60], r14d

; 685  :             opnd->mem_type = sym->mem_type;

	mov	eax, DWORD PTR [rbx+36]

; 686  :             opnd->is_type = TRUE;

	or	DWORD PTR [rdi+76], 8
	mov	DWORD PTR [rdi+64], eax

; 687  :             opnd->type = sym;

	mov	QWORD PTR [rdi+96], rbx

; 688  :             DebugMsg1(("get_operand(%s): symbol.typekind=%u (STRUCT/UNION/TYPEDEF/RECORD)\n", sym->name, sym->typekind ));
; 689  : 
; 690  :             /* v2.08: if() removed. This was an old hack. */
; 691  :             //if ( tokenarray[i-1].token != T_DOT && tokenarray[i+1].token != T_DOT )
; 692  :             /* v2.06: the default value for RECORD types is the mask value */
; 693  :             if ( sym->typekind == TYPE_RECORD ) {

	cmp	BYTE PTR [rbx+66], 4
	jne	SHORT $LN92@get_operan

; 694  : #if AMD64_SUPPORT
; 695  :                 opnd->llvalue = GetRecordMask( (struct dsym *)sym );

	mov	rcx, rbx
	call	GetRecordMask
	mov	QWORD PTR [rdi], rax

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN92@get_operan:

; 696  : #else
; 697  :                 opnd->value = GetRecordMask( (struct dsym *)sym );
; 698  : #endif
; 699  :             } else if ( ( sym->mem_type & MT_SPECIAL_MASK ) == MT_ADDRESS ) { /* v2.09: added */

	mov	ecx, DWORD PTR [rbx+36]
	mov	eax, ecx
	and	eax, 192				; 000000c0H
	cmp	al, -128				; ffffffffffffff80H
	jne	SHORT $LN94@get_operan

; 700  :                 if ( sym->mem_type == MT_PROC ) {

	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN96@get_operan

; 701  :                     opnd->value = sym->total_size;

	mov	eax, DWORD PTR [rbx+56]
	mov	DWORD PTR [rdi], eax

; 702  :                     opnd->Ofssize = sym->Ofssize;

	movzx	eax, BYTE PTR [rbx+44]
	mov	BYTE PTR [rdi+69], al

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN96@get_operan:

; 703  :                 } else
; 704  :                     opnd->value = GetTypeSize( sym->mem_type, sym->Ofssize );

	movzx	edx, BYTE PTR [rbx+44]
	call	GetTypeSize
	mov	DWORD PTR [rdi], eax

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN94@get_operan:

; 705  :             } else
; 706  :                 opnd->value = sym->total_size;

	mov	eax, DWORD PTR [rbx+56]
	mov	DWORD PTR [rdi], eax

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN98@get_operan:

; 707  : 
; 708  :             break;
; 709  :         case SYM_STRUCT_FIELD:
; 710  :             DebugMsg1(("get_operand(%s): structure field, ofs=%Xh\n", sym->name, sym->offset ));
; 711  : 
; 712  :             /* opnd->value might have been set by SearchNameInStruct() already! */
; 713  :             opnd->value += sym->offset;

	mov	eax, DWORD PTR [rbx+16]
	add	DWORD PTR [rdi], eax

; 714  :             opnd->kind = EXPR_CONST;

	mov	DWORD PTR [rdi+60], r14d

; 715  :             opnd->mbr = sym;

	mov	QWORD PTR [rdi+88], rbx

; 716  :             /* skip "alias" types (probably obsolete by now!) */
; 717  :             for ( ; sym->type; sym = sym->type );

	mov	rax, QWORD PTR [rbx+80]
	test	rax, rax
	je	SHORT $LN13@get_operan
$LL14@get_operan:
	mov	rbx, rax
	mov	rax, QWORD PTR [rax+80]
	test	rax, rax
	jne	SHORT $LL14@get_operan
$LN13@get_operan:

; 718  :             opnd->mem_type = sym->mem_type;

	mov	eax, DWORD PTR [rbx+36]
	mov	DWORD PTR [rdi+64], eax

; 719  :             /*
; 720  :              * check if the member field is a type (struct or union).
; 721  :              * If yes, set the <type> member!
; 722  :              * this cannot be done in PrepareOp()
; 723  :              */
; 724  :             opnd->type = ( sym->state == SYM_TYPE && sym->typekind != TYPE_TYPEDEF ) ? sym : NULL;

	cmp	DWORD PTR [rbx+32], 7
	jne	SHORT $LN132@get_operan
	cmp	BYTE PTR [rbx+66], 3
	jne	SHORT $LN133@get_operan
$LN132@get_operan:
	mov	rbx, r14
$LN133@get_operan:
	mov	QWORD PTR [rdi+96], rbx

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN77@get_operan:

; 650  :                         break;
; 651  :                     }
; 652  :                 }
; 653  :             } else {
; 654  :                 DebugMsg1(("get_operand(%s): symbol %s not defined, pass > 1, curr proc=>%s<, \n", tokenarray[i].string_ptr, tmp, CurrProc ? CurrProc->sym.name : "NULL" ));
; 655  :                 if ( opnd->type && *opnd->type->name ) {

	mov	rax, QWORD PTR [rdi+96]
	test	rax, rax
	je	SHORT $LN87@get_operan
	mov	rdx, QWORD PTR [rax+8]
	cmp	BYTE PTR [rdx], r14b
	jne	$LN169@get_operan
$LN87@get_operan:

; 656  :                     fnEmitErr( MEMBER_NOT_DEFINED, opnd->type->name, tmp );
; 657  :                 } else {
; 658  :                     fnEmitErr( SYMBOL_NOT_DEFINED, *(tmp+1) == '&' ? "@@" : tmp );

	cmp	BYTE PTR [rbp+1], 38			; 00000026H
	lea	rax, OFFSET FLAT:$SG11151
	cmove	rbp, rax
$LN84@get_operan:
	mov	rdx, rbp
	mov	ecx, 102				; 00000066H

; 659  :                 }
; 660  :                 return( ERROR );

	jmp	$LN167@get_operan
$LN109@get_operan:

; 793  :             }
; 794  :             break;
; 795  :         }
; 796  :         break;
; 797  :     case T_STYPE:
; 798  :         DebugMsg1(("%u get_operand: T_STYPE (>%s<, value=%X)\n", evallvl, tokenarray[i].string_ptr, tokenarray[i].tokval));
; 799  :         opnd->kind = EXPR_CONST;

	xor	r14d, r14d
	mov	DWORD PTR [rdi+60], r14d

; 800  :         /* for types, return the size as numeric constant */
; 801  :         /* fixme: mem_type should be set only when used as first arg of PTR op! */
; 802  :         opnd->mem_type = GetMemtypeSp( tokenarray[i].tokval );

	mov	eax, DWORD PTR [rsi+16]
	lea	rcx, QWORD PTR [rax+rax*2]
	movzx	ecx, BYTE PTR SpecialTable[r13+rcx*4+10]
	mov	DWORD PTR [rdi+64], ecx

; 803  :         opnd->Ofssize = GetSflagsSp( tokenarray[i].tokval );

	mov	eax, DWORD PTR [rsi+16]
	lea	rdx, QWORD PTR [rax+rax*2]
	movzx	eax, BYTE PTR SpecialTable[r13+rdx*4+4]

; 804  :         opnd->value = GetTypeSize( opnd->mem_type, opnd->Ofssize );

	mov	edx, eax
	mov	BYTE PTR [rdi+69], al
	call	GetTypeSize

; 805  :         opnd->is_type = TRUE;

	or	DWORD PTR [rdi+76], 8
	mov	DWORD PTR [rdi], eax

; 806  :         opnd->type = NULL; /* v2.08: added */

	mov	QWORD PTR [rdi+96], r14

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN110@get_operan:

; 807  :         break;
; 808  :     case T_RES_ID:
; 809  :         DebugMsg1(("%u get_operand: T_RES_ID (>%s<, value=%X)\n", evallvl, tokenarray[i].string_ptr, tokenarray[i].tokval));
; 810  :         if ( tokenarray[i].tokval == T_FLAT ) {

	cmp	DWORD PTR [rsi+16], 261			; 00000105H
	jne	SHORT $LN111@get_operan

; 811  :             /* v2.09: query NOUNDEF flag */
; 812  :             //if ( error_msg ) { /* don't define FLAT group in EQU expression! */
; 813  :             if ( ( flags & EXPF_NOUNDEF ) == 0 ) {

	test	r15b, 2
	jne	SHORT $LN113@get_operan

; 814  :                 /* v2.08 cpu check added */
; 815  :                 if( ( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_386 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jge	SHORT $LN114@get_operan

; 816  :                     fnEmitErr( INSTRUCTION_OR_REGISTER_NOT_ACCEPTED_IN_CURRENT_CPU_MODE );

	mov	ecx, 30
	call	QWORD PTR fnEmitErr

; 817  :                     return( ERROR );

	jmp	$LN126@get_operan
$LN114@get_operan:

; 818  :                 }
; 819  :                 DefineFlatGroup();

	call	DefineFlatGroup
$LN113@get_operan:

; 820  :             }
; 821  :             if ( !( opnd->sym = &ModuleInfo.flat_grp->sym ) )

	mov	rax, QWORD PTR ModuleInfo+440
	mov	QWORD PTR [rdi+80], rax
	test	rax, rax
	je	$LN126@get_operan

; 822  :                 return( ERROR );
; 823  : 
; 824  :             opnd->label_tok = &tokenarray[i];

	mov	QWORD PTR [rdi+40], rsi

; 825  :             opnd->kind = EXPR_ADDR;

	mov	DWORD PTR [rdi+60], 1

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@get_operan
$LN111@get_operan:

; 826  : 
; 827  :         } else {
; 828  :             return( fnEmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	mov	rdx, QWORD PTR [rsi+8]
	mov	ecx, 209				; 000000d1H
	call	QWORD PTR fnEmitErr
	jmp	SHORT $LN1@get_operan
$LN116@get_operan:

; 829  :         }
; 830  :         break;
; 831  :     case T_FLOAT: /* v2.05 */
; 832  :         DebugMsg1(("%u get_operand: T_FLOAT (>%s<)\n", evallvl, tokenarray[i].string_ptr ));
; 833  :         opnd->kind = EXPR_FLOAT;

	mov	DWORD PTR [rdi+60], 3

; 834  :         opnd->float_tok = &tokenarray[i];

	mov	QWORD PTR [rdi+16], rsi

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	SHORT $LN1@get_operan
$LN117@get_operan:

; 835  :         //opnd->ftype = ( tokenarray[i].floattype != 0 );
; 836  :         break;
; 837  :     //case T_CL_BRACKET:
; 838  :     //case T_CL_SQ_BRACKET:
; 839  :     default:
; 840  :         DebugMsg1(("%u get_operand: default (token=%u, string=%s)\n", evallvl, tokenarray[i].token, tokenarray[i].string_ptr));
; 841  :         if ( opnd->is_opattr ) {    /* for OPATTR, allow any operand */

	test	BYTE PTR [rdi+76], 16
	je	SHORT $LN118@get_operan

; 842  :             if ( tokenarray[i].token == T_FINAL ||
; 843  :                 tokenarray[i].token == T_CL_BRACKET ||

	test	cl, cl
	je	SHORT $LN120@get_operan
	cmp	cl, 41					; 00000029H
	je	SHORT $LN120@get_operan
	cmp	cl, 93					; 0000005dH
	je	SHORT $LN120@get_operan
$LN119@get_operan:

; 858  :     }
; 859  :     (*idx)++;

	inc	DWORD PTR [r12]
$LN120@get_operan:

; 860  :     DebugMsg1(("%u get_operand exit, ok, kind=%d value=%" I64_SPEC "X hvalue=%" I64_SPEC "X mem_type=%Xh abs=%u string=%s is_type=%u type=>%s< sym=%s mbr=%s\n",
; 861  :                evallvl, opnd->kind, opnd->llvalue, opnd->hlvalue, opnd->mem_type, opnd->is_abs,
; 862  :                opnd->quoted_string ? opnd->quoted_string->string_ptr : "NULL",
; 863  :                opnd->is_type, opnd->type ? opnd->type->name : "NULL",
; 864  :                opnd->sym ? opnd->sym->name : "NULL",
; 865  :                opnd->mbr ? opnd->mbr->name : "NULL" ));
; 866  :     return( NOT_ERROR );

	xor	eax, eax
	jmp	SHORT $LN1@get_operan
$LN118@get_operan:

; 844  :                 tokenarray[i].token == T_CL_SQ_BRACKET ) /* don't go beyond T_FINAL, ) or ] ! */
; 845  :                 return( NOT_ERROR );
; 846  :             break;
; 847  :         }
; 848  :         if ( tokenarray[i].token == T_BAD_NUM )

	cmp	cl, 12
	jne	SHORT $LN121@get_operan

; 849  :             /* Masm complains even if in EQU-mode */
; 850  :             fnEmitErr( NONDIGIT_IN_NUMBER, tokenarray[i].string_ptr );

	mov	rdx, QWORD PTR [rsi+8]
	mov	ecx, 217				; 000000d9H
	jmp	SHORT $LN167@get_operan
$LN121@get_operan:

; 851  :         else if ( tokenarray[i].token == T_COLON )

	cmp	cl, 58					; 0000003aH
	jne	SHORT $LN123@get_operan

; 852  :             fnEmitErr( SYNTAX_ERROR_UNEXPECTED_COLON );

	mov	ecx, 47					; 0000002fH
	call	QWORD PTR fnEmitErr
	jmp	SHORT $LN126@get_operan
$LN123@get_operan:

; 853  :         else if ( isalpha( *tokenarray[i].string_ptr ) )

	mov	rax, QWORD PTR [rsi+8]
	movsx	ecx, BYTE PTR [rax]
	call	isalpha

; 854  :             fnEmitErr( EXPRESSION_EXPECTED, tokenarray[i].tokpos ); /* better error msg */

	mov	ecx, 64					; 00000040H
	test	eax, eax
	jne	SHORT $LN164@get_operan

; 855  :         else
; 856  :             fnEmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos );

	mov	ecx, 209				; 000000d1H
$LN164@get_operan:
	mov	rdx, QWORD PTR [rsi+24]
$LN167@get_operan:
	call	QWORD PTR fnEmitErr
$LN126@get_operan:

; 857  :         return( ERROR );

	or	eax, -1
$LN1@get_operan:

; 867  : }

	mov	rbx, QWORD PTR [rsp+96]
	mov	rbp, QWORD PTR [rsp+104]
	mov	rsi, QWORD PTR [rsp+112]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	ret	0
	npad	2
$LN159@get_operan:
	DD	$LN35@get_operan
	DD	$LN117@get_operan
	DD	$LN117@get_operan
	DD	$LN117@get_operan
	DD	$LN109@get_operan
	DD	$LN110@get_operan
	DD	$LN50@get_operan
	DD	$LN19@get_operan
	DD	$LN18@get_operan
	DD	$LN116@get_operan
get_operand ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
src$ = 8
dst$ = 16
base$ = 24
size$ = 32
myatoi128 PROC

; 343  : {

$LN37:
	mov	QWORD PTR [rsp+8], rbx

; 344  :     uint_32             val;
; 345  :     unsigned            len;
; 346  :     const char          *end = src + size;

	movsxd	r9, r9d
	mov	r11d, r8d
	add	r9, rcx
	mov	rbx, rdx

; 347  :     uint_16             *px;
; 348  : 
; 349  :     dst[0] = 0;

	xor	eax, eax
	mov	r10, rcx
	mov	QWORD PTR [rdx], rax
	mov	QWORD PTR [rdx+8], rax
	npad	3
$LL4@myatoi128:

; 350  :     dst[1] = 0;
; 351  :     do {
; 352  :         val = ( *src <= '9' ? *src - '0' : ( *src | 0x20 ) - 'a' + 10 );

	movzx	eax, BYTE PTR [r10]
	cmp	al, 57					; 00000039H
	movsx	eax, al
	jg	SHORT $LN9@myatoi128
	sub	eax, 48					; 00000030H
	jmp	SHORT $LN10@myatoi128
$LN9@myatoi128:
	or	eax, 32					; 00000020H
	sub	eax, 87					; 00000057H
$LN10@myatoi128:

; 353  :         px = (uint_16 *)dst;

	mov	rdx, rbx

; 354  :         for ( len = ( 2 * sizeof( uint_64 ) ) >> 1; len; len-- ) {

	mov	r8d, 8
	npad	1
$LL7@myatoi128:

; 355  :             val += (uint_32)*px * base;

	movzx	ecx, WORD PTR [rdx]

; 356  :             *(px++) = val;

	lea	rdx, QWORD PTR [rdx+2]
	imul	ecx, r11d
	add	eax, ecx
	mov	WORD PTR [rdx-2], ax

; 357  :             val >>= 16;

	shr	eax, 16
	add	r8d, -1					; ffffffffH
	jne	SHORT $LL7@myatoi128

; 358  :         };
; 359  :         //myassert( val == 0 ); /* if number doesn't fit in 128 bits */
; 360  :         src++;

	inc	r10

; 361  :     } while( src < end );

	cmp	r10, r9
	jb	SHORT $LL4@myatoi128

; 362  :     return;
; 363  : }

	mov	rbx, QWORD PTR [rsp+8]
	ret	0
myatoi128 ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT GetRecordMask
_TEXT	SEGMENT
record$ = 8
GetRecordMask PROC					; COMDAT

; 318  : #if AMD64_SUPPORT
; 319  :     uint_64 mask = 0;
; 320  : #else
; 321  :     uint_32 mask = 0;
; 322  : #endif
; 323  :     int i;
; 324  :     struct sfield *fl;
; 325  : 
; 326  :     for ( fl = record->e.structinfo->head; fl; fl = fl->next ) {

	mov	rax, QWORD PTR [rcx+96]
	xor	r8d, r8d
	mov	r9, QWORD PTR [rax]
	test	r9, r9
	je	SHORT $LN17@GetRecordM
	npad	1
$LL4@GetRecordM:

; 327  :         struct asym *sym = &fl->sym;
; 328  :         for ( i = sym->offset ;i < sym->offset + sym->total_size; i++ )

	mov	ecx, DWORD PTR [r9+16]
	mov	r10d, DWORD PTR [r9+56]
	add	r10d, ecx
	cmp	ecx, r10d
	jae	SHORT $LN2@GetRecordM
	mov	edx, 1
	rol	edx, cl
	sub	r10d, ecx
	mov	eax, r10d
	npad	3
$LL7@GetRecordM:

; 329  :             mask |= 1 << i;

	movsxd	rcx, edx
	or	r8, rcx
	rol	edx, 1
	sub	rax, 1
	jne	SHORT $LL7@GetRecordM
$LN2@GetRecordM:

; 318  : #if AMD64_SUPPORT
; 319  :     uint_64 mask = 0;
; 320  : #else
; 321  :     uint_32 mask = 0;
; 322  : #endif
; 323  :     int i;
; 324  :     struct sfield *fl;
; 325  : 
; 326  :     for ( fl = record->e.structinfo->head; fl; fl = fl->next ) {

	mov	r9, QWORD PTR [r9+96]
	test	r9, r9
	jne	SHORT $LL4@GetRecordM
$LN17@GetRecordM:

; 330  :     }
; 331  :     return( mask );

	mov	rax, r8

; 332  : }

	ret	0
GetRecordMask ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT GetTypeSize
_TEXT	SEGMENT
mem_type$ = 8
Ofssize$ = 16
GetTypeSize PROC					; COMDAT

; 299  :     if ( (mem_type & MT_SPECIAL) == 0 )

	test	cl, cl
	js	SHORT $LN4@GetTypeSiz

; 300  :         return( ( mem_type & MT_SIZE_MASK ) + 1 );

	and	ecx, 31
	lea	eax, DWORD PTR [rcx+1]

; 309  : }

	ret	0
$LN4@GetTypeSiz:

; 301  :     if ( Ofssize == USE_EMPTY )

	cmp	edx, 254				; 000000feH
	jne	SHORT $LN5@GetTypeSiz

; 302  :         Ofssize = ModuleInfo.Ofssize;

	movzx	edx, BYTE PTR ModuleInfo+404
$LN5@GetTypeSiz:

; 303  :     switch ( mem_type ) {

	sub	ecx, 129				; 00000081H
	je	SHORT $LN6@GetTypeSiz
	cmp	ecx, 1
	je	SHORT $LN7@GetTypeSiz

; 306  :     }
; 307  :     /* shouldn't happen */
; 308  :     return( 0 );

	xor	eax, eax

; 309  : }

	ret	0
$LN7@GetTypeSiz:

; 305  :     case MT_FAR:  return ( ( Ofssize == USE16 ) ? LS_FAR16 : 0xFF00 | ( ( 2 << Ofssize ) + 2 ) );

	test	edx, edx
	jne	SHORT $LN9@GetTypeSiz
	mov	eax, 65285				; 0000ff05H

; 309  : }

	ret	0
$LN9@GetTypeSiz:

; 305  :     case MT_FAR:  return ( ( Ofssize == USE16 ) ? LS_FAR16 : 0xFF00 | ( ( 2 << Ofssize ) + 2 ) );

	mov	ecx, edx
	mov	eax, 2
	shl	eax, cl
	add	eax, 2
	or	eax, 65280				; 0000ff00H

; 309  : }

	ret	0
$LN6@GetTypeSiz:

; 304  :     case MT_NEAR: return ( 0xFF00 | ( 2 << Ofssize ) ) ;

	mov	ecx, edx
	mov	eax, 2
	shl	eax, cl
	or	eax, 65280				; 0000ff00H

; 309  : }

	ret	0
GetTypeSize ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT get_precedence
_TEXT	SEGMENT
item$ = 48
get_precedence PROC					; COMDAT

; 178  : {

	sub	rsp, 40					; 00000028H

; 179  :     /* The following table is taken verbatim from MASM 6.1 Programmer's Guide,
; 180  :      * page 14, Table 1.3.
; 181  : 
; 182  :      * 1            (), []
; 183  :      * 2            LENGTH, SIZE, WIDTH, MASK, LENGTHOF, SIZEOF
; 184  :      * 3            . (structure-field-name operator)
; 185  :      * 4            : (segment override operator), PTR
; 186  :      * 5            LROFFSET, OFFSET, SEG, THIS, TYPE
; 187  :      * 6            HIGH, HIGHWORD, LOW, LOWWORD
; 188  :      * 7            +, - (unary)
; 189  :      * 8            *, /, MOD, SHL, SHR
; 190  :      * 9            +, - (binary)
; 191  :      * 10           EQ, NE, LT, LE, GT, GE
; 192  :      * 11           NOT
; 193  :      * 12           AND
; 194  :      * 13           OR, XOR
; 195  :      * 14           OPATTR, SHORT, .TYPE
; 196  : 
; 197  :      * The following table appears in QuickHelp online documentation for
; 198  :      * both MASM 6.0 and 6.1. It's slightly different!
; 199  : 
; 200  :      * 1            LENGTH, SIZE, WIDTH, MASK
; 201  :      * 2            (), []
; 202  :      * 3            . (structure-field-name operator)
; 203  :      * 4            : (segment override operator), PTR
; 204  :      * 5            THIS, OFFSET, SEG, TYPE
; 205  :      * 6            HIGH, LOW
; 206  :      * 7            +, - (unary)
; 207  :      * 8            *, /, MOD, SHL, SHR
; 208  :      * 9            +, - (binary)
; 209  :      * 10           EQ, NE, LT, LE, GT, GE
; 210  :      * 11           NOT
; 211  :      * 12           AND
; 212  :      * 13           OR, XOR
; 213  :      * 14           SHORT, OPATTR, .TYPE, ADDR
; 214  : 
; 215  :      * japheth: the first table is the prefered one. Reasons:
; 216  :      * - () and [] must be first.
; 217  :      * - it contains operators SIZEOF, LENGTHOF, HIGHWORD, LOWWORD, LROFFSET
; 218  :      * - ADDR is no operator for expressions. It's exclusively used inside
; 219  :      *   INVOKE directive.
; 220  : 
; 221  :      * However, what's wrong in both tables is the precedence of
; 222  :      * the dot operator: Actually for both HJWasm and Wasm the dot precedence
; 223  :      * is 2 and LENGTH, SIZE, ... have precedence 3 instead.
; 224  : 
; 225  :      * Precedence of operator TYPE was 5 in original Wasm source. It has
; 226  :      * been changed to 4, as described in the Masm docs. This allows syntax
; 227  :      * "TYPE DWORD ptr xxx"
; 228  : 
; 229  :      * v2.02: another case which is problematic:
; 230  :      *     mov al,BYTE PTR CS:[]
; 231  :      * Since PTR and ':' have the very same priority, the evaluator will
; 232  :      * first calculate 'BYTE PTR CS'. This is invalid, but didn't matter
; 233  :      * prior to v2.02 because register coercion was never checked for
; 234  :      * plausibility. Solution: priority of ':' is changed from 4 to 3.
; 235  :      */
; 236  : 
; 237  :     switch( item->token ) {

	movzx	eax, BYTE PTR [rcx]
	add	eax, -4
	cmp	eax, 87					; 00000057H
	ja	SHORT $LN2@get_preced
	lea	r8, OFFSET FLAT:__ImageBase
	cdqe
	movzx	eax, BYTE PTR $LN11@get_preced[r8+rax]
	mov	edx, DWORD PTR $LN12@get_preced[r8+rax*4]
	add	rdx, r8
	jmp	rdx
$LN4@get_preced:

; 238  :     case T_UNARY_OPERATOR:
; 239  :     case T_BINARY_OPERATOR:
; 240  :         return( item->precedence );

	movzx	eax, BYTE PTR [rcx+1]

; 266  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN5@get_preced:

; 241  :     case T_OP_BRACKET:
; 242  :     case T_OP_SQ_BRACKET:
; 243  :         /* v2.08: with -Zm, the priority of [] and (), if
; 244  :          * used as binary operator, is 9 (like binary +/-).
; 245  :          * test cases: mov ax,+5[bx]
; 246  :          *             mov ax,-5[bx]
; 247  :          */
; 248  :         //return( 1 );
; 249  :         return( ModuleInfo.m510 ? 9 : 1 );

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, 64					; 00000040H
	or	eax, 8
	shr	eax, 3

; 266  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN6@get_preced:

; 250  :     case T_DOT:
; 251  :         return( 2 );

	mov	eax, 2

; 266  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@get_preced:

; 252  :     case T_COLON:
; 253  :         //return( 4 );
; 254  :         return( 3 ); /* changed for v2.02 */

	mov	eax, 3

; 266  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN8@get_preced:

; 255  :     case '*':
; 256  :     case '/':
; 257  :         return( 8 );

	mov	eax, 8

; 266  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN9@get_preced:

; 258  :     case '+':
; 259  :     case '-':
; 260  :         return( item->specval ? 9 : 7 );

	cmp	BYTE PTR [rcx+1], 0
	mov	eax, 7
	mov	edx, 9
	cmovne	eax, edx

; 266  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@get_preced:

; 261  :     }
; 262  :     /* shouldn't happen! */
; 263  :     DebugMsg(("get_precedence: unexpected operator=%s\n", item->string_ptr));
; 264  :     fnEmitErr( SYNTAX_ERROR_EX, item->string_ptr );

	mov	rdx, QWORD PTR [rcx+8]
	mov	ecx, 209				; 000000d1H
	call	QWORD PTR fnEmitErr

; 265  :     return( ERROR );

	or	eax, -1

; 266  : }

	add	rsp, 40					; 00000028H
	ret	0
	npad	2
$LN12@get_preced:
	DD	$LN4@get_preced
	DD	$LN5@get_preced
	DD	$LN8@get_preced
	DD	$LN9@get_preced
	DD	$LN6@get_preced
	DD	$LN7@get_preced
	DD	$LN2@get_preced
$LN11@get_preced:
	DB	0
	DB	0
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
	DB	6
	DB	2
	DB	3
	DB	6
	DB	3
	DB	4
	DB	2
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	5
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	6
	DB	1
get_precedence ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT TokenAssign
_TEXT	SEGMENT
opnd1$ = 8
opnd2$ = 16
TokenAssign PROC					; COMDAT

; 147  : #if 1
; 148  :     /* note that offsetof() is used. This means, don't change position
; 149  :      of field <type> in expr! */
; 150  :     memcpy( opnd1, opnd2, offsetof( struct expr, type ) );

	movups	xmm0, XMMWORD PTR [rdx]
	movups	XMMWORD PTR [rcx], xmm0
	movups	xmm1, XMMWORD PTR [rdx+16]
	movups	XMMWORD PTR [rcx+16], xmm1
	movups	xmm0, XMMWORD PTR [rdx+32]
	movups	XMMWORD PTR [rcx+32], xmm0
	movups	xmm1, XMMWORD PTR [rdx+48]
	movups	XMMWORD PTR [rcx+48], xmm1
	movups	xmm0, XMMWORD PTR [rdx+64]
	movups	XMMWORD PTR [rcx+64], xmm0
	movups	xmm1, XMMWORD PTR [rdx+80]
	movups	XMMWORD PTR [rcx+80], xmm1

; 151  : #else
; 152  :     opnd1->llvalue  = opnd2->llvalue;
; 153  :     opnd1->hlvalue  = opnd2->hlvalue;
; 154  :     opnd1->quoted_string   = opnd2->quoted_string; /* probably useless */
; 155  :     opnd1->base_reg = opnd2->base_reg;
; 156  :     opnd1->idx_reg  = opnd2->idx_reg;
; 157  :     opnd1->label_tok = opnd2->label_tok;
; 158  :     opnd1->override = opnd2->override;
; 159  :     opnd1->instr    = opnd2->instr;
; 160  :     opnd1->kind     = opnd2->kind;
; 161  :     opnd1->mem_type = opnd2->mem_type;
; 162  :     opnd1->scale    = opnd2->scale;
; 163  :     opnd1->Ofssize  = opnd2->Ofssize;
; 164  :     opnd1->flags1   = opnd2->flags1;
; 165  :     opnd1->sym      = opnd2->sym;
; 166  :     opnd1->mbr      = opnd2->mbr;
; 167  : //  opnd1->type     = opnd2->type;
; 168  : #endif
; 169  : }

	ret	0
TokenAssign ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
;	COMDAT init_expr
_TEXT	SEGMENT
opnd$ = 8
init_expr PROC						; COMDAT

; 125  :     opnd->value    = 0;

	xor	eax, eax

; 126  :     opnd->hvalue   = 0;
; 127  :     opnd->hlvalue  = 0;
; 128  :     opnd->quoted_string   = NULL;
; 129  :     opnd->base_reg = NULL;
; 130  :     opnd->idx_reg  = NULL;
; 131  :     opnd->label_tok = NULL;
; 132  :     opnd->override = NULL;
; 133  :     opnd->instr    = EMPTY;

	mov	DWORD PTR [rcx+56], -2
	mov	QWORD PTR [rcx], rax
	mov	QWORD PTR [rcx+8], rax
	mov	QWORD PTR [rcx+16], rax
	mov	QWORD PTR [rcx+24], rax
	mov	QWORD PTR [rcx+32], rax
	mov	QWORD PTR [rcx+40], rax
	mov	QWORD PTR [rcx+48], rax

; 134  :     opnd->kind     = EXPR_EMPTY;
; 135  :     opnd->mem_type = MT_EMPTY;
; 136  :     opnd->scale    = 0;
; 137  :     opnd->Ofssize  = USE_EMPTY;
; 138  :     opnd->flags1   = 0;

	mov	BYTE PTR [rcx+76], al

; 139  :     opnd->sym      = NULL;

	mov	QWORD PTR [rcx+80], rax

; 140  :     opnd->mbr      = NULL;

	mov	QWORD PTR [rcx+88], rax

; 141  :     opnd->type     = NULL;

	mov	QWORD PTR [rcx+96], rax
	mov	DWORD PTR [rcx+60], -2
	mov	DWORD PTR [rcx+64], 192			; 000000c0H
	mov	WORD PTR [rcx+68], 65024		; 0000fe00H

; 142  : }

	ret	0
init_expr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
msg$ = 8
noEmitErr PROC

; 3459 : {

	mov	QWORD PTR [rsp+16], rdx

; 3460 :     return( ERROR );

	or	eax, -1
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9

; 3461 : }

	ret	0
noEmitErr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
opnd$ = 48
EmitConstError PROC

; 3487 : {

$LN7:
	sub	rsp, 40					; 00000028H

; 3488 :     if ( opnd->hlvalue != 0 )

	mov	rdx, QWORD PTR [rcx+8]
	test	rdx, rdx
	je	SHORT $LN2@EmitConstE

; 3489 :         EmitErr( CONSTANT_VALUE_TOO_LARGE_EX, opnd->hlvalue, opnd->value64 );

	mov	r8, QWORD PTR [rcx]
	mov	ecx, 272				; 00000110H
	call	EmitErr

; 3492 :     return( ERROR );

	or	eax, -1

; 3493 : }

	add	rsp, 40					; 00000028H
	ret	0
$LN2@EmitConstE:

; 3490 :     else
; 3491 :         EmitErr( CONSTANT_VALUE_TOO_LARGE, opnd->value64 );

	mov	rdx, QWORD PTR [rcx]
	mov	ecx, 235				; 000000ebH
	call	EmitErr

; 3492 :     return( ERROR );

	or	eax, -1

; 3493 : }

	add	rsp, 40					; 00000028H
	ret	0
EmitConstError ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
ExprEvalInit PROC

; 3500 :     thissym = NULL;

	xor	eax, eax
	mov	QWORD PTR thissym, rax

; 3501 :     nullstruct = NULL;

	mov	QWORD PTR nullstruct, rax

; 3502 :     nullmbr = NULL;

	mov	QWORD PTR nullmbr, rax

; 3503 : }

	ret	0
ExprEvalInit ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\expreval.c
_TEXT	SEGMENT
start_tok$ = 64
tokenarray$ = 72
end_tok$ = 80
result$ = 88
flags$ = 96
EvalOperand PROC

; 3469 : {

$LN15:
	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 48					; 00000030H

; 3470 :     int         i;
; 3471 : 
; 3472 :     DebugMsg1(("EvalOperand(start=%u, end=%u, flags=%X) enter: >%s<\n", *start_tok, end_tok, flags, tokenarray[*start_tok].tokpos ));
; 3473 : 
; 3474 :     init_expr( result );

	xor	eax, eax
	mov	DWORD PTR [r9+56], -2
	mov	QWORD PTR [r9], rax
	mov	r10, r9
	mov	QWORD PTR [r9+8], rax
	mov	r11d, r8d
	mov	QWORD PTR [r9+16], rax
	mov	rbx, rdx
	mov	QWORD PTR [r9+24], rax
	mov	rdi, rcx
	mov	QWORD PTR [r9+32], rax
	mov	QWORD PTR [r9+40], rax
	mov	QWORD PTR [r9+48], rax
	mov	BYTE PTR [r9+76], al
	mov	QWORD PTR [r9+80], rax
	mov	QWORD PTR [r9+88], rax
	mov	QWORD PTR [r9+96], rax
	mov	DWORD PTR [r9+60], -2
	mov	DWORD PTR [r9+64], 192			; 000000c0H
	mov	WORD PTR [r9+68], 65024			; 0000fe00H

; 3475 : 
; 3476 :     for( i = *start_tok; ( i < end_tok ) && is_expr_item( &tokenarray[i] ); i++ );

	mov	r9d, DWORD PTR [rcx]
	cmp	r9d, r8d
	jge	SHORT $LN13@EvalOperan
	npad	6
$LL4@EvalOperan:
	movsxd	rcx, r9d
	shl	rcx, 5
	add	rcx, rbx
	call	is_expr_item
	test	al, al
	je	SHORT $LN13@EvalOperan
	inc	r9d
	cmp	r9d, r11d
	jl	SHORT $LL4@EvalOperan
$LN13@EvalOperan:

; 3477 :     if ( i == *start_tok )

	cmp	r9d, DWORD PTR [rdi]
	jne	SHORT $LN5@EvalOperan

; 3478 :         return( NOT_ERROR );

	xor	eax, eax

; 3483 : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
$LN5@EvalOperan:

; 3479 : 
; 3480 :     /* v2.10: global flag 'error_msg' replaced by 'fnEmitErr()' */
; 3481 :     fnEmitErr = ( ( flags & EXPF_NOERRMSG ) ? noEmitErr : EmitErr );

	movzx	edx, BYTE PTR flags$[rsp]
	lea	r8, OFFSET FLAT:noEmitErr
	movzx	eax, dl

; 3482 :     return ( evaluate( result, start_tok, tokenarray, i, flags ) );

	mov	BYTE PTR flags$[rsp], dl
	and	al, 1
	lea	rcx, OFFSET FLAT:EmitErr
	mov	rdx, rdi
	cmovne	rcx, r8
	mov	r8, rbx
	mov	QWORD PTR fnEmitErr, rcx
	mov	rcx, r10

; 3483 : }

	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi

; 3482 :     return ( evaluate( result, start_tok, tokenarray, i, flags ) );

	jmp	evaluate
EvalOperand ENDP
_TEXT	ENDS
END
