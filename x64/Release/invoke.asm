; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG11805 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	decoflags:BYTE
_DATA	ENDS
_BSS	SEGMENT
$SG11816 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	broadflags:BYTE
COMM	evex:BYTE
COMM	ZEROLOCALS:BYTE
_DATA	ENDS
CONST	SEGMENT
fastcall_tab DQ	FLAT:ms32_fcstart
	DQ	FLAT:ms32_fcend
	DQ	FLAT:ms32_param
	DQ	FLAT:watc_fcstart
	DQ	FLAT:watc_fcend
	DQ	FLAT:watc_param
	DQ	FLAT:ms64_fcstart
	DQ	FLAT:ms64_fcend
	DQ	FLAT:ms64_param
ms16_regs DD	09H
	DD	0bH
	DD	0cH
	ORG $+4
ms32_regs DD	012H
	DD	013H
CONST	ENDS
_DATA	SEGMENT
$SG11265 DB	' mov %r, %s', 00H
$SG11306 DB	's', 00H
	ORG $+2
$SG11266 DB	' movd %r, %r', 00H
	ORG $+3
$SG11267 DB	' mov %r, %r ptr %s', 00H
	ORG $+1
$SG11307 DB	'z', 00H
	ORG $+2
$SG11268 DB	' movd %r, %r', 00H
	ORG $+3
$SG11271 DB	' movd %r, %s', 00H
	ORG $+3
$SG11272 DB	' movq %r, %s', 00H
	ORG $+3
$SG11277 DB	' lea %r, %s', 00H
$SG11312 DB	'0', 00H
	ORG $+2
$SG11304 DB	' movsxd %r, %s', 00H
	ORG $+1
$SG11305 DB	' mov %r, %s', 00H
$SG11465 DB	' ', 00H
	ORG $+2
$SG11308 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11313 DB	'NULL', 00H
	ORG $+3
$SG11314 DB	'FALSE', 00H
	ORG $+2
$SG11316 DB	' xor %r, %r', 00H
$SG11650 DB	'z', 00H
	ORG $+2
$SG11317 DB	' mov %r, %s', 00H
$SG11351 DB	'seg ', 00H
	ORG $+3
$SG11354 DB	'seg ', 00H
	ORG $+3
$SG11651 DB	's', 00H
	ORG $+2
$SG11375 DB	' add %r, %u', 00H
$SG11664 DB	'z', 00H
	ORG $+2
$SG11377 DB	' add %r, %u', 00H
$SG11665 DB	's', 00H
	ORG $+2
$SG11425 DB	'%r %s, %r', 00H
	ORG $+2
$SG11752 DB	's', 00H
	ORG $+2
$SG11426 DB	'%r %s, %s', 00H
	ORG $+2
$SG11753 DB	'z', 00H
	ORG $+2
$SG11427 DB	'%r %s, %r %s', 00H
	ORG $+3
$SG11437 DB	'mov %s, %r (%s)', 00H
$SG11438 DB	'mov %s, %s', 00H
	ORG $+1
$SG11808 DB	'w', 00H
	ORG $+2
$SG11441 DB	'mov %s, %s', 00H
	ORG $+1
$SG11812 DB	'w', 00H
	ORG $+2
$SG11444 DB	'mov %s, %s', 00H
	ORG $+1
$SG11815 DB	'd', 00H
	ORG $+2
$SG11447 DB	'mov %s, %r %r %s[%u]', 00H
	ORG $+3
$SG11538 DB	' push %s', 00H
	ORG $+3
$SG11821 DB	'd', 00H
	ORG $+2
$SG11539 DB	' lea %r, %s', 00H
$SG11823 DB	'w', 00H
	ORG $+2
$SG11540 DB	' push %r', 00H
	ORG $+3
$SG11829 DB	'd', 00H
	ORG $+2
$SG11547 DB	' db 66h', 00H
$SG11548 DB	' push %r', 00H
	ORG $+3
$SG11923 DB	' call ', 00H
	ORG $+1
$SG11246 DB	's', 00H
	ORG $+2
$SG11549 DB	' push %s', 00H
	ORG $+3
$SG11090 DB	'movsx', 00H
	ORG $+2
$SG11247 DB	'z', 00H
	ORG $+2
$SG11552 DB	' mov %r, offset %s', 00H
	ORG $+5
$SG11553 DB	' push %r', 00H
	ORG $+7
$SG11559 DB	' pushd %r %s', 00H
	ORG $+3
$SG11563 DB	' pushw %r %s', 00H
	ORG $+3
$SG11564 DB	' push %r %s', 00H
	ORG $+4
$SG11573 DB	' db 66h', 00H
$SG11574 DB	' push %r', 00H
	ORG $+7
$SG11615 DB	' sub %r, 2', 00H
	ORG $+5
$SG11616 DB	' push word ptr %s+%u', 00H
	ORG $+3
$SG11617 DB	' push %r ptr %s+%u', 00H
	ORG $+5
$SG11623 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11624 DB	' push %r', 00H
	ORG $+7
$SG11628 DB	' mov %r, %s', 00H
	ORG $+4
$SG11629 DB	' push %r', 00H
	ORG $+7
$SG11638 DB	' xor %r, %r', 00H
	ORG $+4
$SG11639 DB	' push %r', 00H
	ORG $+7
$SG11640 DB	' push 0', 00H
$SG11641 DB	' mov %r, %s', 00H
	ORG $+4
$SG11643 DB	' mov %r, 0', 00H
	ORG $+5
$SG11644 DB	' mov %r, %s', 00H
$SG11645 DB	' cbw', 00H
	ORG $+3
$SG11647 DB	' cwd', 00H
	ORG $+7
$SG11648 DB	' push %r', 00H
	ORG $+7
$SG11649 DB	' push %r', 00H
	ORG $+7
$SG11652 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11653 DB	' push %r', 00H
	ORG $+7
$SG11661 DB	' pushw 0', 00H
	ORG $+7
$SG11662 DB	' sub %r, 2', 00H
	ORG $+5
$SG11663 DB	' push %s', 00H
	ORG $+7
$SG11666 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11667 DB	' push %r', 00H
	ORG $+7
$SG11669 DB	' push %s', 00H
	ORG $+7
$SG11674 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11675 DB	' push %r', 00H
	ORG $+7
$SG11678 DB	' mov %r, %s', 00H
$SG11679 DB	' cwd', 00H
	ORG $+7
$SG11680 DB	' push %r', 00H
	ORG $+7
$SG11681 DB	' push %r', 00H
	ORG $+7
$SG11682 DB	' push %s', 00H
	ORG $+7
$SG11687 DB	' xor %r, %r', 00H
	ORG $+4
$SG11688 DB	' push %r', 00H
	ORG $+7
$SG11689 DB	' pushw 0', 00H
	ORG $+7
$SG11690 DB	' push %s', 00H
	ORG $+7
$SG11711 DB	' mov %r, %s', 00H
	ORG $+4
$SG11716 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11720 DB	' mov %r, %s', 00H
$SG11721 DB	' cbw', 00H
	ORG $+7
$SG11723 DB	' mov %r, %s', 00H
$SG11724 DB	' cwd', 00H
	ORG $+7
$SG11725 DB	' push %r', 00H
	ORG $+7
$SG11734 DB	' sub %r, 2', 00H
	ORG $+5
$SG11737 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11738 DB	' pushw 0', 00H
	ORG $+7
$SG11739 DB	' pushw 0', 00H
	ORG $+7
$SG11743 DB	' xor %r, %r', 00H
	ORG $+4
$SG11744 DB	' push %r', 00H
	ORG $+7
$SG11754 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11756 DB	' mov %r, %s', 00H
$SG11760 DB	' cbw', 00H
	ORG $+7
$SG11762 DB	' mov %r, 0', 00H
	ORG $+5
$SG11766 DB	' push %r', 00H
	ORG $+7
$SG11790 DB	' mov %r, %s', 00H
	ORG $+4
$SG11792 DB	' xor %r, %r', 00H
	ORG $+4
$SG11796 DB	' xor %r, %r', 00H
	ORG $+4
$SG11797 DB	' mov %r, %r (%s)', 00H
	ORG $+7
$SG11798 DB	' push %r', 00H
	ORG $+7
$SG11802 DB	' mov %r, %r (%s)', 00H
	ORG $+7
$SG11804 DB	' push %r', 00H
	ORG $+7
$SG11817 DB	' push%s (%s) shr 32t', 00H
	ORG $+3
$SG11822 DB	' pushw %r (%s)', 00H
	ORG $+1
$SG11828 DB	' pushd %r (%s)', 00H
	ORG $+1
$SG11833 DB	' push%s %r (%s)', 00H
$SG11834 DB	' push%s %s', 00H
	ORG $+5
$SG11928 DB	' externdef %r %s: %r %r', 00H
$SG11929 DB	' externdef %s: %r %r', 00H
	ORG $+3
$SG11936 DB	' add %r, %u', 00H
	ORG $+4
$SG11937 DB	' add %r, %u', 00H
	ORG $+4
$SG11085 DB	' lea %r, %s', 00H
$SG11091 DB	'movzx', 00H
	ORG $+6
$SG11092 DB	' %s %r, %s', 00H
	ORG $+5
$SG11093 DB	' mov %r, %s', 00H
	ORG $+4
$SG11094 DB	' mov %r, 0', 00H
	ORG $+5
$SG11097 DB	' mov %r, %s', 00H
	ORG $+4
$SG11124 DB	' sub %r, %d', 00H
	ORG $+4
$SG11133 DB	' add %r, %d', 00H
	ORG $+4
$SG11197 DB	' lea %r, %s', 00H
	ORG $+4
$SG11198 DB	' mov [%r+%u], %r', 00H
	ORG $+7
$SG11205 DB	' mov %r ptr [%r+%u], %r ( %s )', 00H
	ORG $+1
$SG11206 DB	' mov %r ptr [%r+%u], %r ( %s )', 00H
	ORG $+1
$SG11212 DB	' mov %r ptr [%r+%u], %s', 00H
$SG11217 DB	' mov %r ptr [%r+%u+0], %r (%s)', 00H
	ORG $+1
$SG11218 DB	' mov %r ptr [%r+%u+4], %r (%s)', 00H
	ORG $+1
$SG11219 DB	' mov %r ptr [%r+%u], %s', 00H
$SG11244 DB	' movsxd %r, %s', 00H
	ORG $+1
$SG11245 DB	' mov %r, %s', 00H
	ORG $+4
$SG11248 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11251 DB	' mov %r, %s', 00H
	ORG $+4
$SG11252 DB	' mov [%r+%u], %r', 00H
	ORG $+7
$SG11260 DB	' movq %r, %s', 00H
_DATA	ENDS
PUBLIC	InvokeDirective
EXTRN	strchr:PROC
EXTRN	_stricmp:PROC
EXTRN	EmitErr:PROC
EXTRN	EmitWarn:PROC
EXTRN	SymFind:PROC
EXTRN	SizeFromMemtype:PROC
EXTRN	SizeFromRegister:PROC
EXTRN	GetResWName:PROC
EXTRN	EvalOperand:PROC
EXTRN	AddLineQueue:PROC
EXTRN	AddLineQueueX:PROC
EXTRN	RunLineQueue:PROC
EXTRN	search_assume:PROC
EXTRN	GetStdAssume:PROC
EXTRN	GetSymOfssize:PROC
EXTRN	GetCurrOffset:PROC
EXTRN	GetGroup:PROC
EXTRN	LstWrite:PROC
EXTRN	Mangle:PROC
EXTRN	memcpy:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	Parse_Pass:DWORD
EXTRN	SpecialTable:BYTE
EXTRN	sym_ReservedStack:QWORD
EXTRN	maxintvalues:BYTE
EXTRN	minintvalues:BYTE
EXTRN	stackreg:BYTE
EXTRN	__ImageBase:BYTE
_BSS	SEGMENT
	ALIGN	4

size_vararg DD	01H DUP (?)
fcscratch DD	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$ms32_fcstart DD imagerel ms32_fcstart
	DD	imagerel ms32_fcstart+82
	DD	imagerel $unwind$ms32_fcstart
$pdata$ms32_param DD imagerel ms32_param
	DD	imagerel ms32_param+409
	DD	imagerel $unwind$ms32_param
$pdata$watc_param DD imagerel watc_param
	DD	imagerel watc_param+441
	DD	imagerel $unwind$watc_param
$pdata$3$watc_param DD imagerel watc_param+441
	DD	imagerel watc_param+694
	DD	imagerel $chain$3$watc_param
$pdata$4$watc_param DD imagerel watc_param+694
	DD	imagerel watc_param+735
	DD	imagerel $chain$4$watc_param
$pdata$ms64_fcstart DD imagerel ms64_fcstart
	DD	imagerel ms64_fcstart+179
	DD	imagerel $unwind$ms64_fcstart
$pdata$ms64_param DD imagerel ms64_param
	DD	imagerel ms64_param+2321
	DD	imagerel $unwind$ms64_param
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetSegmentPart DD imagerel GetSegmentPart
	DD	imagerel GetSegmentPart+312
	DD	imagerel $unwind$GetSegmentPart
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$SkipTypecast DD imagerel SkipTypecast
	DD	imagerel SkipTypecast+30
	DD	imagerel $unwind$SkipTypecast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$SkipTypecast DD imagerel SkipTypecast+30
	DD	imagerel SkipTypecast+198
	DD	imagerel $chain$0$SkipTypecast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$SkipTypecast DD imagerel SkipTypecast+198
	DD	imagerel SkipTypecast+203
	DD	imagerel $chain$1$SkipTypecast
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$PushInvokeParam DD imagerel PushInvokeParam
	DD	imagerel PushInvokeParam+5105
	DD	imagerel $unwind$PushInvokeParam
pdata	ENDS
pdata	SEGMENT
$pdata$InvokeDirective DD imagerel $LN131
	DD	imagerel $LN131+301
	DD	imagerel $unwind$InvokeDirective
$pdata$2$InvokeDirective DD imagerel $LN131+301
	DD	imagerel $LN131+420
	DD	imagerel $chain$2$InvokeDirective
$pdata$3$InvokeDirective DD imagerel $LN131+420
	DD	imagerel $LN131+530
	DD	imagerel $chain$3$InvokeDirective
$pdata$5$InvokeDirective DD imagerel $LN131+530
	DD	imagerel $LN131+1503
	DD	imagerel $chain$5$InvokeDirective
pdata	ENDS
CONST	SEGMENT
regax	DD	09H
	DD	011H
	DD	073H
	ORG $+4
ms64_regs DD	02H
	DD	03H
	DD	05bH
	DD	05cH
	DD	0aH
	DD	0bH
	DD	063H
	DD	064H
	DD	012H
	DD	013H
	DD	06bH
	DD	06cH
	DD	074H
	DD	075H
	DD	07bH
	DD	07cH
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$PushInvokeParam DD 0db401H
	DD	0118e4b4H
	DD	011974acH
	DD	0120349dH
	DD	011a0121H
	DD	0d010f012H
	DD	0600cc00eH
	DD	0500bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$SkipTypecast DD 021H
	DD	imagerel SkipTypecast
	DD	imagerel SkipTypecast+30
	DD	imagerel $unwind$SkipTypecast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$SkipTypecast DD 020421H
	DD	03404H
	DD	imagerel SkipTypecast
	DD	imagerel SkipTypecast+30
	DD	imagerel $unwind$SkipTypecast
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$SkipTypecast DD 010401H
	DD	0204H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetSegmentPart DD 086d01H
	DD	06746dH
	DD	08540fH
	DD	07340fH
	DD	0600b320fH
xdata	ENDS
xdata	SEGMENT
$unwind$ms32_fcstart DD 020601H
	DD	030023206H
$unwind$ms32_param DD 0b7c01H
	DD	0a747cH
	DD	085477H
	DD	04e42aH
	DD	096425H
	DD	0f0044208H
	DD	03002H
$unwind$watc_param DD 0bec01H
	DD	029e4ecH
	DD	02654e4H
	DD	027745aH
	DD	022010cH
	DD	06003f005H
	DD	03002H
$chain$3$watc_param DD 020821H
	DD	028c408H
	DD	imagerel watc_param
	DD	imagerel watc_param+441
	DD	imagerel $unwind$watc_param
$chain$4$watc_param DD 021H
	DD	imagerel watc_param
	DD	imagerel watc_param+441
	DD	imagerel $unwind$watc_param
$unwind$ms64_fcstart DD 010401H
	DD	04204H
$unwind$ms64_param DD 0aba01H
	DD	0e34baH
	DD	0f0155219H
	DD	0d011e013H
	DD	0700dc00fH
	DD	0500b600cH
$unwind$InvokeDirective DD 061201H
	DD	01b0112H
	DD	07004f006H
	DD	050023003H
$chain$2$InvokeDirective DD 063a21H
	DD	019c43aH
	DD	018d412H
	DD	01a6408H
	DD	imagerel $LN131
	DD	imagerel $LN131+301
	DD	imagerel $unwind$InvokeDirective
$chain$3$InvokeDirective DD 021H
	DD	imagerel $LN131
	DD	imagerel $LN131+301
	DD	imagerel $unwind$InvokeDirective
$chain$5$InvokeDirective DD 081b21H
	DD	017e41bH
	DD	018d400H
	DD	019c400H
	DD	01a6400H
	DD	imagerel $LN131
	DD	imagerel $LN131+301
	DD	imagerel $unwind$InvokeDirective
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
value$ = 48
opnd$ = 64
porder$ = 256
i$ = 256
r0flags$ = 264
tokenarray$ = 264
namepos$1$ = 272
parmpos$1$ = 280
InvokeDirective PROC

; 1439 : {

$LN131:
	push	rbp
	push	rbx
	push	rdi
	push	r15
	lea	rbp, QWORD PTR [rsp-63]
	sub	rsp, 216				; 000000d8H

; 1440 :     struct asym    *sym;
; 1441 :     struct dsym    *proc;
; 1442 :     char           *p;
; 1443 :     //char         *param;
; 1444 :     int            numParam;
; 1445 :     int            value;
; 1446 :     int            size;
; 1447 :     int            parmpos;
; 1448 :     int            namepos;
; 1449 :     int            porder;
; 1450 :     uint_8         r0flags = 0;
; 1451 :     //bool           uselabel = FALSE;
; 1452 :     struct proc_info *info;
; 1453 :     struct dsym    *curr;
; 1454 :     struct expr    opnd;
; 1455 :     //char           buffer[MAX_LINE_LEN];
; 1456 : 
; 1457 :     DebugMsg1(("InvokeDir(%s) enter\n", tokenarray[i].tokpos ));
; 1458 : 
; 1459 :     i++; /* skip INVOKE directive */

	lea	eax, DWORD PTR [rcx+1]
	mov	BYTE PTR r0flags$[rbp-153], 0
	mov	DWORD PTR i$[rbp-153], eax

; 1460 :     namepos = i;
; 1461 : 
; 1462 :     /* if there is more than just an ID item describing the invoke target,
; 1463 :      use the expression evaluator to get it
; 1464 :      */
; 1465 :     if ( tokenarray[i].token != T_ID || ( tokenarray[i+1].token != T_COMMA && tokenarray[i+1].token != T_FINAL ) ) {

	lea	rbx, OFFSET FLAT:__ImageBase
	mov	DWORD PTR namepos$1$[rbp-153], eax
	mov	r15, rdx
	cdqe
	shl	rax, 5
	cmp	BYTE PTR [rax+rdx], 8
	jne	SHORT $LN21@InvokeDire
	movzx	ecx, BYTE PTR [rax+rdx+32]
	cmp	cl, 44					; 0000002cH
	je	SHORT $LN19@InvokeDire
	test	cl, cl
	jne	SHORT $LN21@InvokeDire
$LN19@InvokeDire:

; 1499 : 
; 1500 :     } else {
; 1501 :         opnd.base_reg = NULL;

	mov	QWORD PTR opnd$[rbp-129], 0

; 1502 :         sym = SymSearch( tokenarray[i].string_ptr );

	mov	rcx, QWORD PTR [rax+rdx+8]
	call	SymFind

; 1503 :         i++;

	inc	DWORD PTR i$[rbp-153]
	mov	rdi, rax
	jmp	$LN27@InvokeDire
$LN21@InvokeDire:

; 1466 :     //if ( tokenarray[i+1].token != T_COMMA && tokenarray[i+1].token != T_FINAL ) {
; 1467 :         if ( ERROR == EvalOperand( &i, tokenarray, Token_Count, &opnd, 0 ) )

	mov	r8d, DWORD PTR ModuleInfo+496
	lea	r9, QWORD PTR opnd$[rbp-153]
	lea	rcx, QWORD PTR i$[rbp-153]
	mov	BYTE PTR [rsp+32], 0
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN22@InvokeDire

; 1468 :             return( ERROR );

	or	rax, -1

; 1676 : }

	add	rsp, 216				; 000000d8H
	pop	r15
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
$LN22@InvokeDire:

; 1469 :         DebugMsg1(("InvokeDir: target is expression, kind=%u sym=%s mbr=%s type=%s memtype=%X ofssize=%u\n",
; 1470 :                    opnd.kind,
; 1471 :                    opnd.sym ? opnd.sym->name : "NULL",
; 1472 :                    opnd.mbr ? opnd.mbr->name : "NULL",
; 1473 :                    opnd.type ? opnd.type->name : "NULL",
; 1474 :                    opnd.mem_type, opnd.Ofssize ));
; 1475 : #if 1
; 1476 :         /* a typecast with PTR? Since v1.95, this has highest priority */
; 1477 :         //if (opnd.explicit == TRUE && opnd.type != NULL && opnd.type->state == SYM_TYPE ) {
; 1478 :         /* v1.96: removed opnd.explicit!!! */
; 1479 :         /* fixme: if opnd.type is set, opnd.type MUST have state SYM_TYPE */
; 1480 :         if ( opnd.type != NULL && opnd.type->state == SYM_TYPE ) {

	mov	rax, QWORD PTR opnd$[rbp-57]
	test	rax, rax
	je	SHORT $LN25@InvokeDire
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN25@InvokeDire

; 1481 :             sym = opnd.type;
; 1482 :             DebugMsg1(("InvokeDirective: opnd.type=>%s< mem_type=%Xh\n", sym->name, sym->mem_type ));
; 1483 :             proc = (struct dsym *)sym;
; 1484 :             //if ( opnd.label_tok != NULL ) /* v2.09: uselabel obsolete */
; 1485 :             //    uselabel = TRUE;
; 1486 :             if ( sym->mem_type == MT_PROC ) /* added for v1.95 */

	mov	ecx, DWORD PTR [rax+36]
	cmp	ecx, 128				; 00000080H
	je	$isfnproto$132

; 1487 :                 goto isfnproto;
; 1488 :             if ( sym->mem_type == MT_PTR )  /* v2.09: mem_type must be MT_PTR */

	cmp	ecx, 195				; 000000c3H
	je	$isfnptr$133
$LN25@InvokeDire:

; 1489 :                 goto isfnptr;
; 1490 :         }
; 1491 : #endif
; 1492 :         if ( opnd.kind == EXPR_REG ) {

	cmp	DWORD PTR opnd$[rbp-93], 2
	jne	SHORT $LN26@InvokeDire

; 1493 :             if ( GetValueSp( opnd.base_reg->tokval ) & OP_RGT8 )

	mov	rax, QWORD PTR opnd$[rbp-129]
	mov	ecx, DWORD PTR [rax+16]
	lea	rax, QWORD PTR [rcx+rcx*2]
	test	BYTE PTR SpecialTable[rbx+rax*4], 14
	je	$LN98@InvokeDire

; 1494 :                 sym = GetStdAssume( GetRegNo( opnd.base_reg->tokval ) );

	movzx	ecx, BYTE PTR SpecialTable[rbx+rax*4+10]
	call	GetStdAssume
	mov	rdi, rax
	jmp	SHORT $LN27@InvokeDire
$LN26@InvokeDire:

; 1495 :             else
; 1496 :                 sym = NULL;
; 1497 :         } else
; 1498 :             sym = ( opnd.mbr ? opnd.mbr : opnd.sym );

	mov	rax, QWORD PTR opnd$[rbp-65]
	mov	rdi, QWORD PTR opnd$[rbp-73]
	test	rax, rax
	cmovne	rdi, rax
$LN27@InvokeDire:

; 1504 :     }
; 1505 : 
; 1506 :     if( sym == NULL ) {

	test	rdi, rdi
	je	$LN98@InvokeDire

; 1507 :         /* v2.04: msg changed */
; 1508 :         return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );
; 1509 :         //return( EmitErr( SYMBOL_NOT_DEFINED, name ) );
; 1510 :     }
; 1511 :     if( sym->isproc )  /* the most simple case: symbol is a PROC */

	test	BYTE PTR [rdi+41], 8
	jne	SHORT $LN42@InvokeDire

; 1512 :         ;
; 1513 :     else if ( sym->mem_type == MT_PTR && sym->target_type && sym->target_type->isproc )

	mov	ecx, DWORD PTR [rdi+36]
	cmp	ecx, 195				; 000000c3H
	jne	$LN35@InvokeDire
	mov	rax, QWORD PTR [rdi+48]
	test	rax, rax
	je	$LN33@InvokeDire
	test	BYTE PTR [rax+41], 8
	je	SHORT $LN33@InvokeDire

; 1514 :         sym = sym->target_type;

	mov	rdi, rax
$LN42@InvokeDire:
	mov	QWORD PTR [rsp+208], rsi

; 1536 :         }
; 1537 :     } else {
; 1538 :         DebugMsg(("InvokeDir: error, sym=%s state=%u memtype=%Xh [type=%s memtype=%Xh]\n",
; 1539 :                   sym->name, sym->state, sym->mem_type,
; 1540 :                   sym->type ? sym->type->name : "NULL",
; 1541 :                   sym->type ? sym->type->mem_type : 0));
; 1542 : #ifdef DEBUG_OUT
; 1543 :         if ( sym->mem_type == MT_PTR || sym->mem_type == MT_PROC )
; 1544 :             DebugMsg(("InvokeDir: error, target_type=%s [memtype=%X pmemtype=%X isproc=%u])\n",
; 1545 :                       sym->target_type->name,
; 1546 :                       sym->target_type->mem_type,
; 1547 :                       sym->target_type->ptr_memtype,
; 1548 :                       sym->target_type->isproc ));
; 1549 : #endif
; 1550 :         return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );
; 1551 :     }
; 1552 :     proc = (struct dsym *)sym;
; 1553 :     info = proc->e.procinfo;
; 1554 : 
; 1555 : #if 0 /* v2.05: can't happen anymore */
; 1556 :     /* does FASTCALL variant support INVOKE? */
; 1557 :     if ( proc->sym.langtype == LANG_FASTCALL && fastcall_tab[ModuleInfo.fctype].invokestart == NULL ) {
; 1558 :         return( EmitError( FASTCALL_VARIANT_NOT_SUPPORTED ) );
; 1559 :     }
; 1560 : #endif
; 1561 : 
; 1562 :     /* get the number of parameters */
; 1563 : 
; 1564 :     for ( curr = info->paralist, numParam = 0 ; curr ; curr = curr->nextparam, numParam++ );

	xor	esi, esi
	mov	QWORD PTR [rsp+192], r13
	mov	r13, QWORD PTR [rdi+96]
	mov	rax, QWORD PTR [r13+8]
	test	rax, rax
	je	SHORT $LN3@InvokeDire
	npad	4
$LL4@InvokeDire:
	mov	rax, QWORD PTR [rax+112]
	inc	esi
	test	rax, rax
	jne	SHORT $LL4@InvokeDire
$LN3@InvokeDire:

; 1565 :     DebugMsg1(("InvokeDir: numparams=%u\n", numParam ));
; 1566 : 
; 1567 :     if ( proc->sym.langtype == LANG_FASTCALL ) {

	cmp	DWORD PTR [rdi+76], 7
	mov	QWORD PTR [rsp+200], r12
	jne	$LN104@InvokeDire

; 1568 :         fcscratch = 0;
; 1569 :         porder = fastcall_tab[ModuleInfo.fctype].invokestart( proc, numParam, i, tokenarray, &value );

	movsxd	rax, DWORD PTR ModuleInfo+376
	mov	r9, r15
	mov	r8d, DWORD PTR i$[rbp-153]
	mov	edx, esi
	mov	rcx, rdi
	mov	DWORD PTR fcscratch, 0
	lea	r10, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR value$[rbp-153]
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR fastcall_tab[rbx+r10*8]
	mov	r12d, eax
	jmp	SHORT $LN43@InvokeDire
$LN33@InvokeDire:

; 1515 :     else if ( sym->mem_type == MT_PTR && sym->target_type && sym->target_type->mem_type == MT_PROC ) {

	cmp	ecx, 195				; 000000c3H
	jne	SHORT $LN35@InvokeDire
	mov	rax, QWORD PTR [rdi+48]
	test	rax, rax
	je	SHORT $LN35@InvokeDire
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	je	SHORT $isfnptr$133
$LN35@InvokeDire:

; 1516 :         proc = (struct dsym *)sym->target_type;
; 1517 :         goto isfnproto;
; 1518 :     } else if ( ( sym->mem_type == MT_TYPE ) && ( sym->type->mem_type == MT_PTR || sym->type->mem_type == MT_PROC ) ) {

	cmp	ecx, 196				; 000000c4H
	jne	SHORT $LN98@InvokeDire
	mov	rax, QWORD PTR [rdi+80]
	mov	ecx, DWORD PTR [rax+36]
	cmp	ecx, 195				; 000000c3H
	je	SHORT $LN39@InvokeDire
	cmp	ecx, 128				; 00000080H
	jne	SHORT $LN98@InvokeDire
$LN39@InvokeDire:

; 1519 :         /* second case: symbol is a (function?) pointer */
; 1520 :         proc = (struct dsym *)sym->type;
; 1521 :         if ( proc->sym.mem_type != MT_PROC )

	cmp	ecx, 128				; 00000080H
	jne	SHORT $isfnptr$133
$isfnproto$132:

; 1522 :             goto isfnptr;
; 1523 :     isfnproto:
; 1524 :         /* pointer target must be a PROTO typedef */
; 1525 :         if ( proc->sym.mem_type != MT_PROC ) {

	cmp	DWORD PTR [rax+36], 128			; 00000080H
	jne	SHORT $LN98@InvokeDire
$isfnptr$133:

; 1526 :             DebugMsg(("InvokeDir: error proc.name=>%s< .mem_type=%Xh\n", proc->sym.name, proc->sym.mem_type ));
; 1527 :             DebugMsg(("InvokeDir: error sym.name=%s\n", sym ? sym->name : "" ));
; 1528 :             return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );
; 1529 :         }
; 1530 :     isfnptr:
; 1531 :         /* get the pointer target */
; 1532 :         sym = proc->sym.target_type;

	mov	rdi, QWORD PTR [rax+48]

; 1533 :         DebugMsg1(("InvokeDir: proc=%s target_type=>%s<\n", proc->sym.name, sym ? sym->name : "NULL" ));
; 1534 :         if ( sym == NULL ) {

	test	rdi, rdi
	jne	$LN42@InvokeDire
$LN98@InvokeDire:

; 1535 :             return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );

	mov	ecx, 159				; 0000009fH
	call	EmitErr

; 1676 : }

	add	rsp, 216				; 000000d8H
	pop	r15
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
$LN104@InvokeDire:

; 1568 :         fcscratch = 0;
; 1569 :         porder = fastcall_tab[ModuleInfo.fctype].invokestart( proc, numParam, i, tokenarray, &value );

	mov	r12d, DWORD PTR porder$[rbp-153]
$LN43@InvokeDire:

; 1570 :     }
; 1571 : 
; 1572 :     curr = info->paralist;
; 1573 :     parmpos = i;
; 1574 : 
; 1575 :     if ( !( info->has_vararg ) ) {

	test	BYTE PTR [r13+84], 1
	mov	eax, DWORD PTR i$[rbp-153]
	mov	rbx, QWORD PTR [r13+8]
	mov	DWORD PTR parmpos$1$[rbp-153], eax
	mov	QWORD PTR [rsp+184], r14
	jne	SHORT $LN44@InvokeDire

; 1576 :         /* check if there is a superfluous parameter in the INVOKE call */
; 1577 :         if ( PushInvokeParam( i, tokenarray, proc, NULL, numParam, &r0flags ) != ERROR ) {

	lea	rcx, QWORD PTR r0flags$[rbp-153]
	xor	r9d, r9d
	mov	QWORD PTR [rsp+40], rcx
	mov	r8, rdi
	mov	ecx, eax
	mov	DWORD PTR [rsp+32], esi
	mov	rdx, r15
	call	PushInvokeParam
	cmp	eax, -1
	je	$LN121@InvokeDire

; 1578 :             DebugMsg(("InvokeDir: superfluous argument, i=%u\n", i));
; 1579 :             return( EmitErr( TOO_MANY_ARGUMENTS_TO_INVOKE ) );

	mov	ecx, 177				; 000000b1H
	call	EmitErr
	jmp	$LN127@InvokeDire
$LN44@InvokeDire:

; 1580 :         }
; 1581 :     } else {
; 1582 :         int j = (Token_Count - i) / 2;

	mov	eax, DWORD PTR ModuleInfo+496

; 1583 :         /* for VARARG procs, just push the additional params with
; 1584 :          the VARARG descriptor
; 1585 :         */
; 1586 :         numParam--;

	dec	esi
	sub	eax, DWORD PTR i$[rbp-153]
	cdq

; 1587 :         size_vararg = 0; /* reset the VARARG parameter size count */

	mov	DWORD PTR size_vararg, 0
	sub	eax, edx
	sar	eax, 1
	mov	r14d, eax

; 1588 :         while ( curr && curr->sym.is_vararg == FALSE ) curr = curr->nextparam;

	test	rbx, rbx
	je	SHORT $LN120@InvokeDire
$LL5@InvokeDire:
	test	BYTE PTR [rbx+47], 32			; 00000020H
	jne	SHORT $LN120@InvokeDire
	mov	rbx, QWORD PTR [rbx+112]
	test	rbx, rbx
	jne	SHORT $LL5@InvokeDire
$LN120@InvokeDire:

; 1589 :         DebugMsg1(("InvokeDir: VARARG proc, numparams=%u, actual (max) params=%u, parasize=%u\n", numParam, j, info->parasize));
; 1590 :         for ( ; j >= numParam; j-- )

	cmp	eax, esi
	jl	SHORT $LN117@InvokeDire
	npad	7
$LL9@InvokeDire:

; 1591 :             PushInvokeParam( i, tokenarray, proc, curr, j, &r0flags );

	mov	ecx, DWORD PTR i$[rbp-153]
	lea	rax, QWORD PTR r0flags$[rbp-153]
	mov	QWORD PTR [rsp+40], rax
	mov	r9, rbx
	mov	r8, rdi
	mov	DWORD PTR [rsp+32], r14d
	mov	rdx, r15
	call	PushInvokeParam
	dec	r14d
	cmp	r14d, esi
	jge	SHORT $LL9@InvokeDire
$LN117@InvokeDire:

; 1592 :         /* move to first non-vararg parameter, if any */
; 1593 :         for ( curr = info->paralist; curr && curr->sym.is_vararg == TRUE; curr = curr->nextparam );

	mov	rbx, QWORD PTR [r13+8]
	test	rbx, rbx
	je	SHORT $LN121@InvokeDire
$LL12@InvokeDire:
	test	BYTE PTR [rbx+47], 32			; 00000020H
	je	SHORT $LN121@InvokeDire
	mov	rbx, QWORD PTR [rbx+112]
	test	rbx, rbx
	jne	SHORT $LL12@InvokeDire
$LN121@InvokeDire:

; 1594 :     }
; 1595 : 
; 1596 :     /* the parameters are usually stored in "push" order.
; 1597 :      * This if() must match the one in proc.c, ParseParams().
; 1598 :      */
; 1599 : 
; 1600 :     if ( sym->langtype == LANG_STDCALL ||
; 1601 :         sym->langtype == LANG_C ||
; 1602 :         ( sym->langtype == LANG_FASTCALL && porder ) ||

	mov	ecx, DWORD PTR [rdi+76]
	lea	eax, DWORD PTR [rcx-1]
	test	eax, -3					; fffffffdH
	je	SHORT $LN49@InvokeDire
	cmp	ecx, 7
	jne	SHORT $LN50@InvokeDire
	test	r12d, r12d
	jne	SHORT $LN49@InvokeDire
$LN50@InvokeDire:
	cmp	ecx, 2
	je	SHORT $LN49@InvokeDire

; 1609 :             }
; 1610 :         }
; 1611 :     } else {
; 1612 :         for ( numParam = 0 ; curr && curr->sym.is_vararg == FALSE; curr = curr->nextparam, numParam++ ) {

	xor	esi, esi
	test	rbx, rbx
	je	$LN119@InvokeDire
$LL18@InvokeDire:
	test	BYTE PTR [rbx+47], 32			; 00000020H
	jne	$LN119@InvokeDire

; 1613 :             if ( PushInvokeParam( i, tokenarray, proc, curr, numParam, &r0flags ) == ERROR ) {

	mov	ecx, DWORD PTR i$[rbp-153]
	lea	rax, QWORD PTR r0flags$[rbp-153]
	mov	QWORD PTR [rsp+40], rax
	mov	r9, rbx
	mov	r8, rdi
	mov	DWORD PTR [rsp+32], esi
	mov	rdx, r15
	call	PushInvokeParam
	cmp	eax, -1
	jne	SHORT $LN16@InvokeDire

; 1614 :                 DebugMsg(("InvokeDir: PushInvokeParam(curr=%u, i=%u, numParam=%u) failed\n", curr, i, numParam));
; 1615 :                 EmitErr( TOO_FEW_ARGUMENTS_TO_INVOKE, sym->name );

	mov	rdx, QWORD PTR [rdi+8]
	mov	ecx, 146				; 00000092H
	call	EmitErr
$LN16@InvokeDire:

; 1609 :             }
; 1610 :         }
; 1611 :     } else {
; 1612 :         for ( numParam = 0 ; curr && curr->sym.is_vararg == FALSE; curr = curr->nextparam, numParam++ ) {

	mov	rbx, QWORD PTR [rbx+112]
	inc	esi
	test	rbx, rbx
	jne	SHORT $LL18@InvokeDire

; 1460 :     namepos = i;
; 1461 : 
; 1462 :     /* if there is more than just an ID item describing the invoke target,
; 1463 :      use the expression evaluator to get it
; 1464 :      */
; 1465 :     if ( tokenarray[i].token != T_ID || ( tokenarray[i+1].token != T_COMMA && tokenarray[i+1].token != T_FINAL ) ) {

	jmp	SHORT $LN119@InvokeDire
$LN49@InvokeDire:

; 1603 :         sym->langtype == LANG_SYSCALL ) {
; 1604 :         for ( ; curr ; curr = curr->nextparam ) {

	test	rbx, rbx
	je	SHORT $LN119@InvokeDire
	npad	13
$LL15@InvokeDire:

; 1605 :             numParam--;
; 1606 :             if ( PushInvokeParam( i, tokenarray, proc, curr, numParam, &r0flags ) == ERROR ) {

	mov	ecx, DWORD PTR i$[rbp-153]
	lea	rax, QWORD PTR r0flags$[rbp-153]
	mov	QWORD PTR [rsp+40], rax
	dec	esi
	mov	r9, rbx
	mov	DWORD PTR [rsp+32], esi
	mov	r8, rdi
	mov	rdx, r15
	call	PushInvokeParam
	cmp	eax, -1
	jne	SHORT $LN13@InvokeDire

; 1607 :                 DebugMsg(("InvokeDir: PushInvokeParam(curr=%u, i=%u, numParam=%u) failed\n", curr, i, numParam));
; 1608 :                 EmitErr( TOO_FEW_ARGUMENTS_TO_INVOKE, sym->name );

	mov	rdx, QWORD PTR [rdi+8]
	mov	ecx, 146				; 00000092H
	call	EmitErr
$LN13@InvokeDire:

; 1603 :         sym->langtype == LANG_SYSCALL ) {
; 1604 :         for ( ; curr ; curr = curr->nextparam ) {

	mov	rbx, QWORD PTR [rbx+112]
	test	rbx, rbx
	jne	SHORT $LL15@InvokeDire
$LN119@InvokeDire:

; 1616 :             }
; 1617 :         }
; 1618 :     }
; 1619 : #if 1
; 1620 :     /* v2.05 added. A warning only, because Masm accepts this. */
; 1621 :     if ( opnd.base_reg != NULL &&
; 1622 :         Parse_Pass == PASS_1 &&
; 1623 :         (r0flags & R0_USED ) &&

	mov	rax, QWORD PTR opnd$[rbp-129]
	test	rax, rax
	je	SHORT $LN53@InvokeDire
	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN53@InvokeDire
	test	BYTE PTR r0flags$[rbp-153], 1
	je	SHORT $LN53@InvokeDire
	cmp	BYTE PTR [rax+1], 0
	jne	SHORT $LN53@InvokeDire

; 1624 :         opnd.base_reg->bytval == 0 )
; 1625 :         EmitWarn( 2, REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	edx, 165				; 000000a5H
	mov	ecx, 2
	call	EmitWarn
$LN53@InvokeDire:

; 1626 : #endif
; 1627 :     p = StringBufferEnd;

	mov	r14, QWORD PTR ModuleInfo+488

; 1628 :     strcpy( p, " call " );

	lea	rcx, OFFSET FLAT:$SG11923
	mov	rdx, r14
	sub	rdx, rcx
	npad	3
$LL66@InvokeDire:
	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL66@InvokeDire

; 1629 :     p += 6;

	add	r14, 6

; 1630 :     /* v2.09: 'uselabel' obsolete */
; 1631 :     //if ( uselabel ) {
; 1632 :     //    DebugMsg1(("InvokeDir: opnd.label_tok is used: %s\n", opnd.label_tok->string_ptr ));
; 1633 :     //    strcpy( p, opnd.label_tok->string_ptr );
; 1634 :     //} else {
; 1635 : #if DLLIMPORT
; 1636 :         if ( sym->state == SYM_EXTERNAL && sym->dll ) {

	cmp	DWORD PTR [rdi+32], 2
	jne	$LN123@InvokeDire
	cmp	QWORD PTR [rdi+56], 0
	je	$LN123@InvokeDire

; 1637 :             char *iatname = p;
; 1638 :             strcpy( p, ModuleInfo.g.imp_prefix );

	mov	rcx, QWORD PTR ModuleInfo+88
	mov	rbx, r14
	mov	rdx, r14
	npad	12
$LL67@InvokeDire:
	movzx	eax, BYTE PTR [rcx]
	lea	rcx, QWORD PTR [rcx+1]
	mov	BYTE PTR [rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL67@InvokeDire

; 1639 :             p += strlen( p );

	or	rax, -1
$LL101@InvokeDire:
	inc	rax
	cmp	BYTE PTR [r14+rax], 0
	jne	SHORT $LL101@InvokeDire
	add	r14, rax

; 1640 :             p += Mangle( sym, p );

	mov	rcx, rdi
	mov	rdx, r14
	call	Mangle

; 1641 :             namepos++;

	mov	r12d, DWORD PTR namepos$1$[rbp-153]
	movsxd	rcx, eax
	inc	r12d

; 1642 :             if ( sym->iat_used == FALSE ) {

	movzx	eax, BYTE PTR [rdi+40]
	add	r14, rcx
	test	al, 8
	jne	SHORT $LN57@InvokeDire

; 1643 :                 sym->iat_used = TRUE;

	or	al, 8
	mov	BYTE PTR [rdi+40], al

; 1644 :                 sym->dll->cnt++;

	mov	rax, QWORD PTR [rdi+56]
	inc	DWORD PTR [rax+8]

; 1645 :                 if ( sym->langtype != LANG_NONE && sym->langtype != ModuleInfo.langtype )

	mov	edx, DWORD PTR [rdi+76]
	test	edx, edx
	je	SHORT $LN56@InvokeDire
	cmp	edx, DWORD PTR ModuleInfo+364
	je	SHORT $LN56@InvokeDire

; 1646 :                     AddLineQueueX( " externdef %r %s: %r %r", sym->langtype + T_C - 1, iatname, T_PTR, T_PROC );

	add	edx, 263				; 00000107H
	mov	DWORD PTR [rsp+32], 432			; 000001b0H
	mov	r9d, 258				; 00000102H
	lea	rcx, OFFSET FLAT:$SG11928
	mov	r8, rbx
	call	AddLineQueueX
	jmp	SHORT $LN57@InvokeDire
$LN56@InvokeDire:

; 1647 :                 else
; 1648 :                     AddLineQueueX( " externdef %s: %r %r", iatname, T_PTR, T_PROC );

	mov	r9d, 432				; 000001b0H
	lea	rcx, OFFSET FLAT:$SG11929
	mov	r8d, 258				; 00000102H
	mov	rdx, rbx
	call	AddLineQueueX
	jmp	SHORT $LN57@InvokeDire
$LN123@InvokeDire:
	mov	r12d, DWORD PTR namepos$1$[rbp-153]
$LN57@InvokeDire:

; 1649 :             }
; 1650 :         }
; 1651 : #endif
; 1652 :         size = tokenarray[parmpos].tokpos - tokenarray[namepos].tokpos;

	movsxd	rax, DWORD PTR parmpos$1$[rbp-153]
	shl	rax, 5
	movsxd	rdx, r12d
	shl	rdx, 5
	mov	ecx, DWORD PTR [rax+r15+24]
	sub	ecx, DWORD PTR [rdx+r15+24]

; 1653 :         memcpy( p, tokenarray[namepos].tokpos, size );

	mov	rdx, QWORD PTR [rdx+r15+24]
	movsxd	rbx, ecx
	mov	rcx, r14
	mov	r8, rbx
	call	memcpy

; 1654 :         *(p+size) = NULLC;

	mov	BYTE PTR [rbx+r14], 0

; 1655 : #if 0  /* v2.09: uselabel obsolete */
; 1656 :     }
; 1657 : #endif
; 1658 :     AddLineQueue( StringBufferEnd );

	mov	rcx, QWORD PTR ModuleInfo+488
	call	AddLineQueue

; 1659 : 
; 1660 :     if (( sym->langtype == LANG_C || sym->langtype == LANG_SYSCALL ) &&

	mov	ecx, DWORD PTR [rdi+76]
	lea	eax, DWORD PTR [rcx-1]
	cmp	eax, 1
	ja	SHORT $LN58@InvokeDire
	mov	r8d, DWORD PTR [r13+32]
	mov	eax, DWORD PTR size_vararg
	test	r8d, r8d
	jne	SHORT $LN61@InvokeDire
	test	BYTE PTR [r13+84], 1
	je	SHORT $LN58@InvokeDire
	test	eax, eax
	je	SHORT $LN58@InvokeDire
$LN61@InvokeDire:

; 1661 :         ( info->parasize || ( info->has_vararg && size_vararg ) )) {
; 1662 :         if ( info->has_vararg ) {

	test	BYTE PTR [r13+84], 1

; 1663 :             DebugMsg1(("InvokeDir: size of fix args=%u, var args=%u\n", info->parasize, size_vararg));
; 1664 :             AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL info->parasize + size_vararg );

	lea	r10, OFFSET FLAT:__ImageBase
	je	SHORT $LN62@InvokeDire
	add	r8d, eax
	lea	rcx, OFFSET FLAT:$SG11936
	movzx	eax, BYTE PTR ModuleInfo+404
	mov	edx, DWORD PTR stackreg[r10+rax*4]
	call	AddLineQueueX

; 1665 :         } else

	jmp	SHORT $LN63@InvokeDire
$LN62@InvokeDire:

; 1666 :             AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL info->parasize );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:$SG11937
	mov	edx, DWORD PTR stackreg[r10+rax*4]
	call	AddLineQueueX
	jmp	SHORT $LN63@InvokeDire
$LN58@InvokeDire:

; 1667 :     } else if ( sym->langtype == LANG_FASTCALL ) {

	cmp	ecx, 7
	jne	SHORT $LN63@InvokeDire

; 1668 :         fastcall_tab[ModuleInfo.fctype].invokeend( proc, numParam, value );

	movsxd	rax, DWORD PTR ModuleInfo+376
	lea	r10, OFFSET FLAT:__ImageBase
	mov	r8d, DWORD PTR value$[rbp-153]
	mov	edx, esi
	mov	rcx, rdi
	lea	r9, QWORD PTR [rax+rax*2]
	call	QWORD PTR fastcall_tab[r10+r9*8+8]
$LN63@InvokeDire:

; 1669 :     }
; 1670 : 
; 1671 :     LstWrite( LSTTYPE_DIRECTIVE, GetCurrOffset(), NULL );

	call	GetCurrOffset
	xor	r8d, r8d
	mov	edx, eax
	lea	ecx, QWORD PTR [r8+4]
	call	LstWrite

; 1672 : 
; 1673 :     RunLineQueue();

	call	RunLineQueue

; 1674 : 
; 1675 :     return( NOT_ERROR );

	xor	eax, eax
$LN127@InvokeDire:
	mov	r14, QWORD PTR [rsp+184]
	mov	r12, QWORD PTR [rsp+200]
	mov	rsi, QWORD PTR [rsp+208]
	mov	r13, QWORD PTR [rsp+192]

; 1676 : }

	add	rsp, 216				; 000000d8H
	pop	r15
	pop	rdi
	pop	rbx
	pop	rbp
	ret	0
InvokeDirective ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
;	COMDAT PushInvokeParam
_TEXT	SEGMENT
addr$1$ = 64
j$ = 68
tv172 = 72
asize$3$ = 76
opnd$ = 80
fullparam$ = 192
buffer$ = 1216
i$ = 2304
tokenarray$ = 2312
proc$ = 2320
curr$ = 2328
reqParam$ = 2336
r0flags$ = 2344
PushInvokeParam PROC					; COMDAT

; 723  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	r12
	push	r13
	push	r15
	lea	rbp, QWORD PTR [rsp-2000]
	sub	rsp, 2256				; 000008d0H
	mov	r13, rdx
	movsxd	r12, ecx

; 724  :     int currParm;
; 725  :     int psize;
; 726  :     int asize;
; 727  :     int pushsize;
; 728  :     int j;
; 729  :     int fptrsize;
; 730  :     char Ofssize;
; 731  :     bool addr = FALSE; /* ADDR operator found */
; 732  :     struct expr opnd;
; 733  :     char fullparam[MAX_LINE_LEN];
; 734  :     char buffer[MAX_LINE_LEN];
; 735  : 
; 736  :     DebugMsg1(("PushInvokeParam(%s, param=%s:%u, i=%u ) enter\n", proc->sym.name, curr ? curr->sym.name : "NULL", reqParam, i ));
; 737  :     for ( currParm = 0; currParm <= reqParam; ) {

	mov	edx, DWORD PTR reqParam$[rbp-256]
	xor	r10d, r10d
	mov	BYTE PTR addr$1$[rsp], 0
	mov	r15, r9
	mov	rsi, r8
	test	edx, edx
	js	SHORT $LN3@PushInvoke

; 723  : {

	mov	rax, r12
	shl	rax, 5
	add	rax, r13
	npad	7
$LL2@PushInvoke:

; 738  :         if ( tokenarray[i].token == T_FINAL ) { /* this is no real error! */

	movzx	ecx, BYTE PTR [rax]
	test	cl, cl
	je	SHORT $LN252@PushInvoke

; 741  :         }
; 742  :         if ( tokenarray[i].token == T_COMMA ) {

	cmp	cl, 44					; 0000002cH
	jne	SHORT $LN17@PushInvoke

; 743  :             currParm++;

	inc	r10d
$LN17@PushInvoke:

; 744  :         }
; 745  :         i++;

	inc	r12d
	add	rax, 32					; 00000020H
	cmp	r10d, edx
	jle	SHORT $LL2@PushInvoke
$LN3@PushInvoke:

; 746  :     }
; 747  :     /* if curr is NULL this call is just a parameter check */
; 748  :     if ( !curr ) return( NOT_ERROR );

	test	r9, r9
	jne	SHORT $LN18@PushInvoke
	xor	eax, eax

; 1433 : }

	add	rsp, 2256				; 000008d0H
	pop	r15
	pop	r13
	pop	r12
	pop	rsi
	pop	rbp
	ret	0
$LN252@PushInvoke:

; 739  :             DebugMsg1(("PushInvokeParam(%s): T_FINAL token, i=%u\n", proc->sym.name, i));
; 740  :             return( ERROR );

	or	eax, -1

; 1433 : }

	add	rsp, 2256				; 000008d0H
	pop	r15
	pop	r13
	pop	r12
	pop	rsi
	pop	rbp
	ret	0
$LN18@PushInvoke:
	mov	QWORD PTR [rsp+2304], rbx

; 749  : 
; 750  : #if 1 /* v2.05 */
; 751  :     psize = curr->sym.total_size;
; 752  :     DebugMsg1(("PushInvokeParam(%s,%u): pmtype=%Xh, psize=%u\n", proc->sym.name, reqParam, curr->sym.mem_type, psize ));
; 753  : #else
; 754  :     /* set psize (size of parameter) */
; 755  :     if ( curr->is_ptr ) {
; 756  :         psize = 2 << curr->sym.Ofssize;
; 757  :         if ( curr->sym.isfar )
; 758  :             psize += 2;
; 759  :     } else
; 760  :         psize = SizeFromMemtype( curr->sym.mem_type, curr->sym.Ofssize, curr->sym.type );
; 761  :     DebugMsg1(("PushInvokeParam(%s,%u): is_ptr=%u, pmtype=%Xh, psize=%u\n", proc->sym.name, reqParam, curr->is_ptr, curr->sym.mem_type, psize ));
; 762  : #endif
; 763  : 
; 764  :     /* ADDR: the argument's address is to be pushed? */
; 765  :     if ( tokenarray[i].token == T_RES_ID && tokenarray[i].tokval == T_ADDR ) {

	movsxd	rax, r12d
	shl	rax, 5
	mov	QWORD PTR [rsp+2248], rdi
	mov	QWORD PTR [rsp+2240], r14
	mov	r14d, DWORD PTR [r9+56]
	cmp	BYTE PTR [rax+r13], 7
	jne	SHORT $LN19@PushInvoke
	cmp	DWORD PTR [rax+r13+16], 260		; 00000104H
	jne	SHORT $LN19@PushInvoke

; 766  :         addr = TRUE;

	mov	BYTE PTR addr$1$[rsp], 1

; 767  :         i++;

	inc	r12d
$LN19@PushInvoke:

; 768  :     }
; 769  : 
; 770  :     /* copy the parameter tokens to fullparam */
; 771  :     for ( j = i; tokenarray[j].token != T_COMMA && tokenarray[j].token != T_FINAL; j++ );

	movsxd	rdx, r12d
	mov	ecx, r12d
	mov	rax, rdx
	mov	DWORD PTR j$[rsp], ecx
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], 44			; 0000002cH
	lea	rdi, QWORD PTR [rax+r13]
	je	SHORT $LN284@PushInvoke
	shl	rdx, 5
	movzx	eax, BYTE PTR [rdx+r13]
$LL7@PushInvoke:
	test	al, al
	je	SHORT $LN284@PushInvoke
	inc	ecx
	movsxd	rax, ecx
	shl	rax, 5
	mov	DWORD PTR j$[rsp], ecx
	movzx	eax, BYTE PTR [rax+r13]
	cmp	al, 44					; 0000002cH
	jne	SHORT $LL7@PushInvoke
$LN284@PushInvoke:

; 772  :     memcpy( fullparam, tokenarray[i].tokpos, tokenarray[j].tokpos - tokenarray[i].tokpos );

	mov	rdi, QWORD PTR [rdi+24]
	movsxd	rbx, ecx
	mov	rdx, rdi
	shl	rbx, 5
	lea	rcx, QWORD PTR fullparam$[rbp-256]
	mov	r8, QWORD PTR [rbx+r13+24]
	sub	r8, rdi
	call	memcpy

; 773  :     fullparam[tokenarray[j].tokpos - tokenarray[i].tokpos] = NULLC;

	mov	rax, QWORD PTR [rbx+r13+24]
	sub	rax, rdi

; 774  : 
; 775  :     j = i;

	mov	DWORD PTR j$[rsp], r12d

; 776  :     /* v2.11: GetSymOfssize() doesn't work for state SYM_TYPE */
; 777  :     //fptrsize = 2 + ( 2 << GetSymOfssize( &proc->sym ) );
; 778  :     Ofssize = ( proc->sym.state == SYM_TYPE ? proc->sym.seg_ofssize : GetSymOfssize( &proc->sym ) );

	cmp	DWORD PTR [rsi+32], 7
	mov	BYTE PTR fullparam$[rbp+rax-256], 0
	jne	SHORT $LN241@PushInvoke
	movzx	eax, BYTE PTR [rsi+47]
	and	al, 3
	jmp	SHORT $LN292@PushInvoke
$LN241@PushInvoke:
	mov	rcx, rsi
	call	GetSymOfssize
$LN292@PushInvoke:

; 779  :     fptrsize = 2 + ( 2 << Ofssize );
; 780  : 
; 781  :     if ( addr ) {

	mov	rdi, QWORD PTR r0flags$[rbp-256]
	mov	esi, 2
	movsx	r9d, al
	mov	DWORD PTR tv172[rsp], eax
	mov	ecx, r9d
	mov	eax, esi
	shl	eax, cl
	cmp	BYTE PTR addr$1$[rsp], 0
	mov	DWORD PTR asize$3$[rsp], eax
	lea	ebx, DWORD PTR [rax+2]
	je	$LN20@PushInvoke

; 782  :         /* v2.06: don't handle forward refs if -Zne is set */
; 783  :         //if ( EvalOperand( &j, Token_Count, &opnd, 0 ) == ERROR )
; 784  :         if ( EvalOperand( &j, tokenarray, Token_Count, &opnd, ModuleInfo.invoke_exprparm ) == ERROR )

	movzx	eax, BYTE PTR ModuleInfo+426
	lea	r9, QWORD PTR opnd$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	lea	rcx, QWORD PTR j$[rsp]
	mov	rdx, r13
	mov	BYTE PTR [rsp+32], al
	call	EvalOperand
	cmp	eax, -1
	je	$LN301@PushInvoke

; 785  :             return( ERROR );
; 786  : 
; 787  :         /* DWORD (16bit) and FWORD(32bit) are treated like FAR ptrs
; 788  :          * v2.11: argument may be a FAR32 pointer ( psize == 6 ), while
; 789  :          * fptrsize may be just 4!
; 790  :          */
; 791  :         //if ( psize > fptrsize ) {
; 792  :         if ( psize > fptrsize && fptrsize > 4 ) {

	cmp	r14d, ebx
	jle	SHORT $LN23@PushInvoke
	cmp	ebx, 4
	jle	SHORT $LN23@PushInvoke

; 793  :             /* QWORD is NOT accepted as a FAR ptr */
; 794  :             DebugMsg1(("PushInvokeParm(%u): error, psize=%u, fptrsize=%u\n", reqParam, psize, fptrsize));
; 795  :             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	edx, DWORD PTR reqParam$[rbp-256]
	inc	edx

; 796  :             return( NOT_ERROR );

	jmp	$LN293@PushInvoke
$LN23@PushInvoke:

; 797  :         }
; 798  : 
; 799  :         if ( proc->sym.langtype == LANG_FASTCALL )

	mov	rcx, QWORD PTR proc$[rbp-256]
	lea	r12, OFFSET FLAT:__ImageBase
	cmp	DWORD PTR [rcx+76], 7
	jne	SHORT $LN25@PushInvoke

; 800  :             if ( fastcall_tab[ModuleInfo.fctype].handleparam( proc, reqParam, curr, addr, &opnd, fullparam, r0flags ) )

	movsxd	rax, DWORD PTR ModuleInfo+376
	mov	r8, r15
	movzx	r9d, BYTE PTR addr$1$[rsp]
	mov	edx, DWORD PTR reqParam$[rbp-256]
	mov	QWORD PTR [rsp+48], rdi
	lea	r10, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR fullparam$[rbp-256]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR opnd$[rsp]
	mov	QWORD PTR [rsp+32], rax
	call	QWORD PTR fastcall_tab[r12+r10*8+16]
	test	eax, eax
	jne	$LN294@PushInvoke
$LN25@PushInvoke:

; 801  :                 return( NOT_ERROR );
; 802  : 
; 803  :         if ( opnd.kind == EXPR_REG || opnd.indirect ) {

	cmp	DWORD PTR opnd$[rbp-196], esi
	je	SHORT $LN28@PushInvoke
	test	BYTE PTR opnd$[rbp-184], 1
	je	$push_address$303
$LN28@PushInvoke:

; 804  :             if ( curr->sym.isfar || psize == fptrsize ) {

	test	BYTE PTR [r15+47], 16
	jne	SHORT $LN30@PushInvoke
	cmp	r14d, ebx
	jne	SHORT $LN29@PushInvoke
$LN30@PushInvoke:

; 805  :                 DebugMsg1(("PushInvokeParam: far ptr, %s isfar=%u, psize=%u, fptrsize=%u\n", curr->sym.name, curr->sym.isfar, psize, fptrsize ));
; 806  :                 if ( opnd.sym && opnd.sym->state == SYM_STACK )

	mov	rax, QWORD PTR opnd$[rbp-176]
	test	rax, rax
	je	SHORT $LN31@PushInvoke
	cmp	DWORD PTR [rax+32], 5
	jne	SHORT $LN31@PushInvoke

; 807  :                     GetResWName( T_SS, buffer );

	mov	ecx, 27
	jmp	SHORT $LN295@PushInvoke
$LN31@PushInvoke:

; 808  :                 else if ( opnd.override != NULL )

	mov	rcx, QWORD PTR opnd$[rbp-208]
	test	rcx, rcx
	je	SHORT $LN33@PushInvoke

; 809  :                     strcpy( buffer, opnd.override->string_ptr );

	mov	rcx, QWORD PTR [rcx+8]
	lea	rdx, QWORD PTR buffer$[rbp-256]
	npad	12
$LL243@PushInvoke:
	movzx	eax, BYTE PTR [rcx]
	lea	rcx, QWORD PTR [rcx+1]
	mov	BYTE PTR [rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL243@PushInvoke
	jmp	SHORT $LN34@PushInvoke
$LN33@PushInvoke:

; 810  :                 else
; 811  :                     GetResWName( T_DS, buffer );

	mov	ecx, 28
$LN295@PushInvoke:
	lea	rdx, QWORD PTR buffer$[rbp-256]
	call	GetResWName
$LN34@PushInvoke:

; 812  :                 AddLineQueueX( " push %s", buffer );

	lea	rdx, QWORD PTR buffer$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11538
	call	AddLineQueueX
$LN29@PushInvoke:

; 813  :             }
; 814  :             AddLineQueueX( " lea %r, %s", regax[ModuleInfo.Ofssize], fullparam );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	r8, QWORD PTR fullparam$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11539
	mov	edx, DWORD PTR regax[r12+rax*4]
	call	AddLineQueueX

; 815  :             *r0flags |= R0_USED;

	or	BYTE PTR [rdi], 1

; 816  :             AddLineQueueX( " push %r", regax[ModuleInfo.Ofssize] );

	lea	rcx, OFFSET FLAT:$SG11540
	movzx	eax, BYTE PTR ModuleInfo+404
	mov	edx, DWORD PTR regax[r12+rax*4]
	call	AddLineQueueX

; 817  :         } else {

	jmp	$LN277@PushInvoke
$LN20@PushInvoke:

; 871  : 
; 872  :         /* handle the <reg>::<reg> case here, the evaluator wont handle it */
; 873  :         if ( tokenarray[j].token == T_REG &&
; 874  :             tokenarray[j+1].token == T_DBL_COLON &&

	movsxd	rdx, DWORD PTR j$[rsp]
	lea	r8, OFFSET FLAT:__ImageBase
	mov	rcx, rdx
	shl	rcx, 5
	cmp	BYTE PTR [rcx+r13], sil
	jne	$LN53@PushInvoke
	cmp	BYTE PTR [rcx+r13+32], 13
	jne	$LN53@PushInvoke
	lea	rax, QWORD PTR [rdx+2]
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], sil
	jne	$LN53@PushInvoke

; 875  :             tokenarray[j+2].token == T_REG ) {
; 876  :             int asize2;
; 877  :             /* for pointers, segreg size is assumed to be always 2 */
; 878  :             if ( GetValueSp( tokenarray[j].tokval ) & OP_SR ) {

	mov	edx, DWORD PTR [rcx+r13+16]
	lea	rax, QWORD PTR [rdx+rdx*2]
	test	DWORD PTR SpecialTable[r8+rax*4], 24576	; 00006000H
	je	SHORT $LN55@PushInvoke

; 879  :                 asize2 = 2;
; 880  :                 /* v2.11: if target and current src have different offset sizes,
; 881  :                  * the push of the segment register must be 66h-prefixed!
; 882  :                  */
; 883  :                 if ( Ofssize != ModuleInfo.Ofssize || ( curr->sym.Ofssize == USE16 && CurrWordSize > 2 ) )

	movzx	eax, BYTE PTR ModuleInfo+404
	mov	ebx, esi
	cmp	r9d, eax
	jne	SHORT $LN58@PushInvoke
	cmp	BYTE PTR [r15+44], 0
	jne	SHORT $LN56@PushInvoke
	cmp	BYTE PTR ModuleInfo+406, bl
	jbe	SHORT $LN56@PushInvoke
$LN58@PushInvoke:

; 884  :                     AddLineQueue( " db 66h" );

	lea	rcx, OFFSET FLAT:$SG11573
	call	AddLineQueue

; 885  :             } else

	jmp	SHORT $LN56@PushInvoke
$LN55@PushInvoke:

; 886  :                 asize2 = SizeFromRegister( tokenarray[j].tokval );

	mov	ecx, edx
	call	SizeFromRegister
	mov	ebx, eax
$LN56@PushInvoke:

; 887  :             asize = SizeFromRegister( tokenarray[j+2].tokval );

	movsxd	rcx, DWORD PTR j$[rsp]
	shl	rcx, 5
	mov	ecx, DWORD PTR [rcx+r13+80]
	call	SizeFromRegister

; 888  :             AddLineQueueX( " push %r", tokenarray[j].tokval );

	movsxd	rcx, DWORD PTR j$[rsp]
	mov	edi, eax
	shl	rcx, 5
	mov	edx, DWORD PTR [rcx+r13+16]
	lea	rcx, OFFSET FLAT:$SG11574
	call	AddLineQueueX

; 889  :             /* v2.04: changed */
; 890  :             if (( curr->sym.is_vararg ) && (asize + asize2) != CurrWordSize )

	test	BYTE PTR [r15+47], 32			; 00000020H
	je	SHORT $LN59@PushInvoke
	movzx	ecx, BYTE PTR ModuleInfo+406
	lea	edx, DWORD PTR [rdi+rbx]
	cmp	edx, ecx
	je	SHORT $LN59@PushInvoke

; 891  :                 size_vararg += asize2;

	add	DWORD PTR size_vararg, ebx
	jmp	SHORT $LN60@PushInvoke
$LN59@PushInvoke:

; 892  :             else
; 893  :                 asize += asize2;

	add	edi, ebx
$LN60@PushInvoke:

; 894  :             strcpy( fullparam, tokenarray[j+2].string_ptr );

	movsxd	r8, DWORD PTR j$[rsp]
	lea	rdx, QWORD PTR fullparam$[rbp-256]
	mov	rax, r8
	shl	rax, 5
	mov	rcx, QWORD PTR [rax+r13+72]
	npad	14
$LL246@PushInvoke:
	movzx	eax, BYTE PTR [rcx]
	lea	rcx, QWORD PTR [rcx+1]
	mov	BYTE PTR [rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL246@PushInvoke

; 895  : 
; 896  :             opnd.kind = EXPR_REG;
; 897  :             opnd.indirect = FALSE;

	and	DWORD PTR opnd$[rbp-184], -2		; fffffffeH

; 898  :             opnd.sym = NULL;
; 899  :             opnd.base_reg = &tokenarray[j+2]; /* for error msg 'eax overwritten...' */

	lea	eax, DWORD PTR [r8+2]
	xor	ecx, ecx
	mov	edx, esi
	mov	QWORD PTR opnd$[rbp-176], rcx
	movsxd	rcx, eax
	shl	rcx, 5
	add	rcx, r13
	mov	DWORD PTR opnd$[rbp-196], edx
	mov	QWORD PTR opnd$[rsp+24], rcx

; 900  :         } else {

	jmp	$LN278@PushInvoke
$LN53@PushInvoke:

; 901  :             /* v2.06: don't handle forward refs if -Zne is set */
; 902  :             //if ( EvalOperand( &j, Token_Count, &opnd, 0 ) == ERROR ) {
; 903  :             if ( EvalOperand( &j, tokenarray, Token_Count, &opnd, ModuleInfo.invoke_exprparm ) == ERROR ) {

	movzx	eax, BYTE PTR ModuleInfo+426
	lea	r9, QWORD PTR opnd$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	lea	rcx, QWORD PTR j$[rsp]
	mov	rdx, r13
	mov	BYTE PTR [rsp+32], al
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN61@PushInvoke
$LN301@PushInvoke:

; 904  :                 return( ERROR );

	or	eax, -1
	jmp	$LN291@PushInvoke
$LN61@PushInvoke:

; 905  :             }
; 906  : 
; 907  :             /* for a simple register, get its size */
; 908  :             if ( opnd.kind == EXPR_REG && opnd.indirect == FALSE ) {

	mov	edx, DWORD PTR opnd$[rbp-196]
	cmp	edx, esi
	jne	SHORT $LN62@PushInvoke
	test	BYTE PTR opnd$[rbp-184], 1
	jne	SHORT $LN267@PushInvoke

; 909  :                 asize = SizeFromRegister( opnd.base_reg->tokval );

	mov	rax, QWORD PTR opnd$[rsp+24]
	mov	ecx, DWORD PTR [rax+16]
	call	SizeFromRegister
	jmp	$LN296@PushInvoke
$LN62@PushInvoke:

; 910  :             //} else if ( opnd.mem_type == MT_EMPTY ) { /* v2.10: a TYPE may return mem_type != MT_EMPTY! */
; 911  :             } else if ( opnd.kind == EXPR_CONST || opnd.mem_type == MT_EMPTY ) {

	test	edx, edx
	je	$LN66@PushInvoke
$LN267@PushInvoke:
	mov	ecx, DWORD PTR opnd$[rbp-192]
	cmp	ecx, 192				; 000000c0H
	je	$LN66@PushInvoke

; 922  :                 }
; 923  :                 DebugMsg1(("PushInvokeParm(%u): memtype EMPTY, asize=%u psize=%u\n", reqParam, asize, psize ));
; 924  :             } else if ( opnd.mem_type != MT_TYPE ) {

	cmp	ecx, 196				; 000000c4H
	je	$LN70@PushInvoke

; 925  :                 if ( opnd.kind == EXPR_ADDR &&
; 926  :                      opnd.indirect == FALSE &&
; 927  :                      opnd.sym &&
; 928  :                      opnd.instr == EMPTY &&

	cmp	edx, 1
	jne	$LN72@PushInvoke
	test	BYTE PTR opnd$[rbp-184], dl
	jne	$LN72@PushInvoke
	cmp	QWORD PTR opnd$[rbp-176], 0
	je	$LN72@PushInvoke
	cmp	DWORD PTR opnd$[rbp-200], -2
	jne	$LN72@PushInvoke
	lea	eax, DWORD PTR [rcx-129]
	cmp	eax, edx
	ja	$LN72@PushInvoke
$push_address$303:

; 818  :         push_address:
; 819  : 
; 820  :             /* push segment part of address?
; 821  :              * v2.11: do not assume a far pointer if psize == fptrsize
; 822  :              * ( parameter might be near32 in a 16-bit environment )
; 823  :              */
; 824  :             //if ( curr->sym.isfar || psize == fptrsize ) {
; 825  :             if ( curr->sym.isfar || psize > ( 2 << curr->sym.Ofssize ) ) {

	test	BYTE PTR [r15+47], 16
	jne	SHORT $LN36@PushInvoke
	movzx	ecx, BYTE PTR [r15+44]
	shl	esi, cl
	cmp	r14d, esi
	jle	SHORT $LN288@PushInvoke
$LN36@PushInvoke:

; 826  : 
; 827  :                 short sreg;
; 828  :                 sreg = GetSegmentPart( &opnd, buffer, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	lea	rdx, QWORD PTR buffer$[rbp-256]
	lea	rcx, QWORD PTR opnd$[rsp]
	call	GetSegmentPart
	movzx	ebx, ax

; 829  :                 if ( sreg ) {

	test	ax, ax
	je	SHORT $LN37@PushInvoke

; 830  :                     /* v2.11: push segment part as WORD or DWORD depending on target's offset size
; 831  :                      * problem: "pushw ds" is not accepted, so just emit a size prefix.
; 832  :                      */
; 833  :                     if ( Ofssize != ModuleInfo.Ofssize || ( curr->sym.Ofssize == USE16 && CurrWordSize > 2 ) )

	mov	esi, DWORD PTR tv172[rsp]
	movzx	ecx, BYTE PTR ModuleInfo+404
	movsx	eax, sil
	cmp	eax, ecx
	jne	SHORT $LN40@PushInvoke
	cmp	BYTE PTR [r15+44], 0
	jne	SHORT $LN39@PushInvoke
	cmp	BYTE PTR ModuleInfo+406, 2
	jbe	SHORT $LN39@PushInvoke
$LN40@PushInvoke:

; 834  :                         AddLineQueue( " db 66h" );

	lea	rcx, OFFSET FLAT:$SG11547
	call	AddLineQueue
$LN39@PushInvoke:

; 835  :                     AddLineQueueX( " push %r", sreg );

	movsx	edx, bx
	lea	rcx, OFFSET FLAT:$SG11548
	call	AddLineQueueX

; 836  :                 } else

	jmp	SHORT $LN38@PushInvoke
$LN37@PushInvoke:

; 837  :                     AddLineQueueX( " push %s", buffer );

	lea	rdx, QWORD PTR buffer$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11549
	call	AddLineQueueX
$LN288@PushInvoke:
	mov	esi, DWORD PTR tv172[rsp]
$LN38@PushInvoke:

; 838  :             }
; 839  :             /* push offset part of address */
; 840  :             if ( (ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 16
	jge	SHORT $LN41@PushInvoke

; 841  :                 AddLineQueueX( " mov %r, offset %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11552
	call	AddLineQueueX

; 842  :                 AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11553
	call	AddLineQueueX

; 843  :                 *r0flags |= R0_USED;

	or	BYTE PTR [rdi], 1

; 844  :             } else {

	jmp	$LN277@PushInvoke
$LN41@PushInvoke:

; 845  :                 if ( curr->sym.is_vararg && opnd.Ofssize == USE_EMPTY && opnd.sym )

	test	BYTE PTR [r15+47], 32			; 00000020H
	movzx	eax, BYTE PTR opnd$[rbp-187]
	je	SHORT $LN43@PushInvoke
	cmp	al, 254					; 000000feH
	jne	SHORT $LN43@PushInvoke
	mov	rcx, QWORD PTR opnd$[rbp-176]
	test	rcx, rcx
	je	SHORT $LN275@PushInvoke

; 846  :                     opnd.Ofssize = GetSymOfssize( opnd.sym );

	call	GetSymOfssize
	mov	BYTE PTR opnd$[rbp-187], al
$LN43@PushInvoke:

; 847  :                 /* v2.04: expand 16-bit offset to 32
; 848  :                  * v2.11: also expand if there's an explicit near32 ptr requested in 16-bit
; 849  :                  */
; 850  :                 //if ( opnd.Ofssize == USE16 && CurrWordSize > 2 ) {
; 851  :                 if ( ( opnd.Ofssize == USE16 && CurrWordSize > 2 ) ||

	test	al, al
	jne	SHORT $LN275@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	al, 2
	ja	SHORT $LN46@PushInvoke
	jmp	SHORT $LN47@PushInvoke
$LN275@PushInvoke:
	movzx	eax, BYTE PTR ModuleInfo+406
$LN47@PushInvoke:
	movzx	ecx, BYTE PTR [r15+44]
	cmp	cl, 1
	jne	SHORT $LN44@PushInvoke
	cmp	al, 2
	jne	SHORT $LN297@PushInvoke
$LN46@PushInvoke:

; 852  :                     ( curr->sym.Ofssize == USE32 && CurrWordSize == 2 ) ) {
; 853  :                     AddLineQueueX( " pushd %r %s", T_OFFSET, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 241				; 000000f1H
	lea	rcx, OFFSET FLAT:$SG11559
	call	AddLineQueueX
	jmp	SHORT $LN277@PushInvoke
$LN44@PushInvoke:

; 854  :                 } else if ( CurrWordSize > 2 && curr->sym.Ofssize == USE16 &&

	cmp	al, 2
$LN297@PushInvoke:
	jbe	SHORT $LN48@PushInvoke
	test	cl, cl
	jne	SHORT $LN48@PushInvoke
	test	BYTE PTR [r15+47], 16
	jne	SHORT $LN50@PushInvoke
	test	sil, sil
	jne	SHORT $LN48@PushInvoke
$LN50@PushInvoke:

; 855  :                            ( curr->sym.isfar || Ofssize == USE16 ) ) { /* v2.11: added */
; 856  :                     AddLineQueueX( " pushw %r %s", T_OFFSET, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 241				; 000000f1H
	lea	rcx, OFFSET FLAT:$SG11563
	call	AddLineQueueX

; 857  :                 } else {

	jmp	SHORT $LN277@PushInvoke
$LN48@PushInvoke:

; 858  :                     AddLineQueueX( " push %r %s", T_OFFSET, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 241				; 000000f1H
	lea	rcx, OFFSET FLAT:$SG11564
	call	AddLineQueueX

; 859  :                     /* v2.04: a 32bit offset pushed in 16-bit code */
; 860  :                     if ( curr->sym.is_vararg && CurrWordSize == 2 && opnd.Ofssize > USE16 ) {

	test	BYTE PTR [r15+47], 32			; 00000020H
	je	SHORT $LN277@PushInvoke
	cmp	BYTE PTR ModuleInfo+406, 2
	jne	SHORT $LN277@PushInvoke
	cmp	BYTE PTR opnd$[rbp-187], 0
	jbe	SHORT $LN277@PushInvoke

; 861  :                         size_vararg += CurrWordSize;

	add	DWORD PTR size_vararg, 2
$LN277@PushInvoke:

; 862  :                     }
; 863  :                 }
; 864  :             }
; 865  :         }
; 866  :         if ( curr->sym.is_vararg ) {

	movzx	eax, BYTE PTR [r15+47]
	test	al, 32					; 00000020H
	je	$LN294@PushInvoke

; 867  :             size_vararg += CurrWordSize + ( curr->sym.isfar ? CurrWordSize : 0 );

	test	al, 16
	je	SHORT $LN244@PushInvoke
	movzx	ecx, BYTE PTR ModuleInfo+406
	movzx	eax, BYTE PTR ModuleInfo+406
	add	eax, ecx
	add	DWORD PTR size_vararg, eax

; 868  :             DebugMsg1(("PushInvokeParm(%u): new value of size_vararg=%u [CurrWordSize=%u]\n", reqParam, size_vararg, CurrWordSize ));
; 869  :         }
; 870  :     } else { /* ! ADDR branch */

	jmp	$LN294@PushInvoke
$LN244@PushInvoke:

; 867  :             size_vararg += CurrWordSize + ( curr->sym.isfar ? CurrWordSize : 0 );

	movzx	eax, BYTE PTR ModuleInfo+406
	xor	ecx, ecx
	add	eax, ecx
	add	DWORD PTR size_vararg, eax

; 868  :             DebugMsg1(("PushInvokeParm(%u): new value of size_vararg=%u [CurrWordSize=%u]\n", reqParam, size_vararg, CurrWordSize ));
; 869  :         }
; 870  :     } else { /* ! ADDR branch */

	jmp	$LN294@PushInvoke
$LN72@PushInvoke:

; 929  :                      ( opnd.mem_type == MT_NEAR || opnd.mem_type == MT_FAR ) )
; 930  :                     goto push_address;
; 931  :                 if ( opnd.Ofssize == USE_EMPTY )

	movzx	ecx, BYTE PTR opnd$[rbp-187]
	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	cl, 254					; 000000feH

; 932  :                     opnd.Ofssize = ModuleInfo.Ofssize;
; 933  :                 asize = SizeFromMemtype( opnd.mem_type, opnd.Ofssize, opnd.type );

	mov	r8, QWORD PTR opnd$[rbp-160]
	mov	edx, ecx
	mov	ecx, DWORD PTR opnd$[rbp-192]
	cmove	edx, eax
	mov	BYTE PTR opnd$[rbp-187], dl
	movzx	edx, dl

; 934  :             } else {

	jmp	SHORT $LN298@PushInvoke
$LN70@PushInvoke:

; 935  :                 if ( opnd.sym != NULL )

	mov	rax, QWORD PTR opnd$[rbp-176]
	test	rax, rax
	je	SHORT $LN75@PushInvoke

; 936  :                     asize = opnd.sym->type->total_size;

	mov	rax, QWORD PTR [rax+80]
	mov	edi, DWORD PTR [rax+56]
	jmp	SHORT $LN278@PushInvoke
$LN75@PushInvoke:

; 937  :                 else
; 938  :                     asize = opnd.mbr->type->total_size;

	mov	rax, QWORD PTR opnd$[rbp-168]
	mov	rcx, QWORD PTR [rax+80]
	mov	edi, DWORD PTR [rcx+56]
	jmp	SHORT $LN278@PushInvoke
$LN66@PushInvoke:

; 912  :                 asize = psize;

	mov	edi, r14d

; 913  :                 /* v2.04: added, to catch 0-size params ( STRUCT without members ) */
; 914  :                 if ( psize == 0 ) {

	test	r14d, r14d
	jne	SHORT $LN278@PushInvoke

; 915  :                     if ( curr->sym.is_vararg == FALSE ) {

	test	BYTE PTR [r15+47], 32			; 00000020H
	jne	SHORT $LN68@PushInvoke

; 916  :                         DebugMsg1(("PushInvokeParm(%u): error, psize=0\n" ));
; 917  :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	edx, DWORD PTR reqParam$[rbp-256]
	mov	ecx, 145				; 00000091H
	inc	edx
	call	EmitErr
	mov	edx, DWORD PTR opnd$[rbp-196]
$LN68@PushInvoke:

; 918  :                     }
; 919  :                     /* v2.07: for VARARG, get the member's size if it is a structured var */
; 920  :                     if ( opnd.mbr && opnd.mbr->mem_type == MT_TYPE )

	mov	r8, QWORD PTR opnd$[rbp-168]
	test	r8, r8
	je	SHORT $LN278@PushInvoke
	cmp	DWORD PTR [r8+36], 196			; 000000c4H
	jne	SHORT $LN278@PushInvoke

; 921  :                         asize = SizeFromMemtype( opnd.mbr->mem_type, opnd.Ofssize, opnd.mbr->type );

	movzx	edx, BYTE PTR opnd$[rbp-187]
	mov	ecx, 196				; 000000c4H
	mov	r8, QWORD PTR [r8+80]
$LN298@PushInvoke:
	call	SizeFromMemtype
$LN296@PushInvoke:
	mov	edx, DWORD PTR opnd$[rbp-196]
	mov	edi, eax
$LN278@PushInvoke:

; 939  :             }
; 940  :         }
; 941  : 
; 942  :         if ( curr->sym.is_vararg == TRUE )

	movzx	eax, BYTE PTR [r15+47]

; 943  :             psize = asize;
; 944  : 
; 945  : #ifdef DEBUG_OUT
; 946  :         if ( opnd.sym )
; 947  :             DebugMsg1(("PushInvokeParam(%s, %u): arg name=%s, asize=%u, amtype=%xh psize=%u\n", proc->sym.name, reqParam, opnd.sym->name, asize, opnd.mem_type, psize));
; 948  :         else
; 949  :             DebugMsg1(("PushInvokeParam(%s, %u): arg no name, asize=%u, amtype=%xh psize=%u\n", proc->sym.name, reqParam, asize, opnd.mem_type, psize));
; 950  : #endif
; 951  :         pushsize = CurrWordSize;
; 952  : 
; 953  :         if ( proc->sym.langtype == LANG_FASTCALL )

	mov	rcx, QWORD PTR proc$[rbp-256]
	and	al, 32					; 00000020H
	movzx	r15d, BYTE PTR ModuleInfo+406
	mov	rbx, QWORD PTR r0flags$[rbp-256]
	cmovne	r14d, edi
	cmp	DWORD PTR [rcx+76], 7
	jne	SHORT $LN79@PushInvoke

; 954  :             if ( fastcall_tab[ModuleInfo.fctype].handleparam( proc, reqParam, curr, addr, &opnd, fullparam, r0flags ) )

	movsxd	rax, DWORD PTR ModuleInfo+376
	xor	r9d, r9d
	mov	r8, QWORD PTR curr$[rbp-256]
	mov	edx, DWORD PTR reqParam$[rbp-256]
	mov	QWORD PTR [rsp+48], rbx
	lea	r10, QWORD PTR [rax+rax*2]
	lea	rax, QWORD PTR fullparam$[rbp-256]
	mov	QWORD PTR [rsp+40], rax
	lea	rax, QWORD PTR opnd$[rsp]
	mov	QWORD PTR [rsp+32], rax
	lea	rax, OFFSET FLAT:__ImageBase
	call	QWORD PTR fastcall_tab[rax+r10*8+16]
	test	eax, eax
	jne	$LN294@PushInvoke

; 955  :                 return( NOT_ERROR );

	mov	edx, DWORD PTR opnd$[rbp-196]
$LN79@PushInvoke:

; 956  : 
; 957  :         /* v2.04: this check has been moved behind the fastcall_tab() call */
; 958  :         /* v2.11: if target is a pointer, sizes must match */
; 959  :         //if ( asize > psize ) { /* argument's size too big? */
; 960  :         if ( ( asize > psize ) || ( asize < psize && curr->sym.mem_type == MT_PTR ) ) {

	cmp	edi, r14d
	jg	$LN81@PushInvoke
	mov	r8, QWORD PTR curr$[rbp-256]
	jge	SHORT $LN80@PushInvoke
	cmp	DWORD PTR [r8+36], 195			; 000000c3H
	je	$LN81@PushInvoke
$LN80@PushInvoke:

; 964  :         }
; 965  : 
; 966  :         if ( ( opnd.kind == EXPR_ADDR && opnd.instr != T_OFFSET ) ||

	cmp	edx, 1
	jne	SHORT $LN85@PushInvoke
	cmp	DWORD PTR opnd$[rbp-200], 241		; 000000f1H
	jne	SHORT $LN84@PushInvoke
$LN135@PushInvoke:

; 1310 : 
; 1311 :                 /* v2.06: size check */
; 1312 :                 if ( psize ) {

	test	r14d, r14d
	je	$LN286@PushInvoke

; 1313 :                     if ( opnd.kind == EXPR_FLOAT )

	cmp	edx, 3
	jne	$LN193@PushInvoke

; 1314 :                         asize = 4;

	lea	esi, QWORD PTR [rdx+1]
	jmp	$LN200@PushInvoke
$LN85@PushInvoke:

; 964  :         }
; 965  : 
; 966  :         if ( ( opnd.kind == EXPR_ADDR && opnd.instr != T_OFFSET ) ||

	cmp	edx, esi
	jne	SHORT $LN135@PushInvoke
	test	BYTE PTR opnd$[rbp-184], 1
	je	$LN268@PushInvoke
$LN84@PushInvoke:

; 967  :             ( opnd.kind == EXPR_REG && opnd.indirect == TRUE ) ) {
; 968  : 
; 969  :             /* catch the case when EAX has been used for ADDR,
; 970  :              * and is later used as addressing register!
; 971  :              *
; 972  :              */
; 973  :             if ( *r0flags &&

	cmp	BYTE PTR [rbx], 0
	je	SHORT $LN86@PushInvoke
	mov	rax, QWORD PTR opnd$[rsp+24]
	test	rax, rax
	je	SHORT $LN88@PushInvoke
	mov	ecx, DWORD PTR [rax+16]
	cmp	ecx, 17
	je	SHORT $LN89@PushInvoke
	cmp	ecx, 115				; 00000073H
	je	SHORT $LN89@PushInvoke
$LN88@PushInvoke:
	mov	rax, QWORD PTR opnd$[rsp+32]
	test	rax, rax
	je	SHORT $LN86@PushInvoke
	mov	ecx, DWORD PTR [rax+16]
	cmp	ecx, 17
	je	SHORT $LN89@PushInvoke
	cmp	ecx, 115				; 00000073H
	jne	SHORT $LN86@PushInvoke
$LN89@PushInvoke:

; 974  :                 (( opnd.base_reg != NULL &&
; 975  :                   ( opnd.base_reg->tokval == T_EAX
; 976  : #if AMD64_SUPPORT
; 977  :                    || opnd.base_reg->tokval == T_RAX
; 978  : #endif
; 979  :                   )) ||
; 980  :                  ( opnd.idx_reg != NULL &&
; 981  :                   ( opnd.idx_reg->tokval == T_EAX
; 982  : #if AMD64_SUPPORT
; 983  :                    || opnd.idx_reg->tokval == T_RAX
; 984  : #endif
; 985  :                  )))) {
; 986  :                 EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr

; 987  :                 *r0flags = 0;

	mov	BYTE PTR [rbx], 0
$LN86@PushInvoke:

; 988  :             }
; 989  : 
; 990  :             if ( curr->sym.is_vararg ) {

	mov	rdx, QWORD PTR curr$[rbp-256]
	test	BYTE PTR [rdx+47], 32			; 00000020H
	je	SHORT $LN90@PushInvoke

; 991  :                 size_vararg += ( asize > pushsize ? asize : pushsize );

	cmp	edi, r15d
	mov	eax, r15d
	cmovg	eax, edi
	add	DWORD PTR size_vararg, eax
$LN90@PushInvoke:

; 992  :                 DebugMsg1(("PushInvokeParm(%u): asize=%u added to size_vararg, now=%u\n",
; 993  :                            reqParam, asize > pushsize ? asize : pushsize, size_vararg ));
; 994  :             }
; 995  :             if ( asize > pushsize ) {

	cmp	edi, r15d
	jle	$LN299@PushInvoke

; 996  : 
; 997  :                 short dw = T_WORD;
; 998  :                 if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	mov	esi, 207				; 000000cfH
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN93@PushInvoke

; 999  :                     pushsize = 4;
; 1000 :                     dw = T_DWORD;

	mov	esi, 209				; 000000d1H
	mov	r15d, 4
$LN93@PushInvoke:

; 1001 :                 }
; 1002 : 
; 1003 :                 /* in params like "qword ptr [eax]" the typecast
; 1004 :                  * has to be removed */
; 1005 :                 if ( opnd.explicit ) {

	test	BYTE PTR opnd$[rbp-184], 2
	je	SHORT $LN251@PushInvoke

; 1006 :                     SkipTypecast( fullparam, i, tokenarray );

	mov	r8, r13
	lea	rcx, QWORD PTR fullparam$[rbp-256]
	mov	edx, r12d
	call	SkipTypecast

; 1007 :                     opnd.explicit = FALSE;

	and	DWORD PTR opnd$[rbp-184], -3		; fffffffdH
$LN251@PushInvoke:

; 1008 :                 }
; 1009 : 
; 1010 :                 while ( asize > 0 ) {

	test	edi, edi
	jle	$LN294@PushInvoke

; 1016 :                             /* v2.05: better push a 0 word? */
; 1017 :                             //AddLineQueueX( " pushw 0" );
; 1018 :                           /* ASMC v1.12: dword-aligned stack in 32bit */
; 1019 :                           if (pushsize == 4)

	mov	ebx, edi
	movsxd	r14, r15d
	sub	ebx, r15d
	lea	r12, OFFSET FLAT:__ImageBase
	npad	1
$LL8@PushInvoke:

; 1011 : 
; 1012 :                     if ( asize & 2 ) {

	test	dil, 2
	je	SHORT $LN95@PushInvoke

; 1013 : 
; 1014 :                         /* ensure the stack remains dword-aligned in 32bit */
; 1015 :                         if ( ModuleInfo.Ofssize > USE16 ) {

	movzx	eax, BYTE PTR ModuleInfo+404
	test	al, al
	je	SHORT $LN97@PushInvoke

; 1016 :                             /* v2.05: better push a 0 word? */
; 1017 :                             //AddLineQueueX( " pushw 0" );
; 1018 :                           /* ASMC v1.12: dword-aligned stack in 32bit */
; 1019 :                           if (pushsize == 4)

	cmp	r14, 4
	jne	SHORT $LN98@PushInvoke

; 1020 :                             size_vararg += 2;

	add	DWORD PTR size_vararg, 2
$LN98@PushInvoke:

; 1021 :                           /******/
; 1022 : #if AMD64_SUPPORT
; 1023 :                             AddLineQueueX( " sub %r, 2", stackreg[ModuleInfo.Ofssize] );

	movzx	eax, al
	lea	rcx, OFFSET FLAT:$SG11615
	mov	edx, DWORD PTR stackreg[r12+rax*4]
	call	AddLineQueueX
$LN97@PushInvoke:

; 1024 : #else
; 1025 :                             AddLineQueueX( " sub %r, 2", T_ESP );
; 1026 : #endif
; 1027 :                         }
; 1028 :                         AddLineQueueX( " push word ptr %s+%u", fullparam, NUMQUAL asize-2 );

	add	edi, -2
	lea	rdx, QWORD PTR fullparam$[rbp-256]
	mov	r8d, edi
	lea	rcx, OFFSET FLAT:$SG11616
	call	AddLineQueueX

; 1029 :                         asize -= 2;

	sub	ebx, 2

; 1030 :                     } else {

	jmp	SHORT $LN96@PushInvoke
$LN95@PushInvoke:

; 1031 :                         AddLineQueueX( " push %r ptr %s+%u", dw, fullparam, NUMQUAL asize-pushsize );

	movsx	edx, si
	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	r9d, ebx
	lea	rcx, OFFSET FLAT:$SG11617
	call	AddLineQueueX

; 1032 :                         asize -= pushsize;

	sub	edi, r15d
	sub	ebx, r15d
$LN96@PushInvoke:

; 1008 :                 }
; 1009 : 
; 1010 :                 while ( asize > 0 ) {

	test	edi, edi
	jg	SHORT $LL8@PushInvoke

; 1033 :                     }
; 1034 :                 }
; 1035 :                 //return( NOT_ERROR );
; 1036 : 
; 1037 :             } else if ( asize < pushsize ) {

	jmp	$LN294@PushInvoke
$LN299@PushInvoke:
	jge	$LN99@PushInvoke

; 1038 : 
; 1039 :                 if ( psize > 4 ) {

	cmp	r14d, 4
	jle	SHORT $LN101@PushInvoke

; 1040 :                     DebugMsg1(("PushInvokeParm(%u): error, ADDR, psize=%u, is > 4\n",
; 1041 :                               reqParam, psize ));
; 1042 :                     EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	edx, DWORD PTR reqParam$[rbp-256]
	mov	ecx, 145				; 00000091H
	inc	edx
	call	EmitErr
	mov	rdx, QWORD PTR curr$[rbp-256]
$LN101@PushInvoke:

; 1043 :                 }
; 1044 :                 /* v2.11: added, use MOVSX/MOVZX if cpu >= 80386 */
; 1045 :                 if ( asize < 4 && psize > 2 && IS_SIGNED( opnd.mem_type ) && ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	mov	r8d, DWORD PTR ModuleInfo+392
	cmp	edi, 4
	jge	SHORT $LN102@PushInvoke
	cmp	r14d, esi
	jle	SHORT $LN102@PushInvoke
	mov	eax, DWORD PTR opnd$[rbp-192]
	and	al, -64					; ffffffffffffffc0H
	cmp	al, 64					; 00000040H
	jne	SHORT $LN102@PushInvoke
	mov	eax, r8d
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN102@PushInvoke

; 1046 :                     AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	mov	esi, 17
	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11623
	call	AddLineQueueX

; 1047 :                     AddLineQueueX( " push %r", T_EAX );

	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11624
	call	AddLineQueueX

; 1048 :                     *r0flags = R0_USED; /* reset R0_H_CLEARED  */

	mov	BYTE PTR [rbx], 1

; 1049 :                 } else {

	jmp	$LN294@PushInvoke
$LN102@PushInvoke:

; 1050 :                     //switch (sym->mem_type) {
; 1051 :                     switch ( opnd.mem_type ) {

	mov	ecx, DWORD PTR opnd$[rbp-192]
	test	ecx, ecx
	je	$LN104@PushInvoke
	sub	ecx, 1
	je	SHORT $LN117@PushInvoke
	sub	ecx, 63					; 0000003fH
	je	$LN104@PushInvoke
	cmp	ecx, 1
	je	SHORT $LN117@PushInvoke

; 1119 :                     default:
; 1120 :                         AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11669
	call	AddLineQueueX
	jmp	$LN294@PushInvoke
$LN117@PushInvoke:

; 1088 :                         break;
; 1089 :                     case MT_WORD:
; 1090 :                     case MT_SWORD:
; 1091 :                         /* pushsize is 4 here, hence it's always 32-bit code!
; 1092 :                          * v2.04: use the Masm-compatible, non-destructive
; 1093 :                          * PUSH if psize is 2.
; 1094 :                          */
; 1095 :                         //if ( Options.masm_compat_gencode ) {
; 1096 :                         /* v2.11: don't push 0 if src operand is signed */
; 1097 :                         //if ( Options.masm_compat_gencode || psize == 2 ) {
; 1098 :                         if ( opnd.mem_type == MT_WORD && ( Options.masm_compat_gencode || psize == 2 )) {

	cmp	DWORD PTR opnd$[rbp-192], 1
	jne	SHORT $LN118@PushInvoke
	cmp	BYTE PTR Options+128, 0
	jne	SHORT $LN120@PushInvoke
	cmp	r14d, esi
	jne	SHORT $LN118@PushInvoke
$LN120@PushInvoke:

; 1099 :                             /* v2.05: push a 0 word if argument is VARARG
; 1100 :                              * v2.10: push a 0 word if psize != 2
; 1101 :                              */
; 1102 :                             //if ( curr->sym.is_vararg )
; 1103 :                             if ( curr->sym.is_vararg || psize != 2 )

	test	BYTE PTR [rdx+47], 32			; 00000020H
	jne	SHORT $LN123@PushInvoke
	cmp	r14d, esi
	jne	SHORT $LN123@PushInvoke

; 1105 :                             else {
; 1106 : #if AMD64_SUPPORT
; 1107 :                                 AddLineQueueX( " sub %r, 2", stackreg[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	r12, OFFSET FLAT:__ImageBase
	lea	rcx, OFFSET FLAT:$SG11662
	mov	edx, DWORD PTR stackreg[r12+rax*4]
	call	AddLineQueueX
	jmp	SHORT $LN122@PushInvoke
$LN123@PushInvoke:

; 1104 :                                 AddLineQueueX( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11661
	call	AddLineQueueX
$LN122@PushInvoke:

; 1108 : #else
; 1109 :                                 AddLineQueueX( " sub %r, 2", T_ESP );
; 1110 : #endif
; 1111 :                             }
; 1112 :                             AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11663
	call	AddLineQueueX

; 1113 :                         } else {

	jmp	$LN294@PushInvoke
$LN118@PushInvoke:

; 1114 :                             AddLineQueueX( " mov%sx %r, %s", opnd.mem_type == MT_WORD ? "z" : "s", T_EAX, fullparam );

	cmp	DWORD PTR opnd$[rbp-192], 1
	lea	rax, OFFSET FLAT:$SG11664
	lea	rdx, OFFSET FLAT:$SG11665
	mov	esi, 17
	cmove	rdx, rax
	lea	r9, QWORD PTR fullparam$[rbp-256]
	mov	r8d, esi
	lea	rcx, OFFSET FLAT:$SG11666
	call	AddLineQueueX

; 1115 :                             AddLineQueueX( " push %r", T_EAX );

	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11667
	call	AddLineQueueX

; 1116 :                             *r0flags = R0_USED; /* reset R0_H_CLEARED  */

	mov	BYTE PTR [rbx], 1

; 1117 :                         }
; 1118 :                         break;

	jmp	$LN294@PushInvoke
$LN104@PushInvoke:

; 1052 :                     case MT_BYTE:
; 1053 :                     case MT_SBYTE:
; 1054 :                         if ( psize == 1 && curr->sym.is_vararg == FALSE ) {

	cmp	r14d, 1
	jne	SHORT $LN105@PushInvoke
	test	BYTE PTR [rdx+47], 32			; 00000020H
	jne	SHORT $LN105@PushInvoke

; 1055 :                             AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, r14d
	lea	rcx, OFFSET FLAT:$SG11628
	call	AddLineQueueX

; 1056 :                             AddLineQueueX( " push %r", regax[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	r12, OFFSET FLAT:__ImageBase
	lea	rcx, OFFSET FLAT:$SG11629
	mov	edx, DWORD PTR regax[r12+rax*4]

; 1085 :                             AddLineQueueX( " push %r", T_EAX );

	call	AddLineQueueX

; 1086 :                         }
; 1087 :                         *r0flags |= R0_USED;

	or	BYTE PTR [rbx], r14b

; 1121 :                     }
; 1122 :                 }
; 1123 :             } else { /* asize == pushsize */

	jmp	$LN294@PushInvoke
$LN105@PushInvoke:

; 1057 :                         } else if ( pushsize == 2 ) { /* 16-bit code? */

	cmp	r15d, esi
	jne	$LN107@PushInvoke

; 1058 :                             if ( opnd.mem_type == MT_BYTE ) {

	cmp	DWORD PTR opnd$[rbp-192], 0
	jne	$LN109@PushInvoke

; 1059 :                                 if ( psize == 4 )

	cmp	r14d, 4
	jne	SHORT $LN113@PushInvoke

; 1060 :                                     if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 )  {

	and	r8d, 240				; 000000f0H
	cmp	r8d, 16
	jge	SHORT $LN112@PushInvoke

; 1061 :                                         if ( !(*r0flags & R0_X_CLEARED ) )

	test	BYTE PTR [rbx], r14b
	jne	SHORT $LN114@PushInvoke

; 1062 :                                             AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11638
	mov	r8d, edx
	call	AddLineQueueX
$LN114@PushInvoke:

; 1063 :                                         *r0flags |= ( R0_X_CLEARED | R0_H_CLEARED );

	or	BYTE PTR [rbx], 6

; 1064 :                                         AddLineQueueX( " push %r", T_AX );

	lea	rcx, OFFSET FLAT:$SG11639
	mov	edx, 9
	call	AddLineQueueX

; 1065 :                                     } else

	jmp	SHORT $LN113@PushInvoke
$LN112@PushInvoke:

; 1066 :                                         AddLineQueue( " push 0" );

	lea	rcx, OFFSET FLAT:$SG11640
	call	AddLineQueue
$LN113@PushInvoke:

; 1067 :                                 AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11641
	call	AddLineQueueX

; 1068 :                                 if ( !( *r0flags & R0_H_CLEARED )) {

	test	BYTE PTR [rbx], sil
	jne	SHORT $LN116@PushInvoke

; 1069 :                                     AddLineQueueX( " mov %r, 0", T_AH );

	mov	edx, 5
	lea	rcx, OFFSET FLAT:$SG11643
	call	AddLineQueueX

; 1070 :                                     *r0flags |= R0_H_CLEARED;

	or	BYTE PTR [rbx], sil

; 1080 :                                 }
; 1081 :                             }
; 1082 :                             AddLineQueueX( " push %r", T_AX );

	lea	rcx, OFFSET FLAT:$SG11649
	mov	edx, 9

; 1085 :                             AddLineQueueX( " push %r", T_EAX );

	call	AddLineQueueX

; 1086 :                         }
; 1087 :                         *r0flags |= R0_USED;

	or	BYTE PTR [rbx], 1

; 1121 :                     }
; 1122 :                 }
; 1123 :             } else { /* asize == pushsize */

	jmp	$LN294@PushInvoke
$LN109@PushInvoke:

; 1071 :                                 }
; 1072 :                             } else {
; 1073 :                                 AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11644
	call	AddLineQueueX

; 1074 :                                 *r0flags = 0; /* reset AH_CLEARED */
; 1075 :                                 AddLineQueue( " cbw" );

	lea	rcx, OFFSET FLAT:$SG11645
	mov	BYTE PTR [rbx], 0
	call	AddLineQueue

; 1076 :                                 if ( psize == 4 ) {

	cmp	r14d, 4
	jne	SHORT $LN116@PushInvoke

; 1077 :                                     AddLineQueue( " cwd" );

	lea	rcx, OFFSET FLAT:$SG11647
	call	AddLineQueue

; 1078 :                                     AddLineQueueX( " push %r", T_DX );

	lea	edx, QWORD PTR [r14+7]
	lea	rcx, OFFSET FLAT:$SG11648
	call	AddLineQueueX

; 1079 :                                     *r0flags |= R2_USED;

	or	BYTE PTR [rbx], 8
$LN116@PushInvoke:

; 1080 :                                 }
; 1081 :                             }
; 1082 :                             AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11649

; 1085 :                             AddLineQueueX( " push %r", T_EAX );

	call	AddLineQueueX

; 1086 :                         }
; 1087 :                         *r0flags |= R0_USED;

	or	BYTE PTR [rbx], 1

; 1121 :                     }
; 1122 :                 }
; 1123 :             } else { /* asize == pushsize */

	jmp	$LN294@PushInvoke
$LN107@PushInvoke:

; 1083 :                         } else {
; 1084 :                             AddLineQueueX( " mov%sx %r, %s", opnd.mem_type == MT_BYTE ? "z" : "s", T_EAX, fullparam );

	cmp	DWORD PTR opnd$[rbp-192], 0
	lea	rax, OFFSET FLAT:$SG11650
	lea	rdx, OFFSET FLAT:$SG11651
	mov	esi, 17
	cmove	rdx, rax
	lea	r9, QWORD PTR fullparam$[rbp-256]
	mov	r8d, esi
	lea	rcx, OFFSET FLAT:$SG11652
	call	AddLineQueueX

; 1085 :                             AddLineQueueX( " push %r", T_EAX );

	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11653
	call	AddLineQueueX

; 1086 :                         }
; 1087 :                         *r0flags |= R0_USED;

	or	BYTE PTR [rbx], 1

; 1121 :                     }
; 1122 :                 }
; 1123 :             } else { /* asize == pushsize */

	jmp	$LN294@PushInvoke
$LN99@PushInvoke:

; 1124 : 
; 1125 :                 /* v2.11: changed */
; 1126 :                 if ( IS_SIGNED( opnd.mem_type ) && psize > asize ) {

	mov	eax, DWORD PTR opnd$[rbp-192]
	and	al, -64					; ffffffffffffffc0H
	cmp	al, 64					; 00000040H
	jne	$LN125@PushInvoke
	cmp	r14d, edi
	jle	$LN125@PushInvoke

; 1127 :                     if ( psize > 2 && (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) ) {

	cmp	r14d, esi
	jle	SHORT $LN127@PushInvoke
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN127@PushInvoke

; 1128 :                         AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	mov	esi, 17
	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11674
	call	AddLineQueueX

; 1129 :                         AddLineQueueX( " push %r", T_EAX );

	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11675
	call	AddLineQueueX

; 1130 :                         *r0flags = R0_USED; /* reset R0_H_CLEARED  */

	mov	BYTE PTR [rbx], 1
	jmp	$LN294@PushInvoke
$LN127@PushInvoke:

; 1131 :                     } else if ( pushsize == 2 && psize > 2 ) {

	cmp	r15d, esi
	jne	SHORT $LN129@PushInvoke
	cmp	r14d, esi
	jle	SHORT $LN129@PushInvoke

; 1132 :                         AddLineQueueX( " mov %r, %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11678
	call	AddLineQueueX

; 1133 :                         AddLineQueueX( " cwd" );

	lea	rcx, OFFSET FLAT:$SG11679
	call	AddLineQueueX

; 1134 :                         AddLineQueueX( " push %r", T_DX );

	mov	edx, 11
	lea	rcx, OFFSET FLAT:$SG11680
	call	AddLineQueueX

; 1135 :                         AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11681
	call	AddLineQueueX

; 1136 :                         *r0flags = R0_USED | R2_USED;

	mov	BYTE PTR [rbx], 9

; 1137 :                     } else

	jmp	$LN294@PushInvoke
$LN129@PushInvoke:

; 1138 :                         AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11682
	call	AddLineQueueX

; 1139 :                 } else {

	jmp	$LN294@PushInvoke
$LN125@PushInvoke:

; 1140 :                     if ( pushsize == 2 && psize > 2 ) {

	cmp	r15d, esi
	jne	SHORT $LN133@PushInvoke
	cmp	r14d, esi
	jle	SHORT $LN133@PushInvoke

; 1141 :                         if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 )  {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 16
	jge	SHORT $LN132@PushInvoke

; 1142 :                             if ( !(*r0flags & R0_X_CLEARED ) )

	test	BYTE PTR [rbx], 4
	jne	SHORT $LN134@PushInvoke

; 1143 :                                 AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11687
	mov	r8d, edx
	call	AddLineQueueX
$LN134@PushInvoke:

; 1144 :                             AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11688
	call	AddLineQueueX

; 1145 :                             *r0flags |= ( R0_USED | R0_X_CLEARED | R0_H_CLEARED );

	or	BYTE PTR [rbx], 7

; 1146 :                         } else

	jmp	SHORT $LN133@PushInvoke
$LN132@PushInvoke:

; 1147 :                             AddLineQueueX( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11689
	call	AddLineQueueX
$LN133@PushInvoke:

; 1148 :                     }
; 1149 :                     AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11690
	call	AddLineQueueX

; 1150 :                 }
; 1151 :             }
; 1152 : 
; 1153 :         } else { /* the parameter is a register or constant value! */

	jmp	$LN294@PushInvoke
$LN268@PushInvoke:

; 1154 : 
; 1155 :             //char is_r0 = FALSE;
; 1156 :             if ( opnd.kind == EXPR_REG ) {
; 1157 :                 int reg = opnd.base_reg->tokval;
; 1158 :                 unsigned optype = GetValueSp( reg );
; 1159 : 
; 1160 :                 /* v2.11 */
; 1161 :                 if ( curr->sym.is_vararg == TRUE && psize < pushsize )

	test	BYTE PTR [r8+47], 32			; 00000020H
	lea	r12, OFFSET FLAT:__ImageBase
	mov	rax, QWORD PTR opnd$[rsp+24]
	movsxd	rsi, DWORD PTR [rax+16]
	mov	rax, rsi
	lea	rcx, QWORD PTR [rsi+rsi*2]
	lea	rcx, QWORD PTR [rcx*4]
	mov	r13d, DWORD PTR SpecialTable[rcx+r12]
	je	SHORT $LN137@PushInvoke
	cmp	r14d, r15d
	cmovl	r14d, r15d
$LN137@PushInvoke:

; 1162 :                     psize = pushsize;
; 1163 : 
; 1164 :                 /* v2.06: check if register is valid to be pushed.
; 1165 :                  * ST(n), MMn, XMMn, YMMn and special registers are NOT valid!
; 1166 :                  */
; 1167 :                 if ( optype & ( OP_STI | OP_MMX | OP_XMM

	test	r13d, 102576				; 000190b0H
	je	SHORT $LN138@PushInvoke

; 1168 : #if AVXSUPP
; 1169 :                                | OP_YMM
; 1170 : #endif
; 1171 :                                | OP_RSPEC ) ) {
; 1172 : 
; 1173 :                     return( EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 ) );

	mov	edx, DWORD PTR reqParam$[rbp-256]
	mov	ecx, 145				; 00000091H
	inc	edx
	call	EmitErr
	jmp	$LN291@PushInvoke
$LN138@PushInvoke:

; 1174 :                 }
; 1175 : 
; 1176 :                 if ( ( *r0flags & R0_USED ) && ( reg == T_AH || ( optype & OP_A ) ) ) {

	movzx	eax, BYTE PTR [rbx]
	test	al, 1
	je	SHORT $LN139@PushInvoke
	cmp	esi, 5
	je	SHORT $LN141@PushInvoke
	bt	r13d, 9
	jae	SHORT $LN139@PushInvoke
$LN141@PushInvoke:

; 1177 :                     EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr

; 1178 :                     *r0flags &= ~R0_USED;

	and	BYTE PTR [rbx], 254			; 000000feH
	jmp	SHORT $LN142@PushInvoke
$LN139@PushInvoke:

; 1179 :                 } else if ( ( *r0flags & R2_USED ) && ( reg == T_DH || GetRegNo( reg ) == 2 ) ) {

	test	al, 8
	je	SHORT $LN142@PushInvoke
	cmp	esi, 7
	je	SHORT $LN143@PushInvoke
	cmp	BYTE PTR SpecialTable[rcx+r12+10], 2
	jne	SHORT $LN142@PushInvoke
$LN143@PushInvoke:

; 1180 :                     EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr

; 1181 :                     *r0flags &= ~R2_USED;

	and	BYTE PTR [rbx], 247			; 000000f7H
$LN142@PushInvoke:

; 1182 :                 }
; 1183 :                 /* v2.11: use target's "pushsize", not the current one */
; 1184 :                 //if ( asize != psize || asize < pushsize ) {
; 1185 :                 if ( asize != psize || asize < ( 2 << Ofssize ) ) {

	cmp	edi, r14d
	jne	SHORT $LN145@PushInvoke
	cmp	edi, DWORD PTR asize$3$[rsp]
	jge	$LN189@PushInvoke
$LN145@PushInvoke:

; 1186 :                     /* register size doesn't match the needed parameter size.
; 1187 :                      */
; 1188 :                     if ( psize > 4 ) {

	cmp	r14d, 4
	jle	SHORT $LN146@PushInvoke

; 1189 :                         DebugMsg1(("PushInvokeParm(%u): error, REG, asize=%u, psize=%u, pushsize=%u\n",
; 1190 :                                   reqParam, asize, psize, pushsize ));
; 1191 :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	edx, DWORD PTR reqParam$[rbp-256]
	mov	ecx, 145				; 00000091H
	inc	edx
	call	EmitErr
$LN146@PushInvoke:

; 1192 :                     }
; 1193 : 
; 1194 :                     if ( asize <= 2 && ( psize == 4 || pushsize == 4 ) ) {

	cmp	edi, 2
	jg	$LN164@PushInvoke
	cmp	r14d, 4
	je	SHORT $LN148@PushInvoke
	cmp	r15d, 4
	jne	$LN164@PushInvoke
$LN148@PushInvoke:

; 1195 :                         if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 && asize == psize ) {

	mov	ecx, DWORD PTR ModuleInfo+392
	mov	eax, ecx
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN149@PushInvoke
	cmp	edi, r14d
	jne	SHORT $LN149@PushInvoke

; 1196 :                             if ( asize == 2 )

	cmp	edi, 2
	jne	SHORT $LN151@PushInvoke
$LN188@PushInvoke:

; 1197 :                                 reg = reg - T_AX + T_EAX;

	add	esi, 8
	jmp	$LN189@PushInvoke
$LN151@PushInvoke:

; 1198 :                             else {
; 1199 :                                 /* v2.11: hibyte registers AH, BH, CH, DH ( no 4-7 ) needs special handling */
; 1200 :                                 if ( reg < T_AH )

	cmp	esi, 5
	jge	SHORT $LN153@PushInvoke

; 1201 :                                     reg = reg - T_AL + T_EAX;

	add	esi, 16
	jmp	$LN189@PushInvoke
$LN153@PushInvoke:

; 1202 :                                 else {
; 1203 :                                     AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11711
	call	AddLineQueueX

; 1204 :                                     *r0flags |= R0_USED;

	or	BYTE PTR [rbx], 1

; 1205 :                                     reg = T_EAX;

	mov	esi, 17

; 1206 :                                 }
; 1207 :                                 asize = 2; /* done */
; 1208 :                             }

	jmp	$LN189@PushInvoke
$LN149@PushInvoke:

; 1209 :                         } else if ( IS_SIGNED( opnd.mem_type ) && pushsize < 4 ) {

	mov	edx, DWORD PTR opnd$[rbp-192]
	and	edx, 192				; 000000c0H
	cmp	edx, 64					; 00000040H
	jne	$LN155@PushInvoke
	cmp	r15d, 4
	jge	$LN155@PushInvoke

; 1210 : 
; 1211 :                             /* psize is 4 in this branch */
; 1212 :                             if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	cmp	eax, 48					; 00000030H
	jl	SHORT $LN157@PushInvoke

; 1213 :                                 AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	mov	esi, 17
	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11716
	call	AddLineQueueX

; 1214 :                                 *r0flags = R0_USED;

	mov	BYTE PTR [rbx], 1

; 1215 :                                 reg = T_EAX;
; 1216 :                             } else {

	jmp	$LN189@PushInvoke
$LN157@PushInvoke:

; 1217 :                                 *r0flags = R0_USED | R2_USED;

	mov	BYTE PTR [rbx], 9

; 1218 :                                 if ( asize == 1 ) {

	cmp	edi, 1
	jne	SHORT $LN159@PushInvoke

; 1219 :                                     if ( reg != T_AL )

	cmp	esi, edi
	je	SHORT $LN161@PushInvoke

; 1220 :                                         AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, edi
	lea	rcx, OFFSET FLAT:$SG11720
	call	AddLineQueueX
$LN161@PushInvoke:

; 1221 :                                     AddLineQueue( " cbw" );

	lea	rcx, OFFSET FLAT:$SG11721
	call	AddLineQueue
	jmp	SHORT $LN162@PushInvoke
$LN159@PushInvoke:

; 1222 :                                 } else if ( reg != T_AX )

	cmp	esi, 9
	je	SHORT $LN162@PushInvoke

; 1223 :                                     AddLineQueueX( " mov %r, %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11723
	call	AddLineQueueX
$LN162@PushInvoke:

; 1224 :                                 AddLineQueue( " cwd" );

	lea	rcx, OFFSET FLAT:$SG11724
	call	AddLineQueue

; 1225 :                                 AddLineQueueX( " push %r", T_DX );

	mov	edx, 11
	lea	rcx, OFFSET FLAT:$SG11725
	call	AddLineQueueX

; 1226 :                                 reg = T_AX;

	mov	esi, 9

; 1227 :                             }
; 1228 :                             asize = 2; /* done */

	jmp	$LN189@PushInvoke
$LN155@PushInvoke:

; 1229 : 
; 1230 :                         } else if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_186 ) {

	cmp	eax, 16
	jl	SHORT $LN163@PushInvoke

; 1231 : 
; 1232 :                             if ( pushsize == 4 ) {

	cmp	r15d, 4
	jne	SHORT $LN165@PushInvoke

; 1233 :                                 if ( asize == 1 ) {

	cmp	edi, 1
	je	$LN266@PushInvoke

; 1234 :                                     /* handled below */
; 1235 :                                 } else if ( psize <= 2 ) {

	cmp	r14d, 2
	jg	SHORT $LN169@PushInvoke

; 1236 : #if AMD64_SUPPORT
; 1237 :                                     AddLineQueueX( " sub %r, 2", stackreg[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:$SG11734
	mov	edx, DWORD PTR stackreg[r12+rax*4]
	call	AddLineQueueX
	jmp	$LN164@PushInvoke
$LN169@PushInvoke:

; 1238 : #else
; 1239 :                                     AddLineQueueX( " sub %r, 2", T_ESP );
; 1240 : #endif
; 1241 :                                 } else if ( IS_SIGNED( opnd.mem_type ) ) {

	cmp	edx, 64					; 00000040H
	jne	SHORT $LN171@PushInvoke

; 1242 :                                     AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	mov	esi, 17
	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11737
	call	AddLineQueueX

; 1243 :                                     *r0flags = R0_USED;

	mov	BYTE PTR [rbx], 1

; 1244 :                                     reg = T_EAX;
; 1245 :                                 } else {

	jmp	SHORT $LN164@PushInvoke
$LN171@PushInvoke:

; 1246 :                                     AddLineQueue( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11738
	call	AddLineQueue

; 1247 :                                 }
; 1248 :                             } else

	jmp	SHORT $LN164@PushInvoke
$LN165@PushInvoke:

; 1249 :                                 AddLineQueue( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11739
	call	AddLineQueue

; 1250 : 
; 1251 :                         } else {

	jmp	SHORT $LN164@PushInvoke
$LN163@PushInvoke:

; 1252 : 
; 1253 :                             if ( !(*r0flags & R0_X_CLEARED) ) {

	test	BYTE PTR [rbx], 4
	jne	SHORT $LN173@PushInvoke

; 1254 :                                 /* v2.11: extra check needed */
; 1255 :                                 if ( reg == T_AH || ( optype & OP_A ) )

	cmp	esi, 5
	je	SHORT $LN175@PushInvoke
	bt	r13d, 9
	jae	SHORT $LN174@PushInvoke
$LN175@PushInvoke:

; 1256 :                                     EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr
$LN174@PushInvoke:

; 1257 :                                 AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11743
	mov	r8d, edx
	call	AddLineQueueX
$LN173@PushInvoke:

; 1258 :                             }
; 1259 :                             AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11744
	call	AddLineQueueX

; 1260 :                             *r0flags = R0_USED | R0_H_CLEARED | R0_X_CLEARED;

	mov	BYTE PTR [rbx], 7
$LN164@PushInvoke:

; 1261 :                         }
; 1262 :                     }
; 1263 : 
; 1264 :                     if ( asize == 1 ) {

	cmp	edi, 1
	jne	$LN189@PushInvoke
	mov	ecx, DWORD PTR ModuleInfo+392
$LN266@PushInvoke:
	lea	eax, DWORD PTR [rsi-5]
	cmp	eax, 3
	jbe	SHORT $LN179@PushInvoke

; 1265 :                         if ( ( reg >= T_AH && reg <= T_BH ) || psize != 1 ) {

	cmp	r14d, 1
	jne	SHORT $LN265@PushInvoke

; 1287 :                         } else {
; 1288 :                             /* convert 8-bit to 16/32-bit register name */
; 1289 :                             if ( (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386) &&

	and	ecx, 240				; 000000f0H
	cmp	ecx, 48					; 00000030H
	jl	$LN188@PushInvoke
	cmp	r15d, 4
	jne	$LN188@PushInvoke

; 1290 :                                 ( psize == 4 || pushsize == 4 ) ) {
; 1291 :                                 reg = reg - T_AL + T_EAX;

	add	esi, 16

; 1292 :                             } else

	jmp	$LN189@PushInvoke
$LN179@PushInvoke:

; 1266 :                             if ( psize != 1 && ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	cmp	r14d, 1
	je	SHORT $LN181@PushInvoke
$LN265@PushInvoke:
	and	ecx, 240				; 000000f0H
	cmp	ecx, 48					; 00000030H
	jl	SHORT $LN181@PushInvoke

; 1267 :                                 /* v2.10: consider signed type coercion! */
; 1268 :                                 AddLineQueueX( " mov%sx %r, %s", IS_SIGNED( opnd.mem_type ) ? "s" : "z",

	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	r8, OFFSET FLAT:$SG11752
	mov	eax, DWORD PTR opnd$[rbp-192]
	lea	rdx, OFFSET FLAT:$SG11753
	and	al, -64					; ffffffffffffffc0H
	lea	r9, QWORD PTR fullparam$[rbp-256]
	cmp	al, 64					; 00000040H
	cmove	rdx, r8
	mov	r8d, DWORD PTR regax[r12+rcx*4]
	lea	rcx, OFFSET FLAT:$SG11754
	call	AddLineQueueX

; 1269 :                                               regax[ModuleInfo.Ofssize], fullparam );
; 1270 :                                 *r0flags =  ( IS_SIGNED( opnd.mem_type ) ? R0_USED : R0_USED | R0_H_CLEARED );

	mov	eax, DWORD PTR opnd$[rbp-192]
	mov	ecx, 3
	and	al, -64					; ffffffffffffffc0H
	mov	esi, 1
	cmp	al, 64					; 00000040H
	cmove	ecx, esi
	mov	BYTE PTR [rbx], cl

; 1271 :                             } else {

	jmp	SHORT $LN187@PushInvoke
$LN181@PushInvoke:

; 1272 :                                 if ( reg != T_AL ) {

	cmp	esi, 1
	je	SHORT $LN183@PushInvoke

; 1273 :                                     AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11756
	call	AddLineQueueX

; 1274 :                                     *r0flags |= R0_USED;
; 1275 :                                     *r0flags &= ~R0_X_CLEARED;

	movzx	eax, BYTE PTR [rbx]
	and	al, 251					; 000000fbH
	or	al, 1
	mov	BYTE PTR [rbx], al
$LN183@PushInvoke:

; 1276 :                                 }
; 1277 :                                 if ( psize != 1 ) /* v2.11: don't modify AH if paramsize is 1 */

	cmp	r14d, 1
	je	SHORT $LN187@PushInvoke

; 1278 :                                     if ( IS_SIGNED( opnd.mem_type ) ) {

	mov	eax, DWORD PTR opnd$[rbp-192]
	and	al, -64					; ffffffffffffffc0H
	cmp	al, 64					; 00000040H
	jne	SHORT $LN185@PushInvoke

; 1279 :                                         AddLineQueue( " cbw" );

	lea	rcx, OFFSET FLAT:$SG11760
	call	AddLineQueue

; 1280 :                                         *r0flags &= ~( R0_H_CLEARED | R0_X_CLEARED );

	and	BYTE PTR [rbx], 249			; 000000f9H
	jmp	SHORT $LN187@PushInvoke
$LN185@PushInvoke:

; 1281 :                                     } else if (!( *r0flags & R0_H_CLEARED )) {

	test	BYTE PTR [rbx], 2
	jne	SHORT $LN187@PushInvoke

; 1282 :                                         AddLineQueueX( " mov %r, 0", T_AH );

	mov	edx, 5
	lea	rcx, OFFSET FLAT:$SG11762
	call	AddLineQueueX

; 1283 :                                         *r0flags |= R0_H_CLEARED;

	or	BYTE PTR [rbx], 2
$LN187@PushInvoke:

; 1284 :                                     }
; 1285 :                             }
; 1286 :                             reg = regax[ModuleInfo.Ofssize];

	movzx	eax, BYTE PTR ModuleInfo+404
	mov	esi, DWORD PTR regax[r12+rax*4]
$LN189@PushInvoke:

; 1293 :                                 reg = reg - T_AL + T_AX;
; 1294 :                         }
; 1295 :                     }
; 1296 : #if 0
; 1297 :                     if ( is_r0 && ( *r0flags & R0_USED ) ) {
; 1298 :                         EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );
; 1299 :                         *r0flags = 0;
; 1300 :                     }
; 1301 : #endif
; 1302 :                 }
; 1303 :                 AddLineQueueX( " push %r", reg );

	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11766
	call	AddLineQueueX

; 1304 :                 /* v2.05: don't change psize if > pushsize */
; 1305 :                 if ( psize < pushsize )

	cmp	r14d, r15d
	jge	$LN238@PushInvoke

; 1306 :                     /* v2.04: adjust psize ( for siz_vararg update ) */
; 1307 :                     psize = pushsize;

	mov	r14d, r15d

; 1308 : 
; 1309 :             } else { /* constant value */

	jmp	$LN238@PushInvoke
$LN193@PushInvoke:

; 1315 :                     else if ( opnd.value64 <= 255 && opnd.value64 >= -255 )

	mov	rcx, QWORD PTR opnd$[rsp]
	lea	rax, QWORD PTR [rcx+255]
	cmp	rax, 510				; 000001feH
	ja	SHORT $LN195@PushInvoke

; 1316 :                         asize = 1;

	mov	esi, 1
	jmp	SHORT $LN200@PushInvoke
$LN195@PushInvoke:

; 1317 :                     else if ( opnd.value64 <= 65535 && opnd.value64 >= -65535 )

	lea	rax, QWORD PTR [rcx+65535]
	cmp	rax, 131070				; 0001fffeH
	jbe	SHORT $LN200@PushInvoke

; 1318 :                         asize = 2;
; 1319 :                     else if ( opnd.value64 <= maxintvalues[0] && opnd.value64 >= minintvalues[0] )

	cmp	rcx, QWORD PTR maxintvalues
	jg	SHORT $LN199@PushInvoke
	cmp	rcx, QWORD PTR minintvalues

; 1320 :                         asize = 4;

	mov	esi, 4
	jge	SHORT $LN200@PushInvoke
$LN199@PushInvoke:

; 1321 :                     else
; 1322 :                         asize = 8;

	mov	esi, 8
$LN200@PushInvoke:

; 1323 :                     if ( psize < asize )
; 1324 :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	edi, DWORD PTR reqParam$[rbp-256]
	cmp	r14d, esi
	jge	SHORT $LN201@PushInvoke
	lea	edx, DWORD PTR [rdi+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr
	mov	edx, DWORD PTR opnd$[rbp-196]
	jmp	SHORT $LN201@PushInvoke
$LN286@PushInvoke:
	mov	edi, DWORD PTR reqParam$[rbp-256]
$LN201@PushInvoke:

; 1325 :                 }
; 1326 : 
; 1327 :                 /* v2.11: don't use CurrWordSize */
; 1328 :                 //asize = CurrWordSize;
; 1329 :                 asize = 2 << Ofssize;
; 1330 : 
; 1331 :                 if ( psize < asize )  /* ensure that the default argsize (2,4,8) is met */

	mov	ecx, DWORD PTR asize$3$[rsp]
	mov	r8d, DWORD PTR opnd$[rsp]
	cmp	r14d, ecx
	jge	SHORT $LN204@PushInvoke

; 1332 :                     if ( psize == 0 && curr->sym.is_vararg ) {

	test	r14d, r14d
	jne	SHORT $LN203@PushInvoke
	mov	rax, QWORD PTR curr$[rbp-256]
	test	BYTE PTR [rax+47], 32			; 00000020H
	je	SHORT $LN203@PushInvoke

; 1333 :                         /* v2.04: push a dword constant in 16-bit */
; 1334 :                         if ( asize == 2 &&

	cmp	ecx, 2
	jne	SHORT $LN203@PushInvoke

; 1335 :                             ( opnd.value > 0xFFFFL || opnd.value < -65535L ) )
; 1336 :                             psize = 4;

	lea	eax, DWORD PTR [r8+65535]
	lea	r14d, QWORD PTR [rcx+2]
	cmp	eax, 131070				; 0001fffeH
	ja	SHORT $LN204@PushInvoke
$LN203@PushInvoke:

; 1337 :                         else
; 1338 :                             psize = asize;
; 1339 :                     } else
; 1340 :                         psize = asize;

	mov	r14d, ecx
$LN204@PushInvoke:

; 1341 : 
; 1342 :                 if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	mov	ecx, eax
	and	ecx, 240				; 000000f0H
	cmp	ecx, 16
	jge	$LN208@PushInvoke

; 1343 :                     *r0flags |= R0_USED;

	or	BYTE PTR [rbx], 1

; 1344 :                     switch ( psize ) {

	cmp	r14d, 2
	je	$LN210@PushInvoke
	cmp	r14d, 4
	je	SHORT $LN215@PushInvoke

; 1367 :                     default:
; 1368 :                         DebugMsg1(("PushInvokeParm(%u): error, CONST, asize=%u, psize=%u, pushsize=%u\n",
; 1369 :                                   reqParam, asize, psize, pushsize ));
; 1370 :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	lea	edx, DWORD PTR [rdi+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr
	jmp	$LN212@PushInvoke
$LN215@PushInvoke:

; 1353 :                         }
; 1354 :                         break;
; 1355 :                     case 4:
; 1356 :                         if ( opnd.uvalue <= 0xFFFF )
; 1357 :                             AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	edx, 9
	cmp	r8d, 65535				; 0000ffffH
	ja	SHORT $LN216@PushInvoke
	mov	r8d, edx
	lea	rcx, OFFSET FLAT:$SG11796
	call	AddLineQueueX
	jmp	SHORT $LN217@PushInvoke
$LN216@PushInvoke:

; 1358 :                         else
; 1359 :                             AddLineQueueX( " mov %r, %r (%s)", T_AX, T_HIGHWORD, fullparam );

	lea	r9, QWORD PTR fullparam$[rbp-256]
	mov	r8d, 232				; 000000e8H
	lea	rcx, OFFSET FLAT:$SG11797
	call	AddLineQueueX
$LN217@PushInvoke:

; 1360 :                         AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11798
	call	AddLineQueueX

; 1361 :                         if ( opnd.uvalue != 0 || opnd.kind == EXPR_ADDR ) {

	cmp	DWORD PTR opnd$[rsp], 0
	jne	SHORT $LN220@PushInvoke
	cmp	DWORD PTR opnd$[rbp-196], 1
	je	SHORT $LN220@PushInvoke

; 1363 :                         } else {
; 1364 :                             *r0flags |= R0_H_CLEARED | R0_X_CLEARED;

	or	BYTE PTR [rbx], 6
	jmp	SHORT $LN212@PushInvoke
$LN220@PushInvoke:

; 1362 :                             AddLineQueueX( " mov %r, %r (%s)", T_AX, T_LOWWORD, fullparam );

	lea	r9, QWORD PTR fullparam$[rbp-256]
	mov	edx, 9
	mov	r8d, 238				; 000000eeH
	lea	rcx, OFFSET FLAT:$SG11802
	call	AddLineQueueX

; 1365 :                         }
; 1366 :                         break;

	jmp	SHORT $LN212@PushInvoke
$LN210@PushInvoke:

; 1345 :                     case 2:
; 1346 :                         if ( opnd.value != 0 || opnd.kind == EXPR_ADDR ) {

	test	r8d, r8d
	jne	SHORT $LN213@PushInvoke
	cmp	edx, 1
	je	SHORT $LN213@PushInvoke

; 1348 :                         } else {
; 1349 :                             if ( !(*r0flags & R0_X_CLEARED ) ) {

	test	BYTE PTR [rbx], 4
	jne	SHORT $LN214@PushInvoke

; 1350 :                                 AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11792
	mov	r8d, edx
	call	AddLineQueueX
$LN214@PushInvoke:

; 1351 :                             }
; 1352 :                             *r0flags |= R0_H_CLEARED | R0_X_CLEARED;

	or	BYTE PTR [rbx], 6
	jmp	SHORT $LN212@PushInvoke
$LN213@PushInvoke:

; 1347 :                             AddLineQueueX( " mov %r, %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11790
	call	AddLineQueueX
$LN212@PushInvoke:

; 1371 :                     }
; 1372 :                     AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11804
	call	AddLineQueueX

; 1373 :                 } else { /* cpu >= 80186 */

	jmp	$LN238@PushInvoke
$LN208@PushInvoke:

; 1374 :                     char *instr = "";

	lea	rbx, OFFSET FLAT:$SG11805

; 1375 :                     char *suffix;
; 1376 :                     int qual = EMPTY;
; 1377 :                     //if ( asize != psize ) {
; 1378 :                     if ( psize != pushsize ) {

	cmp	r14d, r15d
	je	$LN237@PushInvoke

; 1379 :                         switch ( psize ) {

	cmp	r14d, 2
	je	$LN223@PushInvoke
	cmp	r14d, 4
	je	$LN229@PushInvoke
	cmp	r14d, 6
	je	SHORT $LN224@PushInvoke
	cmp	r14d, 8
	jne	SHORT $LN234@PushInvoke

; 1400 :                             }
; 1401 :                             break;
; 1402 :                         case 8:
; 1403 : #if AMD64_SUPPORT
; 1404 :                             if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_64 )

	cmp	ecx, 112				; 00000070H
	jge	$LN237@PushInvoke

; 1405 :                                 break;
; 1406 : #endif
; 1407 :                             /* v2.06: added support for double constants */
; 1408 :                             if ( opnd.kind == EXPR_CONST || opnd.kind == EXPR_FLOAT ) {

	test	edx, edx
	je	SHORT $LN235@PushInvoke
	cmp	edx, 3
	jne	SHORT $LN234@PushInvoke
$LN235@PushInvoke:

; 1409 :                                 AddLineQueueX( " pushd %r (%s)", T_HIGH32, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 231				; 000000e7H
	lea	rcx, OFFSET FLAT:$SG11828
	call	AddLineQueueX

; 1410 :                                 qual = T_LOW32;

	mov	r8d, 237				; 000000edH

; 1411 :                                 instr = "d";

	lea	rdx, OFFSET FLAT:$SG11829

; 1412 :                                 break;

	jmp	$LN269@PushInvoke
$LN234@PushInvoke:

; 1413 :                             }
; 1414 :                         default:
; 1415 :                             DebugMsg1(("PushInvokeParm(%u): error, CONST, asize=%u, psize=%u, pushsize=%u\n",
; 1416 :                                       reqParam, asize, psize, pushsize ));
; 1417 :                             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	lea	edx, DWORD PTR [rdi+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr
	jmp	$LN237@PushInvoke
$LN224@PushInvoke:

; 1382 :                             break;
; 1383 :                         case 6: /* v2.04: added */
; 1384 :                             /* v2.11: use pushw only for 16-bit target */
; 1385 :                             if ( Ofssize == USE16 )

	mov	esi, DWORD PTR tv172[rsp]
	test	sil, sil
	jne	SHORT $LN225@PushInvoke

; 1386 :                                 suffix = "w";

	lea	rdx, OFFSET FLAT:$SG11812
	jmp	SHORT $LN228@PushInvoke
$LN225@PushInvoke:

; 1387 :                             else if ( Ofssize == USE32 && CurrWordSize == 2 )

	cmp	sil, 1
	jne	SHORT $LN227@PushInvoke
	cmp	BYTE PTR ModuleInfo+406, 2

; 1388 :                                 suffix = "d";

	lea	rdx, OFFSET FLAT:$SG11815
	je	SHORT $LN228@PushInvoke
$LN227@PushInvoke:

; 1389 :                             else
; 1390 :                                 suffix = "";

	lea	rdx, OFFSET FLAT:$SG11816
$LN228@PushInvoke:

; 1391 :                             AddLineQueueX( " push%s (%s) shr 32t", suffix, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11817
	call	AddLineQueueX
	mov	eax, DWORD PTR ModuleInfo+392
$LN229@PushInvoke:

; 1392 :                             /* no break */
; 1393 :                         case 4:
; 1394 :                             if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 )

	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN230@PushInvoke

; 1395 :                                 instr = "d";

	lea	rbx, OFFSET FLAT:$SG11821
	jmp	SHORT $LN237@PushInvoke
$LN230@PushInvoke:

; 1396 :                             else {
; 1397 :                                 AddLineQueueX( " pushw %r (%s)", T_HIGHWORD, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	edx, 232				; 000000e8H
	lea	rcx, OFFSET FLAT:$SG11822
	call	AddLineQueueX

; 1398 :                                 instr = "w";

	lea	rdx, OFFSET FLAT:$SG11823

; 1399 :                                 qual = T_LOWWORD;

	mov	r8d, 238				; 000000eeH
$LN269@PushInvoke:

; 1418 :                         }
; 1419 :                     }
; 1420 :                     if ( qual != EMPTY )
; 1421 :                         AddLineQueueX( " push%s %r (%s)", instr, qual, fullparam );

	lea	r9, QWORD PTR fullparam$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11833
	call	AddLineQueueX
	jmp	SHORT $LN238@PushInvoke
$LN223@PushInvoke:

; 1380 :                         case 2:
; 1381 :                             instr = "w";

	lea	rbx, OFFSET FLAT:$SG11808
$LN237@PushInvoke:

; 1422 :                     else
; 1423 :                         AddLineQueueX( " push%s %s", instr, fullparam );

	lea	r8, QWORD PTR fullparam$[rbp-256]
	mov	rdx, rbx
	lea	rcx, OFFSET FLAT:$SG11834
	call	AddLineQueueX
$LN238@PushInvoke:

; 1424 :                 }
; 1425 :             }
; 1426 :             if ( curr->sym.is_vararg ) {

	mov	rax, QWORD PTR curr$[rbp-256]
	test	BYTE PTR [rax+47], 32			; 00000020H
	je	SHORT $LN294@PushInvoke

; 1427 :                 size_vararg += psize;

	add	DWORD PTR size_vararg, r14d

; 1428 :                 DebugMsg1(("PushInvokeParm(%u): psize=%u added to size_vararg, now=%u\n", reqParam, psize, size_vararg ));
; 1429 :             }
; 1430 :         }
; 1431 :     }
; 1432 :     return( NOT_ERROR );

	jmp	SHORT $LN294@PushInvoke
$LN81@PushInvoke:

; 961  :             DebugMsg(("PushInvokeParm(%u): argsize error, arg size=%d, parm size=%d\n", reqParam, asize, psize));
; 962  :             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	edx, DWORD PTR reqParam$[rbp-256]
	inc	edx
$LN293@PushInvoke:
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN294@PushInvoke:

; 963  :             return( NOT_ERROR );

	xor	eax, eax
$LN291@PushInvoke:
	mov	rdi, QWORD PTR [rsp+2248]
	mov	rbx, QWORD PTR [rsp+2304]
	mov	r14, QWORD PTR [rsp+2240]

; 1433 : }

	add	rsp, 2256				; 000008d0H
	pop	r15
	pop	r13
	pop	r12
	pop	rsi
	pop	rbp
	ret	0
PushInvokeParam ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
;	COMDAT SkipTypecast
_TEXT	SEGMENT
fullparam$ = 16
i$ = 24
tokenarray$ = 32
SkipTypecast PROC					; COMDAT

; 693  : {

	sub	rsp, 8

; 697  :         if (( tokenarray[j].token == T_COMMA ) || ( tokenarray[j].token == T_FINAL ) )

	movsxd	r9, edx
	mov	r11, rcx
	shl	r9, 5
	add	r9, r8
	mov	BYTE PTR [rcx], 0
	cmp	BYTE PTR [r9], 44			; 0000002cH
	je	$LN20@SkipTypeca

; 694  :     int j;
; 695  :     fullparam[0] = NULLC;
; 696  :     for ( j = i; ; j++ ) {

	mov	QWORD PTR [rsp], rbx
	lea	r8, QWORD PTR [r9+32]
	lea	rbx, OFFSET FLAT:$SG11465
	npad	3
$LL4@SkipTypeca:

; 697  :         if (( tokenarray[j].token == T_COMMA ) || ( tokenarray[j].token == T_FINAL ) )

	cmp	BYTE PTR [r9], 0
	je	$LN21@SkipTypeca

; 698  :             break;
; 699  :         if (( tokenarray[j+1].token == T_BINARY_OPERATOR ) && ( tokenarray[j+1].tokval == T_PTR ) )

	cmp	BYTE PTR [r8], 5
	jne	SHORT $LN7@SkipTypeca
	cmp	DWORD PTR [r8+16], 258			; 00000102H
	jne	SHORT $LN7@SkipTypeca

; 700  :             j = j + 1;

	add	r8, 32					; 00000020H
	add	r9, 32					; 00000020H
	jmp	SHORT $LN2@SkipTypeca
$LN7@SkipTypeca:

; 701  :         else {
; 702  :             if ( fullparam[0] != NULLC )

	cmp	BYTE PTR [r11], 0
	je	SHORT $LN9@SkipTypeca

; 703  :                 strcat( fullparam," " );

	lea	rcx, QWORD PTR [r11-1]
	npad	2
$LL18@SkipTypeca:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL18@SkipTypeca
	xor	edx, edx
	npad	4
$LL19@SkipTypeca:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL19@SkipTypeca
$LN9@SkipTypeca:

; 704  :             strcat( fullparam, tokenarray[j].string_ptr );

	lea	rax, QWORD PTR [r11-1]
$LL16@SkipTypeca:
	cmp	BYTE PTR [rax+1], 0
	lea	rax, QWORD PTR [rax+1]
	jne	SHORT $LL16@SkipTypeca
	mov	r10, QWORD PTR [r9+8]
	xor	edx, edx
	npad	13
$LL17@SkipTypeca:
	movzx	ecx, BYTE PTR [r10+rdx]
	mov	BYTE PTR [rax+rdx], cl
	lea	rdx, QWORD PTR [rdx+1]
	test	cl, cl
	jne	SHORT $LL17@SkipTypeca
$LN2@SkipTypeca:

; 694  :     int j;
; 695  :     fullparam[0] = NULLC;
; 696  :     for ( j = i; ; j++ ) {

	add	r9, 32					; 00000020H
	add	r8, 32					; 00000020H

; 697  :         if (( tokenarray[j].token == T_COMMA ) || ( tokenarray[j].token == T_FINAL ) )

	cmp	BYTE PTR [r9], 44			; 0000002cH
	jne	$LL4@SkipTypeca
$LN21@SkipTypeca:
	mov	rbx, QWORD PTR [rsp]
$LN20@SkipTypeca:

; 705  :         }
; 706  :     }
; 707  : }

	add	rsp, 8
	ret	0
SkipTypecast ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
;	COMDAT GetSegmentPart
_TEXT	SEGMENT
opnd$ = 48
buffer$ = 56
fullparam$ = 64
GetSegmentPart PROC					; COMDAT

; 521  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	QWORD PTR [rsp+24], rbp
	push	rsi
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 522  :     short reg = T_NULL;

	xor	ebp, ebp

; 523  :     DebugMsg1(("GetSegmentPart(%s) enter [override=%s sym=%s segment=%s]\n",
; 524  :                fullparam, opnd->override ? opnd->override->string_ptr : "NULL",
; 525  :                opnd->sym ? opnd->sym->name : "NULL",
; 526  :                opnd->sym ? opnd->sym->segment ? opnd->sym->segment->name : "NULL" : "NULL" ));
; 527  :     if ( opnd->override != NULL ) {

	mov	rdx, QWORD PTR [rcx+48]
	mov	rsi, rcx
	test	rdx, rdx
	je	SHORT $LN2@GetSegment

; 528  :         if ( opnd->override->token == T_REG )

	cmp	BYTE PTR [rdx], 2
	jne	SHORT $LN4@GetSegment

; 560  :     }
; 561  :     DebugMsg1(("GetSegmentPart: reg%u, buffer=%s\n", reg, reg ? "" : buffer ));
; 562  :     return( reg );

	movzx	eax, WORD PTR [rdx+16]

; 563  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN4@GetSegment:

; 529  :             reg = opnd->override->tokval;
; 530  :         else
; 531  :             strcpy( buffer, opnd->override->string_ptr );

	mov	rdx, QWORD PTR [rdx+8]
	npad	3
$LL19@GetSegment:
	movzx	ecx, BYTE PTR [rdx]
	lea	rdx, QWORD PTR [rdx+1]
	mov	BYTE PTR [rbx], cl
	lea	rbx, QWORD PTR [rbx+1]
	test	cl, cl
	jne	SHORT $LL19@GetSegment

; 560  :     }
; 561  :     DebugMsg1(("GetSegmentPart: reg%u, buffer=%s\n", reg, reg ? "" : buffer ));
; 562  :     return( reg );

	movzx	eax, bp

; 563  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
$LN2@GetSegment:

; 532  :     } else if ( opnd->sym != NULL && opnd->sym->segment != NULL ) {

	mov	rax, QWORD PTR [rcx+80]
	mov	QWORD PTR [rsp+48], rdi
	test	rax, rax
	je	SHORT $LN16@GetSegment
	mov	rdi, QWORD PTR [rax+24]
	test	rdi, rdi
	je	SHORT $LN6@GetSegment

; 538  :         else
; 539  :             as = search_assume( (struct asym *)dir, ASSUME_CS, TRUE );

	mov	rax, QWORD PTR [rdi+96]
	mov	r8b, 1
	mov	edx, 1
	mov	ecx, DWORD PTR [rax+72]
	sub	ecx, 2
	cmp	ecx, 1
	mov	rcx, rdi
	ja	SHORT $LN41@GetSegment

; 533  :         struct dsym *dir = GetSegm( opnd->sym );
; 534  :         enum assume_segreg as;
; 535  :         if ( dir->e.seginfo->segtype == SEGTYPE_DATA ||
; 536  :             dir->e.seginfo->segtype == SEGTYPE_BSS )
; 537  :             as = search_assume( (struct asym *)dir, ASSUME_DS, TRUE );

	mov	edx, 3
$LN41@GetSegment:
	call	search_assume

; 540  :         if ( as != ASSUME_NOTHING ) {

	cmp	eax, -2
	je	SHORT $LN11@GetSegment

; 541  :             //GetResWName( segreg_tab[as], buffer );
; 542  :             reg = T_ES + as; /* v2.08: T_ES is first seg reg in special.h */

	add	ax, 25

; 543  :         } else {

	jmp	SHORT $LN39@GetSegment
$LN11@GetSegment:

; 544  :             struct asym *seg;
; 545  :             seg = GetGroup( opnd->sym );

	mov	rcx, QWORD PTR [rsi+80]
	call	GetGroup

; 546  :             if ( seg == NULL )

	test	rax, rax
	cmove	rax, rdi

; 547  :                 seg = &dir->sym;
; 548  :             if ( seg )
; 549  :                 strcpy( buffer, seg->name );

	mov	rcx, QWORD PTR [rax+8]
	npad	2
$LL20@GetSegment:
	movzx	eax, BYTE PTR [rcx]
	lea	rcx, QWORD PTR [rcx+1]
	mov	BYTE PTR [rbx], al
	lea	rbx, QWORD PTR [rbx+1]
	test	al, al
	jne	SHORT $LL20@GetSegment

; 550  :             else {
; 551  :                 strcpy( buffer, "seg " );
; 552  :                 strcat( buffer, fullparam );
; 553  :             }
; 554  :         }

	jmp	SHORT $LN42@GetSegment
$LN6@GetSegment:

; 555  :     } else if ( opnd->sym && opnd->sym->state == SYM_STACK ) {

	test	rax, rax
	je	SHORT $LN16@GetSegment
	cmp	DWORD PTR [rax+32], 5
	jne	SHORT $LN16@GetSegment

; 556  :         reg = T_SS;

	mov	eax, 27

; 557  :     } else {

	jmp	SHORT $LN39@GetSegment
$LN16@GetSegment:

; 558  :         strcpy( buffer,"seg " );

	lea	rcx, OFFSET FLAT:$SG11354
	mov	rdx, rbx
	sub	rdx, rcx
$LL22@GetSegment:
	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [rdx+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL22@GetSegment

; 559  :         strcat( buffer, fullparam );

	dec	rbx
$LL37@GetSegment:
	cmp	BYTE PTR [rbx+1], bpl
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL37@GetSegment
	xor	ecx, ecx
	npad	1
$LL38@GetSegment:
	movzx	eax, BYTE PTR [r8+rcx]
	mov	BYTE PTR [rbx+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL38@GetSegment
$LN42@GetSegment:

; 560  :     }
; 561  :     DebugMsg1(("GetSegmentPart: reg%u, buffer=%s\n", reg, reg ? "" : buffer ));
; 562  :     return( reg );

	movzx	eax, bp
$LN39@GetSegment:
	mov	rdi, QWORD PTR [rsp+48]

; 563  : }

	mov	rbx, QWORD PTR [rsp+56]
	mov	rbp, QWORD PTR [rsp+64]
	add	rsp, 32					; 00000020H
	pop	rsi
	ret	0
GetSegmentPart ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 112
reg$ = 120
index$ = 120
param$ = 128
addr$ = 136
opnd$ = 144
paramvalue$ = 152
regs_used$ = 160
ms64_param PROC

; 246  : {

	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 247  :     uint_32 size;
; 248  :     uint_32 psize;
; 249  :     int reg;
; 250  :     int reg2;
; 251  :     int i;
; 252  :     int base;
; 253  :     bool destroyed = FALSE;
; 254  :     DebugMsg1(("ms64_param(%s, index=%u, param.memtype=%Xh, addr=%u) enter\n", proc->sym.name, index, param->sym.mem_type, addr ));
; 255  :     /* v2.11: default size is 32-bit, not 64-bit */
; 256  :     if ( param->sym.is_vararg ) {

	test	BYTE PTR [r8+47], 32			; 00000020H
	mov	r13d, 8
	mov	rsi, QWORD PTR opnd$[rsp]
	movzx	eax, r9b
	mov	r12, r8
	movsxd	rbp, edx
	lea	r15d, QWORD PTR [r13-4]
	je	SHORT $LN10@ms64_param

; 257  :         psize = 0;
; 258  :         if ( addr || opnd->instr == T_OFFSET )

	test	al, al
	jne	SHORT $LN14@ms64_param
	cmp	DWORD PTR [rsi+56], 241			; 000000f1H
	je	SHORT $LN14@ms64_param

; 260  :         else if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE )

	cmp	DWORD PTR [rsi+60], 2
	jne	SHORT $LN15@ms64_param
	test	BYTE PTR [rsi+72], 1
	jne	SHORT $LN15@ms64_param

; 261  :             psize = SizeFromRegister( opnd->base_reg->tokval );

	mov	rax, QWORD PTR [rsi+24]
	mov	ecx, DWORD PTR [rax+16]
	call	SizeFromRegister
	jmp	SHORT $LN148@ms64_param
$LN15@ms64_param:

; 262  :         else if ( opnd->mem_type != MT_EMPTY )

	mov	ecx, DWORD PTR [rsi+64]
	cmp	ecx, 192				; 000000c0H
	je	SHORT $LN136@ms64_param

; 263  :             psize = SizeFromMemtype( opnd->mem_type, USE64, opnd->type );

	mov	r8, QWORD PTR [rsi+96]
	mov	edx, 2
	call	SizeFromMemtype
$LN148@ms64_param:
	mov	edi, eax

; 264  :         if ( psize < 4 )

	cmp	eax, r15d
	jae	SHORT $LN11@ms64_param
$LN136@ms64_param:

; 265  :             psize = 4;

	mov	edi, r15d

; 266  :     } else

	jmp	SHORT $LN11@ms64_param
$LN14@ms64_param:

; 259  :             psize = 8;

	mov	edi, r13d

; 264  :         if ( psize < 4 )

	jmp	SHORT $LN11@ms64_param
$LN10@ms64_param:

; 267  :         psize = SizeFromMemtype( param->sym.mem_type, USE64, param->sym.type );

	mov	r8, QWORD PTR [r8+80]
	mov	edx, 2
	mov	ecx, DWORD PTR [r12+36]
	call	SizeFromMemtype
	mov	edi, eax
$LN11@ms64_param:

; 268  : 
; 269  :     /* check for register overwrites; v2.11: moved out the if( index >= 4 ) block */
; 270  :     if ( opnd->base_reg != NULL ) {

	mov	rax, QWORD PTR [rsi+24]
	lea	r10, OFFSET FLAT:__ImageBase
	mov	r14, QWORD PTR regs_used$[rsp]
	mov	QWORD PTR [rsp+112], rbx
	test	rax, rax
	je	SHORT $LN141@ms64_param

; 271  :         reg = opnd->base_reg->tokval;

	movsxd	rbx, DWORD PTR [rax+16]

; 272  :         if ( GetValueSp( reg ) & OP_R ) {

	lea	rcx, QWORD PTR [rbx+rbx*2]
	mov	edx, DWORD PTR SpecialTable[r10+rcx*4]
	test	dl, 15
	je	SHORT $LN145@ms64_param

; 273  :             i = GetRegNo( reg );

	movzx	ecx, BYTE PTR SpecialTable[r10+rcx*4+10]

; 274  :             if ( REGPAR_WIN64 & ( 1 << i ) ) {

	mov	eax, 1
	shl	eax, cl
	test	eax, 774				; 00000306H
	je	SHORT $LN21@ms64_param

; 275  :                 base = GetParmIndex( i );

	cmp	ecx, r13d
	jl	SHORT $LN130@ms64_param
	add	ecx, -6
	jmp	SHORT $LN131@ms64_param
$LN130@ms64_param:
	dec	ecx
$LN131@ms64_param:

; 276  :                 if ( *regs_used & ( 1 << ( base + RPAR_START ) ) )

	add	ecx, 3
	mov	edx, 1
	shl	edx, cl
	test	dl, BYTE PTR [r14]
	je	SHORT $LN145@ms64_param

; 277  :                     destroyed = TRUE;

	mov	r9b, 1

; 278  :             } else if ( (*regs_used & R0_USED ) && ( ( GetValueSp( reg ) & OP_A ) || reg == T_AH ) ) {

	jmp	SHORT $LN24@ms64_param
$LN21@ms64_param:
	test	BYTE PTR [r14], 1
	je	SHORT $LN145@ms64_param
	bt	edx, 9
	jb	SHORT $LN25@ms64_param
	cmp	ebx, 5
	jne	SHORT $LN145@ms64_param
$LN25@ms64_param:

; 279  :                 destroyed = TRUE;

	mov	r9b, 1
	jmp	SHORT $LN24@ms64_param
$LN141@ms64_param:
	mov	ebx, DWORD PTR reg$[rsp]
$LN145@ms64_param:
	xor	r9b, r9b
$LN24@ms64_param:

; 280  :             }
; 281  :         }
; 282  :     }
; 283  :     if ( opnd->idx_reg != NULL ) {

	mov	rax, QWORD PTR [rsi+32]
	test	rax, rax
	je	SHORT $LN31@ms64_param

; 284  :         reg2 = opnd->idx_reg->tokval;

	movsxd	rdx, DWORD PTR [rax+16]

; 285  :         if ( GetValueSp( reg2 ) & OP_R ) {

	lea	rcx, QWORD PTR [rdx+rdx*2]
	mov	r8d, DWORD PTR SpecialTable[r10+rcx*4]
	test	r8b, 15
	je	SHORT $LN31@ms64_param

; 286  :             i = GetRegNo( reg2 );

	movzx	ecx, BYTE PTR SpecialTable[r10+rcx*4+10]

; 287  :             if ( REGPAR_WIN64 & ( 1 << i ) ) {

	mov	eax, 1
	shl	eax, cl
	test	eax, 774				; 00000306H
	je	SHORT $LN28@ms64_param

; 288  :                 base = GetParmIndex( i );

	cmp	ecx, r13d
	jl	SHORT $LN132@ms64_param
	add	ecx, -6
	jmp	SHORT $LN133@ms64_param
$LN132@ms64_param:
	dec	ecx
$LN133@ms64_param:

; 289  :                 if ( *regs_used & ( 1 << ( base + RPAR_START ) ) )

	add	ecx, 3
	mov	edx, 1
	shl	edx, cl
	test	dl, BYTE PTR [r14]
	jne	SHORT $LN137@ms64_param

; 290  :                     destroyed = TRUE;
; 291  :             } else if ( (*regs_used & R0_USED ) && ( ( GetValueSp( reg2 ) & OP_A ) || reg2 == T_AH ) ) {

	jmp	SHORT $LN31@ms64_param
$LN28@ms64_param:
	test	BYTE PTR [r14], 1
	je	SHORT $LN31@ms64_param
	bt	r8d, 9
	jb	SHORT $LN137@ms64_param
	cmp	edx, 5
	je	SHORT $LN137@ms64_param
$LN31@ms64_param:

; 292  :                 destroyed = TRUE;
; 293  :             }
; 294  :         }
; 295  :     }
; 296  :     if ( destroyed ) {

	test	r9b, r9b
	je	SHORT $LN33@ms64_param
$LN137@ms64_param:

; 297  :         EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr
	lea	r10, OFFSET FLAT:__ImageBase

; 298  :         *regs_used = 0;

	mov	BYTE PTR [r14], 0
$LN33@ms64_param:

; 299  :     }
; 300  : 
; 301  :     if ( index >= 4 ) {

	cmp	ebp, r15d
	jl	$LN34@ms64_param

; 302  : 
; 303  :         if ( addr || psize > 8 ) {

	cmp	BYTE PTR addr$[rsp], 0
	jne	$LN37@ms64_param
	cmp	edi, r13d
	ja	$LN37@ms64_param

; 316  :         }
; 317  : 
; 318  :         if ( opnd->kind == EXPR_CONST ||

	mov	ecx, DWORD PTR [rsi+60]
	test	ecx, ecx
	je	$LN43@ms64_param
	cmp	ecx, 1
	jne	SHORT $LN41@ms64_param
	test	BYTE PTR [rsi+72], cl
	jne	SHORT $LN41@ms64_param
	cmp	DWORD PTR [rsi+64], 192			; 000000c0H
	jne	SHORT $LN41@ms64_param
	cmp	DWORD PTR [rsi+56], 241			; 000000f1H
	jne	$LN43@ms64_param
$LN41@ms64_param:

; 340  :             }
; 341  :             DebugMsg(("ms64_param(%s, param=%u): MT_EMPTY size.p=%u flags=%X\n", proc->sym.name, index, psize, *regs_used ));
; 342  : 
; 343  :         } else if ( opnd->kind == EXPR_FLOAT  ) {

	cmp	ecx, 3
	jne	$LN52@ms64_param

; 344  : 
; 345  :             if ( param->sym.mem_type == MT_REAL8 ) {

	cmp	DWORD PTR [r12+36], 39			; 00000027H

; 346  :                 AddLineQueueX( " mov %r ptr [%r+%u+0], %r (%s)", T_DWORD, T_RSP, NUMQUAL index*8, T_LOW32, paramvalue );

	lea	r8d, QWORD PTR [rcx+116]
	jne	SHORT $LN54@ms64_param
	mov	rbx, QWORD PTR paramvalue$[rsp]
	lea	edi, DWORD PTR [rbp*8]
	mov	esi, 209				; 000000d1H
	mov	QWORD PTR [rsp+40], rbx
	mov	r9d, edi
	mov	DWORD PTR [rsp+32], 237			; 000000edH
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11217
	call	AddLineQueueX

; 347  :                 AddLineQueueX( " mov %r ptr [%r+%u+4], %r (%s)", T_DWORD, T_RSP, NUMQUAL index*8, T_HIGH32, paramvalue );

	mov	r9d, edi
	mov	QWORD PTR [rsp+40], rbx
	lea	r8d, QWORD PTR [rsi-90]
	mov	DWORD PTR [rsp+32], 231			; 000000e7H
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11218
	call	AddLineQueueX

; 348  :             } else

	jmp	$LN94@ms64_param
$LN54@ms64_param:

; 349  :                 AddLineQueueX( " mov %r ptr [%r+%u], %s", T_DWORD, T_RSP, NUMQUAL index*8, paramvalue );

	mov	rax, QWORD PTR paramvalue$[rsp]
	lea	r9d, DWORD PTR [rbp*8]
	mov	edx, 209				; 000000d1H
	mov	QWORD PTR [rsp+32], rax
	lea	rcx, OFFSET FLAT:$SG11219
	call	AddLineQueueX

; 350  : 
; 351  :         } else { /* it's a register or variable */

	jmp	$LN94@ms64_param
$LN52@ms64_param:

; 352  : 
; 353  :             if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	cmp	ecx, 2
	jne	SHORT $LN56@ms64_param
	test	BYTE PTR [rsi+72], 1
	jne	SHORT $LN56@ms64_param

; 354  :                 size = SizeFromRegister( reg );

	mov	ecx, ebx
	call	SizeFromRegister
	mov	r15d, eax

; 355  :                 if ( size == psize )

	cmp	eax, edi
	je	$LN57@ms64_param

; 356  :                     i = reg;
; 357  :                 else {
; 358  :                     if ( size > psize || ( size < psize && param->sym.mem_type == MT_PTR ) ) {

	ja	SHORT $LN61@ms64_param
	jae	SHORT $LN60@ms64_param
	cmp	DWORD PTR [r12+36], 195			; 000000c3H
	jne	SHORT $LN60@ms64_param
$LN61@ms64_param:

; 359  :                         DebugMsg(("ms64_param(%s, param=%u): type error size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));
; 360  :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	lea	edx, DWORD PTR [rbp+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr

; 361  :                         psize = size;

	mov	edi, r15d
$LN60@ms64_param:

; 362  :                     }
; 363  :                     switch ( psize ) {

	mov	eax, edi
	sub	eax, 1
	je	SHORT $LN68@ms64_param
	sub	eax, 1
	je	SHORT $LN69@ms64_param
	cmp	eax, 2
	je	SHORT $LN70@ms64_param

; 364  :                     case 1:  i = T_AL;  break;
; 365  :                     case 2:  i = T_AX;  break;
; 366  :                     case 4:  i = T_EAX; break;
; 367  :                     default: i = T_RAX; break;

	mov	ebx, 115				; 00000073H
	jmp	SHORT $LN6@ms64_param
$LN56@ms64_param:

; 368  :                     }
; 369  :                     *regs_used |= R0_USED;
; 370  :                 }
; 371  :                 DebugMsg(("ms64_param(%s, param=%u): REG size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));
; 372  :             } else {
; 373  :                 if ( opnd->mem_type == MT_EMPTY )

	mov	ecx, DWORD PTR [rsi+64]
	cmp	ecx, 192				; 000000c0H
	jne	SHORT $LN66@ms64_param

; 374  :                     size = ( opnd->instr == T_OFFSET ? 8 : 4 );

	cmp	DWORD PTR [rsi+56], 241			; 000000f1H
	cmove	r15d, r13d
	jmp	SHORT $LN67@ms64_param
$LN66@ms64_param:

; 375  :                 else
; 376  :                     size = SizeFromMemtype( opnd->mem_type, USE64, opnd->type );

	mov	r8, QWORD PTR [rsi+96]
	mov	edx, 2
	call	SizeFromMemtype
	mov	r15d, eax
$LN67@ms64_param:

; 377  :                 DebugMsg(("ms64_param(%s, param=%u): MEM size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));
; 378  :                 switch ( psize ) {

	mov	eax, edi
	sub	eax, 1
	je	SHORT $LN68@ms64_param
	sub	eax, 1
	je	SHORT $LN69@ms64_param
	cmp	eax, 2
	je	SHORT $LN70@ms64_param

; 382  :                 default: i = T_RAX; break;

	mov	ebx, 115				; 00000073H
	jmp	SHORT $LN6@ms64_param
$LN70@ms64_param:

; 381  :                 case 4:  i = T_EAX; break;

	mov	ebx, 17
	jmp	SHORT $LN6@ms64_param
$LN69@ms64_param:

; 380  :                 case 2:  i = T_AX;  break;

	mov	ebx, 9
	jmp	SHORT $LN6@ms64_param
$LN68@ms64_param:

; 379  :                 case 1:  i = T_AL;  break;

	mov	ebx, 1
$LN6@ms64_param:

; 383  :                 }
; 384  :                 *regs_used |= R0_USED;

	or	BYTE PTR [r14], 1
$LN57@ms64_param:

; 385  :             }
; 386  : 
; 387  :             /* v2.11: no expansion if target type is a pointer */
; 388  :             if ( size > psize || ( size < psize && param->sym.mem_type == MT_PTR ) ) {

	cmp	r15d, edi
	ja	SHORT $LN73@ms64_param
	jae	SHORT $LN149@ms64_param
	cmp	DWORD PTR [r12+36], 195			; 000000c3H
	jne	SHORT $LN72@ms64_param
$LN73@ms64_param:

; 389  :                 EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	lea	edx, DWORD PTR [rbp+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN72@ms64_param:

; 390  :             }
; 391  :             if ( size != psize ) {

	cmp	r15d, edi
$LN149@ms64_param:
	je	SHORT $LN74@ms64_param

; 392  :                 if ( size == 4 ) {
; 393  :                     if ( IS_SIGNED( opnd->mem_type ) )

	mov	eax, DWORD PTR [rsi+64]
	and	al, -64					; ffffffffffffffc0H
	cmp	r15d, 4
	jne	SHORT $LN76@ms64_param

; 394  :                         AddLineQueueX( " movsxd %r, %s", i, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, ebx
	cmp	al, 64					; 00000040H
	jne	SHORT $LN78@ms64_param
	lea	rcx, OFFSET FLAT:$SG11244
	jmp	SHORT $LN150@ms64_param
$LN78@ms64_param:

; 395  :                     else
; 396  :                         AddLineQueueX( " mov %r, %s", i, paramvalue );

	lea	rcx, OFFSET FLAT:$SG11245

; 397  :                 } else

	jmp	SHORT $LN150@ms64_param
$LN76@ms64_param:

; 398  :                     AddLineQueueX( " mov%sx %r, %s", IS_SIGNED( opnd->mem_type ) ? "s" : "z", i, paramvalue );

	mov	r9, QWORD PTR paramvalue$[rsp]
	lea	rcx, OFFSET FLAT:$SG11246
	cmp	al, 64					; 00000040H
	lea	rdx, OFFSET FLAT:$SG11247
	mov	r8d, ebx
	cmove	rdx, rcx
	lea	rcx, OFFSET FLAT:$SG11248
	call	AddLineQueueX

; 399  :             } else if ( opnd->kind != EXPR_REG || opnd->indirect == TRUE )

	jmp	SHORT $LN80@ms64_param
$LN74@ms64_param:
	cmp	DWORD PTR [rsi+60], 2
	jne	SHORT $LN81@ms64_param
	test	BYTE PTR [rsi+72], 1
	je	SHORT $LN80@ms64_param
$LN81@ms64_param:

; 400  :                 AddLineQueueX( " mov %r, %s", i, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	lea	rcx, OFFSET FLAT:$SG11251
	mov	edx, ebx
$LN150@ms64_param:
	call	AddLineQueueX
$LN80@ms64_param:

; 401  : 
; 402  :             AddLineQueueX( " mov [%r+%u], %r", T_RSP, NUMQUAL index*8, i );

	lea	r8d, DWORD PTR [rbp*8]
	mov	r9d, ebx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG11252
	call	AddLineQueueX
	jmp	$LN94@ms64_param
$LN43@ms64_param:

; 319  :            ( opnd->kind == EXPR_ADDR && opnd->indirect == FALSE && opnd->mem_type == MT_EMPTY && opnd->instr != T_OFFSET ) ) {
; 320  : 
; 321  :             /* v2.06: support 64-bit constants for params > 4 */
; 322  :             if ( psize == 8 &&

	cmp	edi, r13d
	jne	SHORT $LN44@ms64_param
	mov	rax, QWORD PTR [rsi]
	mov	edx, -2147483648			; 80000000H
	add	rax, rdx
	mov	edx, -1					; ffffffffH
	cmp	rax, rdx
	jbe	SHORT $LN44@ms64_param

; 323  :                 ( opnd->value64 > LONG_MAX || opnd->value64 < LONG_MIN ) ) {
; 324  :                 AddLineQueueX( " mov %r ptr [%r+%u], %r ( %s )", T_DWORD, T_RSP, NUMQUAL index*8, T_LOW32, paramvalue );

	mov	rdi, QWORD PTR paramvalue$[rsp]
	lea	ebx, DWORD PTR [rbp*8]
	mov	esi, 209				; 000000d1H
	mov	QWORD PTR [rsp+40], rdi
	mov	r9d, ebx
	mov	DWORD PTR [rsp+32], 237			; 000000edH
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11205
	lea	r8d, QWORD PTR [rsi-90]
	call	AddLineQueueX

; 325  :                 AddLineQueueX( " mov %r ptr [%r+%u], %r ( %s )", T_DWORD, T_RSP, NUMQUAL index*8+4, T_HIGH32, paramvalue );

	lea	r9d, DWORD PTR [rbx+4]
	mov	QWORD PTR [rsp+40], rdi
	lea	r8d, QWORD PTR [rsi-90]
	mov	DWORD PTR [rsp+32], 231			; 000000e7H
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11206
	call	AddLineQueueX

; 326  : 
; 327  :             } else {

	jmp	$LN94@ms64_param
$LN44@ms64_param:

; 328  :                 /* v2.11: no expansion if target type is a pointer and argument is an address part */
; 329  :                 if ( param->sym.mem_type == MT_PTR && opnd->kind == EXPR_ADDR && opnd->sym->state != SYM_UNDEFINED ) {

	cmp	DWORD PTR [r12+36], 195			; 000000c3H
	jne	SHORT $LN47@ms64_param
	cmp	ecx, 1
	jne	SHORT $LN47@ms64_param
	mov	rax, QWORD PTR [rsi+80]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN47@ms64_param

; 330  :                     DebugMsg(("ms64_param(%s, param=%u): MT_PTR, type error, psize=%u\n", proc->sym.name, index, psize ));
; 331  :                     EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	lea	edx, DWORD PTR [rbp+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN47@ms64_param:

; 332  :                 }
; 333  :                 switch ( psize ) {

	sub	edi, 1
	je	SHORT $LN48@ms64_param
	sub	edi, 1
	je	SHORT $LN49@ms64_param
	cmp	edi, 2
	je	SHORT $LN50@ms64_param

; 337  :                 default:  i = T_QWORD; break;

	mov	esi, 213				; 000000d5H
	jmp	SHORT $LN2@ms64_param
$LN50@ms64_param:

; 336  :                 case 4:   i = T_DWORD; break;

	mov	esi, 209				; 000000d1H
	jmp	SHORT $LN2@ms64_param
$LN49@ms64_param:

; 335  :                 case 2:   i = T_WORD; break;

	mov	esi, 207				; 000000cfH
	jmp	SHORT $LN2@ms64_param
$LN48@ms64_param:

; 334  :                 case 1:   i = T_BYTE; break;

	mov	esi, 205				; 000000cdH
$LN2@ms64_param:

; 338  :                 }
; 339  :                 AddLineQueueX( " mov %r ptr [%r+%u], %s", i, T_RSP, NUMQUAL index*8, paramvalue );

	mov	rax, QWORD PTR paramvalue$[rsp]
	lea	r9d, DWORD PTR [rbp*8]
	mov	r8d, 119				; 00000077H
	mov	QWORD PTR [rsp+32], rax
	mov	edx, esi
	lea	rcx, OFFSET FLAT:$SG11212
	call	AddLineQueueX

; 403  :         }

	jmp	$LN94@ms64_param
$LN37@ms64_param:

; 304  :             if ( psize == 4 )

	cmp	edi, r15d
	jne	SHORT $LN38@ms64_param

; 305  :                 i = T_EAX;

	mov	ebx, 17
	jmp	SHORT $LN40@ms64_param
$LN38@ms64_param:

; 306  :             else {
; 307  :                 i = T_RAX;

	mov	ebx, 115				; 00000073H

; 308  :                 if ( psize < 8 )

	cmp	edi, r13d
	jae	SHORT $LN40@ms64_param

; 309  :                     EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	lea	edx, DWORD PTR [rbp+1]
	lea	ecx, QWORD PTR [rbx+30]
	call	EmitErr
$LN40@ms64_param:

; 310  :             }
; 311  :             *regs_used |= R0_USED;
; 312  :             AddLineQueueX( " lea %r, %s", i, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	lea	rcx, OFFSET FLAT:$SG11197
	or	BYTE PTR [r14], 1
	mov	edx, ebx
	call	AddLineQueueX

; 313  :             AddLineQueueX( " mov [%r+%u], %r", T_RSP, NUMQUAL index*8, i );

	lea	r8d, DWORD PTR [rbp*8]
	mov	r9d, ebx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG11198
	call	AddLineQueueX

; 314  :             DebugMsg(("ms64_param(%s, param=%u): ADDR flags=%X\n", proc->sym.name, index, *regs_used ));
; 315  :             return( 1 );

	jmp	$LN94@ms64_param
$LN34@ms64_param:

; 404  : 
; 405  :     } else if ( param->sym.mem_type == MT_REAL4 ||

	mov	r8d, DWORD PTR [r12+36]
	lea	eax, DWORD PTR [r8-35]
	test	eax, -5					; fffffffbH
	je	$LN84@ms64_param

; 433  :         }
; 434  :     } else {
; 435  : 
; 436  :         if ( addr || psize > 8 ) { /* psize > 8 shouldn't happen! */

	cmp	BYTE PTR addr$[rsp], 0
	jne	$LN96@ms64_param
	cmp	edi, r13d
	ja	$LN96@ms64_param

; 443  :         }
; 444  :         /* register argument? */
; 445  :         if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	mov	eax, DWORD PTR [rsi+60]
	cmp	eax, 2
	jne	SHORT $LN99@ms64_param
	test	BYTE PTR [rsi+72], 1
	jne	SHORT $LN99@ms64_param

; 446  :             reg = opnd->base_reg->tokval;

	mov	rax, QWORD PTR [rsi+24]
	mov	ebx, DWORD PTR [rax+16]

; 447  :             size = SizeFromRegister( reg );

	mov	ecx, ebx
	call	SizeFromRegister
	mov	r12d, eax
	jmp	SHORT $LN107@ms64_param
$LN99@ms64_param:

; 448  :         } else if ( opnd->kind == EXPR_CONST || opnd->kind == EXPR_FLOAT ) {

	test	eax, eax
	je	SHORT $LN103@ms64_param
	cmp	eax, 3
	je	SHORT $LN103@ms64_param

; 450  :         } else if ( opnd->mem_type != MT_EMPTY ) {

	mov	ecx, DWORD PTR [rsi+64]
	cmp	ecx, 192				; 000000c0H
	je	SHORT $LN104@ms64_param

; 451  :             size = SizeFromMemtype( opnd->mem_type, USE64, opnd->type );

	mov	r8, QWORD PTR [rsi+96]
	mov	edx, 2
	call	SizeFromMemtype
	mov	r12d, eax
	jmp	SHORT $LN107@ms64_param
$LN104@ms64_param:

; 452  :         } else if ( opnd->kind == EXPR_ADDR && opnd->sym->state == SYM_UNDEFINED ) {

	cmp	eax, 1
	jne	SHORT $LN106@ms64_param
	mov	rax, QWORD PTR [rsi+80]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN103@ms64_param
$LN106@ms64_param:

; 453  :             DebugMsg1(("ms64_param(%s, param=%u): forward ref=%s, assumed size=%u\n", proc->sym.name, index, opnd->sym->name, psize ));
; 454  :             size = psize;
; 455  :         } else
; 456  :             size = ( opnd->instr == T_OFFSET ? 8 : 4 );

	cmp	DWORD PTR [rsi+56], 241			; 000000f1H
	mov	r12d, r15d
	cmove	r12d, r13d
$LN107@ms64_param:

; 457  : 
; 458  :         /* v2.11: allow argument extension, so long as the target isn't a pointer */
; 459  :         //if ( size != psize && param->sym.is_vararg == FALSE ) {
; 460  :         if ( size > psize || ( size < psize && param->sym.mem_type == MT_PTR ) ) {

	cmp	r12d, edi
	ja	SHORT $LN109@ms64_param
	jae	SHORT $LN108@ms64_param
	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN108@ms64_param
$LN109@ms64_param:

; 461  :             DebugMsg(("ms64_param(%s, param=%u): type error size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));
; 462  :             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	lea	edx, DWORD PTR [rbp+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr
	jmp	SHORT $LN108@ms64_param
$LN103@ms64_param:

; 449  :             size = psize;

	mov	r12d, edi
$LN108@ms64_param:

; 463  :         }
; 464  :         /* v2.11: use parameter size to allow argument extension */
; 465  :         //switch ( size ) {
; 466  :         switch ( psize ) {

	mov	eax, edi
	sub	eax, 1
	je	SHORT $LN110@ms64_param
	sub	eax, 1
	je	SHORT $LN111@ms64_param
	cmp	eax, 2
	je	SHORT $LN8@ms64_param

; 469  :         case 4: base =  2*4; break;
; 470  :         default:base =  3*4; break;

	mov	r13d, 12
	jmp	SHORT $LN8@ms64_param
$LN111@ms64_param:

; 468  :         case 2: base =  1*4; break;

	mov	r13d, r15d
	jmp	SHORT $LN8@ms64_param
$LN110@ms64_param:

; 467  :         case 1: base =  0*4; break;

	xor	r13d, r13d
$LN8@ms64_param:

; 471  :         }
; 472  :         /* optimization if the register holds the value already */
; 473  :         if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	cmp	DWORD PTR [rsi+60], 2

; 474  :             if ( GetValueSp( reg ) & OP_R ) {

	lea	r15, OFFSET FLAT:__ImageBase
	jne	SHORT $LN118@ms64_param

; 471  :         }
; 472  :         /* optimization if the register holds the value already */
; 473  :         if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	test	BYTE PTR [rsi+72], 1
	jne	SHORT $LN118@ms64_param

; 474  :             if ( GetValueSp( reg ) & OP_R ) {

	movsxd	rax, ebx
	lea	rcx, QWORD PTR [rax+rax*2]
	lea	rdx, QWORD PTR [rcx*4]
	test	BYTE PTR SpecialTable[rdx+r15], 15
	je	SHORT $LN118@ms64_param

; 475  :                 if ( ms64_regs[index+base] == reg ) {

	movsxd	rcx, r13d

; 476  :                     DebugMsg(("ms64_param(%s, param=%u): argument optimized\n", proc->sym.name, index ));
; 477  :                     return( 1 );

	mov	eax, 1
	add	rcx, rbp
	cmp	DWORD PTR ms64_regs[r15+rcx*4], ebx
	je	$LN1@ms64_param

; 478  :                 }
; 479  :                 i = GetRegNo( reg );

	movzx	edx, BYTE PTR SpecialTable[rdx+r15+10]

; 480  :                 if ( REGPAR_WIN64 & ( 1 << i ) ) {

	mov	ecx, edx
	shl	eax, cl
	test	eax, 774				; 00000306H
	je	SHORT $LN118@ms64_param

; 481  :                     i = GetParmIndex( i );

	cmp	edx, 8
	lea	eax, DWORD PTR [rdx-6]
	lea	ecx, DWORD PTR [rdx-1]

; 482  :                     if ( *regs_used & ( 1 << ( i + RPAR_START ) ) )

	mov	edx, 1
	cmovge	ecx, eax
	add	ecx, 3
	shl	edx, cl
	test	dl, BYTE PTR [r14]
	je	SHORT $LN118@ms64_param

; 483  :                         EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr
$LN118@ms64_param:

; 484  :                 }
; 485  :             }
; 486  :         }
; 487  :         /* v2.11: allow argument extension */
; 488  :         if ( size < psize )

	cmp	r12d, edi
	jae	$LN119@ms64_param

; 489  :             if ( size == 4 ) {
; 490  :                 if ( IS_SIGNED( opnd->mem_type ) )

	mov	eax, DWORD PTR [rsi+64]
	and	al, -64					; ffffffffffffffc0H
	cmp	r12d, 4
	jne	SHORT $LN121@ms64_param

; 491  :                     AddLineQueueX( " movsxd %r, %s", ms64_regs[index+base], paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	cmp	al, 64					; 00000040H
	jne	SHORT $LN123@ms64_param
	movsxd	rcx, r13d
	add	rcx, rbp
	mov	edx, DWORD PTR ms64_regs[r15+rcx*4]
	lea	rcx, OFFSET FLAT:$SG11304
	jmp	$LN151@ms64_param
$LN123@ms64_param:

; 492  :                 else
; 493  :                     AddLineQueueX( " mov %r, %s", ms64_regs[index+2*4], paramvalue );

	mov	edx, DWORD PTR ms64_regs[r15+rbp*4+32]
	lea	rcx, OFFSET FLAT:$SG11305

; 494  :             } else

	jmp	$LN151@ms64_param
$LN121@ms64_param:

; 495  :                 AddLineQueueX( " mov%sx %r, %s", IS_SIGNED( opnd->mem_type ) ? "s" : "z", ms64_regs[index+base], paramvalue );

	mov	r9, QWORD PTR paramvalue$[rsp]
	lea	r8, OFFSET FLAT:$SG11306
	movsxd	rcx, r13d
	lea	rdx, OFFSET FLAT:$SG11307
	add	rcx, rbp
	cmp	al, 64					; 00000040H
	cmove	rdx, r8
	mov	r8d, DWORD PTR ms64_regs[r15+rcx*4]
	lea	rcx, OFFSET FLAT:$SG11308
	call	AddLineQueueX

; 505  :         }
; 506  :         *regs_used |= ( 1 << ( index + RPAR_START ) );

	movzx	ecx, BYTE PTR [r14]
	lea	eax, DWORD PTR [rbp+3]
	bts	ecx, eax
	mov	BYTE PTR [r14], cl
	jmp	$LN94@ms64_param
$LN119@ms64_param:

; 496  :         else{
; 497  :           /* v2.12 added by habran : if parametar  is zero use 'xor reg,reg' instead of 'mov reg,0' */
; 498  :           if ((!strcasecmp(paramvalue, "0") || (!strcasecmp(paramvalue, "NULL")) || (!strcasecmp(paramvalue, "FALSE"))))  {

	mov	rbx, QWORD PTR paramvalue$[rsp]
	lea	rdx, OFFSET FLAT:$SG11312
	mov	rcx, rbx
	call	_stricmp
	test	eax, eax
	je	SHORT $LN127@ms64_param
	lea	rdx, OFFSET FLAT:$SG11313
	mov	rcx, rbx
	call	_stricmp
	test	eax, eax
	je	SHORT $LN127@ms64_param
	lea	rdx, OFFSET FLAT:$SG11314
	mov	rcx, rbx
	call	_stricmp
	test	eax, eax
	je	SHORT $LN127@ms64_param

; 502  :           }
; 503  :           else 
; 504  :             AddLineQueueX(" mov %r, %s", ms64_regs[index + base], paramvalue);

	movsxd	rcx, r13d
	mov	r8, rbx
	add	rcx, rbp
	mov	edx, DWORD PTR ms64_regs[r15+rcx*4]
	lea	rcx, OFFSET FLAT:$SG11317
$LN151@ms64_param:
	call	AddLineQueueX

; 505  :         }
; 506  :         *regs_used |= ( 1 << ( index + RPAR_START ) );

	movzx	ecx, BYTE PTR [r14]
	lea	eax, DWORD PTR [rbp+3]
	bts	ecx, eax
	mov	BYTE PTR [r14], cl
	jmp	$LN94@ms64_param
$LN127@ms64_param:

; 499  :             if (ms64_regs[index + base] > T_R9D) index -= 4;

	movsxd	rcx, r13d
	lea	rax, QWORD PTR [rcx+rbp]
	cmp	DWORD PTR ms64_regs[r15+rax*4], 108	; 0000006cH
	jle	SHORT $LN128@ms64_param
	sub	ebp, 4
$LN128@ms64_param:

; 500  :             AddLineQueueX(" xor %r, %r", ms64_regs[index + base], ms64_regs[index + base]);

	movsxd	rax, ebp
	add	rax, rcx
	lea	rcx, OFFSET FLAT:$SG11316
	mov	edx, DWORD PTR ms64_regs[r15+rax*4]
	mov	r8d, edx
	call	AddLineQueueX

; 501  :             return(1);

	jmp	$LN94@ms64_param
$LN96@ms64_param:

; 437  :             if ( psize >= 4 )

	cmp	edi, r15d
	jb	SHORT $LN97@ms64_param

; 438  :                 AddLineQueueX( " lea %r, %s", ms64_regs[index+2*4+(psize > 4 ? 4 : 0)], paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	lea	rcx, OFFSET FLAT:$SG11277
	xor	r13d, r13d
	cmp	edi, r15d
	cmova	r13, r15
	add	r13, rbp
	mov	edx, DWORD PTR ms64_regs[r10+r13*4+32]
	jmp	SHORT $LN151@ms64_param
$LN97@ms64_param:

; 439  :             else
; 440  :                 EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	lea	edx, DWORD PTR [rbp+1]
	mov	ecx, 145				; 00000091H
	call	EmitErr

; 441  :             *regs_used |= ( 1 << ( index + RPAR_START ) );

	movzx	ecx, BYTE PTR [r14]
	lea	eax, DWORD PTR [rbp+3]
	bts	ecx, eax
	mov	BYTE PTR [r14], cl

; 442  :             return( 1 );

	jmp	$LN94@ms64_param
$LN84@ms64_param:

; 406  :                param->sym.mem_type == MT_REAL8 ) {
; 407  : 
; 408  :         /* v2.04: check if argument is the correct XMM register already */
; 409  :         if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	mov	edx, DWORD PTR [rsi+60]
	cmp	edx, 2
	jne	SHORT $LN86@ms64_param
	test	BYTE PTR [rsi+72], 1
	jne	SHORT $LN86@ms64_param

; 410  : 
; 411  :             if ( GetValueSp( reg ) & OP_XMM ) {

	movsxd	rax, ebx
	lea	rcx, QWORD PTR [rax+rax*2]
	test	BYTE PTR SpecialTable[r10+rcx*4], 32	; 00000020H
	je	SHORT $LN86@ms64_param

; 412  :                 if ( reg == T_XMM0 + index )

	lea	edx, DWORD PTR [rbp+40]
	cmp	ebx, edx
	je	$LN94@ms64_param

; 413  :                     DebugMsg(("ms64_param(%s, param=%u): argument optimized\n", proc->sym.name, index ));
; 414  :                 else
; 415  :                     AddLineQueueX( " movq %r, %s", T_XMM0 + index, paramvalue );

	lea	rcx, OFFSET FLAT:$SG11260

; 416  :                 return( 1 );

	jmp	$LN152@ms64_param
$LN86@ms64_param:

; 417  :             }
; 418  :         }
; 419  :         if ( opnd->kind == EXPR_FLOAT ) {

	cmp	edx, 3
	jne	SHORT $LN89@ms64_param

; 420  :             *regs_used |= R0_USED;

	or	BYTE PTR [r14], 1

; 421  :             if ( param->sym.mem_type == MT_REAL4 ) {

	cmp	DWORD PTR [r12+36], 35			; 00000023H
	jne	SHORT $LN91@ms64_param

; 422  :                 AddLineQueueX( " mov %r, %s", T_EAX, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	lea	rcx, OFFSET FLAT:$SG11265
	mov	ebx, 17
	mov	edx, ebx
	call	AddLineQueueX

; 423  :                 AddLineQueueX( " movd %r, %r", T_XMM0 + index, T_EAX );

	lea	edx, DWORD PTR [rbp+40]
	mov	r8d, ebx
	lea	rcx, OFFSET FLAT:$SG11266
	call	AddLineQueueX

; 424  :             } else {

	jmp	SHORT $LN94@ms64_param
$LN91@ms64_param:

; 425  :                 AddLineQueueX( " mov %r, %r ptr %s", T_RAX, T_REAL8, paramvalue );

	mov	r9, QWORD PTR paramvalue$[rsp]
	lea	rcx, OFFSET FLAT:$SG11267
	mov	ebx, 115				; 00000073H
	mov	edx, ebx
	lea	r8d, QWORD PTR [rbx+100]
	call	AddLineQueueX

; 426  :                 AddLineQueueX( " movd %r, %r", T_XMM0 + index, T_RAX );

	lea	edx, DWORD PTR [rbp+40]
	mov	r8d, ebx
	lea	rcx, OFFSET FLAT:$SG11268
	call	AddLineQueueX

; 427  :             }
; 428  :         } else {

	jmp	SHORT $LN94@ms64_param
$LN89@ms64_param:

; 429  :             if ( param->sym.mem_type == MT_REAL4 )
; 430  :                 AddLineQueueX( " movd %r, %s", T_XMM0 + index, paramvalue );

	lea	edx, DWORD PTR [rbp+40]
	lea	rcx, OFFSET FLAT:$SG11271
	cmp	r8d, 35					; 00000023H
	je	SHORT $LN152@ms64_param

; 431  :             else
; 432  :                 AddLineQueueX( " movq %r, %s", T_XMM0 + index, paramvalue );

	lea	rcx, OFFSET FLAT:$SG11272
$LN152@ms64_param:
	mov	r8, QWORD PTR paramvalue$[rsp]
	call	AddLineQueueX
$LN94@ms64_param:

; 507  :         DebugMsg1(("ms64_param(%s, param=%u): size=%u flags=%X\n", proc->sym.name, index, size, *regs_used ));
; 508  :     }
; 509  :     return( 1 );

	mov	eax, 1
$LN1@ms64_param:
	mov	rbx, QWORD PTR [rsp+112]

; 510  : }

	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ms64_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 8
numparams$ = 16
value$ = 24
ms64_fcend PROC

; 223  :     /* use <value>, which has been set by ms64_fcstart() */
; 224  :     if ( !( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) )

	test	BYTE PTR ModuleInfo+413, 2
	jne	SHORT $LN2@ms64_fcend

; 225  :         AddLineQueueX( " add %r, %d", T_RSP, value * 8 );

	lea	r8d, DWORD PTR [r8*8]
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG11133
	jmp	AddLineQueueX
$LN2@ms64_fcend:

; 226  :     return;
; 227  : }

	ret	0
ms64_fcend ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 48
numparams$ = 56
start$ = 64
tokenarray$ = 72
value$ = 80
ms64_fcstart PROC

; 193  : {

	sub	rsp, 40					; 00000028H

; 194  :     /* v2.04: VARARG didn't work */
; 195  :     if ( proc->e.procinfo->has_vararg ) {

	mov	rax, QWORD PTR [rcx+96]
	test	BYTE PTR [rax+84], 1
	je	SHORT $LN3@ms64_fcsta

; 196  :         //numparams = ( tokenarray[start].token != T_FINAL ? 1 : 0 );
; 197  :         for ( numparams = 0; tokenarray[start].token != T_FINAL; start++ )

	movsxd	r8, r8d
	xor	edx, edx
	mov	rcx, r8
	shl	rcx, 5
	add	rcx, r9
	cmp	BYTE PTR [rcx], dl
	je	SHORT $LN18@ms64_fcsta
$LL4@ms64_fcsta:

; 198  :         if (tokenarray[start].token == T_COMMA) {

	cmp	BYTE PTR [rcx], 44			; 0000002cH
	jne	SHORT $LN2@ms64_fcsta

; 199  :           numparams++;
; 200  :           sym_ReservedStack->hasinvoke = 1;  //added by habran

	mov	rax, QWORD PTR sym_ReservedStack
	inc	edx
	mov	DWORD PTR [rax+16], 1
$LN2@ms64_fcsta:

; 196  :         //numparams = ( tokenarray[start].token != T_FINAL ? 1 : 0 );
; 197  :         for ( numparams = 0; tokenarray[start].token != T_FINAL; start++ )

	inc	r8
	mov	rcx, r8
	shl	rcx, 5
	add	rcx, r9
	cmp	BYTE PTR [rcx], 0
	jne	SHORT $LL4@ms64_fcsta
$LN3@ms64_fcsta:

; 201  :         }
; 202  :     }
; 203  :     DebugMsg1(("ms64_fcstart(%s, numparams=%u) vararg=%u\n", proc->sym.name, numparams, proc->e.procinfo->has_vararg ));
; 204  :     if ( numparams < 4 )

	cmp	edx, 4
	jge	SHORT $LN7@ms64_fcsta
$LN18@ms64_fcsta:

; 205  :         numparams = 4;

	mov	edx, 4
	jmp	SHORT $LN9@ms64_fcsta
$LN7@ms64_fcsta:

; 206  :     else if ( numparams & 1 )

	test	dl, 1
	je	SHORT $LN9@ms64_fcsta

; 207  :         numparams++;

	inc	edx
$LN9@ms64_fcsta:

; 208  :     *value = numparams;

	mov	rax, QWORD PTR value$[rsp]
	mov	DWORD PTR [rax], edx

; 209  :     if ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) {

	test	BYTE PTR ModuleInfo+413, 2
	je	SHORT $LN10@ms64_fcsta

; 210  :         if ( ( numparams * sizeof( uint_64 ) ) > sym_ReservedStack->value )

	mov	r8, QWORD PTR sym_ReservedStack
	movsxd	rcx, edx
	shl	rcx, 3
	movsxd	rax, DWORD PTR [r8+16]
	cmp	rcx, rax
	jbe	SHORT $LN20@ms64_fcsta

; 211  :             sym_ReservedStack->value = numparams * sizeof( uint_64 );

	lea	eax, DWORD PTR [rdx*8]
	mov	DWORD PTR [r8+16], eax

; 214  :     /* since Win64 fastcall doesn't push, it's a better/faster strategy to
; 215  :      * handle the arguments from left to right.
; 216  :      */
; 217  :     return( 0 );

	xor	eax, eax

; 218  : }

	add	rsp, 40					; 00000028H
	ret	0
$LN10@ms64_fcsta:

; 212  :     } else
; 213  :         AddLineQueueX( " sub %r, %d", T_RSP, numparams * sizeof( uint_64 ) );

	movsxd	r8, edx
	lea	rcx, OFFSET FLAT:$SG11124
	shl	r8, 3
	mov	edx, 119				; 00000077H
	call	AddLineQueueX
$LN20@ms64_fcsta:

; 214  :     /* since Win64 fastcall doesn't push, it's a better/faster strategy to
; 215  :      * handle the arguments from left to right.
; 216  :      */
; 217  :     return( 0 );

	xor	eax, eax

; 218  : }

	add	rsp, 40					; 00000028H
	ret	0
ms64_fcstart ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
reg$ = 48
regs$ = 80
buffer$1 = 144
proc$ = 304
index$ = 312
param$ = 320
addr$ = 328
opnd$ = 336
paramvalue$ = 344
r0used$ = 352
watc_param PROC

; 601  : {

	push	rbx
	push	rsi
	push	r15
	sub	rsp, 272				; 00000110H
	mov	rbx, r8

; 602  :     int opc;
; 603  :     int qual;
; 604  :     int i;
; 605  :     char regs[64];
; 606  :     char *reg[4];
; 607  :     char *p;
; 608  :     int psize = SizeFromMemtype( param->sym.mem_type, USE_EMPTY, param->sym.type );

	mov	edx, 254				; 000000feH
	mov	r8, QWORD PTR [r8+80]
	movzx	esi, r9b
	mov	ecx, DWORD PTR [rbx+36]
	call	SizeFromMemtype

; 609  : 
; 610  :     DebugMsg1(("watc_param(%s, param=%u [name=%s, state=%u]),addr=%u: psize=%u\n", proc->sym.name, index, param->sym.name, param->sym.state, addr, psize ));
; 611  :     if ( param->sym.state != SYM_TMACRO )

	cmp	DWORD PTR [rbx+32], 10
	mov	r15d, eax
	je	SHORT $LN8@watc_param

; 612  :         return( 0 );

	xor	eax, eax

; 687  : }

	add	rsp, 272				; 00000110H
	pop	r15
	pop	rsi
	pop	rbx
	ret	0
$LN8@watc_param:

; 613  :     DebugMsg1(("watc_param(%s): register param=%s\n", proc->sym.name, param->sym.string_ptr ));
; 614  : 
; 615  :     fcscratch += CurrWordSize;
; 616  : 
; 617  :     /* the "name" might be a register pair */
; 618  : 
; 619  :     reg[0] = param->sym.string_ptr;

	mov	rbx, QWORD PTR [rbx+16]
	xorps	xmm0, xmm0
	movzx	eax, BYTE PTR ModuleInfo+406

; 620  :     reg[1] = NULL;
; 621  :     reg[2] = NULL;
; 622  :     reg[3] = NULL;
; 623  :     if ( strchr( reg[0], ':' ) ) {

	mov	rcx, rbx
	add	DWORD PTR fcscratch, eax
	mov	QWORD PTR [rsp+312], rdi
	xor	edi, edi
	mov	QWORD PTR reg$[rsp], rbx
	movdqu	XMMWORD PTR reg$[rsp+8], xmm0
	mov	QWORD PTR reg$[rsp+24], rdi
	lea	edx, QWORD PTR [rdi+58]
	call	strchr
	test	rax, rax
	je	SHORT $LN38@watc_param

; 624  :         strcpy( regs, reg[0] );

	lea	rcx, QWORD PTR regs$[rsp]
	sub	rcx, rbx
$LL34@watc_param:
	movzx	eax, BYTE PTR [rbx]
	mov	BYTE PTR [rcx+rbx], al
	lea	rbx, QWORD PTR [rbx+1]
	test	al, al
	jne	SHORT $LL34@watc_param

; 625  :         fcscratch += CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406

; 626  :         for ( p = regs, i = 0; i < 4; i++ ) {

	mov	rbx, rdi
	add	DWORD PTR fcscratch, eax
	lea	rax, QWORD PTR regs$[rsp]
	npad	12
$LL4@watc_param:

; 627  :             reg[i] = p;
; 628  :             p = strchr( p, ':' );

	mov	edx, 58					; 0000003aH
	mov	QWORD PTR reg$[rsp+rbx*8], rax
	mov	rcx, rax
	call	strchr

; 629  :             if ( p == NULL )

	test	rax, rax
	je	SHORT $LN48@watc_param

; 630  :                 break;
; 631  :             *p++ = NULLC;

	mov	BYTE PTR [rax], dil
	inc	rbx

; 632  :             p++;

	add	rax, 2
	cmp	rbx, 4
	jl	SHORT $LL4@watc_param
$LN48@watc_param:

; 626  :         for ( p = regs, i = 0; i < 4; i++ ) {

	mov	rbx, QWORD PTR reg$[rsp]
$LN38@watc_param:
	mov	QWORD PTR [rsp+304], rbp
	mov	QWORD PTR [rsp+328], r14

; 633  :         }
; 634  :     }
; 635  : 
; 636  :     if ( addr ) {

	test	sil, sil
	je	$LN11@watc_param

; 637  :         if ( opnd->kind == T_REG || opnd->sym->state == SYM_STACK ) {

	mov	rcx, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rcx+60], 2
	je	SHORT $LN14@watc_param
	mov	rax, QWORD PTR [rcx+80]
	cmp	DWORD PTR [rax+32], 5
	je	SHORT $LN14@watc_param

; 640  :         } else {
; 641  :             opc = T_MOV;

	mov	esi, 605				; 0000025dH

; 642  :             qual = T_OFFSET;

	mov	ebp, 241				; 000000f1H
	jmp	SHORT $LN13@watc_param
$LN14@watc_param:

; 638  :             opc = T_LEA;

	mov	esi, 633				; 00000279H

; 639  :             qual = T_NULL;

	mov	ebp, edi
$LN13@watc_param:

; 643  :         }
; 644  :         /* v2.05: filling of segment part added */
; 645  :         i = 0;
; 646  :         if ( reg[1] != NULL ) {

	mov	r14, QWORD PTR paramvalue$[rsp]
	cmp	QWORD PTR reg$[rsp+8], rdi
	je	SHORT $LN15@watc_param

; 647  :             char buffer[128];
; 648  :             short sreg;
; 649  :             if ( sreg = GetSegmentPart( opnd, buffer, paramvalue ) )

	mov	r8, r14
	lea	rdx, QWORD PTR buffer$1[rsp]
	call	GetSegmentPart

; 650  :                 AddLineQueueX( "%r %s, %r", T_MOV, reg[0],  sreg );

	mov	r8, rbx
	mov	edx, 605				; 0000025dH
	test	ax, ax
	je	SHORT $LN16@watc_param
	movsx	r9d, ax
	lea	rcx, OFFSET FLAT:$SG11425
	call	AddLineQueueX
	jmp	SHORT $LN17@watc_param
$LN16@watc_param:

; 651  :             else
; 652  :                 AddLineQueueX( "%r %s, %s", T_MOV, reg[0],  buffer );

	lea	r9, QWORD PTR buffer$1[rsp]
	lea	rcx, OFFSET FLAT:$SG11426
	call	AddLineQueueX
$LN17@watc_param:

; 653  :             i++;

	mov	edi, 1
$LN15@watc_param:

; 654  :         }
; 655  :         AddLineQueueX( "%r %s, %r %s", opc, reg[i], qual, paramvalue );

	movsxd	r8, edi
	lea	rcx, OFFSET FLAT:$SG11427
	mov	r9d, ebp
	mov	QWORD PTR [rsp+32], r14
	mov	edx, esi
	mov	r8, QWORD PTR reg$[rsp+r8*8]
	call	AddLineQueueX

; 656  :         return( 1 );

	jmp	$LN52@watc_param
$LN11@watc_param:

; 657  :     }
; 658  :     for ( i = 3; i >= 0; i-- ) {

	mov	rdi, QWORD PTR paramvalue$[rsp]
	lea	rsi, QWORD PTR reg$[rsp+24]
	mov	r14, QWORD PTR opnd$[rsp]
	mov	ebx, 3
	mov	rbp, QWORD PTR reg$[rsp+8]
	mov	QWORD PTR [rsp+320], r12
	mov	r12d, 209				; 000000d1H
	npad	9
$LL7@watc_param:

; 659  :         if ( reg[i] ) {

	mov	r10, QWORD PTR [rsi]
	test	r10, r10
	je	$LN5@watc_param

; 660  :             if ( opnd->kind == EXPR_CONST ) {

	mov	eax, DWORD PTR [r14+60]
	test	eax, eax
	jne	SHORT $LN19@watc_param

; 661  :                 if ( i > 0 )

	test	ebx, ebx
	jle	SHORT $LN53@watc_param

; 662  :                     qual = T_LOWWORD;

	mov	r8d, 238				; 000000eeH
	jmp	SHORT $LN47@watc_param
$LN53@watc_param:

; 663  :                 else if ( i == 0 && reg[1] != NULL )

	jne	SHORT $LN25@watc_param
	test	rbp, rbp
	je	SHORT $LN25@watc_param

; 664  :                     qual = T_HIGHWORD;

	mov	r8d, 232				; 000000e8H
$LN47@watc_param:

; 665  :                 else
; 666  :                     qual = T_NULL;
; 667  :                 if ( qual != T_NULL )
; 668  :                     AddLineQueueX( "mov %s, %r (%s)", reg[i], qual, paramvalue );

	mov	r9, rdi
	lea	rcx, OFFSET FLAT:$SG11437
	mov	rdx, r10
	call	AddLineQueueX
	jmp	$LN5@watc_param
$LN25@watc_param:

; 669  :                 else
; 670  :                     AddLineQueueX( "mov %s, %s", reg[i], paramvalue );

	mov	r8, rdi
	lea	rcx, OFFSET FLAT:$SG11438
	mov	rdx, r10
	call	AddLineQueueX

; 671  :             } else if ( opnd->kind == EXPR_REG ) {

	jmp	SHORT $LN5@watc_param
$LN19@watc_param:
	cmp	eax, 2
	jne	SHORT $LN27@watc_param

; 672  :                 AddLineQueueX( "mov %s, %s", reg[i], paramvalue );

	mov	r8, rdi
	lea	rcx, OFFSET FLAT:$SG11441
	mov	rdx, r10
	call	AddLineQueueX

; 673  :             } else {

	jmp	SHORT $LN5@watc_param
$LN27@watc_param:

; 674  :                 if ( i == 0 && reg[1] == NULL )

	test	ebx, ebx
	jne	SHORT $LN29@watc_param
	test	rbp, rbp
	jne	SHORT $LN29@watc_param

; 675  :                     AddLineQueueX( "mov %s, %s", reg[i], paramvalue );

	mov	r8, rdi
	lea	rcx, OFFSET FLAT:$SG11444
	mov	rdx, r10
	call	AddLineQueueX
	jmp	SHORT $LN5@watc_param
$LN29@watc_param:

; 676  :                 else {
; 677  :                     if ( ModuleInfo.Ofssize )

	movzx	ecx, BYTE PTR ModuleInfo+404

; 678  :                         qual = T_DWORD;
; 679  :                     else
; 680  :                         qual = T_WORD;
; 681  :                     AddLineQueueX( "mov %s, %r %r %s[%u]", reg[i], qual, T_PTR, paramvalue, psize - ( (i+1) * ( 2 << ModuleInfo.Ofssize ) ) );

	lea	eax, DWORD PTR [rbx+1]
	test	cl, cl
	mov	r8d, 207				; 000000cfH
	mov	edx, 2
	mov	r9d, 258				; 00000102H
	cmovne	r8d, r12d
	shl	edx, cl
	imul	edx, eax
	lea	rcx, OFFSET FLAT:$SG11447
	mov	eax, r15d
	sub	eax, edx
	mov	rdx, r10
	mov	DWORD PTR [rsp+40], eax
	mov	QWORD PTR [rsp+32], rdi
	call	AddLineQueueX
$LN5@watc_param:

; 657  :     }
; 658  :     for ( i = 3; i >= 0; i-- ) {

	sub	rsi, 8
	sub	ebx, 1
	jns	$LL7@watc_param
	mov	r12, QWORD PTR [rsp+320]
$LN52@watc_param:
	mov	rbp, QWORD PTR [rsp+304]

; 682  :                 }
; 683  :             }
; 684  :         }
; 685  :     }
; 686  :     return( 1 );

	mov	eax, 1
	mov	r14, QWORD PTR [rsp+328]
	mov	rdi, QWORD PTR [rsp+312]

; 687  : }

	add	rsp, 272				; 00000110H
	pop	r15
	pop	rsi
	pop	rbx
	ret	0
watc_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 8
numparams$ = 16
value$ = 24
watc_fcend PROC

; 587  :     DebugMsg1(("watc_fcend(%s, %u, %u)\n", proc->sym.name, numparams, value ));
; 588  :     if ( proc->e.procinfo->has_vararg ) {

	mov	rax, QWORD PTR [rcx+96]
	test	BYTE PTR [rax+84], 1
	je	SHORT $LN2@watc_fcend

; 589  :         AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL proc->e.procinfo->parasize + size_vararg );

	mov	r8d, DWORD PTR size_vararg
	lea	rcx, OFFSET FLAT:stackreg
	add	r8d, DWORD PTR [rax+32]
	movzx	eax, BYTE PTR ModuleInfo+404
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11375

; 591  :         AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL ( proc->e.procinfo->parasize - fcscratch ) );

	jmp	AddLineQueueX
$LN2@watc_fcend:

; 590  :     } else if ( fcscratch < proc->e.procinfo->parasize ) {

	mov	r8d, DWORD PTR [rax+32]
	mov	eax, DWORD PTR fcscratch
	cmp	eax, r8d
	jae	SHORT $LN4@watc_fcend

; 591  :         AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL ( proc->e.procinfo->parasize - fcscratch ) );

	sub	r8d, eax
	lea	rcx, OFFSET FLAT:stackreg
	movzx	eax, BYTE PTR ModuleInfo+404
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11377
	jmp	AddLineQueueX
$LN4@watc_fcend:

; 592  :     }
; 593  :     return;
; 594  : }

	ret	0
watc_fcend ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 8
numparams$ = 16
start$ = 24
tokenarray$ = 32
value$ = 40
watc_fcstart PROC

; 580  :     DebugMsg1(("watc_fcstart(%s, %u, %u)\n", proc->sym.name, numparams, start ));
; 581  :     return( 1 );

	mov	eax, 1

; 582  : }

	ret	0
watc_fcstart ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 64
index$ = 72
param$ = 80
addr$ = 88
opnd$ = 96
paramvalue$ = 104
r0used$ = 112
ms32_param PROC

; 148  : {

	push	rbx
	push	r15
	sub	rsp, 40					; 00000028H

; 149  :     enum special_token const *pst;
; 150  : 
; 151  :     DebugMsg1(("ms32_param(proc=%s, ofs=%u, index=%u, param=%s) fcscratch=%u\n", proc->sym.name, proc->sym.Ofssize, index, param->sym.name, fcscratch ));
; 152  :     if ( param->sym.state != SYM_TMACRO )

	cmp	DWORD PTR [r8+32], 10
	movzx	ebx, r9b
	mov	r15, r8
	je	SHORT $LN2@ms32_param

; 153  :         return( 0 );

	xor	eax, eax

; 188  : }

	add	rsp, 40					; 00000028H
	pop	r15
	pop	rbx
	ret	0
$LN2@ms32_param:
	mov	QWORD PTR [rsp+72], rsi
	mov	QWORD PTR [rsp+32], r14

; 154  :     if ( GetSymOfssize( &proc->sym ) == USE16 ) {

	call	GetSymOfssize

; 155  :         pst = ms16_regs + fcscratch;

	lea	r14, OFFSET FLAT:__ImageBase
	test	eax, eax
	jne	SHORT $LN3@ms32_param
	movsxd	rcx, DWORD PTR fcscratch
	lea	rsi, QWORD PTR ms16_regs[r14]
	lea	rsi, QWORD PTR [rsi+rcx*4]

; 156  :         fcscratch++;

	inc	ecx
	mov	DWORD PTR fcscratch, ecx

; 157  :     } else {

	jmp	SHORT $LN4@ms32_param
$LN3@ms32_param:

; 158  :         fcscratch--;

	mov	eax, DWORD PTR fcscratch

; 159  :         pst = ms32_regs + fcscratch;

	lea	rsi, QWORD PTR ms32_regs[r14]
	dec	eax
	movsxd	rcx, eax
	mov	DWORD PTR fcscratch, eax
	lea	rsi, QWORD PTR [rsi+rcx*4]
$LN4@ms32_param:

; 160  :     }
; 161  :     if ( addr )

	mov	QWORD PTR [rsp+64], rbp
	mov	QWORD PTR [rsp+80], rdi
	test	bl, bl
	je	SHORT $LN5@ms32_param

; 162  :         AddLineQueueX( " lea %r, %s", *pst, paramvalue );

	mov	edx, DWORD PTR [rsi]
	lea	rcx, OFFSET FLAT:$SG11085
	jmp	$LN19@ms32_param
$LN5@ms32_param:

; 163  :     else {
; 164  :         enum special_token reg = *pst;
; 165  :         int size;
; 166  :         /* v2.08: adjust register if size of operand won't require the full register */
; 167  :         if ( ( opnd->kind != EXPR_CONST ) &&

	mov	rdi, QWORD PTR opnd$[rsp]
	movsxd	rbp, DWORD PTR [rsi]
	cmp	DWORD PTR [rdi+60], 0
	je	$LN7@ms32_param
	mov	r8, QWORD PTR [r15+80]
	mov	edx, 254				; 000000feH
	mov	ecx, DWORD PTR [r15+36]
	call	SizeFromMemtype
	mov	ecx, DWORD PTR [rsi]
	mov	ebx, eax
	call	SizeFromRegister
	cmp	ebx, eax
	jge	SHORT $LN7@ms32_param

; 168  :             ( size = SizeFromMemtype( param->sym.mem_type, USE_EMPTY, param->sym.type ) ) < SizeFromRegister( *pst ) ) {
; 169  :             if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN9@ms32_param

; 170  :                 AddLineQueueX( " %s %r, %s", ( param->sym.mem_type & MT_SIGNED ) ? "movsx" : "movzx", reg, paramvalue );

	mov	eax, DWORD PTR [r15+36]
	lea	rcx, OFFSET FLAT:$SG11090
	mov	r9, QWORD PTR paramvalue$[rsp]
	lea	rdx, OFFSET FLAT:$SG11091
	and	al, 64					; 00000040H
	mov	r8d, ebp
	cmovne	rdx, rcx
	lea	rcx, OFFSET FLAT:$SG11092
	call	AddLineQueueX

; 171  :             } else {

	jmp	SHORT $LN8@ms32_param
$LN9@ms32_param:

; 172  :                 /* this is currently always UNSIGNED */
; 173  :                 AddLineQueueX( " mov %r, %s", T_AL + GetRegNo( reg ), paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	lea	rcx, QWORD PTR [rbp*2]
	add	rcx, rbp
	lea	rbx, QWORD PTR SpecialTable[rcx*4+10]
	movzx	edx, BYTE PTR [rbx+r14]
	lea	rcx, OFFSET FLAT:$SG11093
	inc	edx
	call	AddLineQueueX

; 174  :                 AddLineQueueX( " mov %r, 0", T_AH + GetRegNo( reg ) );

	movzx	edx, BYTE PTR [rbx+r14]
	lea	rcx, OFFSET FLAT:$SG11094
	add	edx, 5
	call	AddLineQueueX

; 175  :             }
; 176  :         } else {

	jmp	SHORT $LN8@ms32_param
$LN7@ms32_param:

; 177  :             /* v2.08: optimization */
; 178  :             if ( opnd->kind == EXPR_REG && opnd->indirect == 0 && opnd->base_reg ) {

	cmp	DWORD PTR [rdi+60], 2
	jne	SHORT $LN12@ms32_param
	test	BYTE PTR [rdi+72], 1
	jne	SHORT $LN12@ms32_param
	mov	rax, QWORD PTR [rdi+24]
	test	rax, rax
	je	SHORT $LN12@ms32_param

; 179  :                 if ( opnd->base_reg->tokval == reg )

	cmp	DWORD PTR [rax+16], ebp
	je	SHORT $LN13@ms32_param
$LN12@ms32_param:

; 180  :                     return( 1 );
; 181  :             }
; 182  :             AddLineQueueX( " mov %r, %s", reg, paramvalue );

	mov	edx, ebp
	lea	rcx, OFFSET FLAT:$SG11097
$LN19@ms32_param:
	mov	r8, QWORD PTR paramvalue$[rsp]
	call	AddLineQueueX
$LN8@ms32_param:

; 183  :         }
; 184  :     }
; 185  :     if ( *pst == T_AX )

	cmp	DWORD PTR [rsi], 9
	jne	SHORT $LN13@ms32_param

; 186  :         *r0used |= R0_USED;

	mov	rax, QWORD PTR r0used$[rsp]
	or	BYTE PTR [rax], 1
$LN13@ms32_param:

; 187  :     return( 1 );

	mov	rdi, QWORD PTR [rsp+80]
	mov	eax, 1
	mov	rbp, QWORD PTR [rsp+64]
	mov	rsi, QWORD PTR [rsp+72]
	mov	r14, QWORD PTR [rsp+32]

; 188  : }

	add	rsp, 40					; 00000028H
	pop	r15
	pop	rbx
	ret	0
ms32_param ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 8
numparams$ = 16
value$ = 24
ms32_fcend PROC

; 142  :     /* nothing to do */
; 143  :     return;
; 144  : }

	ret	0
ms32_fcend ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 48
numparams$ = 56
start$ = 64
tokenarray$ = 72
value$ = 80
ms32_fcstart PROC

; 127  : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 128  :     struct dsym *param;
; 129  :     DebugMsg1(("ms32_fcstart(proc=%s, ofs=%u)\n", proc->sym.name, GetSymOfssize( &proc->sym ) ));
; 130  :     if ( GetSymOfssize( &proc->sym ) == USE16 )

	call	GetSymOfssize
	test	eax, eax
	jne	SHORT $LN5@ms32_fcsta

; 137  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN5@ms32_fcsta:

; 131  :         return( 0 );
; 132  :     /* v2.07: count number of register params */
; 133  :     for ( param = proc->e.procinfo->paralist ; param ; param = param->nextparam )

	mov	rax, QWORD PTR [rbx+96]
	mov	rax, QWORD PTR [rax+8]
	test	rax, rax
	je	SHORT $LN3@ms32_fcsta
	mov	ecx, DWORD PTR fcscratch
	npad	5
$LL4@ms32_fcsta:

; 134  :         if ( param->sym.state == SYM_TMACRO )

	cmp	DWORD PTR [rax+32], 10
	jne	SHORT $LN2@ms32_fcsta

; 135  :             fcscratch++;

	inc	ecx
$LN2@ms32_fcsta:

; 131  :         return( 0 );
; 132  :     /* v2.07: count number of register params */
; 133  :     for ( param = proc->e.procinfo->paralist ; param ; param = param->nextparam )

	mov	rax, QWORD PTR [rax+112]
	test	rax, rax
	jne	SHORT $LL4@ms32_fcsta

; 135  :             fcscratch++;

	mov	DWORD PTR fcscratch, ecx
$LN3@ms32_fcsta:

; 136  :     return( 1 );

	mov	eax, 1

; 137  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ms32_fcstart ENDP
_TEXT	ENDS
END
