; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG11590 DB	01H DUP (?)
	ALIGN	4

$SG11598 DB	01H DUP (?)
	ALIGN	4

$SG11601 DB	02H DUP (?)
	ALIGN	4

$SG11606 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
_DATA	ENDS
CONST	SEGMENT
reax	DB	'rax', 00H, 00H
	ORG $+3
recx	DB	'rcx', 00H, 00H
	ORG $+3
redx	DB	'rdx', 00H, 00H
CONST	ENDS
_DATA	SEGMENT
$SG11300 DB	'loope', 00H
	ORG $+2
$SG11304 DB	'loop', 00H
	ORG $+3
$SG11318 DB	', ', 00H
	ORG $+1
$SG11607 DB	'%s:', 00H
$SG11356 DB	'=!<>&|-+*^%/', 00H
	ORG $+3
$SG11364 DB	' inc ', 00H
	ORG $+2
$SG11366 DB	' dec ', 00H
	ORG $+2
$SG11384 DB	' mov  ', 00H
	ORG $+1
$SG11387 DB	' cdq ', 00H
	ORG $+2
$SG11390 DB	' mov  ', 00H
	ORG $+1
$SG11394 DB	' idiv ', 00H
	ORG $+1
$SG11395 DB	' imul ', 00H
	ORG $+1
$SG11399 DB	' idiv ', 00H
	ORG $+1
$SG11400 DB	' imul ', 00H
	ORG $+1
$SG11402 DB	' mov  ', 00H
	ORG $+1
$SG11403 DB	' mov  ', 00H
	ORG $+1
$SG11407 DB	' cdq ', 00H
	ORG $+2
$SG11408 DB	' idiv ', 00H
	ORG $+1
$SG11409 DB	' imul ', 00H
	ORG $+1
$SG11412 DB	' mov  ', 00H
	ORG $+1
$SG11413 DB	' mov  ', 00H
	ORG $+1
$SG11419 DB	' cdq ', 00H
	ORG $+2
$SG11420 DB	' idiv ', 00H
	ORG $+1
$SG11421 DB	' imul ', 00H
	ORG $+1
$SG11423 DB	' mov  ', 00H
	ORG $+1
$SG11429 DB	' cdq ', 00H
	ORG $+2
$SG11430 DB	' idiv ', 00H
	ORG $+1
$SG11431 DB	' imul ', 00H
	ORG $+1
$SG11433 DB	' mov  ', 00H
	ORG $+1
$SG11436 DB	' mov  ', 00H
	ORG $+1
$SG11440 DB	' cdq ', 00H
	ORG $+2
$SG11441 DB	' idiv ', 00H
	ORG $+1
$SG11442 DB	' imul ', 00H
	ORG $+1
$SG11444 DB	' mov  ', 00H
	ORG $+1
$SG11447 DB	' sub ', 00H
	ORG $+2
$SG11450 DB	' add ', 00H
	ORG $+2
$SG11453 DB	' and ', 00H
	ORG $+2
$SG11456 DB	' or ', 00H
	ORG $+3
$SG11459 DB	' xor ', 00H
	ORG $+2
$SG11462 DB	' shl ', 00H
	ORG $+2
$SG11464 DB	' shr ', 00H
	ORG $+2
$SG11471 DB	' xor  ', 00H
	ORG $+1
$SG11478 DB	'BYTE PTR', 00H
	ORG $+3
$SG11479 DB	'BPTR', 00H
	ORG $+3
$SG11480 DB	'WPTR', 00H
	ORG $+3
$SG11486 DB	' lea  ', 00H
	ORG $+1
$SG11615 DB	'jmp', 00H
$SG11481 DB	'WORD PTR', 00H
	ORG $+3
$SG11487 DB	' mov  ', 00H
	ORG $+1
$SG11617 DB	'%s:', 00H
$SG11482 DB	' movzx  ', 00H
	ORG $+3
$SG11485 DB	'ADDR', 00H
	ORG $+3
$SG11493 DB	'OFFSET', 00H
	ORG $+1
$SG11494 DB	' lea  ', 00H
	ORG $+1
$SG11495 DB	' mov  ', 00H
	ORG $+1
$SG11642 DB	'%s:', 00H
$SG11502 DB	'DWORD PTR', 00H
	ORG $+2
$SG11503 DB	'DPTR', 00H
	ORG $+3
$SG11506 DB	' mov  ', 00H
	ORG $+1
$SG11646 DB	'%s:', 00H
$SG11505 DB	' movsxd  ', 00H
	ORG $+2
$SG11513 DB	' mov  ', 00H
	ORG $+1
$SG11652 DB	'%s:', 00H
$SG11512 DB	' invoke  ', 00H
	ORG $+2
$SG11516 DB	' mov  ', 00H
	ORG $+1
$SG11654 DB	'%s:', 00H
$SG11519 DB	' mov  byte ptr ', 00H
$SG11520 DB	' mov  ', 00H
	ORG $+1
$SG11582 DB	'(::)', 00H
	ORG $+3
$SG11597 DB	' jmp %s', 00H
$SG11600 DB	'.for ', 00H
	ORG $+2
$SG11602 DB	'.for', 00H, 00H
	ORG $+2
$SG11616 DB	'jmp %s', 00H
	ORG $+1
$SG11655 DB	' jmp %s', 00H
$SG11657 DB	' jmp %s', 00H
$SG11661 DB	'%s:', 00H
$SG11665 DB	'%s:', 00H
$SG11671 DB	'loop %s', 00H
$SG11675 DB	'%s:', 00H
$SG11679 DB	'%s:', 00H
$SG11709 DB	'jmp %s', 00H
	ORG $+1
$SG11711 DB	'%s:', 00H
$SG11728 DB	'jmp %s', 00H
	ORG $+1
$SG11126 DB	'cmp', 00H
$SG11735 DB	'.if-.repeat-.while', 00H
	ORG $+1
$SG10973 DB	'ZERO', 00H
	ORG $+3
$SG10976 DB	'CARRY', 00H
	ORG $+2
$SG10979 DB	'SIGN', 00H
	ORG $+3
$SG10982 DB	'PARITY', 00H
	ORG $+1
$SG11144 DB	'or', 00H
	ORG $+1
$SG10985 DB	'OVERFLOW', 00H
	ORG $+3
$SG10988 DB	'LESS', 00H
	ORG $+3
$SG10994 DB	'ABOVE', 00H
	ORG $+2
$SG11028 DB	'@C%04X', 00H
	ORG $+1
$SG11145 DB	'cmp', 00H
$SG10991 DB	'GREATER', 00H
$SG10997 DB	'EQUAL', 00H
	ORG $+2
$SG11000 DB	'BELOW', 00H
	ORG $+2
$SG11021 DB	', %d', 00H
	ORG $+3
$SG11124 DB	'test', 00H
	ORG $+3
$SG11133 DB	'jmp @C%04X', 0aH, 00H
$SG11138 DB	'test', 00H
	ORG $+3
$SG11151 DB	'jmp ', 00H
	ORG $+3
$SG11209 DB	0aH, 00H
	ORG $+2
$SG11212 DB	':', 0aH, 00H
	ORG $+1
$SG11242 DB	0aH, 00H
	ORG $+2
$SG11246 DB	'%s:', 0aH, 00H
	ORG $+3
$SG11247 DB	'%s:', 0aH, 00H
	ORG $+3
$SG11251 DB	':', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	sprintf
PUBLIC	HllInit
PUBLIC	HllCheckOpen
PUBLIC	HllStartDir
PUBLIC	HllEndDir
PUBLIC	HllExitDir
EXTRN	tolower:PROC
EXTRN	__stdio_common_vsprintf:PROC
EXTRN	strchr:PROC
EXTRN	strstr:PROC
EXTRN	_memicmp:PROC
EXTRN	strcmpi:PROC
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	LclAlloc:PROC
EXTRN	EvalOperand:PROC
EXTRN	EmitConstError:PROC
EXTRN	GetCurrOffset:PROC
EXTRN	LstWrite:PROC
EXTRN	AddLineQueue:PROC
EXTRN	AddLineQueueX:PROC
EXTRN	RunLineQueue:PROC
EXTRN	Tokenize:PROC
EXTRN	__chkstk:PROC
EXTRN	memcpy:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	__ImageBase:BYTE
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN4
	DD	imagerel $LN4+102
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN6
	DD	imagerel $LN6+98
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN8
	DD	imagerel $LN8+90
	DD	imagerel $unwind$sprintf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetToken DD imagerel GetToken
	DD	imagerel GetToken+38
	DD	imagerel $unwind$GetToken
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$2$GetToken DD imagerel GetToken+38
	DD	imagerel GetToken+520
	DD	imagerel $chain$2$GetToken
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$3$GetToken DD imagerel GetToken+520
	DD	imagerel GetToken+622
	DD	imagerel $chain$3$GetToken
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetExpression DD imagerel GetExpression
	DD	imagerel GetExpression+769
	DD	imagerel $unwind$GetExpression
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetCOp DD imagerel GetCOp
	DD	imagerel GetCOp+658
	DD	imagerel $unwind$GetCOp
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RenderInstr DD imagerel RenderInstr
	DD	imagerel RenderInstr+240
	DD	imagerel $unwind$RenderInstr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetLabelStr DD imagerel GetLabelStr
	DD	imagerel GetLabelStr+36
	DD	imagerel $unwind$GetLabelStr
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$RenderJcc DD imagerel RenderJcc
	DD	imagerel RenderJcc+96
	DD	imagerel $unwind$RenderJcc
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetSimpleExpression DD imagerel GetSimpleExpression
	DD	imagerel GetSimpleExpression+1376
	DD	imagerel $unwind$GetSimpleExpression
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ReplaceLabel DD imagerel ReplaceLabel
	DD	imagerel ReplaceLabel+161
	DD	imagerel $unwind$ReplaceLabel
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$GetAndExpression DD imagerel GetAndExpression
	DD	imagerel GetAndExpression+548
	DD	imagerel $unwind$GetAndExpression
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$QueueTestLines DD imagerel QueueTestLines
	DD	imagerel QueueTestLines+14
	DD	imagerel $unwind$QueueTestLines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$0$QueueTestLines DD imagerel QueueTestLines+14
	DD	imagerel QueueTestLines+85
	DD	imagerel $chain$0$QueueTestLines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$1$QueueTestLines DD imagerel QueueTestLines+85
	DD	imagerel QueueTestLines+93
	DD	imagerel $chain$1$QueueTestLines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$EvaluateHllExpression DD imagerel EvaluateHllExpression
	DD	imagerel EvaluateHllExpression+138
	DD	imagerel $unwind$EvaluateHllExpression
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$CheckCXZLines DD imagerel CheckCXZLines
	DD	imagerel CheckCXZLines+274
	DD	imagerel $unwind$CheckCXZLines
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$WriteAsmLine DD imagerel WriteAsmLine
	DD	imagerel WriteAsmLine+226
	DD	imagerel $unwind$WriteAsmLine
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$ForInitAndNext DD imagerel ForInitAndNext
	DD	imagerel ForInitAndNext+8498
	DD	imagerel $unwind$ForInitAndNext
pdata	ENDS
pdata	SEGMENT
$pdata$HllStartDir DD imagerel $LN250
	DD	imagerel $LN250+28
	DD	imagerel $unwind$HllStartDir
$pdata$4$HllStartDir DD imagerel $LN250+28
	DD	imagerel $LN250+179
	DD	imagerel $chain$4$HllStartDir
$pdata$5$HllStartDir DD imagerel $LN250+179
	DD	imagerel $LN250+359
	DD	imagerel $chain$5$HllStartDir
$pdata$6$HllStartDir DD imagerel $LN250+359
	DD	imagerel $LN250+2343
	DD	imagerel $chain$6$HllStartDir
$pdata$7$HllStartDir DD imagerel $LN250+2343
	DD	imagerel $LN250+2384
	DD	imagerel $chain$7$HllStartDir
$pdata$8$HllStartDir DD imagerel $LN250+2384
	DD	imagerel $LN250+2431
	DD	imagerel $chain$8$HllStartDir
$pdata$9$HllStartDir DD imagerel $LN250+2431
	DD	imagerel $LN250+2479
	DD	imagerel $chain$9$HllStartDir
$pdata$HllEndDir DD imagerel $LN95
	DD	imagerel $LN95+93
	DD	imagerel $unwind$HllEndDir
$pdata$1$HllEndDir DD imagerel $LN95+93
	DD	imagerel $LN95+1379
	DD	imagerel $chain$1$HllEndDir
$pdata$2$HllEndDir DD imagerel $LN95+1379
	DD	imagerel $LN95+1400
	DD	imagerel $chain$2$HllEndDir
$pdata$HllExitDir DD imagerel $LN97
	DD	imagerel $LN97+706
	DD	imagerel $unwind$HllExitDir
$pdata$1$HllExitDir DD imagerel $LN97+706
	DD	imagerel $LN97+810
	DD	imagerel $chain$1$HllExitDir
$pdata$3$HllExitDir DD imagerel $LN97+810
	DD	imagerel $LN97+843
	DD	imagerel $chain$3$HllExitDir
$pdata$4$HllExitDir DD imagerel $LN97+843
	DD	imagerel $LN97+921
	DD	imagerel $chain$4$HllExitDir
$pdata$5$HllExitDir DD imagerel $LN97+921
	DD	imagerel $LN97+935
	DD	imagerel $chain$5$HllExitDir
$pdata$6$HllExitDir DD imagerel $LN97+935
	DD	imagerel $LN97+1086
	DD	imagerel $chain$6$HllExitDir
pdata	ENDS
CONST	SEGMENT
	ORG $+3
flaginstr DB	07aH
	DB	063H
	DB	073H
	DB	070H
	DB	06fH
	DB	06cH
	DB	067H
	DB	061H
	DB	065H
	DB	062H
	ORG $+2
unsigned_cjmptype DB 07aH
	DB	07aH
	DB	061H
	DB	062H
	DB	062H
	DB	061H
	ORG $+2
signed_cjmptype DB 07aH
	DB	07aH
	DB	067H
	DB	06cH
	DB	06cH
	DB	067H
	ORG $+2
neg_cjmptype DB	00H
	DB	01H
	DB	00H
	DB	00H
	DB	01H
	DB	01H
CONST	ENDS
xdata	SEGMENT
$unwind$HllStartDir DD 041c01H
	DD	0221011cH
	DD	05005f007H
$chain$4$HllStartDir DD 0a5d21H
	DD	0227745dH
	DD	021ee432H
	DD	021fd427H
	DD	0220c410H
	DD	02253408H
	DD	imagerel $LN250
	DD	imagerel $LN250+28
	DD	imagerel $unwind$HllStartDir
$chain$5$HllStartDir DD 020821H
	DD	02266408H
	DD	imagerel $LN250+28
	DD	imagerel $LN250+179
	DD	imagerel $chain$4$HllStartDir
$chain$6$HllStartDir DD 021H
	DD	imagerel $LN250+28
	DD	imagerel $LN250+179
	DD	imagerel $chain$4$HllStartDir
$chain$7$HllStartDir DD 040021H
	DD	021ee400H
	DD	021fd400H
	DD	imagerel $LN250
	DD	imagerel $LN250+28
	DD	imagerel $unwind$HllStartDir
$chain$8$HllStartDir DD 020021H
	DD	021ee400H
	DD	imagerel $LN250
	DD	imagerel $LN250+28
	DD	imagerel $unwind$HllStartDir
$chain$9$HllStartDir DD 021H
	DD	imagerel $LN250
	DD	imagerel $LN250+28
	DD	imagerel $unwind$HllStartDir
$unwind$HllEndDir DD 071d01H
	DD	0a9741dH
	DD	0a2011dH
	DD	0e00cf00eH
	DD	0500aH
$chain$1$HllEndDir DD 041721H
	DD	0a86417H
	DD	0a73408H
	DD	imagerel $LN95
	DD	imagerel $LN95+93
	DD	imagerel $unwind$HllEndDir
$chain$2$HllEndDir DD 021H
	DD	imagerel $LN95
	DD	imagerel $LN95+93
	DD	imagerel $unwind$HllEndDir
$unwind$HllExitDir DD 095601H
	DD	0aad456H
	DD	0a20119H
	DD	07008f00aH
	DD	030066007H
	DD	05005H
$chain$1$HllExitDir DD 020821H
	DD	0a9c408H
	DD	imagerel $LN97
	DD	imagerel $LN97+706
	DD	imagerel $unwind$HllExitDir
$chain$3$HllExitDir DD 020021H
	DD	0a9c400H
	DD	imagerel $LN97
	DD	imagerel $LN97+706
	DD	imagerel $unwind$HllExitDir
$chain$4$HllExitDir DD 020821H
	DD	0abe408H
	DD	imagerel $LN97+810
	DD	imagerel $LN97+843
	DD	imagerel $chain$3$HllExitDir
$chain$5$HllExitDir DD 021H
	DD	imagerel $LN97+810
	DD	imagerel $LN97+843
	DD	imagerel $chain$3$HllExitDir
$chain$6$HllExitDir DD 021H
	DD	imagerel $LN97
	DD	imagerel $LN97+706
	DD	imagerel $unwind$HllExitDir
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ForInitAndNext DD 0b2901H
	DD	08f3429H
	DD	0840129H
	DD	0e018f01aH
	DD	0c014d016H
	DD	060117012H
	DD	05010H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$WriteAsmLine DD 020701H
	DD	0250107H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$CheckCXZLines DD 060f01H
	DD	07640fH
	DD	06340fH
	DD	0700b320fH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$EvaluateHllExpression DD 040a01H
	DD	0c340aH
	DD	07006920aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$1$QueueTestLines DD 021H
	DD	imagerel QueueTestLines
	DD	imagerel QueueTestLines+14
	DD	imagerel $unwind$QueueTestLines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$0$QueueTestLines DD 020521H
	DD	067405H
	DD	imagerel QueueTestLines
	DD	imagerel QueueTestLines+14
	DD	imagerel $unwind$QueueTestLines
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$QueueTestLines DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetAndExpression DD 0a1e01H
	DD	011341eH
	DD	0f01a721eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$ReplaceLabel DD 040a01H
	DD	0a340aH
	DD	07006720aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetSimpleExpression DD 0b9001H
	DD	02ee490H
	DD	024011bH
	DD	0d012f014H
	DD	0700ec010H
	DD	0500c600dH
	DD	0300bH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RenderJcc DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetLabelStr DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$RenderInstr DD 081401H
	DD	086414H
	DD	075414H
	DD	063414H
	DD	070103214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetCOp DD 020601H
	DD	030023206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetExpression DD 0a1e01H
	DD	012341eH
	DD	0f01a921eH
	DD	0d016e018H
	DD	07012c014H
	DD	050106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$3$GetToken DD 021H
	DD	imagerel GetToken
	DD	imagerel GetToken+38
	DD	imagerel $unwind$GetToken
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$chain$2$GetToken DD 061621H
	DD	0cc416H
	DD	0b640aH
	DD	0a3405H
	DD	imagerel GetToken
	DD	imagerel GetToken+38
	DD	imagerel $unwind$GetToken
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$GetToken DD 060e01H
	DD	0d540eH
	DD	0f00a520eH
	DD	07006e008H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 041601H
	DD	070125216H
	DD	030106011H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 081401H
	DD	0a6414H
	DD	095414H
	DD	083414H
	DD	070105214H
xdata	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
_TEXT	SEGMENT
buff$ = 64
hllop$1 = 80
hllop$2 = 80
buffer$ = 96
i$ = 1344
tokenarray$ = 1352
HllExitDir PROC

; 1589 : {

$LN97:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	rbx
	push	rsi
	push	rdi
	push	r15
	lea	rbp, QWORD PTR [rsp-1040]
	sub	rsp, 1296				; 00000510H

; 1590 :   //int               level;
; 1591 :   //struct asym       *sym;
; 1592 :   struct hll_item     *hll;
; 1593 :   ret_code            rc = NOT_ERROR;
; 1594 :   int                 idx;
; 1595 :   int                 cmd = tokenarray[i].tokval;
; 1596 :   char buff[16];
; 1597 :   char buffer[MAX_LINE_LEN * 2];
; 1598 : 
; 1599 :   DebugMsg1(("HllExitDir(%s) enter\n", tokenarray[i].string_ptr));
; 1600 : 
; 1601 :   hll = HllStack;

	mov	rbx, QWORD PTR ModuleInfo+224
	mov	r15, rdx
	movsxd	rdx, ecx
	xor	esi, esi
	shl	rdx, 5
	mov	edi, DWORD PTR [rdx+r15+16]

; 1602 : 
; 1603 :   if (hll == NULL) {

	test	rbx, rbx
	jne	SHORT $LN7@HllExitDir

; 1604 :     DebugMsg(("HllExitDir stack error\n"));
; 1605 :     return(EmitError(DIRECTIVE_MUST_BE_IN_CONTROL_BLOCK));

	mov	ecx, 245				; 000000f5H
	call	EmitError

; 1707 : }

	add	rsp, 1296				; 00000510H
	pop	r15
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
$LN7@HllExitDir:
	mov	QWORD PTR [rsp+1360], r13

; 1606 :   }
; 1607 : 
; 1608 :   switch (cmd) {

	mov	r13d, 4
	cmp	edi, 331				; 0000014bH
	jl	$LN26@HllExitDir
	cmp	edi, 332				; 0000014cH
	jle	$LL91@HllExitDir
	cmp	edi, 334				; 0000014eH
	jg	$LN26@HllExitDir

; 1609 :   case T_DOT_ELSE:
; 1610 :   case T_DOT_ELSEIF:
; 1611 :     if (hll->cmd != HLL_IF) {

	cmp	DWORD PTR [rbx+52], esi
	je	SHORT $LN9@HllExitDir

; 1612 :       DebugMsg(("HllExitDir(%s): labels[LTEST]=%X\n", tokenarray[i].string_ptr, hll->labels[LTEST]));
; 1613 :       return(EmitErr(BLOCK_NESTING_ERROR, tokenarray[i].string_ptr));

	mov	rdx, QWORD PTR [rdx+r15+8]
	lea	ecx, QWORD PTR [r13+76]
	call	EmitErr
	jmp	$LN95@HllExitDir
$LN9@HllExitDir:

; 1614 :     }
; 1615 :     /* v2.08: check for multiple ELSE clauses */
; 1616 :     if (hll->flags & HLLF_ELSEOCCURED) {

	test	BYTE PTR [rbx+60], 1
	je	SHORT $LN10@HllExitDir

; 1617 :       return(EmitError(DOT_ELSE_CLAUSE_ALREADY_OCCURED_IN_THIS_DOT_IF_BLOCK));

	mov	ecx, 67					; 00000043H
	call	EmitError
	jmp	$LN95@HllExitDir
$LN10@HllExitDir:

; 1618 :     }
; 1619 : 
; 1620 :     /* the 'exit'-label is only needed if an .ELSE branch exists.
; 1621 :     * That's why it is created delayed.
; 1622 :     */
; 1623 :     if (hll->labels[LEXIT] == 0)

	cmp	DWORD PTR [rbx+12], esi
	jne	SHORT $LN11@HllExitDir

; 1624 :       hll->labels[LEXIT] = GetHllLabel();

	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	DWORD PTR ModuleInfo+352, eax
	mov	DWORD PTR [rbx+12], eax
$LN11@HllExitDir:

; 1625 :     AddLineQueueX(JMPPREFIX "jmp %s", GetLabelStr(hll->labels[LEXIT], buff));

	mov	r8d, DWORD PTR [rbx+12]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11709
	call	AddLineQueueX

; 1626 : 
; 1627 :     if (hll->labels[LTEST] > 0) {

	mov	r8d, DWORD PTR [rbx+8]
	test	r8d, r8d
	je	SHORT $LN12@HllExitDir

; 1628 :       AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LTEST], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11711
	call	AddLineQueueX

; 1629 :       hll->labels[LTEST] = 0;

	mov	DWORD PTR [rbx+8], esi
$LN12@HllExitDir:

; 1630 :     }
; 1631 :     i++;

	inc	DWORD PTR i$[rbp-256]

; 1632 :     if (cmd == T_DOT_ELSEIF) {

	cmp	edi, 334				; 0000014eH
	jne	$LN13@HllExitDir

; 1633 :       /* create new labels[LTEST] label */
; 1634 :       hll->labels[LTEST] = GetHllLabel();

	mov	eax, DWORD PTR ModuleInfo+352

; 1635 :       rc = EvaluateHllExpression(hll, &i, tokenarray, LTEST, FALSE, buffer);

	lea	rdx, QWORD PTR i$[rbp-256]
	inc	eax
	mov	QWORD PTR hllop$2[rsp], rsi
	mov	DWORD PTR ModuleInfo+352, eax
	xor	r9d, r9d
	mov	DWORD PTR [rbx+8], eax
	mov	r8, r15
	lea	rax, QWORD PTR hllop$2[rsp]
	mov	DWORD PTR hllop$2[rsp+8], esi
	mov	QWORD PTR [rsp+48], rax
	mov	rcx, rbx
	lea	rax, QWORD PTR buffer$[rsp]
	mov	BYTE PTR buffer$[rsp], sil
	mov	QWORD PTR [rsp+40], rax
	mov	BYTE PTR [rsp+32], sil
	call	GetExpression
	cmp	eax, -1
	jne	SHORT $LN42@HllExitDir
	or	esi, eax
	jmp	$LN26@HllExitDir
$LN42@HllExitDir:
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], sil
	je	SHORT $LN43@HllExitDir
	mov	ecx, 199				; 000000c7H
	call	EmitError
	mov	esi, eax

; 1636 :       if (rc == NOT_ERROR)

	test	eax, eax
	jne	$LN26@HllExitDir

; 1635 :       rc = EvaluateHllExpression(hll, &i, tokenarray, LTEST, FALSE, buffer);

$LN43@HllExitDir:

; 1637 :         QueueTestLines(buffer);

	lea	rbx, QWORD PTR buffer$[rsp]
	npad	4
$LL46@HllExitDir:
	mov	edx, 10
	mov	rcx, rbx
	mov	rdi, rbx
	call	strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN48@HllExitDir
	mov	BYTE PTR [rax], 0
	inc	rbx
$LN48@HllExitDir:
	cmp	BYTE PTR [rdi], 0
	je	SHORT $LN49@HllExitDir
	mov	rcx, rdi
	call	AddLineQueue
$LN49@HllExitDir:
	test	rbx, rbx
	jne	SHORT $LL46@HllExitDir

; 1638 :     }

	jmp	$LN26@HllExitDir
$LN13@HllExitDir:

; 1639 :     else
; 1640 :       hll->flags |= HLLF_ELSEOCCURED;

	or	DWORD PTR [rbx+60], 1

; 1641 : 
; 1642 :     break;

	jmp	$LN26@HllExitDir
	npad	2
$LL91@HllExitDir:

; 1643 :   case T_DOT_BREAK:
; 1644 :   case T_DOT_CONTINUE:
; 1645 :     for (; hll && hll->cmd == HLL_IF; hll = hll->next);

	cmp	DWORD PTR [rbx+52], esi
	jne	SHORT $LN17@HllExitDir
	mov	rbx, QWORD PTR [rbx]
	test	rbx, rbx
	jne	SHORT $LL91@HllExitDir

; 1646 :     if (hll == NULL) {
; 1647 :       return(EmitError(DIRECTIVE_MUST_BE_IN_CONTROL_BLOCK));

	mov	ecx, 245				; 000000f5H
	call	EmitError
	jmp	$LN95@HllExitDir
$LN17@HllExitDir:

; 1648 :     }
; 1649 :     /* v2.11: create 'exit' and 'test' labels delayed.
; 1650 :     */
; 1651 :     if (cmd == T_DOT_BREAK) {

	cmp	edi, 331				; 0000014bH
	jne	SHORT $LN18@HllExitDir

; 1652 :       if (hll->labels[LEXIT] == 0)

	cmp	DWORD PTR [rbx+12], esi
	jne	SHORT $LN20@HllExitDir

; 1653 :         hll->labels[LEXIT] = GetHllLabel();

	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	DWORD PTR ModuleInfo+352, eax
	mov	DWORD PTR [rbx+12], eax
$LN20@HllExitDir:

; 1654 :       idx = LEXIT;

	mov	ecx, 1

; 1655 :     }

	jmp	SHORT $LN22@HllExitDir
$LN18@HllExitDir:

; 1656 :     else if (hll->cmd == HLL_FOR) {

	mov	eax, DWORD PTR [rbx+52]
	cmp	eax, r13d
	jne	SHORT $LN21@HllExitDir

; 1657 :       /* added by habran 
; 1658 :          .CONTINUE label is created here for .FOR loops only if it exists.
; 1659 :          It is different than .WHILE because it has to first alter counters
; 1660 :       */
; 1661 :         if (hll->labels[LCONT] == 0) hll->labels[LCONT] = GetHllLabel();

	cmp	DWORD PTR [rbx+24], esi
	jne	SHORT $LN23@HllExitDir
	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	DWORD PTR ModuleInfo+352, eax
	mov	DWORD PTR [rbx+24], eax
$LN23@HllExitDir:

; 1662 :         idx = (hll->labels[LCONT] ? LCONT : LSTART);

	cmp	DWORD PTR [rbx+24], esi
	mov	ecx, 2
	cmovne	ecx, r13d

; 1663 :       }else {

	jmp	SHORT $LN22@HllExitDir
$LN21@HllExitDir:

; 1664 :             /* 'test' is not created for .WHILE loops here; because
; 1665 :              * if it doesn't exist, there's no condition to test.
; 1666 :              */
; 1667 :             if ( hll->cmd == HLL_REPEAT && hll->labels[LTEST] == 0 )

	cmp	eax, 2
	jne	SHORT $LN24@HllExitDir
	cmp	DWORD PTR [rbx+8], esi
	jne	SHORT $LN24@HllExitDir

; 1668 :                 hll->labels[LTEST] = GetHllLabel();

	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	DWORD PTR ModuleInfo+352, eax
	mov	DWORD PTR [rbx+8], eax
$LN24@HllExitDir:

; 1669 :             idx = ( hll->labels[LTEST] ? LTEST : LSTART );

	cmp	DWORD PTR [rbx+8], esi
	mov	ecx, 2
	cmovne	ecx, esi
$LN22@HllExitDir:

; 1670 :         }
; 1671 : 
; 1672 :     /* .BREAK .IF ... or .CONTINUE .IF ? */
; 1673 :     i++;

	mov	eax, DWORD PTR i$[rbp-256]
	inc	eax
	mov	DWORD PTR i$[rbp-256], eax

; 1674 :     if (tokenarray[i].token != T_FINAL) {

	cdqe
	shl	rax, 5
	lea	rdx, QWORD PTR [rax+r15]
	movzx	eax, BYTE PTR [rax+r15]
	test	al, al
	je	$LN25@HllExitDir

; 1675 :       if (tokenarray[i].token == T_DIRECTIVE && tokenarray[i].tokval == T_DOT_IF) {

	cmp	al, 3
	jne	$LN26@HllExitDir
	cmp	DWORD PTR [rdx+16], 327			; 00000147H
	jne	$LN26@HllExitDir

; 1676 :         enum hll_cmd savedcmd = hll->cmd;
; 1677 :         hll->cmd = HLL_BREAK;
; 1678 :         i++;
; 1679 :         /* v2.11: set rc and don't exit if an error occurs; see hll3.aso */
; 1680 :         rc = EvaluateHllExpression(hll, &i, tokenarray, idx, TRUE, buffer);

	lea	rax, QWORD PTR hllop$1[rsp]
	mov	QWORD PTR [rsp+1352], r12
	mov	r12d, DWORD PTR [rbx+52]
	lea	rdx, QWORD PTR i$[rbp-256]
	mov	QWORD PTR [rsp+48], rax
	mov	r9d, ecx
	mov	DWORD PTR [rbx+52], 3
	lea	rax, QWORD PTR buffer$[rsp]
	inc	DWORD PTR i$[rbp-256]
	mov	r8, r15
	mov	QWORD PTR [rsp+40], rax
	mov	rcx, rbx
	mov	BYTE PTR [rsp+32], 1
	mov	QWORD PTR hllop$1[rsp], rsi
	mov	DWORD PTR hllop$1[rsp+8], esi
	mov	BYTE PTR buffer$[rsp], sil
	call	GetExpression
	cmp	eax, -1
	jne	SHORT $LN58@HllExitDir

; 1683 :         hll->cmd = savedcmd;

	mov	DWORD PTR [rbx+52], r12d
	or	esi, eax
	mov	r12, QWORD PTR [rsp+1352]

; 1684 :       }
; 1685 :     }

	jmp	$LN26@HllExitDir

; 1676 :         enum hll_cmd savedcmd = hll->cmd;
; 1677 :         hll->cmd = HLL_BREAK;
; 1678 :         i++;
; 1679 :         /* v2.11: set rc and don't exit if an error occurs; see hll3.aso */
; 1680 :         rc = EvaluateHllExpression(hll, &i, tokenarray, idx, TRUE, buffer);

$LN58@HllExitDir:
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], sil
	je	SHORT $LN59@HllExitDir
	mov	ecx, 199				; 000000c7H
	call	EmitError
	mov	esi, eax

; 1681 :         if (rc == NOT_ERROR)

	test	eax, eax
	jne	SHORT $LN63@HllExitDir

; 1676 :         enum hll_cmd savedcmd = hll->cmd;
; 1677 :         hll->cmd = HLL_BREAK;
; 1678 :         i++;
; 1679 :         /* v2.11: set rc and don't exit if an error occurs; see hll3.aso */
; 1680 :         rc = EvaluateHllExpression(hll, &i, tokenarray, idx, TRUE, buffer);

$LN59@HllExitDir:

; 1682 :           QueueTestLines(buffer);

	mov	QWORD PTR [rsp+1368], r14
	lea	rdi, QWORD PTR buffer$[rsp]
	npad	8
$LL62@HllExitDir:
	mov	edx, 10
	mov	rcx, rdi
	mov	r14, rdi
	call	strchr
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN64@HllExitDir
	mov	BYTE PTR [rax], 0
	inc	rdi
$LN64@HllExitDir:
	cmp	BYTE PTR [r14], 0
	je	SHORT $LN65@HllExitDir
	mov	rcx, r14
	call	AddLineQueue
$LN65@HllExitDir:
	test	rdi, rdi
	jne	SHORT $LL62@HllExitDir
	mov	r14, QWORD PTR [rsp+1368]
$LN63@HllExitDir:

; 1683 :         hll->cmd = savedcmd;

	mov	DWORD PTR [rbx+52], r12d
	mov	r12, QWORD PTR [rsp+1352]

; 1684 :       }
; 1685 :     }

	jmp	SHORT $LN26@HllExitDir
$LN25@HllExitDir:

; 1686 :     else {
; 1687 :       AddLineQueueX(JMPPREFIX "jmp %s", GetLabelStr(hll->labels[idx], buff));

	movsxd	rax, ecx
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	mov	r8d, DWORD PTR [rbx+rax*4+8]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11728
	call	AddLineQueueX
$LN26@HllExitDir:

; 1688 :     }
; 1689 :     break;
; 1690 : #ifdef DEBUG_OUT
; 1691 :   default: /**/myassert(0); break;
; 1692 : #endif
; 1693 :   }
; 1694 :   if (tokenarray[i].token != T_FINAL && rc == NOT_ERROR) {

	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], 0
	je	SHORT $LN29@HllExitDir
	test	esi, esi
	jne	SHORT $LN29@HllExitDir

; 1695 :     EmitErr(SYNTAX_ERROR_EX, tokenarray[i].tokpos);

	mov	rdx, QWORD PTR [rax+r15+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr

; 1696 :     rc = ERROR;

	or	esi, -1
$LN29@HllExitDir:

; 1697 :   }
; 1698 : 
; 1699 :   if (ModuleInfo.list)

	test	DWORD PTR ModuleInfo+408, 2048		; 00000800H
	je	SHORT $LN30@HllExitDir

; 1700 :     LstWrite(LSTTYPE_DIRECTIVE, GetCurrOffset(), NULL);

	call	GetCurrOffset
	mov	edx, eax
	xor	r8d, r8d
	mov	ecx, r13d
	call	LstWrite
$LN30@HllExitDir:

; 1701 : 
; 1702 :   /* v2.11: always run line-queue if it's not empty. */
; 1703 :   if (is_linequeue_populated())

	cmp	QWORD PTR ModuleInfo+184, 0
	je	SHORT $LN31@HllExitDir

; 1704 :     RunLineQueue();

	call	RunLineQueue
$LN31@HllExitDir:

; 1705 : 
; 1706 :   return(rc);

	mov	eax, esi
$LN95@HllExitDir:
	mov	r13, QWORD PTR [rsp+1360]

; 1707 : }

	add	rsp, 1296				; 00000510H
	pop	r15
	pop	rdi
	pop	rsi
	pop	rbx
	pop	rbp
	ret	0
HllExitDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
_TEXT	SEGMENT
buff$ = 64
hllop$1 = 80
hllop$2 = 80
buffer$ = 96
i$ = 1328
tokenarray$ = 1336
HllEndDir PROC

; 1427 : {

$LN95:
	mov	QWORD PTR [rsp+32], rdi
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-1040]
	sub	rsp, 1296				; 00000510H

; 1428 :   //struct asym       *sym;
; 1429 :   struct hll_item     *hll;
; 1430 :   ret_code            rc = NOT_ERROR;
; 1431 :   int                 cmd = tokenarray[i].tokval;
; 1432 :   char buff[16];
; 1433 :   //char buffer[MAX_LINE_LEN*2];
; 1434 : 
; 1435 : 
; 1436 :   char buffer[MAX_LINE_LEN * 2];
; 1437 : 
; 1438 :   DebugMsg1(("HllEndDir(%s) enter\n", tokenarray[i].string_ptr));
; 1439 : 
; 1440 :   if (HllStack == NULL) {

	mov	rdi, QWORD PTR ModuleInfo+224
	xor	r14d, r14d
	movsxd	rax, ecx
	mov	r15, rdx
	shl	rax, 5
	mov	ecx, DWORD PTR [rax+rdx+16]
	test	rdi, rdi
	jne	SHORT $LN4@HllEndDir

; 1441 :     DebugMsg(("HllEndDir: hll stack is empty\n"));
; 1442 :     return(EmitError(DIRECTIVE_MUST_BE_IN_CONTROL_BLOCK));

	mov	ecx, 245				; 000000f5H
	call	EmitError
	jmp	$LN1@HllEndDir
$LN4@HllEndDir:

; 1443 :   }
; 1444 : 
; 1445 :   hll = HllStack;
; 1446 :   HllStack = hll->next;

	mov	rax, QWORD PTR [rdi]
	mov	QWORD PTR ModuleInfo+224, rax

; 1447 :   /* v2.06: move the item to the free stack */
; 1448 :   hll->next = HllFree;

	mov	rax, QWORD PTR ModuleInfo+232
	mov	QWORD PTR [rdi], rax
	mov	QWORD PTR [rsp+1336], rbx

; 1449 :   HllFree = hll;

	mov	QWORD PTR ModuleInfo+232, rdi
	mov	QWORD PTR [rsp+1344], rsi

; 1450 : 
; 1451 :   switch (cmd) {

	sub	ecx, 335				; 0000014fH
	je	$LN5@HllEndDir
	sub	ecx, 1
	je	$LN18@HllEndDir
	sub	ecx, 1
	je	$LN29@HllEndDir
	sub	ecx, 1
	je	$LN21@HllEndDir
	cmp	ecx, 1
	jne	$LN7@HllEndDir

; 1461 :     }
; 1462 :     break;
; 1463 :     // added by habran
; 1464 :   case T_DOT_ENDFOR:
; 1465 :     if (hll->cmd != HLL_FOR) {

	cmp	DWORD PTR [rdi+52], 4
	je	SHORT $LN9@HllEndDir

; 1466 :       DebugMsg(("HllEndDir: no .FOR on the hll stack\n"));
; 1467 :       EmitErr(BLOCK_NESTING_ERROR, tokenarray[i].string_ptr);

	movsxd	rdx, DWORD PTR i$[rbp-256]
	mov	ecx, 80					; 00000050H
	shl	rdx, 5
	mov	rdx, QWORD PTR [rdx+r15+8]
	call	EmitErr

; 1468 :       return(ERROR);

	or	eax, -1
	jmp	$LN91@HllEndDir
$LN9@HllEndDir:

; 1469 :     }
; 1470 :     i++;

	inc	DWORD PTR i$[rbp-256]

; 1471 :     //Insert .CONTINUE label here if there is any 
; 1472 :     if (hll->labels[LCONT])

	mov	r8d, DWORD PTR [rdi+24]
	test	r8d, r8d
	je	SHORT $LN10@HllEndDir

; 1473 :       AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LCONT], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11646
	call	AddLineQueueX
$LN10@HllEndDir:

; 1474 :     //forever loop '.for (::)'
; 1475 :     if (hll->cmcnt == 0) goto adlabel;

	mov	edx, DWORD PTR [rdi+48]
	test	edx, edx
	je	$adlabel$96

; 1476 :     //If counters exist  
; 1477 :     else if (hll->counterlines[0]){

	mov	r8, QWORD PTR [rdi+40]
	cmp	BYTE PTR [r8], r14b
	je	SHORT $LN13@HllEndDir

; 1478 :       //here we write counters
; 1479 :       if (hll->counterlines) {      //if there is something after second ':' expand it here

	test	r8, r8
	je	SHORT $LN15@HllEndDir

; 1480 :         ForInitAndNext(tokenarray, hll->cmcnt, hll->counterlines);

	mov	rcx, r15
	call	ForInitAndNext
$LN15@HllEndDir:

; 1481 :         LclFree(hll->counterlines);
; 1482 :       } 
; 1483 :       //first jump from the top happens here after the counters
; 1484 :       AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LSKIP], buff));

	mov	r8d, DWORD PTR [rdi+20]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11652
	call	AddLineQueueX

; 1485 :       /* create test label */
; 1486 :       if (hll->labels[LTEST]) {

	mov	r8d, DWORD PTR [rdi+8]
	test	r8d, r8d
	je	SHORT $LN16@HllEndDir

; 1487 :         AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LTEST], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11654
	call	AddLineQueueX
$LN16@HllEndDir:

; 1488 :       }
; 1489 :       QueueTestLines(hll->condlines);

	mov	rcx, QWORD PTR [rdi+32]
	call	QueueTestLines

; 1490 :       LclFree(hll->condlines);
; 1491 :     }

	jmp	SHORT $LN14@HllEndDir
$LN13@HllEndDir:

; 1492 :     else
; 1493 :       AddLineQueueX(" jmp %s", GetLabelStr(hll->labels[LSTART], buff));

	mov	r8d, DWORD PTR [rdi+16]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11655
	call	AddLineQueueX
$LN14@HllEndDir:

; 1494 :     if (!hll->cond)

	cmp	BYTE PTR [rdi+56], r14b
	jne	SHORT $LN17@HllEndDir
$adlabel$96:

; 1495 :  adlabel:
; 1496 :       AddLineQueueX(" jmp %s", GetLabelStr(hll->labels[LSTART], buff));

	mov	r8d, DWORD PTR [rdi+16]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11657
	call	AddLineQueueX
$LN17@HllEndDir:

; 1497 :     tokenarray[i].token = T_FINAL;

	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	mov	BYTE PTR [rax+r15], r14b

; 1498 :     break;

	jmp	$LN7@HllEndDir
$LN21@HllEndDir:

; 1513 :   case T_DOT_UNTILCXZ:
; 1514 :     if (hll->cmd != HLL_REPEAT) {

	cmp	DWORD PTR [rdi+52], 2
	jne	$LN93@HllEndDir

; 1515 :       DebugMsg(("HllEndDir: no .REPEAT on the hll stack\n"));
; 1516 :       return(EmitErr(BLOCK_NESTING_ERROR, tokenarray[i].string_ptr));
; 1517 :     }
; 1518 :     i++;

	mov	eax, DWORD PTR i$[rbp-256]
	inc	eax
	mov	DWORD PTR i$[rbp-256], eax

; 1519 :     if (hll->labels[LTEST]) /* v2.11: LTEST only needed if .CONTINUE has occured */

	mov	r8d, DWORD PTR [rdi+8]
	test	r8d, r8d
	je	SHORT $LN23@HllEndDir

; 1520 :       AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LTEST], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11665
	call	AddLineQueueX
	mov	eax, DWORD PTR i$[rbp-256]
$LN23@HllEndDir:

; 1521 : 
; 1522 :     /* read in optional (simple) expression */
; 1523 :     if (tokenarray[i].token != T_FINAL) {

	cdqe
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], r14b
	je	$LN24@HllEndDir

; 1524 :       rc = EvaluateHllExpression(hll, &i, tokenarray, LSTART, FALSE, buffer);

	lea	rax, QWORD PTR hllop$2[rsp]
	mov	QWORD PTR hllop$2[rsp], r14
	mov	QWORD PTR [rsp+48], rax
	lea	rdx, QWORD PTR i$[rbp-256]
	lea	rax, QWORD PTR buffer$[rsp]
	mov	DWORD PTR hllop$2[rsp+8], r14d
	mov	QWORD PTR [rsp+40], rax
	mov	r9d, 2
	mov	r8, r15
	mov	BYTE PTR [rsp+32], r14b
	mov	rcx, rdi
	mov	BYTE PTR buffer$[rsp], r14b
	call	GetExpression
	cmp	eax, -1
	jne	SHORT $LN56@HllEndDir
	or	r14d, eax
	jmp	$LN7@HllEndDir
$LN56@HllEndDir:
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], r14b
	je	SHORT $LN87@HllEndDir
	mov	ecx, 199				; 000000c7H
	call	EmitError
	mov	r14d, eax

; 1525 :       if (rc == NOT_ERROR) {

	test	eax, eax
	jne	$LN7@HllEndDir
$LN87@HllEndDir:

; 1526 :         rc = CheckCXZLines(buffer);

	lea	rcx, QWORD PTR buffer$[rsp]
	call	CheckCXZLines
	mov	r14d, eax

; 1527 :         if (rc == NOT_ERROR)

	test	eax, eax
	jne	SHORT $LN27@HllEndDir

; 1528 :           QueueTestLines(buffer); /* write condition lines */

	lea	rbx, QWORD PTR buffer$[rsp]
	npad	14
$LL60@HllEndDir:
	mov	edx, 10
	mov	rcx, rbx
	mov	rsi, rbx
	call	strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN62@HllEndDir
	mov	BYTE PTR [rax], 0
	inc	rbx
$LN62@HllEndDir:
	cmp	BYTE PTR [rsi], 0
	je	SHORT $LN63@HllEndDir
	mov	rcx, rsi
	call	AddLineQueue
$LN63@HllEndDir:
	test	rbx, rbx
	jne	SHORT $LL60@HllEndDir
	jmp	$LN7@HllEndDir
$LN27@HllEndDir:

; 1529 :         else
; 1530 :           EmitError(EXPR_TOO_COMPLEX_FOR_UNTILCXZ);

	mov	ecx, 191				; 000000bfH
	call	EmitError

; 1531 :       }
; 1532 :     }

	jmp	$LN7@HllEndDir
$LN24@HllEndDir:

; 1533 :     else {
; 1534 :       AddLineQueueX(JMPPREFIX "loop %s", GetLabelStr(hll->labels[LSTART], buff));

	mov	r8d, DWORD PTR [rdi+16]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rcx, OFFSET FLAT:$SG11671

; 1535 :     }
; 1536 :     break;

	jmp	$LN92@HllEndDir
$LN29@HllEndDir:

; 1537 :   case T_DOT_UNTIL:
; 1538 :     if (hll->cmd != HLL_REPEAT) {

	cmp	DWORD PTR [rdi+52], 2
	jne	$LN93@HllEndDir

; 1539 :       DebugMsg(("HllEndDir: no .REPEAT on the hll stack\n"));
; 1540 :       return(EmitErr(BLOCK_NESTING_ERROR, tokenarray[i].string_ptr));
; 1541 :     }
; 1542 :     i++;

	inc	DWORD PTR i$[rbp-256]

; 1543 :     if (hll->labels[LTEST]) /* v2.11: LTEST only needed if .CONTINUE has occured */

	mov	r8d, DWORD PTR [rdi+8]
	test	r8d, r8d
	je	SHORT $LN31@HllEndDir

; 1544 :       AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LTEST], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11675
	call	AddLineQueueX
$LN31@HllEndDir:

; 1545 : 
; 1546 :     /* read in (optional) expression */
; 1547 :     /* if expression is missing, just generate nothing */
; 1548 :     if (tokenarray[i].token != T_FINAL) {

	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], r14b
	je	$LN7@HllEndDir

; 1549 :       rc = EvaluateHllExpression(hll, &i, tokenarray, LSTART, FALSE, buffer);

	lea	rax, QWORD PTR hllop$1[rsp]
	mov	QWORD PTR hllop$1[rsp], r14
	mov	QWORD PTR [rsp+48], rax
	lea	rdx, QWORD PTR i$[rbp-256]
	lea	rax, QWORD PTR buffer$[rsp]
	mov	DWORD PTR hllop$1[rsp+8], r14d
	mov	QWORD PTR [rsp+40], rax
	mov	r9d, 2
	mov	r8, r15
	mov	BYTE PTR [rsp+32], r14b
	mov	rcx, rdi
	mov	BYTE PTR buffer$[rsp], r14b
	call	GetExpression
	cmp	eax, -1
	jne	SHORT $LN70@HllEndDir
	or	r14d, eax
	jmp	$LN7@HllEndDir
$LN70@HllEndDir:
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], r14b
	je	SHORT $LN71@HllEndDir
	mov	ecx, 199				; 000000c7H
	call	EmitError
	mov	r14d, eax

; 1550 :       if (rc == NOT_ERROR)

	test	eax, eax
	jne	$LN7@HllEndDir

; 1549 :       rc = EvaluateHllExpression(hll, &i, tokenarray, LSTART, FALSE, buffer);

$LN71@HllEndDir:

; 1551 :         QueueTestLines(buffer); /* write condition lines */

	lea	rbx, QWORD PTR buffer$[rsp]
	npad	3
$LL74@HllEndDir:
	mov	edx, 10
	mov	rcx, rbx
	mov	rsi, rbx
	call	strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN76@HllEndDir
	mov	BYTE PTR [rax], 0
	inc	rbx
$LN76@HllEndDir:
	cmp	BYTE PTR [rsi], 0
	je	SHORT $LN77@HllEndDir
	mov	rcx, rsi
	call	AddLineQueue
$LN77@HllEndDir:
	test	rbx, rbx
	jne	SHORT $LL74@HllEndDir
	jmp	$LN7@HllEndDir
$LN18@HllEndDir:

; 1499 :     //end of .ENDFOR
; 1500 :   case T_DOT_ENDW:
; 1501 :     if (hll->cmd != HLL_WHILE) {

	cmp	DWORD PTR [rdi+52], 1
	jne	SHORT $LN93@HllEndDir

; 1502 :       DebugMsg(("HllEndDir: no .WHILE on the hll stack\n"));
; 1503 :       return(EmitErr(BLOCK_NESTING_ERROR, tokenarray[i].string_ptr));
; 1504 :     }
; 1505 :     i++;

	inc	DWORD PTR i$[rbp-256]

; 1506 :     /* create test label */
; 1507 :     if (hll->labels[LTEST]) {

	mov	r8d, DWORD PTR [rdi+8]
	test	r8d, r8d
	je	SHORT $LN20@HllEndDir

; 1508 :       AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LTEST], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11661
	call	AddLineQueueX
$LN20@HllEndDir:

; 1509 :     }
; 1510 :     QueueTestLines(hll->condlines);

	mov	rcx, QWORD PTR [rdi+32]
	call	QueueTestLines

; 1511 :     LclFree(hll->condlines);
; 1512 :     break;

	jmp	SHORT $LN7@HllEndDir
$LN5@HllEndDir:

; 1452 :   case T_DOT_ENDIF:
; 1453 :     if (hll->cmd != HLL_IF) {

	cmp	DWORD PTR [rdi+52], r14d
	je	SHORT $LN6@HllEndDir
$LN93@HllEndDir:

; 1454 :       DebugMsg(("HllEndDir: no .IF on the hll stack\n"));
; 1455 :       return(EmitErr(BLOCK_NESTING_ERROR, tokenarray[i].string_ptr));

	movsxd	rdx, DWORD PTR i$[rbp-256]
	mov	ecx, 80					; 00000050H
	shl	rdx, 5
	mov	rdx, QWORD PTR [rdx+r15+8]
	call	EmitErr
	jmp	$LN91@HllEndDir
$LN6@HllEndDir:

; 1456 :     }
; 1457 :     i++;

	inc	DWORD PTR i$[rbp-256]

; 1458 :     /* if a test label isn't created yet, create it */
; 1459 :     if (hll->labels[LTEST]) {

	mov	r8d, DWORD PTR [rdi+8]
	test	r8d, r8d
	je	SHORT $LN7@HllEndDir

; 1460 :       AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LTEST], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rcx, OFFSET FLAT:$SG11642
$LN92@HllEndDir:
	lea	rdx, QWORD PTR buff$[rsp]
	call	AddLineQueueX
$LN7@HllEndDir:

; 1552 :     }
; 1553 :     break;
; 1554 : #ifdef DEBUG_OUT
; 1555 :   default: /**/myassert(0); break;
; 1556 : #endif
; 1557 :   }
; 1558 : 
; 1559 :   /* create the exit label if it has been referenced */
; 1560 :   if (hll->labels[LEXIT])

	mov	r8d, DWORD PTR [rdi+12]
	test	r8d, r8d
	je	SHORT $LN34@HllEndDir

; 1561 :     AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LEXIT], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11679
	call	AddLineQueueX
$LN34@HllEndDir:

; 1562 : 
; 1563 :   if (tokenarray[i].token != T_FINAL && rc == NOT_ERROR) {

	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r15], 0
	je	SHORT $LN35@HllEndDir
	test	r14d, r14d
	jne	SHORT $LN35@HllEndDir

; 1564 :     EmitErr(SYNTAX_ERROR_EX, tokenarray[i].tokpos);

	mov	rdx, QWORD PTR [rax+r15+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr

; 1565 :     rc = ERROR;

	or	r14d, -1
$LN35@HllEndDir:

; 1566 :   }
; 1567 :   if (ModuleInfo.list)

	test	DWORD PTR ModuleInfo+408, 2048		; 00000800H
	je	SHORT $LN36@HllEndDir

; 1568 :     LstWrite(LSTTYPE_DIRECTIVE, GetCurrOffset(), NULL);

	call	GetCurrOffset
	xor	r8d, r8d
	mov	edx, eax
	lea	ecx, QWORD PTR [r8+4]
	call	LstWrite
$LN36@HllEndDir:

; 1569 : 
; 1570 :   /* v2.11: always run line-queue if it's not empty. */
; 1571 :   if (is_linequeue_populated())

	cmp	QWORD PTR ModuleInfo+184, 0
	je	SHORT $LN37@HllEndDir

; 1572 :     RunLineQueue();

	call	RunLineQueue
$LN37@HllEndDir:

; 1573 : 
; 1574 :   return(rc);

	mov	eax, r14d
$LN91@HllEndDir:
	mov	rbx, QWORD PTR [rsp+1336]
	mov	rsi, QWORD PTR [rsp+1344]
$LN1@HllEndDir:

; 1575 : }

	mov	rdi, QWORD PTR [rsp+1352]
	add	rsp, 1296				; 00000510H
	pop	r15
	pop	r14
	pop	rbp
	ret	0
HllEndDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
_TEXT	SEGMENT
hllop$1 = 64
hllop$2 = 64
hllop$3 = 64
buff$ = 80
forbuff$ = 96
forbuffcnt$ = 704
forbuffcond$ = 1312
buffer$ = 1920
forbuffinit$ = 3120
transformed$ = 3728
i$ = 4384
tokenarray$ = 4392
HllStartDir PROC

; 1157 : {

$LN250:
	mov	DWORD PTR [rsp+8], ecx
	push	rbp
	push	r15
	lea	rbp, QWORD PTR [rsp-4104]
	mov	eax, 4360				; 00001108H
	call	__chkstk
	sub	rsp, rax
	mov	QWORD PTR [rsp+4392], rbx
	mov	QWORD PTR [rsp+4352], r12

; 1158 :   struct hll_item      *hll;
; 1159 :   ret_code             rc = NOT_ERROR;

	xor	r12d, r12d

; 1160 :   int                  cmd = tokenarray[i].tokval;

	movsxd	rax, ecx
	mov	r15d, r12d
	shl	rax, 5

; 1161 :   char buff[16];
; 1162 :   char buffer[MAX_LINE_LEN * 2];
; 1163 :   char codebuff[256];
; 1164 :   char param[256];
; 1165 :   char init[256];
; 1166 :   char limit[MAX_LINE_LEN];
; 1167 :   char op[4];
; 1168 :   char forbuff[MAX_LINE_LEN];
; 1169 :   char forbuffinit[MAX_LINE_LEN];
; 1170 :   char forbuffcond[MAX_LINE_LEN];
; 1171 :   char forbuffcnt[MAX_LINE_LEN];
; 1172 :   char transformed[MAX_LINE_LEN];
; 1173 :   int a;
; 1174 :   int j;
; 1175 :   int b;
; 1176 :   int e;
; 1177 :   int size;
; 1178 :   int eqcnt;
; 1179 :   int cmcnt;
; 1180 :   char *p;
; 1181 :   char c;
; 1182 : 
; 1183 :   DebugMsg1(("HllStartDir(%s) enter\n", tokenarray[i].string_ptr));
; 1184 : 
; 1185 :   i++; /* skip directive */

	inc	ecx
	mov	QWORD PTR [rsp+4344], r13
	mov	r13, rdx
	mov	QWORD PTR [rsp+4336], r14

; 1186 : 
; 1187 :   /* v2.06: is there an item on the free stack? */
; 1188 :   if (HllFree) {

	mov	r14, QWORD PTR ModuleInfo+232
	mov	ebx, DWORD PTR [rax+rdx+16]
	mov	DWORD PTR i$[rbp-256], ecx
	test	r14, r14
	jne	SHORT $LN17@HllStartDi

; 1189 :     hll = HllFree;
; 1190 :     DebugCmd(cntReused++);
; 1191 :   }
; 1192 :   else {
; 1193 :     hll = LclAlloc(sizeof(struct hll_item));

	lea	ecx, QWORD PTR [r12+64]
	call	LclAlloc
	mov	r14, rax
$LN17@HllStartDi:

; 1194 :     DebugCmd(cntAlloc++);
; 1195 :   }
; 1196 : 
; 1197 :   /* structure for .IF .ELSE .ENDIF
; 1198 :   *    cond jump to LTEST-label
; 1199 :   *    ...
; 1200 :   *    jmp LEXIT
; 1201 :   *  LTEST:
; 1202 :   *    ...
; 1203 :   *  LEXIT:
; 1204 : 
; 1205 :   * structure for .IF .ELSEIF
; 1206 :   *    cond jump to LTEST
; 1207 :   *    ...
; 1208 :   *    jmp LEXIT
; 1209 :   *  LTEST:
; 1210 :   *    cond jump to (new) LTEST
; 1211 :   *    ...
; 1212 :   *    jmp LEXIT
; 1213 :   *  LTEST:
; 1214 :   *    ...
; 1215 : 
; 1216 :   * structure for .WHILE and .REPEAT:
; 1217 :   *   jmp LTEST (for .WHILE only)
; 1218 :   * LSTART:
; 1219 :   *   ...
; 1220 :   * LTEST: (jumped to by .continue)
; 1221 :   *   a) test end condition, cond jump to LSTART label
; 1222 :   *   b) unconditional jump to LSTART label
; 1223 :   * LEXIT: (jumped to by .BREAK)
; 1224 :   */
; 1225 : 
; 1226 :   hll->labels[LEXIT] = 0;

	mov	QWORD PTR [rsp+4408], rdi
	mov	DWORD PTR [r14+12], r12d

; 1227 : 
; 1228 :   switch (cmd) {

	cmp	ebx, 327				; 00000147H
	je	$LN18@HllStartDi
	jle	$LN20@HllStartDi
	cmp	ebx, 329				; 00000149H
	jle	$LN45@HllStartDi
	cmp	ebx, 330				; 0000014aH
	jne	$LN20@HllStartDi

; 1242 :       }
; 1243 :     }
; 1244 :     break;
; 1245 :     // added by habran
; 1246 :   case T_DOT_FOR:
; 1247 :     /* create the label to loop start */
; 1248 :     hll->labels[LEXIT] = 0; //this is needed for .FOR loop

	mov	DWORD PTR [r14+12], r12d

; 1249 :     hll->labels[LSTART] = GetHllLabel();

	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	QWORD PTR [rsp+4400], rsi
	mov	DWORD PTR ModuleInfo+352, eax

; 1250 :     hll->labels[LSKIP] = GetHllLabel();
; 1251 :     hll->labels[LCONT] = 0;
; 1252 :     hll->labels[LTEST] = 0;
; 1253 :     hll->flags = 0;
; 1254 :     hll->cmd = HLL_FOR;
; 1255 :     //copy string to the buffer and get read of spaces
; 1256 :     p = tokenarray[i].tokpos;
; 1257 :     for (b = 0; *p; p++)

	mov	esi, r12d
	mov	DWORD PTR [r14+16], eax
	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	DWORD PTR ModuleInfo+352, eax
	mov	DWORD PTR [r14+20], eax
	mov	DWORD PTR [r14+24], r12d
	mov	DWORD PTR [r14+8], r12d
	mov	DWORD PTR [r14+60], r12d
	mov	DWORD PTR [r14+52], 4
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	mov	rdi, QWORD PTR [rax+r13+24]
	movzx	eax, BYTE PTR [rdi]
	test	al, al
	je	SHORT $LN5@HllStartDi
	lea	rbx, QWORD PTR forbuff$[rsp]
	npad	6
$LL6@HllStartDi:

; 1258 :     {
; 1259 :       if ((*p == ' ') || (*p == '\t')) {

	cmp	al, 32					; 00000020H
	je	SHORT $LN24@HllStartDi
	cmp	al, 9
	jne	SHORT $LN248@HllStartDi
$LN24@HllStartDi:

; 1260 :         //if there is QWORD PTR, DWORD PTR, WORD PTR, BYTE PTR, OFFSET or ADDR leave a space between
; 1261 :         c = tolower(*(p + 1));

	movsx	ecx, BYTE PTR [rdi+1]
	call	tolower

; 1262 :         if ((c >= 'a') && (c <= 'z')){

	sub	al, 97					; 00000061H
	cmp	al, 25
	ja	SHORT $LN4@HllStartDi

; 1263 :           forbuff[b] = *p;

	movzx	eax, BYTE PTR [rdi]
$LN248@HllStartDi:

; 1264 :           b++;

	inc	esi
	mov	BYTE PTR [rbx], al
	inc	rbx
$LN4@HllStartDi:

; 1250 :     hll->labels[LSKIP] = GetHllLabel();
; 1251 :     hll->labels[LCONT] = 0;
; 1252 :     hll->labels[LTEST] = 0;
; 1253 :     hll->flags = 0;
; 1254 :     hll->cmd = HLL_FOR;
; 1255 :     //copy string to the buffer and get read of spaces
; 1256 :     p = tokenarray[i].tokpos;
; 1257 :     for (b = 0; *p; p++)

	movzx	eax, BYTE PTR [rdi+1]
	inc	rdi
	test	al, al
	jne	SHORT $LL6@HllStartDi
$LN5@HllStartDi:

; 1265 :         }
; 1266 :       }
; 1267 :       else {
; 1268 :         forbuff[b] = *p;
; 1269 :         b++;
; 1270 :       }
; 1271 :     }
; 1272 :     forbuff[b] = NULLC;

	movsxd	rax, esi

; 1273 :     if (0 == _memicmp(forbuff, "(::)", 4)){

	lea	rdx, OFFSET FLAT:$SG11582
	mov	r8d, 4
	lea	rcx, QWORD PTR forbuff$[rsp]
	mov	BYTE PTR forbuff$[rsp+rax], r12b
	call	_memicmp
	mov	rsi, QWORD PTR [rsp+4400]
	test	eax, eax
	jne	SHORT $LN26@HllStartDi

; 1274 :       hll->cmcnt = 0;

	mov	DWORD PTR [r14+48], r12d

; 1275 :     }

	jmp	$LN43@HllStartDi
$LN26@HllStartDi:

; 1276 :     else {
; 1277 :       //count initializers
; 1278 :       eqcnt = 1;
; 1279 :       forbuffinit[0] = NULLC;
; 1280 :       for (j = 1, b = 0; forbuff[j];){

	mov	r9d, r12d
	mov	BYTE PTR forbuffinit$[rbp-256], r12b
	mov	r10d, 1
	mov	r8d, r10d
	cmp	BYTE PTR forbuff$[rsp+1], r9b
	je	SHORT $LN246@HllStartDi
	mov	ecx, r10d
	mov	rax, r12
$LL7@HllStartDi:

; 1281 :         c = forbuff[j];

	movzx	edx, BYTE PTR forbuff$[rsp+rcx]

; 1282 :         if (c == ':') {

	cmp	dl, 58					; 0000003aH
	jne	SHORT $LN29@HllStartDi

; 1283 :           if (forbuff[j - 1] != 39 && forbuff[j + 1] != 39) break;

	cmp	BYTE PTR forbuff$[rsp+rcx-1], 39	; 00000027H
	je	SHORT $LN30@HllStartDi
	cmp	BYTE PTR forbuff$[rsp+rcx+1], 39	; 00000027H
	jne	SHORT $LN246@HllStartDi

; 1284 :         }
; 1285 :         if (c == ',' && forbuff[j - 1] != 39 && forbuff[j + 1] != 39) eqcnt++;

	jmp	SHORT $LN30@HllStartDi
$LN29@HllStartDi:
	cmp	dl, 44					; 0000002cH
	jne	SHORT $LN30@HllStartDi
	cmp	BYTE PTR forbuff$[rsp+rcx-1], 39	; 00000027H
	je	SHORT $LN30@HllStartDi
	cmp	BYTE PTR forbuff$[rsp+rcx+1], 39	; 00000027H
	je	SHORT $LN30@HllStartDi
	inc	r10d
$LN30@HllStartDi:

; 1286 :         forbuffinit[b] = c;

	mov	BYTE PTR forbuffinit$[rbp+rax-256], dl

; 1287 :         if (c == 39 && forbuffinit[b - 2] == 39){

	cmp	dl, 39					; 00000027H
	jne	SHORT $LN31@HllStartDi
	cmp	BYTE PTR forbuffinit$[rbp+rax-258], dl
	jne	SHORT $LN31@HllStartDi

; 1288 :           b++;

	inc	r9d

; 1289 :           forbuffinit[b] = ' ';

	mov	BYTE PTR forbuffinit$[rbp+rax-255], 32	; 00000020H
	inc	rax
$LN31@HllStartDi:

; 1290 :         }
; 1291 :         j++;

	inc	rcx
	inc	r8d

; 1292 :         b++;

	inc	r9d
	inc	rax
	cmp	BYTE PTR forbuff$[rsp+rcx], r12b
	jne	SHORT $LL7@HllStartDi
$LN246@HllStartDi:

; 1293 :       }
; 1294 :       forbuffinit[b] = NULLC;

	movsxd	rax, r9d

; 1296 :       //coppy the condition to the buffer
; 1297 :       forbuffcond[0] = NULLC;
; 1298 :       hll->labels[LTEST] = 0;
; 1299 :       for (b = 0; forbuff[j] && forbuff[j] != ':'; forbuffcond[b] = forbuff[j], j++, b++);

	lea	rcx, QWORD PTR forbuff$[rsp]
	inc	r8d
	mov	DWORD PTR [r14+8], r12d
	mov	r9d, r12d
	mov	BYTE PTR forbuffcond$[rbp-256], r12b
	mov	BYTE PTR forbuffinit$[rbp+rax-256], r12b
	movsxd	rax, r8d
	add	rcx, rax
	cmp	BYTE PTR [rcx], r9b
	je	SHORT $LN247@HllStartDi

; 1295 :       j++;

	lea	rax, QWORD PTR forbuffcond$[rbp-256]
	npad	7
$LL12@HllStartDi:

; 1296 :       //coppy the condition to the buffer
; 1297 :       forbuffcond[0] = NULLC;
; 1298 :       hll->labels[LTEST] = 0;
; 1299 :       for (b = 0; forbuff[j] && forbuff[j] != ':'; forbuffcond[b] = forbuff[j], j++, b++);

	movzx	edx, BYTE PTR [rcx]
	cmp	dl, 58					; 0000003aH
	je	SHORT $LN247@HllStartDi
	inc	rcx
	mov	BYTE PTR [rax], dl
	inc	r8d
	inc	r9d
	inc	rax
	cmp	BYTE PTR [rcx], r12b
	jne	SHORT $LL12@HllStartDi
$LN247@HllStartDi:

; 1300 :       if (forbuffcond[b - 2] == '>' && forbuffcond[b - 1] == '0') forbuffcond[b - 2] = NULLC;

	movsxd	rax, r9d
	cmp	BYTE PTR forbuffcond$[rbp+rax-258], 62	; 0000003eH
	jne	SHORT $LN32@HllStartDi
	cmp	BYTE PTR forbuffcond$[rbp+rax-257], 48	; 00000030H
	jne	SHORT $LN32@HllStartDi
	mov	BYTE PTR forbuffcond$[rbp+rax-258], r12b
$LN32@HllStartDi:

; 1301 :       forbuffcond[b] = NULLC;
; 1302 :       if (!b) hll->cond = FALSE;

	test	r9d, r9d
	mov	BYTE PTR forbuffcond$[rbp+rax-256], r12b

; 1303 :       else    hll->cond = TRUE;
; 1304 :       j++;
; 1305 :       //copy the counter to the buffer
; 1306 :       cmcnt = 0;

	mov	edi, r12d

; 1307 :       forbuffcnt[0] = NULLC;
; 1308 :       hll->condlines = "";
; 1309 :       for (b = 0; forbuff[j] != ')';b++,j++){

	mov	edx, r12d
	setne	al
	mov	BYTE PTR forbuffcnt$[rbp-256], dil
	inc	r8d
	mov	BYTE PTR [r14+56], al
	movsxd	rcx, r8d
	lea	rax, OFFSET FLAT:$SG11590
	mov	QWORD PTR [r14+32], rax
	cmp	BYTE PTR forbuff$[rsp+rcx], 41		; 00000029H
	je	SHORT $LN14@HllStartDi
	mov	rax, r12
	npad	12
$LL15@HllStartDi:

; 1310 :         forbuffcnt[b] = forbuff[j];

	movzx	r8d, BYTE PTR forbuff$[rsp+rcx]
	mov	BYTE PTR forbuffcnt$[rbp+rax-256], r8b

; 1311 :         if (forbuffcnt[b] == ',' && forbuff[j - 1] != 39 && forbuff[j + 1] != 39) ++cmcnt;

	cmp	r8b, 44					; 0000002cH
	jne	SHORT $LN35@HllStartDi
	cmp	BYTE PTR forbuff$[rsp+rcx-1], 39	; 00000027H
	je	SHORT $LN13@HllStartDi
	cmp	BYTE PTR forbuff$[rsp+rcx+1], 39	; 00000027H
	je	SHORT $LN13@HllStartDi
	inc	edi

; 1312 :         if (forbuffcnt[b] == 39 && forbuffcnt[b - 2] == 39){

	jmp	SHORT $LN13@HllStartDi
$LN35@HllStartDi:
	cmp	r8b, 39					; 00000027H
	jne	SHORT $LN13@HllStartDi
	cmp	BYTE PTR forbuffcnt$[rbp+rax-258], r8b
	jne	SHORT $LN13@HllStartDi

; 1313 :           b++;

	inc	edx

; 1314 :           forbuffcnt[b] = ' ';

	mov	BYTE PTR forbuffcnt$[rbp+rax-255], 32	; 00000020H
	inc	rax
$LN13@HllStartDi:

; 1307 :       forbuffcnt[0] = NULLC;
; 1308 :       hll->condlines = "";
; 1309 :       for (b = 0; forbuff[j] != ')';b++,j++){

	inc	rcx
	inc	edx
	inc	rax
	cmp	BYTE PTR forbuff$[rsp+rcx], 41		; 00000029H
	jne	SHORT $LL15@HllStartDi
$LN14@HllStartDi:

; 1315 :         }
; 1316 :       }
; 1317 :       if (forbuffcnt[b - 1] == ')') b--;

	movsxd	rax, edx
	cmp	BYTE PTR forbuffcnt$[rbp+rax-257], 41	; 00000029H
	jne	SHORT $LN37@HllStartDi
	dec	edx
$LN37@HllStartDi:

; 1318 :       forbuffcnt[b] = NULLC;

	movsxd	rax, edx
	mov	BYTE PTR forbuffcnt$[rbp+rax-256], r12b

; 1319 :       //create valid command and add to LineQueue to initiate .for loop vars
; 1320 :       //anything that is before the first ':'
; 1321 :       if (forbuffinit[0]) ForInitAndNext(tokenarray, eqcnt, forbuffinit);

	cmp	BYTE PTR forbuffinit$[rbp-256], r12b
	je	SHORT $LN38@HllStartDi
	lea	r8, QWORD PTR forbuffinit$[rbp-256]
	mov	edx, r10d
	mov	rcx, r13
	call	ForInitAndNext
$LN38@HllStartDi:

; 1322 :       //note hll->counterlines is new var in the struct hll_item for store of forbuffcnt used in .ENDFOR
; 1323 :       //hll->cmcnt is also new var in the struct hll_item for commas counter used in .ENDFOR
; 1324 :       //copy forbuffcnt context to hll->counterlines 
; 1325 :       //forbuffcnt contains anything that is written after the second ':'
; 1326 :       hll->cmcnt = 0;

	mov	DWORD PTR [r14+48], r12d

; 1327 :       if (forbuffcnt[0])

	cmp	BYTE PTR forbuffcnt$[rbp-256], r12b
	je	SHORT $LN39@HllStartDi

; 1328 :       {
; 1329 :       //skip altering conditions the first time
; 1330 :         AddLineQueueX(" jmp %s", GetLabelStr(hll->labels[LSKIP], buff));

	mov	r8d, DWORD PTR [r14+20]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11597
	call	AddLineQueueX

; 1331 :         size = strlen(forbuffcnt) + 1;

	lea	rcx, QWORD PTR forbuffcnt$[rbp-256]
	or	rax, -1
$LL244@HllStartDi:
	inc	rax
	cmp	BYTE PTR [rcx+rax], r12b
	jne	SHORT $LL244@HllStartDi
	inc	eax

; 1332 :         hll->counterlines = LclAlloc(size);

	movsxd	rbx, eax
	mov	rcx, rbx
	call	LclAlloc

; 1333 :         memcpy(hll->counterlines, forbuffcnt, size);

	mov	r8, rbx
	mov	QWORD PTR [r14+40], rax
	lea	rdx, QWORD PTR forbuffcnt$[rbp-256]
	mov	rcx, rax
	call	memcpy

; 1334 :         hll->cmcnt = cmcnt + 1;

	lea	eax, DWORD PTR [rdi+1]
	mov	DWORD PTR [r14+48], eax

; 1335 :       }

	jmp	SHORT $LN40@HllStartDi
$LN39@HllStartDi:

; 1336 :       else hll->counterlines = "";    //there is nothing after the second ':'

	lea	rax, OFFSET FLAT:$SG11598
	mov	QWORD PTR [r14+40], rax
$LN40@HllStartDi:

; 1337 :       if (forbuffcond[0]){

	cmp	BYTE PTR forbuffcond$[rbp-256], r12b
	je	$LN43@HllStartDi

; 1338 :         strcpy(transformed, ".for ");

	mov	rcx, r12
	lea	rdx, OFFSET FLAT:$SG11600
	npad	4
$LL57@HllStartDi:
	movzx	eax, BYTE PTR [rcx+rdx]
	mov	BYTE PTR transformed$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL57@HllStartDi

; 1339 :         strcat(transformed, forbuffcond);

	lea	rcx, QWORD PTR transformed$[rbp-256]
	dec	rcx
	npad	3
$LL242@HllStartDi:
	cmp	BYTE PTR [rcx+1], r12b
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL242@HllStartDi
	lea	r8, QWORD PTR forbuffcond$[rbp-256]
	xor	edx, edx
	npad	13
$LL243@HllStartDi:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL243@HllStartDi

; 1340 :         strcat(transformed, "\0");

	lea	rcx, QWORD PTR transformed$[rbp-256]
	dec	rcx
	npad	6
$LL240@HllStartDi:
	cmp	BYTE PTR [rcx+1], r12b
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL240@HllStartDi
	lea	r8, OFFSET FLAT:$SG11601
	xor	edx, edx
	npad	13
$LL241@HllStartDi:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL241@HllStartDi

; 1341 :         tokenarray[0].string_ptr = ".for\0";

	lea	rax, OFFSET FLAT:$SG11602

; 1342 :         tokenarray[0].tokpos = transformed;
; 1343 :         Token_Count = Tokenize(tokenarray[0].tokpos, 0, tokenarray, 0);

	xor	r9d, r9d
	mov	QWORD PTR [r13+8], rax
	lea	rcx, QWORD PTR transformed$[rbp-256]
	lea	rax, QWORD PTR transformed$[rbp-256]
	mov	r8, r13
	xor	edx, edx
	mov	QWORD PTR [r13+24], rax
	call	Tokenize
	mov	DWORD PTR ModuleInfo+496, eax

; 1344 :         if (tokenarray[i].token != T_FINAL) {

	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], r12b
	je	$LN42@HllStartDi

; 1345 :           rc = EvaluateHllExpression(hll, &i, tokenarray, LSTART, TRUE, buffer);

	lea	rax, QWORD PTR hllop$2[rsp]
	mov	QWORD PTR hllop$2[rsp], r12
	mov	QWORD PTR [rsp+48], rax
	lea	rdx, QWORD PTR i$[rbp-256]
	lea	rax, QWORD PTR buffer$[rbp-256]
	mov	DWORD PTR hllop$2[rsp+8], r12d
	mov	QWORD PTR [rsp+40], rax
	lea	rbx, QWORD PTR buffer$[rbp-256]
	mov	r9d, 2
	mov	BYTE PTR [rsp+32], 1
	mov	r8, r13
	mov	BYTE PTR buffer$[rbp-256], r12b
	mov	rcx, r14
	call	GetAndExpression
	cmp	eax, -1
	je	$LN231@HllStartDi
	movsxd	rcx, DWORD PTR i$[rbp-256]
	shl	rcx, 5
	add	rcx, r13
	call	GetCOp
	cmp	eax, 8
	jne	SHORT $LN77@HllStartDi
$LL81@HllStartDi:
	inc	DWORD PTR i$[rbp-256]
	or	rax, -1
	npad	5
$LL239@HllStartDi:
	inc	rax
	cmp	BYTE PTR [rbx+rax], r12b
	jne	SHORT $LL239@HllStartDi
	add	rbx, rax
	mov	DWORD PTR hllop$2[rsp+8], r12d
	lea	rax, QWORD PTR hllop$2[rsp]
	mov	r9d, 2
	mov	QWORD PTR [rsp+48], rax
	lea	rdx, QWORD PTR i$[rbp-256]
	mov	QWORD PTR [rsp+40], rbx
	mov	r8, r13
	mov	rcx, r14
	mov	BYTE PTR [rsp+32], 1
	call	GetAndExpression
	cmp	eax, -1
	je	SHORT $LN231@HllStartDi
	movsxd	rcx, DWORD PTR i$[rbp-256]
	shl	rcx, 5
	add	rcx, r13
	call	GetCOp
	cmp	eax, 8
	je	SHORT $LL81@HllStartDi
$LN77@HllStartDi:
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], r12b
	je	SHORT $LN232@HllStartDi
	mov	ecx, 199				; 000000c7H
	call	EmitError
	mov	r15d, eax

; 1346 :           if (rc == NOT_ERROR) {

	test	eax, eax
	jne	SHORT $LN43@HllStartDi
$LN232@HllStartDi:

; 1347 :             size = strlen(buffer) + 1;

	lea	rcx, QWORD PTR buffer$[rbp-256]
	or	rax, -1
$LL238@HllStartDi:
	inc	rax
	cmp	BYTE PTR [rcx+rax], r12b
	jne	SHORT $LL238@HllStartDi
	inc	eax

; 1348 :             hll->condlines = LclAlloc(size);

	movsxd	rbx, eax
	mov	rcx, rbx
	call	LclAlloc

; 1349 :             memcpy(hll->condlines, buffer, size);

	mov	r8, rbx
	mov	QWORD PTR [r14+32], rax
	lea	rdx, QWORD PTR buffer$[rbp-256]
	mov	rcx, rax
	call	memcpy

; 1350 :             DebugCmd(cntCond++); DebugCmd(cntCondBytes += size);
; 1351 :           }
; 1352 :         }

	jmp	SHORT $LN43@HllStartDi
$LN231@HllStartDi:

; 1345 :           rc = EvaluateHllExpression(hll, &i, tokenarray, LSTART, TRUE, buffer);

	or	r15d, -1
	jmp	SHORT $LN43@HllStartDi
$LN42@HllStartDi:

; 1353 :         else
; 1354 :           hll->condlines = "";

	lea	rax, OFFSET FLAT:$SG11606
	mov	QWORD PTR [r14+32], rax
$LN43@HllStartDi:

; 1355 :       }
; 1356 :     }
; 1357 :     AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LSTART], buff));

	mov	r8d, DWORD PTR [r14+16]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11607
	call	AddLineQueueX

; 1358 :     tokenarray[i].token = T_FINAL;

	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	mov	BYTE PTR [rax+r13], r12b

; 1359 :     break;

	jmp	$LN20@HllStartDi
$LN45@HllStartDi:

; 1360 :     //end of .FOR
; 1361 :   case T_DOT_WHILE:
; 1362 :   case T_DOT_REPEAT:
; 1363 :     /* create the label to start of loop */
; 1364 :     hll->labels[LSTART] = GetHllLabel();

	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	DWORD PTR ModuleInfo+352, eax
	mov	DWORD PTR [r14+16], eax

; 1365 :     hll->labels[LTEST] = 0; /* v2.11: test label is created only if needed */

	mov	DWORD PTR [r14+8], r12d

; 1366 :     //hll->labels[LEXIT] = GetHllLabel(); /* v2.11: LEXIT is only needed for .BREAK */
; 1367 :     if (cmd == T_DOT_WHILE) {

	cmp	ebx, 329				; 00000149H
	jne	$LN46@HllStartDi

; 1368 :       hll->cmd = HLL_WHILE;
; 1369 :       hll->condlines = NULL;

	mov	QWORD PTR [r14+32], r12
	mov	r10d, 1
	mov	DWORD PTR [r14+52], r10d

; 1370 :       if (tokenarray[i].token != T_FINAL) {

	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], r12b

; 1371 :         rc = EvaluateHllExpression(hll, &i, tokenarray, LSTART, TRUE, buffer);

	mov	BYTE PTR buffer$[rbp-256], r12b
	je	$LN49@HllStartDi
	lea	rax, QWORD PTR hllop$1[rsp]
	mov	QWORD PTR hllop$1[rsp], r12
	mov	QWORD PTR [rsp+48], rax
	lea	r9d, QWORD PTR [r10+1]
	lea	rax, QWORD PTR buffer$[rbp-256]
	mov	DWORD PTR hllop$1[rsp+8], r12d
	mov	QWORD PTR [rsp+40], rax
	lea	rdx, QWORD PTR i$[rbp-256]
	mov	r8, r13
	mov	BYTE PTR [rsp+32], r10b
	mov	rcx, r14
	lea	rbx, QWORD PTR buffer$[rbp-256]
	call	GetAndExpression
	cmp	eax, -1
	je	$LN233@HllStartDi
	movsxd	rcx, DWORD PTR i$[rbp-256]
	shl	rcx, 5
	add	rcx, r13
	call	GetCOp
	cmp	eax, 8
	jne	SHORT $LN130@HllStartDi
	npad	1
$LL134@HllStartDi:
	inc	DWORD PTR i$[rbp-256]
	or	rax, -1
	npad	6
$LL237@HllStartDi:
	inc	rax
	cmp	BYTE PTR [rbx+rax], r12b
	jne	SHORT $LL237@HllStartDi
	add	rbx, rax
	mov	DWORD PTR hllop$1[rsp+8], r12d
	lea	rax, QWORD PTR hllop$1[rsp]
	mov	r9d, 2
	mov	QWORD PTR [rsp+48], rax
	lea	rdx, QWORD PTR i$[rbp-256]
	mov	QWORD PTR [rsp+40], rbx
	mov	r8, r13
	mov	rcx, r14
	mov	BYTE PTR [rsp+32], 1
	call	GetAndExpression
	cmp	eax, -1
	je	SHORT $LN233@HllStartDi
	movsxd	rcx, DWORD PTR i$[rbp-256]
	shl	rcx, 5
	add	rcx, r13
	call	GetCOp
	cmp	eax, 8
	je	SHORT $LL134@HllStartDi
$LN130@HllStartDi:
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], r12b
	je	SHORT $LN234@HllStartDi
	mov	ecx, 199				; 000000c7H
	call	EmitError
	mov	r15d, eax

; 1372 :         if (rc == NOT_ERROR) {

	test	eax, eax
	jne	SHORT $LN49@HllStartDi
$LN234@HllStartDi:

; 1373 :           int size;
; 1374 :           size = strlen(buffer) + 1;

	lea	rcx, QWORD PTR buffer$[rbp-256]
	or	rax, -1
$LL236@HllStartDi:
	inc	rax
	cmp	BYTE PTR [rcx+rax], r12b
	jne	SHORT $LL236@HllStartDi
	inc	eax

; 1375 :           hll->condlines = LclAlloc(size);

	movsxd	rbx, eax
	mov	rcx, rbx
	call	LclAlloc

; 1376 :           memcpy(hll->condlines, buffer, size);

	mov	r8, rbx
	mov	QWORD PTR [r14+32], rax
	lea	rdx, QWORD PTR buffer$[rbp-256]
	mov	rcx, rax
	call	memcpy

; 1377 :           DebugCmd(cntCond++); DebugCmd(cntCondBytes += size);
; 1378 :         }
; 1379 :       }

	jmp	SHORT $LN49@HllStartDi
$LN233@HllStartDi:

; 1371 :         rc = EvaluateHllExpression(hll, &i, tokenarray, LSTART, TRUE, buffer);

	or	r15d, -1
$LN49@HllStartDi:

; 1380 :       else
; 1381 :         buffer[0] = NULLC;  /* just ".while" without expression is accepted */
; 1382 : 
; 1383 :       /* create a jump to test label */
; 1384 :       /* optimisation: if line at 'test' label is just a jump, dont create label and don't jump! */
; 1385 :       if (_memicmp(buffer, "jmp", 3)) {

	mov	r8d, 3
	lea	rdx, OFFSET FLAT:$SG11615
	lea	rcx, QWORD PTR buffer$[rbp-256]
	call	_memicmp
	test	eax, eax
	je	SHORT $LN47@HllStartDi

; 1386 :         hll->labels[LTEST] = GetHllLabel();

	mov	eax, DWORD PTR ModuleInfo+352

; 1387 :         AddLineQueueX(JMPPREFIX "jmp %s", GetLabelStr(hll->labels[LTEST], buff));

	lea	rdx, OFFSET FLAT:$SG11028
	inc	eax
	lea	rcx, QWORD PTR buff$[rsp]
	mov	DWORD PTR ModuleInfo+352, eax
	mov	r8d, eax
	mov	DWORD PTR [r14+8], eax
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11616
	call	AddLineQueueX

; 1388 :       }
; 1389 :     }

	jmp	SHORT $LN47@HllStartDi
$LN46@HllStartDi:

; 1390 :     else {
; 1391 :       hll->cmd = HLL_REPEAT;

	mov	DWORD PTR [r14+52], 2
$LN47@HllStartDi:

; 1392 :     }
; 1393 :     AddLineQueueX("%s" LABELQUAL, GetLabelStr(hll->labels[LSTART], buff));

	mov	r8d, DWORD PTR [r14+16]
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$[rsp]
	call	sprintf
	lea	rdx, QWORD PTR buff$[rsp]
	lea	rcx, OFFSET FLAT:$SG11617
	call	AddLineQueueX
	jmp	$LN20@HllStartDi
$LN18@HllStartDi:

; 1229 :   case T_DOT_IF:
; 1230 :     hll->labels[LSTART] = 0; /* not used by .IF */

	mov	DWORD PTR [r14+16], r12d

; 1231 :     hll->labels[LTEST] = GetHllLabel();
; 1232 :     hll->cmd = HLL_IF;
; 1233 :     hll->flags = 0;
; 1234 :     /* get the C-style expression, convert to ASM code lines */
; 1235 :     rc = EvaluateHllExpression(hll, &i, tokenarray, LTEST, FALSE, buffer);

	lea	rdx, QWORD PTR i$[rbp-256]
	mov	eax, DWORD PTR ModuleInfo+352
	xor	r9d, r9d
	inc	eax
	mov	QWORD PTR hllop$3[rsp], r12
	mov	DWORD PTR ModuleInfo+352, eax
	mov	r8, r13
	mov	DWORD PTR [r14+8], eax
	mov	rcx, r14
	lea	rax, QWORD PTR hllop$3[rsp]
	mov	DWORD PTR [r14+52], r12d
	mov	QWORD PTR [rsp+48], rax
	lea	rax, QWORD PTR buffer$[rbp-256]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [r14+60], r12d
	mov	BYTE PTR [rsp+32], r12b
	mov	DWORD PTR hllop$3[rsp+8], r12d
	mov	BYTE PTR buffer$[rbp-256], r12b
	call	GetExpression
	cmp	eax, -1
	jne	SHORT $LN61@HllStartDi
	or	r15d, eax
	jmp	SHORT $LN20@HllStartDi
$LN61@HllStartDi:
	movsxd	rax, DWORD PTR i$[rbp-256]
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], r12b
	je	SHORT $LN235@HllStartDi
	mov	ecx, 199				; 000000c7H
	call	EmitError
	mov	r15d, eax

; 1236 :     if (rc == NOT_ERROR) {

	test	eax, eax
	jne	SHORT $LN20@HllStartDi
$LN235@HllStartDi:

; 1237 :       QueueTestLines(buffer);

	lea	rbx, QWORD PTR buffer$[rbp-256]
	npad	12
$LL65@HllStartDi:
	mov	edx, 10
	mov	rcx, rbx
	mov	rdi, rbx
	call	strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN67@HllStartDi
	mov	BYTE PTR [rax], r12b
	inc	rbx
$LN67@HllStartDi:
	cmp	BYTE PTR [rdi], r12b
	je	SHORT $LN68@HllStartDi
	mov	rcx, rdi
	call	AddLineQueue
$LN68@HllStartDi:
	test	rbx, rbx
	jne	SHORT $LL65@HllStartDi

; 1238 :       /* if no lines have been created, the LTEST label isn't needed */
; 1239 :       //if ( !is_linequeue_populated() ) {
; 1240 :       if (buffer[0] == NULLC) {

	cmp	BYTE PTR buffer$[rbp-256], r12b
	jne	SHORT $LN20@HllStartDi

; 1241 :         hll->labels[LTEST] = 0;

	mov	DWORD PTR [r14+8], r12d
$LN20@HllStartDi:

; 1394 :     break;
; 1395 : #ifdef DEBUG_OUT
; 1396 :   default: /**/myassert(0); break;
; 1397 : #endif
; 1398 :   }
; 1399 : 
; 1400 :   if (tokenarray[i].token != T_FINAL && rc == NOT_ERROR) {

	movsxd	rax, DWORD PTR i$[rbp-256]
	mov	r12, QWORD PTR [rsp+4352]
	mov	rdi, QWORD PTR [rsp+4408]
	mov	rbx, QWORD PTR [rsp+4392]
	shl	rax, 5
	cmp	BYTE PTR [rax+r13], 0
	je	SHORT $LN52@HllStartDi
	test	r15d, r15d
	jne	SHORT $LN52@HllStartDi

; 1401 :     DebugMsg(("HllStartDir: unexpected token [%s]\n", tokenarray[i].tokpos));
; 1402 :     EmitErr(SYNTAX_ERROR_EX, tokenarray[i].tokpos);

	mov	rdx, QWORD PTR [rax+r13+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr

; 1403 :     rc = ERROR;

	or	r15d, -1
$LN52@HllStartDi:

; 1404 :     //return( ERROR ); /* v2.08: continue and parse the line queue */
; 1405 :   }
; 1406 :   /* v2.06: remove the item from the free stack */
; 1407 :   if (hll == HllFree)

	cmp	r14, QWORD PTR ModuleInfo+232
	mov	r13, QWORD PTR [rsp+4344]
	jne	SHORT $LN53@HllStartDi

; 1408 :     HllFree = hll->next;

	mov	rax, QWORD PTR [r14]
	mov	QWORD PTR ModuleInfo+232, rax
$LN53@HllStartDi:

; 1409 :   hll->next = HllStack;

	mov	rax, QWORD PTR ModuleInfo+224
	mov	QWORD PTR [r14], rax

; 1410 :   HllStack = hll;
; 1411 : 
; 1412 :   if (ModuleInfo.list)

	test	DWORD PTR ModuleInfo+408, 2048		; 00000800H
	mov	QWORD PTR ModuleInfo+224, r14
	mov	r14, QWORD PTR [rsp+4336]
	je	SHORT $LN54@HllStartDi

; 1413 :     LstWrite(LSTTYPE_DIRECTIVE, GetCurrOffset(), NULL);

	call	GetCurrOffset
	xor	r8d, r8d
	mov	edx, eax
	lea	ecx, QWORD PTR [r8+4]
	call	LstWrite
$LN54@HllStartDi:

; 1414 : 
; 1415 :   if (is_linequeue_populated()) /* might be NULL! (".if 1") */

	cmp	QWORD PTR ModuleInfo+184, 0
	je	SHORT $LN245@HllStartDi

; 1416 :     RunLineQueue();

	call	RunLineQueue
$LN245@HllStartDi:

; 1417 : 
; 1418 :   return(rc);

	mov	eax, r15d

; 1419 : }

	add	rsp, 4360				; 00001108H
	pop	r15
	pop	rbp
	ret	0
HllStartDir ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT ForInitAndNext
_TEXT	SEGMENT
codebuff$1 = 32
codebuff$2 = 32
codebuff$3 = 32
codebuff$4 = 32
codebuff$5 = 32
codebuff$6 = 32
codebuff$7 = 32
codebuff$8 = 32
codebuff$9 = 32
codebuff$10 = 32
codebuff$11 = 32
codebuff$12 = 32
codebuff$13 = 32
codebuff$14 = 32
codebuff$15 = 32
codebuff$16 = 32
codebuff$17 = 32
codebuff$18 = 32
codebuff$19 = 32
codebuff$20 = 32
codebuff$21 = 32
codebuff$22 = 32
codebuff$ = 288
init$ = 544
param$ = 800
tokenarray$ = 1120
op$ = 1128
cnt$ = 1128
buff$ = 1136
ForInitAndNext PROC					; COMDAT

; 906  : static ret_code ForInitAndNext(struct asm_tok tokenarray[], int cnt, char *buff){

	mov	QWORD PTR [rsp+32], rbx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	lea	rbp, QWORD PTR [rsp-800]
	sub	rsp, 1056				; 00000420H

; 907  :   int a;
; 908  :   int j;
; 909  :   int	b = 0;

	xor	r15d, r15d
	mov	r12, r8

; 910  :   bool brct = 0;

	xor	sil, sil
	mov	r14d, edx
	mov	r13, rcx
	mov	r9, 145272973819904			; 0000842000000000H
$LL4@ForInitAnd:

; 911  :   char codebuff[256];
; 912  :   char param[256];
; 913  :   char init[256];
; 914  :   char op[4];
; 915  :   char *p;
; 916  :   //create valid command and add to LineQueue
; 917  :   do {
; 918  :     //extracting the first parameter "param" before the operator
; 919  :     a = 0;
; 920  :     while (buff[b] && !strchr("=!<>&|-+*^%/", buff[b]))

	movsxd	rbx, r15d
	xor	edi, edi
	add	rbx, r12
	cmp	BYTE PTR [rbx], dil
	je	SHORT $LN276@ForInitAnd
	npad	1
$LL5@ForInitAnd:
	movsx	edx, BYTE PTR [rbx]
	lea	rcx, OFFSET FLAT:$SG11356
	call	strchr
	test	rax, rax
	jne	SHORT $LN555@ForInitAnd

; 921  :     {
; 922  :       if (buff[b] == '-' || buff[b] == '+') break;

	movzx	ecx, BYTE PTR [rbx]
	lea	eax, DWORD PTR [rcx-43]
	test	al, 253					; 000000fdH
	je	SHORT $LN555@ForInitAnd

; 923  :       param[a] = buff[b];
; 924  :       b++;

	inc	rbx
	mov	BYTE PTR param$[rbp+rdi-256], cl
	inc	r15d

; 925  :       a++;

	inc	rdi
	cmp	BYTE PTR [rbx], 0
	jne	SHORT $LL5@ForInitAnd
$LN555@ForInitAnd:
	mov	r9, 145272973819904			; 0000842000000000H
$LN276@ForInitAnd:

; 926  :     }
; 927  :     param[a] = '\0';
; 928  :     //end of param
; 929  :     //is it simple operator
; 930  :     if ((buff[b + 1] == '+') || (buff[b + 1] == '-')){            //if ++ or -- finish it here

	movsxd	rax, r15d
	movzx	edx, BYTE PTR [rax+r12+1]
	lea	rcx, QWORD PTR [rax+r12]
	mov	BYTE PTR param$[rbp+rdi-256], 0
	lea	eax, DWORD PTR [rdx-43]
	test	al, 253					; 000000fdH
	je	$LN23@ForInitAnd

; 937  :     }
; 938  : 
; 939  :     //we finis here "inc REX" or  "dec REX" or "inc mem" or "dec mem"
; 940  :     else						//if not ++ or -- 
; 941  :     {							//extracting the operator
; 942  :       op[0] = buff[b];

	movzx	ebx, BYTE PTR [rcx]

; 943  :       b++;

	inc	r15d
	mov	BYTE PTR op$[rbp-256], bl

; 944  :       if (op[0] == '='){     //if operator is only '='

	cmp	bl, 61					; 0000003dH
	jne	SHORT $LN27@ForInitAnd

; 945  :         op[1] = '\0';       //finish here

	xor	r8b, r8b
	mov	BYTE PTR op$[rbp-255], r8b

; 946  :       }

	jmp	SHORT $LN30@ForInitAnd
$LN27@ForInitAnd:

; 947  :       else {                 //extract next operator
; 948  :         op[1] = buff[b];

	movsxd	rax, r15d

; 949  :         b++;

	inc	r15d
	movzx	r8d, BYTE PTR [rax+r12]
	mov	BYTE PTR op$[rbp-255], r8b
	lea	eax, DWORD PTR [r8-60]
	test	al, 253					; 000000fdH
	jne	SHORT $LN29@ForInitAnd

; 950  :         if ((op[1] == '<' || op[1] == '>') && (buff[b] == '=')){

	movsxd	rax, r15d
	cmp	BYTE PTR [rax+r12], 61			; 0000003dH
	jne	SHORT $LN29@ForInitAnd

; 951  :           op[2] = buff[b]; //if a second operator is shift sign "<<=" or ">>="

	mov	WORD PTR op$[rbp-254], 61		; 0000003dH

; 952  :           op[3] = NULLC;
; 953  :           b++;

	inc	r15d

; 954  :         }

	jmp	SHORT $LN30@ForInitAnd
$LN29@ForInitAnd:

; 955  :         else op[2] = NULLC; //not shift so we have two operands

	mov	BYTE PTR op$[rbp-254], 0
$LN30@ForInitAnd:

; 956  : 
; 957  :       }
; 958  :       //we finished with param and op
; 959  :       //now extracting the second parameter "init" after the operator
; 960  :       for (a = 0; buff[b];){ //checking if we have a char in a single ' '

	movsxd	rax, r15d
	xor	edx, edx
	movzx	ecx, BYTE PTR [rax+r12]
	test	cl, cl
	je	SHORT $LN556@ForInitAnd
$LL7@ForInitAnd:

; 961  :         if (buff[b] == '(' && buff[b - 1] != 39 && buff[b + 1] != 39 && b) break;

	cmp	cl, 40					; 00000028H
	je	SHORT $LN565@ForInitAnd

; 962  :         if (buff[b] == ',' && buff[b - 1] != 39 && buff[b + 1] != 39 && b) break;

	cmp	cl, 44					; 0000002cH
	jne	SHORT $LN33@ForInitAnd
$LN565@ForInitAnd:
	cmp	BYTE PTR [rax+r12-1], 39		; 00000027H
	je	SHORT $LN33@ForInitAnd
	cmp	BYTE PTR [rax+r12+1], 39		; 00000027H
	je	SHORT $LN33@ForInitAnd
	test	rax, rax
	jne	SHORT $LN556@ForInitAnd
$LN33@ForInitAnd:

; 963  :         init[a] = buff[b];
; 964  :         b++;

	inc	rax
	mov	BYTE PTR init$[rbp+rdx-256], cl
	inc	r15d

; 965  :         a++;

	inc	rdx
	movzx	ecx, BYTE PTR [rax+r12]
	test	cl, cl
	jne	SHORT $LL7@ForInitAnd
$LN556@ForInitAnd:

; 966  :       }
; 967  :       if (buff[b] == '(' && buff[b - 1] != 39 && buff[b + 1] != 39 && b){

	movsxd	rax, r15d
	cmp	BYTE PTR [rax+r12], 40			; 00000028H
	lea	rcx, QWORD PTR [rax+r12]
	jne	SHORT $LN34@ForInitAnd
	cmp	BYTE PTR [rcx-1], 39			; 00000027H
	je	SHORT $LN34@ForInitAnd
	cmp	BYTE PTR [rcx+1], 39			; 00000027H
	je	SHORT $LN34@ForInitAnd
	test	r15d, r15d
	je	SHORT $LN34@ForInitAnd
	mov	al, 40					; 00000028H
	npad	6
$LL12@ForInitAnd:

; 968  :         for (; buff[b] && buff[b] != ')'; b++, a++){

	cmp	al, 41					; 00000029H
	je	SHORT $LN11@ForInitAnd
	inc	rcx

; 969  :           init[a] = buff[b];

	mov	BYTE PTR init$[rbp+rdx-256], al
	inc	r15d
	inc	rdx
	movzx	eax, BYTE PTR [rcx]
	test	al, al
	jne	SHORT $LL12@ForInitAnd
$LN11@ForInitAnd:

; 970  :         }
; 971  :         if (buff[b] == ')' && buff[b - 1] != 39 && buff[b + 1] != 39){

	movsxd	rax, r15d
	cmp	BYTE PTR [rax+r12], 41			; 00000029H
	jne	SHORT $LN35@ForInitAnd
	cmp	BYTE PTR [rax+r12-1], 39		; 00000027H
	je	SHORT $LN35@ForInitAnd
	cmp	BYTE PTR [rax+r12+1], 39		; 00000027H
	je	SHORT $LN35@ForInitAnd

; 972  :           init[a] = buff[b];
; 973  :           b++;

	inc	r15d
	mov	BYTE PTR init$[rbp+rdx-256], 41		; 00000029H

; 974  :           a++;

	inc	rdx
$LN35@ForInitAnd:

; 975  :         }
; 976  :         brct = TRUE;

	mov	sil, 1
$LN34@ForInitAnd:

; 977  :       }
; 978  :       init[a] = NULLC;
; 979  :       b++;

	inc	r15d
	mov	BYTE PTR init$[rbp+rdx-256], 0
	cmp	bl, 47					; 0000002fH
	ja	$LN398@ForInitAnd
	movsx	rax, bl
	bt	r9, rax
	jae	$LN398@ForInitAnd

; 980  :       //we finished with init
; 981  :       //is operator devision, multiplication or mod
; 982  :       if (op[0] == '/' || op[0] == '*' || op[0] == '%') {
; 983  :         Tokenize(param, 0, tokenarray, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR param$[rbp-256]
	mov	r8, r13
	xor	edx, edx
	call	Tokenize

; 984  :         if (strcmpi(param, reax) && strcmpi(init, reax)){ //param not rax init not rax?    

	lea	rdx, OFFSET FLAT:reax
	lea	rcx, QWORD PTR param$[rbp-256]
	call	strcmpi
	test	eax, eax
	je	$LN39@ForInitAnd
	lea	rdx, OFFSET FLAT:reax
	lea	rcx, QWORD PTR init$[rbp-256]
	call	strcmpi
	test	eax, eax
	je	$LN39@ForInitAnd

; 985  :           if (tokenarray[0].token == T_REG){			//is param register              

	movzx	eax, BYTE PTR [r13]
	cmp	al, 2
	jne	$LN41@ForInitAnd

; 986  :             if (strcmpi(param, recx)){				//make sure that param is not rcx

	lea	rdx, OFFSET FLAT:recx
	lea	rcx, QWORD PTR param$[rbp-256]
	call	strcmpi
	test	eax, eax
	je	$LN43@ForInitAnd

; 987  :               WriteAsmLine(" mov  ", reax, param);				// MOV RAX,param

	xor	ecx, ecx
	lea	rdx, OFFSET FLAT:__ImageBase
	npad	13
$LL157@ForInitAnd:
	movzx	eax, BYTE PTR $SG11384[rcx+rdx]
	mov	BYTE PTR codebuff$22[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL157@ForInitAnd
	lea	rcx, QWORD PTR codebuff$22[rsp]
	dec	rcx
	npad	4
$LL552@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL552@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:reax
	npad	13
$LL553@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL553@ForInitAnd
	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$22[rsp]
	dec	rcx
	npad	1
$LL550@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL550@ForInitAnd
	xor	edx, edx
	lea	r8, OFFSET FLAT:$SG11318
	npad	13
$LL551@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL551@ForInitAnd
	lea	rcx, QWORD PTR codebuff$22[rsp]
	dec	rcx
	npad	8
$LL548@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL548@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL549@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL549@ForInitAnd
	lea	rcx, QWORD PTR codebuff$22[rsp]
	call	AddLineQueue
$LN43@ForInitAnd:

; 988  :             }						if (op[0] == '/' || op[0] == '%'){

	cmp	bl, 47					; 0000002fH
	je	SHORT $LN45@ForInitAnd
	cmp	bl, 37					; 00000025H
	jne	SHORT $LN44@ForInitAnd
$LN45@ForInitAnd:

; 989  :               strcpy(codebuff, " cdq ");			//extend to RDX if division	

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	3
$LL130@ForInitAnd:
	movzx	eax, BYTE PTR $SG11387[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL130@ForInitAnd

; 990  :               AddLineQueue(codebuff);

	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue
$LN44@ForInitAnd:

; 991  :             }
; 992  :             Tokenize(init, 0, tokenarray, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR init$[rbp-256]
	mov	r8, r13
	xor	edx, edx
	call	Tokenize

; 993  :             if (tokenarray[0].token == T_NUM){      //is init number? 

	cmp	BYTE PTR [r13], 10
	jne	$LN46@ForInitAnd

; 994  :               WriteAsmLine(" mov  ", recx, init);        //MOV RCX,init

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	3
$LL160@ForInitAnd:
	movzx	eax, BYTE PTR $SG11390[rcx+r12]
	mov	BYTE PTR codebuff$21[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL160@ForInitAnd
	lea	rcx, QWORD PTR codebuff$21[rsp]
	dec	rcx
	npad	3
$LL546@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL546@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:recx
	npad	13
$LL547@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL547@ForInitAnd
	lea	rcx, QWORD PTR codebuff$21[rsp]
	dec	rcx
	npad	8
$LL544@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL544@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:$SG11318
	npad	13
$LL545@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL545@ForInitAnd
	lea	rcx, QWORD PTR codebuff$21[rsp]
	dec	rcx
	npad	8
$LL542@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL542@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL543@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL543@ForInitAnd
	lea	rcx, QWORD PTR codebuff$21[rsp]
	call	AddLineQueue

; 995  :               if (op[0] == '/' || op[0] == '%')

	cmp	bl, 47					; 0000002fH
	je	SHORT $LN50@ForInitAnd
	cmp	bl, 37					; 00000025H
	je	SHORT $LN50@ForInitAnd

; 997  :               else strcpy(codebuff, " imul ");		//IMUL RCX        

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	3
$LL132@ForInitAnd:
	movzx	eax, BYTE PTR $SG11395[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL132@ForInitAnd
	jmp	SHORT $LN566@ForInitAnd
$LN50@ForInitAnd:

; 996  :                 strcpy(codebuff, " idiv ");		//IDIV RCX        

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
$LL131@ForInitAnd:
	movzx	eax, BYTE PTR $SG11394[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL131@ForInitAnd
$LN566@ForInitAnd:
	mov	r12, QWORD PTR buff$[rbp-256]

; 998  :               strcat(codebuff, recx);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
$LL540@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL540@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:recx
	npad	10
$LL541@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL541@ForInitAnd

; 999  :               AddLineQueue(codebuff);
; 1000 :               goto cont;

	jmp	$LN567@ForInitAnd
$LN46@ForInitAnd:

; 1001 :             }
; 1002 :             else {
; 1003 :               if (op[0] == '/' || op[0] == '%') //it is a variable

	cmp	bl, 47					; 0000002fH
	je	SHORT $LN53@ForInitAnd
	cmp	bl, 37					; 00000025H
	je	SHORT $LN53@ForInitAnd

; 1005 :               else strcpy(codebuff, " imul ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	8
$LL134@ForInitAnd:
	movzx	eax, BYTE PTR $SG11400[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL134@ForInitAnd
	mov	r12, QWORD PTR buff$[rbp-256]
	jmp	SHORT $LN52@ForInitAnd
$LN53@ForInitAnd:

; 1004 :                 strcpy(codebuff, " idiv ");

	xor	ecx, ecx
	lea	r13, OFFSET FLAT:__ImageBase
	npad	9
$LL133@ForInitAnd:
	movzx	eax, BYTE PTR $SG11399[rcx+r13]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL133@ForInitAnd
	mov	r13, QWORD PTR tokenarray$[rbp-256]
$LN52@ForInitAnd:

; 1006 :               strcat(codebuff, init);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
$LL538@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL538@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	10
$LL539@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL539@ForInitAnd

; 1007 :               AddLineQueue(codebuff);
; 1008 :               goto cont;

	jmp	$LN568@ForInitAnd
$LN41@ForInitAnd:

; 1009 :             }
; 1010 :           }
; 1011 :           //if param is a variable
; 1012 :           else if (tokenarray[0].token == T_ID){		 //YES             

	cmp	al, 8
	jne	$LN561@ForInitAnd

; 1013 :             WriteAsmLine(" mov  ", recx, init);        //MOV RCX,init

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	10
$LL163@ForInitAnd:
	movzx	eax, BYTE PTR $SG11402[rcx+r12]
	mov	BYTE PTR codebuff$20[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL163@ForInitAnd
	lea	rcx, QWORD PTR codebuff$20[rsp]
	dec	rcx
	npad	3
$LL536@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL536@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:recx
	npad	13
$LL537@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL537@ForInitAnd
	lea	rcx, QWORD PTR codebuff$20[rsp]
	dec	rcx
	npad	8
$LL534@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL534@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:$SG11318
	npad	13
$LL535@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL535@ForInitAnd
	lea	rcx, QWORD PTR codebuff$20[rsp]
	dec	rcx
	npad	8
$LL532@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL532@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL533@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL533@ForInitAnd
	lea	rcx, QWORD PTR codebuff$20[rsp]
	call	AddLineQueue

; 1014 :             WriteAsmLine(" mov  ", reax, param);		// MOV RAX,param

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
$LL166@ForInitAnd:
	movzx	eax, BYTE PTR $SG11403[rcx+r12]
	mov	BYTE PTR codebuff$19[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL166@ForInitAnd
	lea	rcx, QWORD PTR codebuff$19[rsp]
	dec	rcx
$LL530@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL530@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:reax
	npad	13
$LL531@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL531@ForInitAnd
	lea	rcx, QWORD PTR codebuff$19[rsp]
	dec	rcx
	npad	8
$LL528@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL528@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:$SG11318
	npad	13
$LL529@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL529@ForInitAnd
	lea	rcx, QWORD PTR codebuff$19[rsp]
	dec	rcx
	npad	8
$LL526@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL526@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL527@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL527@ForInitAnd
	lea	rcx, QWORD PTR codebuff$19[rsp]
	call	AddLineQueue

; 1015 :             if (op[0] == '/' || op[0] == '%'){

	cmp	bl, 47					; 0000002fH
	je	SHORT $LN57@ForInitAnd
	cmp	bl, 37					; 00000025H
	je	SHORT $LN57@ForInitAnd

; 1019 :             }
; 1020 :             else strcpy(codebuff, " imul ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	3
$LL137@ForInitAnd:
	movzx	eax, BYTE PTR $SG11409[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL137@ForInitAnd
	jmp	SHORT $LN569@ForInitAnd
$LN57@ForInitAnd:

; 1016 :               strcpy(codebuff, " cdq ");

	xor	ecx, ecx
	lea	r13, OFFSET FLAT:__ImageBase
$LL135@ForInitAnd:
	movzx	eax, BYTE PTR $SG11407[rcx+r13]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL135@ForInitAnd

; 1017 :               AddLineQueue(codebuff);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1018 :               strcpy(codebuff, " idiv ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	9
$LL136@ForInitAnd:
	movzx	eax, BYTE PTR $SG11408[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL136@ForInitAnd
$LN569@ForInitAnd:
	mov	r12, QWORD PTR buff$[rbp-256]

; 1021 :             strcat(codebuff, recx);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
$LL524@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL524@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:recx
	npad	10
$LL525@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL525@ForInitAnd
$LN567@ForInitAnd:
	mov	r13, QWORD PTR tokenarray$[rbp-256]
$LN568@ForInitAnd:

; 1022 :             AddLineQueue(codebuff);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue
$cont$577:

; 1023 :           cont:
; 1024 :             if (op[0] == '%') {
; 1025 :               WriteAsmLine(" mov  ", param, redx);

	xor	ecx, ecx
	cmp	bl, 37					; 00000025H
	lea	rbx, OFFSET FLAT:__ImageBase
	jne	$LL172@ForInitAnd
	npad	14
$LL169@ForInitAnd:
	movzx	eax, BYTE PTR $SG11412[rcx+rbx]
	mov	BYTE PTR codebuff$18[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL169@ForInitAnd
	lea	rcx, QWORD PTR codebuff$18[rsp]
	dec	rcx
	npad	4
$LL522@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL522@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL523@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL523@ForInitAnd
	lea	rcx, QWORD PTR codebuff$18[rsp]
	dec	rcx
	npad	8
$LL520@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL520@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL521@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL521@ForInitAnd
	lea	rcx, QWORD PTR codebuff$18[rsp]
	dec	rcx
	npad	9
$LL518@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL518@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:redx
	npad	13
$LL519@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL519@ForInitAnd
	mov	r13, QWORD PTR tokenarray$[rbp-256]
	lea	rcx, QWORD PTR codebuff$18[rsp]
	call	AddLineQueue

; 1026 :               goto skip;

	jmp	$skip$578
	npad	11

; 1027 :             }
; 1028 :             else {
; 1029 :               WriteAsmLine(" mov  ", param, reax);

$LL172@ForInitAnd:
	movzx	eax, BYTE PTR $SG11413[rcx+rbx]
	mov	BYTE PTR codebuff$17[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL172@ForInitAnd
	lea	rcx, QWORD PTR codebuff$17[rsp]
	dec	rcx
	npad	4
$LL516@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL516@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL517@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL517@ForInitAnd
	lea	rcx, QWORD PTR codebuff$17[rsp]
	dec	rcx
	npad	8
$LL514@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL514@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL515@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL515@ForInitAnd
	lea	rcx, QWORD PTR codebuff$17[rsp]
	dec	rcx
	npad	9
$LL512@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL512@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:reax
	npad	13
$LL513@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL513@ForInitAnd
	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$17[rsp]
	call	AddLineQueue

; 1030 :               goto skip;

	jmp	$skip$578
$LN39@ForInitAnd:

; 1031 :             }
; 1032 :           }
; 1033 :         }
; 1034 :         // if param is not RAX and init is RCX
; 1035 :         else if ((strcmpi(param, reax) && !(strcmpi(init, recx)))){

	lea	rdx, OFFSET FLAT:reax
	lea	rcx, QWORD PTR param$[rbp-256]
	call	strcmpi
	test	eax, eax
	je	$LN60@ForInitAnd
	lea	rdx, OFFSET FLAT:recx
	lea	rcx, QWORD PTR init$[rbp-256]
	call	strcmpi
	test	eax, eax
	jne	$LN60@ForInitAnd

; 1036 :           if (op[0] == '/' || op[0] == '%'){

	cmp	bl, 47					; 0000002fH
	je	SHORT $LN64@ForInitAnd
	cmp	bl, 37					; 00000025H
	je	SHORT $LN64@ForInitAnd

; 1040 :           }
; 1041 :           else strcpy(codebuff, " imul ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	2
$LL140@ForInitAnd:
	movzx	eax, BYTE PTR $SG11421[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL140@ForInitAnd
	jmp	SHORT $LN570@ForInitAnd
$LN64@ForInitAnd:

; 1037 :             strcpy(codebuff, " cdq ");

	xor	ecx, ecx
	lea	r13, OFFSET FLAT:__ImageBase
$LL138@ForInitAnd:
	movzx	eax, BYTE PTR $SG11419[rcx+r13]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL138@ForInitAnd

; 1038 :             AddLineQueue(codebuff);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1039 :             strcpy(codebuff, " idiv ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	9
$LL139@ForInitAnd:
	movzx	eax, BYTE PTR $SG11420[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL139@ForInitAnd
$LN570@ForInitAnd:
	mov	r12, QWORD PTR buff$[rbp-256]

; 1042 :           strcat(codebuff, recx);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
$LL510@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL510@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:recx
	npad	10
$LL511@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL511@ForInitAnd

; 1043 :           AddLineQueue(codebuff);

	mov	r13, QWORD PTR tokenarray$[rbp-256]
	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1044 :           if (op[0] == '%') WriteAsmLine(" mov  ", param, redx);

	cmp	bl, 37					; 00000025H
	jne	$skip$578
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	15
$LL175@ForInitAnd:
	movzx	eax, BYTE PTR $SG11423[rcx+rbx]
	mov	BYTE PTR codebuff$16[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL175@ForInitAnd
	lea	rcx, QWORD PTR codebuff$16[rsp]
	dec	rcx
	npad	4
$LL508@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL508@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL509@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL509@ForInitAnd
	lea	rcx, QWORD PTR codebuff$16[rsp]
	dec	rcx
	npad	8
$LL506@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL506@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL507@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL507@ForInitAnd
	lea	rcx, QWORD PTR codebuff$16[rsp]
	dec	rcx
	npad	9
$LL504@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL504@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:redx
	npad	13
$LL505@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL505@ForInitAnd
	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$16[rsp]
	call	AddLineQueue

; 1045 :           goto skip;

	jmp	$skip$578
$LN60@ForInitAnd:

; 1046 :         }
; 1047 :         // if param is RAX and init is RCX
; 1048 :         else if ((!(strcmpi(param, reax)) && (!(strcmp(init, recx))))){

	lea	rdx, OFFSET FLAT:reax
	lea	rcx, QWORD PTR param$[rbp-256]
	call	strcmpi
	test	eax, eax
	jne	$LN66@ForInitAnd
	lea	r9, OFFSET FLAT:recx
	mov	r8, r9
	lea	rax, QWORD PTR init$[rbp-256]
	sub	r8, rax
$LL502@ForInitAnd:
	movzx	edx, BYTE PTR [rax]
	movzx	ecx, BYTE PTR [rax+r8]
	sub	edx, ecx
	jne	SHORT $LN503@ForInitAnd
	inc	rax
	test	ecx, ecx
	jne	SHORT $LL502@ForInitAnd
$LN503@ForInitAnd:
	test	edx, edx
	jne	$LN66@ForInitAnd

; 1049 :           if (op[0] == '/' || op[0] == '%'){

	cmp	bl, 47					; 0000002fH
	je	SHORT $LN70@ForInitAnd
	cmp	bl, 37					; 00000025H
	je	SHORT $LN70@ForInitAnd

; 1053 :           }
; 1054 :           else strcpy(codebuff, " imul ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
$LL143@ForInitAnd:
	movzx	eax, BYTE PTR $SG11431[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL143@ForInitAnd
	jmp	SHORT $LN571@ForInitAnd
$LN70@ForInitAnd:

; 1050 :             strcpy(codebuff, " cdq ");

	xor	ecx, ecx
	lea	r13, OFFSET FLAT:__ImageBase
$LL141@ForInitAnd:
	movzx	eax, BYTE PTR $SG11429[rcx+r13]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL141@ForInitAnd

; 1051 :             AddLineQueue(codebuff);

	mov	r13, QWORD PTR tokenarray$[rbp-256]
	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1052 :             strcpy(codebuff, " idiv ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
$LL142@ForInitAnd:
	movzx	eax, BYTE PTR $SG11430[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL142@ForInitAnd
	lea	r9, OFFSET FLAT:recx
$LN571@ForInitAnd:
	mov	r12, QWORD PTR buff$[rbp-256]

; 1055 :           strcat(codebuff, recx);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
	npad	6
$LL500@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL500@ForInitAnd
	xor	edx, edx
	npad	4
$LL501@ForInitAnd:
	movzx	eax, BYTE PTR [r9+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL501@ForInitAnd

; 1056 :           AddLineQueue(codebuff);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1057 :           if (op[0] == '%') WriteAsmLine(" mov  ", param, redx);

	cmp	bl, 37					; 00000025H
	jne	$skip$578
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	6
$LL178@ForInitAnd:
	movzx	eax, BYTE PTR $SG11433[rcx+rbx]
	mov	BYTE PTR codebuff$15[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL178@ForInitAnd
	lea	rcx, QWORD PTR codebuff$15[rsp]
	dec	rcx
	npad	4
$LL498@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL498@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL499@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL499@ForInitAnd
	lea	rcx, QWORD PTR codebuff$15[rsp]
	dec	rcx
	npad	8
$LL496@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL496@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL497@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL497@ForInitAnd
	lea	rcx, QWORD PTR codebuff$15[rsp]
	dec	rcx
	npad	9
$LL494@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL494@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:redx
	npad	13
$LL495@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL495@ForInitAnd
	mov	r13, QWORD PTR tokenarray$[rbp-256]
	lea	rcx, QWORD PTR codebuff$15[rsp]
	call	AddLineQueue

; 1058 :           goto skip;

	jmp	$skip$578
$LN66@ForInitAnd:

; 1059 :         }
; 1060 :         // if param is RAX and init is not RCX
; 1061 :         else if (!(strcmpi(param, reax) && (strcmpi(init, recx)))){

	lea	rdx, OFFSET FLAT:reax
	lea	rcx, QWORD PTR param$[rbp-256]
	call	strcmpi
	test	eax, eax
	je	SHORT $LN73@ForInitAnd
	lea	rdx, OFFSET FLAT:recx
	lea	rcx, QWORD PTR init$[rbp-256]
	call	strcmpi
	test	eax, eax
	jne	$LN561@ForInitAnd
$LN73@ForInitAnd:

; 1062 :           WriteAsmLine(" mov  ", recx, init);        //MOV RCX,init

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
$LL181@ForInitAnd:
	movzx	eax, BYTE PTR $SG11436[rcx+r12]
	mov	BYTE PTR codebuff$14[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL181@ForInitAnd
	lea	rcx, QWORD PTR codebuff$14[rsp]
	dec	rcx
	npad	3
$LL492@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL492@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:recx
	npad	13
$LL493@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL493@ForInitAnd
	lea	rcx, QWORD PTR codebuff$14[rsp]
	dec	rcx
	npad	8
$LL490@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL490@ForInitAnd
	xor	edx, edx
	lea	r13, OFFSET FLAT:$SG11318
	npad	13
$LL491@ForInitAnd:
	movzx	eax, BYTE PTR [rdx+r13]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL491@ForInitAnd
	mov	r13, QWORD PTR tokenarray$[rbp-256]
	lea	rcx, QWORD PTR codebuff$14[rsp]
	dec	rcx
	npad	1
$LL488@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL488@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL489@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL489@ForInitAnd
	lea	rcx, QWORD PTR codebuff$14[rsp]
	call	AddLineQueue

; 1063 :           if (op[0] == '/' || op[0] == '%'){

	cmp	bl, 47					; 0000002fH
	je	SHORT $LN76@ForInitAnd
	cmp	bl, 37					; 00000025H
	je	SHORT $LN76@ForInitAnd

; 1067 :           }
; 1068 :           else strcpy(codebuff, " imul ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	3
$LL146@ForInitAnd:
	movzx	eax, BYTE PTR $SG11442[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL146@ForInitAnd
	jmp	SHORT $LN75@ForInitAnd
$LN76@ForInitAnd:

; 1064 :             strcpy(codebuff, " cdq ");

	xor	ecx, ecx
	lea	r13, OFFSET FLAT:__ImageBase
$LL144@ForInitAnd:
	movzx	eax, BYTE PTR $SG11440[rcx+r13]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL144@ForInitAnd

; 1065 :             AddLineQueue(codebuff);

	mov	r13, QWORD PTR tokenarray$[rbp-256]
	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1066 :             strcpy(codebuff, " idiv ");

	xor	ecx, ecx
	lea	r12, OFFSET FLAT:__ImageBase
	npad	2
$LL145@ForInitAnd:
	movzx	eax, BYTE PTR $SG11441[rcx+r12]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL145@ForInitAnd
$LN75@ForInitAnd:

; 1069 :           strcat(codebuff, recx);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
	npad	4
$LL486@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL486@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:recx
	npad	13
$LL487@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL487@ForInitAnd

; 1070 :           AddLineQueue(codebuff);

	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1071 :           if (op[0] == '%') WriteAsmLine(" mov  ", param, redx);

	cmp	bl, 37					; 00000025H
	jne	$skip$578
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	15
$LL184@ForInitAnd:
	movzx	eax, BYTE PTR $SG11444[rcx+rbx]
	mov	BYTE PTR codebuff$13[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL184@ForInitAnd
	lea	rcx, QWORD PTR codebuff$13[rsp]
	dec	rcx
	npad	4
$LL484@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL484@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL485@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL485@ForInitAnd
	lea	rcx, QWORD PTR codebuff$13[rsp]
	dec	rcx
	npad	8
$LL482@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL482@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL483@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL483@ForInitAnd
	lea	rcx, QWORD PTR codebuff$13[rsp]
	dec	rcx
	npad	9
$LL480@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL480@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:redx
	npad	13
$LL481@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL481@ForInitAnd
	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$13[rsp]
	call	AddLineQueue

; 1072 :           goto skip;

	jmp	$skip$578
$LN398@ForInitAnd:

; 1073 :         }
; 1074 :       }
; 1075 :       //if operator not devision, multiplication or mod
; 1076 :       else if (op[0] == '-') strcpy(codebuff, " sub ");

	cmp	bl, 45					; 0000002dH
	jne	SHORT $LN78@ForInitAnd
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	13
$LL147@ForInitAnd:
	movzx	eax, BYTE PTR $SG11447[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL147@ForInitAnd
	jmp	$LN72@ForInitAnd
$LN78@ForInitAnd:

; 1077 :       else if (op[0] == '+') strcpy(codebuff, " add ");

	cmp	bl, 43					; 0000002bH
	jne	SHORT $LN80@ForInitAnd
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	9
$LL148@ForInitAnd:
	movzx	eax, BYTE PTR $SG11450[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL148@ForInitAnd
	jmp	$LN72@ForInitAnd
$LN80@ForInitAnd:

; 1078 :       else if (op[0] == '&') strcpy(codebuff, " and ");

	cmp	bl, 38					; 00000026H
	jne	SHORT $LN82@ForInitAnd
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	9
$LL149@ForInitAnd:
	movzx	eax, BYTE PTR $SG11453[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL149@ForInitAnd
	jmp	$LN72@ForInitAnd
$LN82@ForInitAnd:

; 1079 :       else if (op[0] == '|') strcpy(codebuff, " or ");

	cmp	bl, 124					; 0000007cH
	jne	SHORT $LN84@ForInitAnd
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	9
$LL150@ForInitAnd:
	movzx	eax, BYTE PTR $SG11456[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL150@ForInitAnd
	jmp	$LN72@ForInitAnd
$LN84@ForInitAnd:

; 1080 :       else if (op[0] == '^') strcpy(codebuff, " xor ");

	cmp	bl, 94					; 0000005eH
	jne	SHORT $LN86@ForInitAnd
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	9
$LL151@ForInitAnd:
	movzx	eax, BYTE PTR $SG11459[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL151@ForInitAnd
	jmp	SHORT $LN72@ForInitAnd
$LN86@ForInitAnd:

; 1081 :       else if (op[0] == '<' && op[1] == '<') strcpy(codebuff, " shl ");

	cmp	bl, 60					; 0000003cH
	jne	SHORT $LN88@ForInitAnd
	lea	rbx, OFFSET FLAT:__ImageBase
	cmp	r8b, 60					; 0000003cH
	jne	SHORT $LN72@ForInitAnd
	xor	ecx, ecx
	npad	6
$LL152@ForInitAnd:
	movzx	eax, BYTE PTR $SG11462[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL152@ForInitAnd
	jmp	SHORT $LN72@ForInitAnd
$LN88@ForInitAnd:

; 1082 :       else if (op[0] == '>' && op[1] == '>') strcpy(codebuff, " shr ");

	cmp	bl, 62					; 0000003eH
	jne	SHORT $LN561@ForInitAnd
	lea	rbx, OFFSET FLAT:__ImageBase
	cmp	r8b, 62					; 0000003eH
	jne	SHORT $LN72@ForInitAnd
	xor	ecx, ecx
	npad	6
$LL153@ForInitAnd:
	movzx	eax, BYTE PTR $SG11464[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL153@ForInitAnd
	jmp	SHORT $LN72@ForInitAnd
$LN561@ForInitAnd:
	lea	rbx, OFFSET FLAT:__ImageBase
$LN72@ForInitAnd:

; 1083 :       Tokenize(init, 0, tokenarray, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR init$[rbp-256]
	mov	r8, r13
	xor	edx, edx
	call	Tokenize
	movzx	eax, BYTE PTR [r13]
	sub	al, 2
	test	al, 246					; 000000f6H
	je	$simple$579

; 1084 :       if (tokenarray[0].token == T_REG || tokenarray[0].token == T_NUM || tokenarray[0].token == T_FLOAT || tokenarray[0].token == T_DIRECTIVE)
; 1085 :         goto simple;
; 1086 :       Tokenize(param, 0, tokenarray, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR param$[rbp-256]
	mov	r8, r13
	xor	edx, edx
	call	Tokenize

; 1087 :       if (tokenarray[0].token == T_REG){

	cmp	BYTE PTR [r13], 2
	je	$simple$579

; 1137 :       else
; 1138 :       {
; 1139 :         if (init[0] == 39 && init[2] == 39)

	cmp	BYTE PTR init$[rbp-256], 39		; 00000027H
	jne	$LN124@ForInitAnd
	cmp	BYTE PTR init$[rbp-254], 39		; 00000027H
	jne	$LN124@ForInitAnd

; 1140 :           WriteAsmLine(" mov  byte ptr ", param, init);

	xor	ecx, ecx
	npad	5
$LL214@ForInitAnd:
	movzx	eax, BYTE PTR $SG11519[rcx+rbx]
	mov	BYTE PTR codebuff$3[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL214@ForInitAnd
	lea	rcx, QWORD PTR codebuff$3[rsp]
	dec	rcx
	npad	4
$LL478@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL478@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL479@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL479@ForInitAnd
	lea	rcx, QWORD PTR codebuff$3[rsp]
	dec	rcx
	npad	8
$LL476@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL476@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL477@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL477@ForInitAnd
	lea	rcx, QWORD PTR codebuff$3[rsp]
	dec	rcx
	npad	9
$LL474@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL474@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL475@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL475@ForInitAnd
	lea	rcx, QWORD PTR codebuff$3[rsp]
	call	AddLineQueue
	jmp	$skip$578
$LN124@ForInitAnd:

; 1141 :         else {
; 1142 :           WriteAsmLine(" mov  ", reax, init);

	xor	ecx, ecx
$LL217@ForInitAnd:
	movzx	eax, BYTE PTR $SG11520[rcx+rbx]
	mov	BYTE PTR codebuff$2[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL217@ForInitAnd
	lea	rcx, QWORD PTR codebuff$2[rsp]
	dec	rcx
	npad	4
$LL472@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL472@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:reax
	npad	13
$LL473@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL473@ForInitAnd
	lea	rcx, QWORD PTR codebuff$2[rsp]
	dec	rcx
	npad	8
$LL470@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL470@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL471@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL471@ForInitAnd
	lea	rcx, QWORD PTR codebuff$2[rsp]
	dec	rcx
	npad	9
$LL468@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL468@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL469@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL469@ForInitAnd
	lea	rcx, QWORD PTR codebuff$2[rsp]
	call	AddLineQueue

; 1143 :           WriteAsmLine(codebuff, param, reax);

	xor	ecx, ecx
	npad	4
$LL220@ForInitAnd:
	movzx	eax, BYTE PTR codebuff$[rbp+rcx-256]
	mov	BYTE PTR codebuff$1[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL220@ForInitAnd
	lea	rcx, QWORD PTR codebuff$1[rsp]
	dec	rcx
	npad	7
$LL466@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL466@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL467@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL467@ForInitAnd
	lea	rcx, QWORD PTR codebuff$1[rsp]
	dec	rcx
	npad	8
$LL464@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL464@ForInitAnd
	xor	edx, edx
	npad	4
$LL465@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL465@ForInitAnd
	lea	rcx, QWORD PTR codebuff$1[rsp]
	dec	rcx
	npad	9
$LL462@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL462@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:reax
	npad	13
$LL463@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL463@ForInitAnd
	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$1[rsp]
	call	AddLineQueue
	jmp	$skip$578
$simple$579:

; 1088 :       simple:			Tokenize(param, 0, tokenarray, 0);

	xor	r9d, r9d
	lea	rcx, QWORD PTR param$[rbp-256]
	mov	r8, r13
	xor	edx, edx
	call	Tokenize

; 1089 : 
; 1090 :         if (strlen(init) == 1 && init[0] == '0')                        //REX=0?

	lea	rax, QWORD PTR init$[rbp-256]
	or	rcx, -1
$LL461@ForInitAnd:
	inc	rcx
	cmp	BYTE PTR [rax+rcx], 0
	jne	SHORT $LL461@ForInitAnd
	cmp	rcx, 1
	jne	$LN95@ForInitAnd
	cmp	BYTE PTR init$[rbp-256], 48		; 00000030H
	jne	$LN95@ForInitAnd

; 1091 :           WriteAsmLine(" xor  ", param, param);							            //XOR REX,REX //instead MOV REX,0				

	xor	ecx, ecx
	npad	10
$LL187@ForInitAnd:
	movzx	eax, BYTE PTR $SG11471[rcx+rbx]
	mov	BYTE PTR codebuff$12[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL187@ForInitAnd
	lea	rcx, QWORD PTR codebuff$12[rsp]
	dec	rcx
	npad	4
$LL459@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL459@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL460@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL460@ForInitAnd
	lea	rcx, QWORD PTR codebuff$12[rsp]
	dec	rcx
	npad	8
$LL457@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL457@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL458@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL458@ForInitAnd
	lea	rcx, QWORD PTR codebuff$12[rsp]
	dec	rcx
	npad	9
$LL455@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL455@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL456@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL456@ForInitAnd
	lea	rcx, QWORD PTR codebuff$12[rsp]
	call	AddLineQueue
	jmp	$skip$578
$LN95@ForInitAnd:

; 1092 :         else if ((strlen(op) == 1) && ((init[4] == ' ') || (init[4] == '\t'))){  //op is '='

	lea	rdx, QWORD PTR op$[rbp-256]
	or	rax, -1
	npad	7
$LL454@ForInitAnd:
	inc	rax
	cmp	BYTE PTR [rdx+rax], 0
	jne	SHORT $LL454@ForInitAnd
	cmp	rax, 1
	jne	$LN122@ForInitAnd
	movzx	edx, BYTE PTR init$[rbp-252]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN99@ForInitAnd
	cmp	dl, 9
	jne	$LN97@ForInitAnd
$LN99@ForInitAnd:

; 1093 :           if ((0 == _memicmp(init, "BYTE PTR", 8)) ||                   //reax=BYTE PTR al 
; 1094 :             (0 == _memicmp(init, "BPTR", 4)) ||
; 1095 :             (0 == _memicmp(init, "WPTR", 4)) ||

	mov	r8d, 8
	lea	rdx, OFFSET FLAT:$SG11478
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	je	$LN102@ForInitAnd
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG11479
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	je	$LN102@ForInitAnd
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG11480
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	je	$LN102@ForInitAnd
	mov	r8d, 8
	lea	rdx, OFFSET FLAT:$SG11481
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	je	$LN102@ForInitAnd

; 1099 :           else if (0 == _memicmp(init, "ADDR", 4))

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG11485
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN103@ForInitAnd

; 1100 :             WriteAsmLine(" lea  ", param, init + 5);

	lea	r8, QWORD PTR init$[rbp-251]
	lea	rdx, QWORD PTR param$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11486
	call	WriteAsmLine
	jmp	$skip$578
$LN103@ForInitAnd:

; 1101 :           else WriteAsmLine(" mov  ", param, init);

	xor	ecx, ecx
	npad	6
$LL193@ForInitAnd:
	movzx	eax, BYTE PTR $SG11487[rcx+rbx]
	mov	BYTE PTR codebuff$10[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL193@ForInitAnd
	lea	rcx, QWORD PTR codebuff$10[rsp]
	dec	rcx
	npad	4
$LL452@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL452@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL453@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL453@ForInitAnd
	lea	rcx, QWORD PTR codebuff$10[rsp]
	dec	rcx
	npad	8
$LL450@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL450@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL451@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL451@ForInitAnd
	lea	rcx, QWORD PTR codebuff$10[rsp]
	dec	rcx
	npad	9
$LL448@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL448@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL449@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL449@ForInitAnd
	lea	rcx, QWORD PTR codebuff$10[rsp]
	call	AddLineQueue
	jmp	$skip$578
$LN102@ForInitAnd:

; 1096 :             (0 == _memicmp(init, "WORD PTR", 8)))                     //reax=WORD PTR ax 
; 1097 : 
; 1098 :             WriteAsmLine(" movzx  ", param, init);                      //movzx reax,ax					    

	xor	ecx, ecx
$LL190@ForInitAnd:
	movzx	eax, BYTE PTR $SG11482[rcx+rbx]
	mov	BYTE PTR codebuff$11[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL190@ForInitAnd
	lea	rcx, QWORD PTR codebuff$11[rsp]
	dec	rcx
	npad	4
$LL446@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL446@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL447@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL447@ForInitAnd
	lea	rcx, QWORD PTR codebuff$11[rsp]
	dec	rcx
	npad	8
$LL444@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL444@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL445@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL445@ForInitAnd
	lea	rcx, QWORD PTR codebuff$11[rsp]
	dec	rcx
	npad	9
$LL442@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL442@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL443@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL443@ForInitAnd
	lea	rcx, QWORD PTR codebuff$11[rsp]
	call	AddLineQueue

; 1102 :         }

	jmp	$skip$578
$LN97@ForInitAnd:

; 1103 :         else if ((strlen(op) == 1) && ((init[6] == ' ') || (init[6] == '\t'))){

	cmp	rax, 1
	jne	$LN122@ForInitAnd
	movzx	edx, BYTE PTR init$[rbp-250]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN107@ForInitAnd
	cmp	dl, 9
	jne	$LN105@ForInitAnd
$LN107@ForInitAnd:

; 1104 :           if (0 == _memicmp(init, "OFFSET", 6))

	mov	r8d, 6
	lea	rdx, OFFSET FLAT:$SG11493
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN108@ForInitAnd

; 1105 :             WriteAsmLine(" lea  ", param, init + 7);

	lea	r8, QWORD PTR init$[rbp-249]
	lea	rdx, QWORD PTR param$[rbp-256]
	lea	rcx, OFFSET FLAT:$SG11494
	call	WriteAsmLine
	jmp	$skip$578
$LN108@ForInitAnd:

; 1106 :           else WriteAsmLine(" mov  ", param, init);

	xor	ecx, ecx
	npad	5
$LL196@ForInitAnd:
	movzx	eax, BYTE PTR $SG11495[rcx+rbx]
	mov	BYTE PTR codebuff$9[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL196@ForInitAnd
	lea	rcx, QWORD PTR codebuff$9[rsp]
	dec	rcx
	npad	4
$LL440@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL440@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL441@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL441@ForInitAnd
	lea	rcx, QWORD PTR codebuff$9[rsp]
	dec	rcx
	npad	8
$LL438@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL438@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL439@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL439@ForInitAnd
	lea	rcx, QWORD PTR codebuff$9[rsp]
	dec	rcx
	npad	9
$LL436@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL436@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL437@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL437@ForInitAnd
	lea	rcx, QWORD PTR codebuff$9[rsp]
	call	AddLineQueue

; 1107 :         }

	jmp	$skip$578
$LN105@ForInitAnd:

; 1108 :         else if ((strlen(op) == 1) && ((init[5] == ' ') || (init[5] == '\t'))){            //op is '='

	cmp	rax, 1
	jne	$LN122@ForInitAnd
	movzx	edx, BYTE PTR init$[rbp-251]
	cmp	dl, 32					; 00000020H
	je	SHORT $LN112@ForInitAnd
	cmp	dl, 9
	jne	$LN110@ForInitAnd
$LN112@ForInitAnd:

; 1109 :           if ((0 == _memicmp(init, "DWORD PTR", 9) || 0 == _memicmp(init, "DPTR", 4)

	mov	r8d, 9
	lea	rdx, OFFSET FLAT:$SG11502
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	je	$LN116@ForInitAnd
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG11503
	lea	rcx, QWORD PTR init$[rbp-256]
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN113@ForInitAnd
	movzx	eax, BYTE PTR param$[rbp-256]
	sub	al, 82					; 00000052H
	test	al, 223					; 000000dfH
	je	$LN116@ForInitAnd
$LN113@ForInitAnd:

; 1112 :           else WriteAsmLine(" mov  ", param, init);

	xor	ecx, ecx
	npad	2
$LL202@ForInitAnd:
	movzx	eax, BYTE PTR $SG11506[rcx+rbx]
	mov	BYTE PTR codebuff$7[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL202@ForInitAnd
	lea	rcx, QWORD PTR codebuff$7[rsp]
	dec	rcx
	npad	4
$LL434@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL434@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL435@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL435@ForInitAnd
	lea	rcx, QWORD PTR codebuff$7[rsp]
	dec	rcx
	npad	8
$LL432@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL432@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL433@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL433@ForInitAnd
	lea	rcx, QWORD PTR codebuff$7[rsp]
	dec	rcx
	npad	9
$LL430@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL430@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL431@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL431@ForInitAnd
	lea	rcx, QWORD PTR codebuff$7[rsp]
	call	AddLineQueue
	jmp	$skip$578
$LN116@ForInitAnd:

; 1110 :             && (param[0] == 'r' || param[0] == 'R'))) 							   //rax=DWORD PTR eax
; 1111 :             WriteAsmLine(" movsxd  ", param, init);								     //movsxd rax,eax

	xor	ecx, ecx
$LL199@ForInitAnd:
	movzx	eax, BYTE PTR $SG11505[rcx+rbx]
	mov	BYTE PTR codebuff$8[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL199@ForInitAnd
	lea	rcx, QWORD PTR codebuff$8[rsp]
	dec	rcx
	npad	4
$LL428@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL428@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL429@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL429@ForInitAnd
	lea	rcx, QWORD PTR codebuff$8[rsp]
	dec	rcx
	npad	8
$LL426@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL426@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL427@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL427@ForInitAnd
	lea	rcx, QWORD PTR codebuff$8[rsp]
	dec	rcx
	npad	9
$LL424@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL424@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL425@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL425@ForInitAnd
	lea	rcx, QWORD PTR codebuff$8[rsp]
	call	AddLineQueue

; 1113 :         }

	jmp	$skip$578
$LN110@ForInitAnd:

; 1114 :         else if ((strlen(op) == 1) && brct){											    //op is '='

	cmp	rax, 1
	jne	$LN122@ForInitAnd
	test	sil, sil
	je	$LN117@ForInitAnd

; 1115 :           for (j = strlen(init); j; j--){

	movsxd	r8, ecx
	test	ecx, ecx
	je	SHORT $LN14@ForInitAnd
	npad	8
$LL15@ForInitAnd:
	lea	rdx, QWORD PTR init$[rbp-256]
	add	rdx, r8

; 1116 :             if (init[j] == ')') init[j] = NULLC;

	cmp	BYTE PTR [rdx], 41			; 00000029H
	jne	SHORT $LN119@ForInitAnd
	mov	BYTE PTR [rdx], 0
$LN119@ForInitAnd:

; 1117 :             if (init[j] == '('){

	cmp	BYTE PTR [rdx], 40			; 00000028H
	jne	SHORT $LN13@ForInitAnd

; 1118 :               for (p = init, p += j; *p; p++){

	mov	rcx, rdx
	mov	al, 40					; 00000028H
	npad	4
$LL18@ForInitAnd:

; 1119 :                 if (*p == ',' && cnt) --cnt;

	cmp	al, 44					; 0000002cH
	jne	SHORT $LN16@ForInitAnd
	test	r14d, r14d
	je	SHORT $LN16@ForInitAnd
	dec	r14d
$LN16@ForInitAnd:

; 1118 :               for (p = init, p += j; *p; p++){

	movzx	eax, BYTE PTR [rcx+1]
	inc	rcx
	test	al, al
	jne	SHORT $LL18@ForInitAnd

; 1120 :               }
; 1121 :               init[j] = ',';

	mov	BYTE PTR [rdx], 44			; 0000002cH
$LN13@ForInitAnd:

; 1115 :           for (j = strlen(init); j; j--){

	sub	r8, 1
	jne	SHORT $LL15@ForInitAnd
$LN14@ForInitAnd:

; 1122 :             }
; 1123 :           }
; 1124 :           strcpy(codebuff, " invoke  ");

	xor	ecx, ecx
	npad	14
$LL154@ForInitAnd:
	movzx	eax, BYTE PTR $SG11512[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL154@ForInitAnd

; 1125 :           strcat(codebuff, init);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
	npad	5
$LL422@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL422@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL423@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL423@ForInitAnd

; 1126 :           AddLineQueue(codebuff);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 1127 :           WriteAsmLine(" mov  ", param, reax);

	xor	ecx, ecx
	npad	5
$LL205@ForInitAnd:
	movzx	eax, BYTE PTR $SG11513[rcx+rbx]
	mov	BYTE PTR codebuff$6[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL205@ForInitAnd
	lea	rcx, QWORD PTR codebuff$6[rsp]
	dec	rcx
	npad	4
$LL420@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL420@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL421@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL421@ForInitAnd
	lea	rcx, QWORD PTR codebuff$6[rsp]
	dec	rcx
	npad	8
$LL418@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL418@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL419@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL419@ForInitAnd
	lea	rcx, QWORD PTR codebuff$6[rsp]
	dec	rcx
	npad	9
$LL416@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL416@ForInitAnd
	xor	edx, edx
	lea	r12, OFFSET FLAT:reax
	npad	13
$LL417@ForInitAnd:
	movzx	eax, BYTE PTR [r12+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL417@ForInitAnd
	mov	r12, QWORD PTR buff$[rbp-256]
	lea	rcx, QWORD PTR codebuff$6[rsp]
	call	AddLineQueue

; 1128 :           brct = FALSE;

	xor	sil, sil

; 1129 :         }

	jmp	$skip$578
$LN117@ForInitAnd:

; 1130 :         else {
; 1131 :           if (strlen(op) == 1)

	cmp	rax, 1
	jne	$LN122@ForInitAnd

; 1132 :             WriteAsmLine(" mov  ", param, init);

	xor	ecx, ecx
	npad	12
$LL208@ForInitAnd:
	movzx	eax, BYTE PTR $SG11516[rcx+rbx]
	mov	BYTE PTR codebuff$5[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL208@ForInitAnd
	lea	rcx, QWORD PTR codebuff$5[rsp]
	dec	rcx
	npad	4
$LL414@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL414@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL415@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL415@ForInitAnd
	lea	rcx, QWORD PTR codebuff$5[rsp]
	dec	rcx
	npad	8
$LL412@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL412@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL413@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL413@ForInitAnd
	lea	rcx, QWORD PTR codebuff$5[rsp]
	dec	rcx
	npad	9
$LL410@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL410@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL411@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL411@ForInitAnd
	lea	rcx, QWORD PTR codebuff$5[rsp]
	call	AddLineQueue
	jmp	$skip$578
$LN122@ForInitAnd:

; 1133 :           else
; 1134 :             WriteAsmLine(codebuff, param, init);

	xor	ecx, ecx
$LL211@ForInitAnd:
	movzx	eax, BYTE PTR codebuff$[rbp+rcx-256]
	mov	BYTE PTR codebuff$4[rsp+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL211@ForInitAnd
	lea	rcx, QWORD PTR codebuff$4[rsp]
	dec	rcx
	npad	7
$LL408@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL408@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL409@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL409@ForInitAnd
	lea	rcx, QWORD PTR codebuff$4[rsp]
	dec	rcx
	npad	8
$LL406@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL406@ForInitAnd
	xor	edx, edx
	lea	rbx, OFFSET FLAT:$SG11318
	npad	13
$LL407@ForInitAnd:
	movzx	eax, BYTE PTR [rbx+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL407@ForInitAnd
	lea	rcx, QWORD PTR codebuff$4[rsp]
	dec	rcx
	npad	9
$LL404@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL404@ForInitAnd
	lea	r8, QWORD PTR init$[rbp-256]
	xor	edx, edx
	npad	13
$LL405@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL405@ForInitAnd
	lea	rcx, QWORD PTR codebuff$4[rsp]
	call	AddLineQueue

; 1135 :         }
; 1136 :       }

	jmp	$skip$578
$LN23@ForInitAnd:

; 931  :       param[a] = '\0';
; 932  :       if ((buff[b] == '+') && (buff[b + 1] == '+')) strcpy(codebuff, " inc ");

	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR param$[rbp+rdi-256], 0
	cmp	al, 43					; 0000002bH
	jne	SHORT $LN24@ForInitAnd
	cmp	dl, al
	jne	SHORT $LN24@ForInitAnd
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	6
$LL128@ForInitAnd:
	movzx	eax, BYTE PTR $SG11364[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL128@ForInitAnd
	jmp	SHORT $LN26@ForInitAnd
$LN24@ForInitAnd:

; 933  :       else if ((buff[b] == '-') && (buff[b + 1] == '-')) strcpy(codebuff, " dec ");

	cmp	al, 45					; 0000002dH
	jne	SHORT $LN26@ForInitAnd
	cmp	dl, al
	jne	SHORT $LN26@ForInitAnd
	xor	ecx, ecx
	lea	rbx, OFFSET FLAT:__ImageBase
	npad	9
$LL129@ForInitAnd:
	movzx	eax, BYTE PTR $SG11366[rcx+rbx]
	mov	BYTE PTR codebuff$[rbp+rcx-256], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL129@ForInitAnd
$LN26@ForInitAnd:

; 934  :       strcat(codebuff, param);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	dec	rcx
	npad	5
$LL402@ForInitAnd:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL402@ForInitAnd
	lea	r8, QWORD PTR param$[rbp-256]
	xor	edx, edx
	npad	13
$LL403@ForInitAnd:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	inc	rdx
	test	al, al
	jne	SHORT $LL403@ForInitAnd

; 935  :       AddLineQueue(codebuff);

	lea	rcx, QWORD PTR codebuff$[rbp-256]
	call	AddLineQueue

; 936  :       b += 3;

	add	r15d, 3
$skip$578:

; 1144 :         }
; 1145 :       }
; 1146 :     }
; 1147 :   skip:
; 1148 :     if (cnt) cnt--;

	test	r14d, r14d
	je	SHORT $LN554@ForInitAnd

; 1149 :   } while (cnt);

	mov	r9, 145272973819904			; 0000842000000000H
	sub	r14d, 1
	jne	$LL4@ForInitAnd
$LN554@ForInitAnd:

; 1150 :   return(NOT_ERROR);

	xor	eax, eax

; 1151 : }

	mov	rbx, QWORD PTR [rsp+1144]
	add	rsp, 1056				; 00000420H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
ForInitAndNext ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT WriteAsmLine
_TEXT	SEGMENT
codebuff$ = 32
cmd$ = 304
s1$ = 312
s2$ = 320
WriteAsmLine PROC					; COMDAT

; 897  : static void WriteAsmLine(const char *cmd, const char *s1, const char *s2){

	sub	rsp, 296				; 00000128H

; 898  :   char codebuff[256];
; 899  :   strcpy(codebuff, cmd);

	lea	r9, QWORD PTR codebuff$[rsp]
	mov	r10, rdx
	sub	r9, rcx
	npad	14
$LL3@WriteAsmLi:
	movzx	eax, BYTE PTR [rcx]
	mov	BYTE PTR [r9+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL3@WriteAsmLi

; 900  :   strcat(codebuff, s1);

	lea	rcx, QWORD PTR codebuff$[rsp]
	dec	rcx
	npad	9
$LL11@WriteAsmLi:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL11@WriteAsmLi
	xor	edx, edx
	npad	4
$LL12@WriteAsmLi:
	movzx	eax, BYTE PTR [r10+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL12@WriteAsmLi

; 901  :   strcat(codebuff, ", ");

	lea	rcx, QWORD PTR codebuff$[rsp]
	dec	rcx
	npad	8
$LL9@WriteAsmLi:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL9@WriteAsmLi
	lea	r9, OFFSET FLAT:$SG11318
	xor	edx, edx
	npad	13
$LL10@WriteAsmLi:
	movzx	eax, BYTE PTR [r9+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL10@WriteAsmLi

; 902  :   strcat(codebuff, s2);

	lea	rcx, QWORD PTR codebuff$[rsp]
	dec	rcx
	npad	8
$LL7@WriteAsmLi:
	cmp	BYTE PTR [rcx+1], 0
	lea	rcx, QWORD PTR [rcx+1]
	jne	SHORT $LL7@WriteAsmLi
	xor	edx, edx
	npad	4
$LL8@WriteAsmLi:
	movzx	eax, BYTE PTR [r8+rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL8@WriteAsmLi

; 903  :   AddLineQueue(codebuff);				// MOV RAX,param

	lea	rcx, QWORD PTR codebuff$[rsp]
	call	AddLineQueue

; 904  :   return;
; 905  : }

	add	rsp, 296				; 00000128H
	ret	0
WriteAsmLine ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT CheckCXZLines
_TEXT	SEGMENT
p$ = 48
CheckCXZLines PROC					; COMDAT

; 835  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rsi
	push	rdi
	sub	rsp, 32					; 00000020H

; 836  :   int lines = 0;
; 837  :   int i;
; 838  :   int addchars;
; 839  :   char *px;
; 840  :   bool NL = TRUE;
; 841  : 
; 842  :   DebugMsg1(("CheckCXZLines enter, p=>%s<\n", p));
; 843  :   /* syntax ".untilcxz 1" has a problem: there's no "jmp" generated at all.
; 844  :   * if this syntax is to be supported, activate the #if below.
; 845  :   */
; 846  :   for (; *p; p++) {

	movzx	eax, BYTE PTR [rcx]
	xor	edi, edi
	mov	rbx, rcx
	mov	sil, 1
	test	al, al
	je	$LN17@CheckCXZLi
$LL4@CheckCXZLi:

; 847  :     if (*p == EOLCHAR) {

	cmp	al, 10
	jne	SHORT $LN8@CheckCXZLi

; 848  :       NL = TRUE;

	mov	sil, 1

; 849  :       lines++;

	inc	edi

; 850  :     }

	jmp	$LN2@CheckCXZLi
$LN8@CheckCXZLi:

; 851  :     else if (NL) {

	test	sil, sil
	je	$LN2@CheckCXZLi

; 852  :       NL = FALSE;

	xor	sil, sil

; 853  :       if (*p == 'j') {

	cmp	al, 106					; 0000006aH
	jne	$LN2@CheckCXZLi

; 854  :         p++;
; 855  :         /* v2.06: rewritten */
; 856  :         if (*p == 'm' && lines == 0) {

	movzx	eax, BYTE PTR [rbx+1]
	cmp	al, 109					; 0000006dH
	jne	SHORT $LN12@CheckCXZLi
	test	edi, edi
	jne	SHORT $LN12@CheckCXZLi

; 857  :           addchars = 2; /* make room for 2 chars, to replace "jmp" by "loope" */

	lea	r8d, QWORD PTR [rdi+2]

; 858  :           px = "loope";

	lea	r9, OFFSET FLAT:$SG11300

; 859  :         }

	jmp	SHORT $LN15@CheckCXZLi
$LN12@CheckCXZLi:

; 860  :         else if (lines == 1 && (*p == 'z' || (*p == 'n' && *(p + 1) == 'z'))) {

	cmp	edi, 1
	jne	$LN14@CheckCXZLi
	cmp	al, 122					; 0000007aH
	je	SHORT $LN16@CheckCXZLi
	cmp	al, 110					; 0000006eH
	jne	$LN14@CheckCXZLi
	cmp	BYTE PTR [rbx+2], 122			; 0000007aH
	jne	$LN14@CheckCXZLi
$LN16@CheckCXZLi:

; 861  :           addchars = 3; /* make room for 3 chars, to replace "jz"/"jnz" by "loopz"/"loopnz" */

	mov	r8d, 3

; 862  :           px = "loop";

	lea	r9, OFFSET FLAT:$SG11304
$LN15@CheckCXZLi:

; 863  :         }
; 864  :         else
; 865  :           return(ERROR); /* anything else is "too complex" */
; 866  :         //replace_instr:
; 867  :         for (p--, i = strlen(p); i >= 0; i--) {

	or	rax, -1
	npad	3
$LL29@CheckCXZLi:
	inc	rax
	cmp	BYTE PTR [rbx+rax], 0
	jne	SHORT $LL29@CheckCXZLi
	movsxd	rdx, eax
	test	eax, eax
	js	SHORT $LN6@CheckCXZLi
	lea	rax, QWORD PTR [rdx+r8]
	neg	r8
	add	rax, rbx
	inc	rdx
	npad	3
$LL7@CheckCXZLi:

; 868  :           *(p + addchars + i) = *(p + i);

	movzx	ecx, BYTE PTR [r8+rax]
	mov	BYTE PTR [rax], cl
	dec	rax
	sub	rdx, 1
	jne	SHORT $LL7@CheckCXZLi
$LN6@CheckCXZLi:

; 869  :         }
; 870  :         memcpy(p, px, strlen(px));

	or	r8, -1
$LL28@CheckCXZLi:
	inc	r8
	cmp	BYTE PTR [r9+r8], 0
	jne	SHORT $LL28@CheckCXZLi
	mov	rdx, r9
	mov	rcx, rbx
	call	memcpy
$LN2@CheckCXZLi:

; 836  :   int lines = 0;
; 837  :   int i;
; 838  :   int addchars;
; 839  :   char *px;
; 840  :   bool NL = TRUE;
; 841  : 
; 842  :   DebugMsg1(("CheckCXZLines enter, p=>%s<\n", p));
; 843  :   /* syntax ".untilcxz 1" has a problem: there's no "jmp" generated at all.
; 844  :   * if this syntax is to be supported, activate the #if below.
; 845  :   */
; 846  :   for (; *p; p++) {

	movzx	eax, BYTE PTR [rbx+1]
	inc	rbx
	test	al, al
	jne	$LL4@CheckCXZLi

; 871  :       }
; 872  : #if 0 /* handle ".untilcxz 1" like masm does */
; 873  :       else if (*p == ' ' && *(p + 1) == EOLCHAR && lines == 0) {
; 874  :         p++;
; 875  :         GetLabelStr(hll->labels[LSTART], p);
; 876  :         strcat(p, EOLSTR);
; 877  :         addchars = 5;
; 878  :         px = "loope";
; 879  :         goto replace_instr;
; 880  :       }
; 881  : #endif
; 882  :     }
; 883  :   }
; 884  :   if (lines > 2)

	cmp	edi, 2
	jg	SHORT $LN14@CheckCXZLi
$LN17@CheckCXZLi:

; 885  :     return(ERROR);
; 886  :   return(NOT_ERROR);

	xor	eax, eax

; 887  : }

	mov	rbx, QWORD PTR [rsp+48]
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
$LN14@CheckCXZLi:
	mov	rbx, QWORD PTR [rsp+48]
	or	eax, -1
	mov	rsi, QWORD PTR [rsp+56]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
CheckCXZLines ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT EvaluateHllExpression
_TEXT	SEGMENT
hllop$ = 64
hll$ = 96
i$ = 104
tokenarray$ = 112
ilabel$ = 120
is_true$ = 128
buffer$ = 136
EvaluateHllExpression PROC				; COMDAT

; 810  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 80					; 00000050H

; 811  :   struct hll_opnd hllop = { NULL, 0 };

	xor	eax, eax
	mov	rdi, rdx
	mov	QWORD PTR hllop$[rsp], rax

; 812  : 
; 813  :   DebugMsg1(("EvaluateHllExpression enter\n"));
; 814  : 
; 815  :   *buffer = NULLC;
; 816  :   if (ERROR == GetExpression(hll, i, tokenarray, ilabel, is_true, buffer, &hllop))

	lea	rdx, QWORD PTR hllop$[rsp]
	mov	QWORD PTR [rsp+48], rdx
	mov	rbx, r8
	mov	DWORD PTR hllop$[rsp+8], eax
	mov	rdx, rdi
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	BYTE PTR [rax], 0
	movzx	eax, BYTE PTR is_true$[rsp]
	mov	BYTE PTR [rsp+32], al
	call	GetExpression
	cmp	eax, -1
	jne	SHORT $LN2@EvaluateHl

; 817  :     return(ERROR);

	or	eax, eax

; 826  : }

	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN2@EvaluateHl:

; 818  :   /* v2.11: changed */
; 819  :   //if ( *buffer == EOLCHAR ) {
; 820  :   //DebugMsg(( "EvaluateHllExpression: EOL at pos 0 in line buffer\n" ));
; 821  :   if (tokenarray[*i].token != T_FINAL) {

	movsxd	rax, DWORD PTR [rdi]
	shl	rax, 5
	cmp	BYTE PTR [rax+rbx], 0
	je	SHORT $LN3@EvaluateHl

; 822  :     DebugMsg(("EvaluateHllExpression: unexpected tokens >%s<\n", tokenarray[*i].tokpos));
; 823  :     return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));

	mov	ecx, 199				; 000000c7H
	call	EmitError

; 826  : }

	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
$LN3@EvaluateHl:

; 824  :   }
; 825  :   return(NOT_ERROR);

	xor	eax, eax

; 826  : }

	mov	rbx, QWORD PTR [rsp+96]
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
EvaluateHllExpression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT QueueTestLines
_TEXT	SEGMENT
src$ = 48
QueueTestLines PROC					; COMDAT

; 773  : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rcx

; 774  :   char *start;
; 775  : 
; 776  :   DebugMsg1(("QueueTestLines(\"%s\") enter\n", src ? src : "NULL"));
; 777  :   while (src) {

	test	rcx, rcx
	je	SHORT $LN10@QueueTestL
	mov	QWORD PTR [rsp+48], rdi
	npad	13
$LL2@QueueTestL:

; 778  :     //if (*src == ' ') src++; /* v2.11: obsolete */
; 779  :     start = src;
; 780  :     if (src = strchr(src, EOLCHAR))

	mov	edx, 10
	mov	rcx, rbx
	mov	rdi, rbx
	call	strchr
	mov	rbx, rax
	test	rax, rax
	je	SHORT $LN4@QueueTestL

; 781  :       *src++ = NULLC;

	mov	BYTE PTR [rax], 0
	inc	rbx
$LN4@QueueTestL:

; 782  :     if (*start)

	cmp	BYTE PTR [rdi], 0
	je	SHORT $LN5@QueueTestL

; 783  :       AddLineQueue(start);

	mov	rcx, rdi
	call	AddLineQueue
$LN5@QueueTestL:

; 774  :   char *start;
; 775  : 
; 776  :   DebugMsg1(("QueueTestLines(\"%s\") enter\n", src ? src : "NULL"));
; 777  :   while (src) {

	test	rbx, rbx
	jne	SHORT $LL2@QueueTestL
	mov	rdi, QWORD PTR [rsp+48]
$LN10@QueueTestL:

; 784  :   }
; 785  : 
; 786  :   DebugMsg1(("QueueTestLines exit\n"));
; 787  :   return(NOT_ERROR);

	xor	eax, eax

; 788  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
QueueTestLines ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetAndExpression
_TEXT	SEGMENT
hll$ = 128
i$ = 136
tokenarray$ = 144
ilabel$ = 152
is_true$ = 160
buffer$ = 168
hllop$ = 176
GetAndExpression PROC					; COMDAT

; 621  : {

	mov	QWORD PTR [rsp+16], rbx
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+8], rcx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 64					; 00000040H

; 622  :   char *ptr = buffer;
; 623  :   uint_32 truelabel = 0;
; 624  :   //char buff[16];
; 625  :   //char *nlabel;
; 626  :   //char *olabel;
; 627  : 
; 628  :   DebugMsg1(("%u GetAndExpression(>%.32s< buf=>%s<) enter\n", evallvl, tokenarray[*i].tokpos, buffer));
; 629  : 
; 630  :   if (ERROR == GetSimpleExpression(hll, i, tokenarray, ilabel, is_true, ptr, hllop))

	mov	r15, QWORD PTR hllop$[rsp]
	mov	rax, rcx
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	ebx, r9d
	movzx	r12d, BYTE PTR is_true$[rsp]
	mov	rdi, rcx
	mov	QWORD PTR [rsp+48], r15
	mov	r13, r8
	mov	QWORD PTR [rsp+40], rcx
	mov	r14, rdx
	mov	rcx, rax
	mov	BYTE PTR [rsp+32], r12b
	xor	ebp, ebp
	call	GetSimpleExpression
	cmp	eax, -1
	jne	SHORT $LN20@GetAndExpr

; 631  :     return(ERROR);

	or	rax, -1
	jmp	$LN1@GetAndExpr
$LN20@GetAndExpr:

; 632  :   while (COP_AND == GetCOp(&tokenarray[*i])) {

	movsxd	rcx, DWORD PTR [r14]
	shl	rcx, 5
	add	rcx, r13
	call	GetCOp
	cmp	eax, 7
	jne	$LN10@GetAndExpr
	or	rsi, -1
	npad	7
$LL2@GetAndExpr:

; 633  : 
; 634  :     (*i)++;

	inc	DWORD PTR [r14]

; 635  :     DebugMsg1(("%u GetAndExpression: &&-operator found, is_true=%u, lastjmp=%s\n", evallvl, is_true, hllop->lastjmp ? hllop->lastjmp : "NULL"));
; 636  : 
; 637  :     if (is_true) {

	test	r12b, r12b
	je	$LN6@GetAndExpr

; 638  :       /* todo: please describe what's done here and why! */
; 639  :       if (hllop->lastjmp) {

	mov	rbx, QWORD PTR [r15]
	test	rbx, rbx
	je	$LN30@GetAndExpr

; 640  :         char *p = hllop->lastjmp;
; 641  :         InvertJump(p);          /* step 1 */

	mov	rcx, rbx
	call	InvertJump

; 642  :         if (truelabel == 0)     /* step 2 */

	test	ebp, ebp
	jne	SHORT $LN7@GetAndExpr

; 643  :           truelabel = GetHllLabel();

	mov	ebp, DWORD PTR ModuleInfo+352
	inc	ebp
	mov	DWORD PTR ModuleInfo+352, ebp
$LN7@GetAndExpr:

; 644  : 
; 645  :         if (*p) {               /* v2.11: there might be a 0 at lastjmp */

	cmp	BYTE PTR [rbx], 0
	je	SHORT $LN8@GetAndExpr

; 646  :           p += 4;               /* skip 'jcc ' or 'jmp ' */
; 647  :           GetLabelStr(truelabel, p);

	mov	r8d, ebp
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR [rbx+4]
	call	sprintf

; 648  :           strcat(p, EOLSTR);

	sub	rbx, -3
	npad	2
$LL28@GetAndExpr:
	cmp	BYTE PTR [rbx+1], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL28@GetAndExpr
	xor	ecx, ecx
	lea	r12, OFFSET FLAT:$SG11209
	npad	13
$LL29@GetAndExpr:
	movzx	eax, BYTE PTR [r12+rcx]
	mov	BYTE PTR [rbx+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL29@GetAndExpr
	movzx	r12d, BYTE PTR is_true$[rsp]
$LN8@GetAndExpr:

; 649  :         }
; 650  : 
; 651  :         DebugMsg1(("%u GetAndExpression: jmp inverted >%s<\n", evallvl, hllop->lastjmp));
; 652  :         ReplaceLabel(buffer, GetLabel(hll, ilabel), truelabel);

	mov	rcx, QWORD PTR hll$[rsp]
	mov	r8d, ebp
	movsxd	rbx, DWORD PTR ilabel$[rsp]
	mov	edx, DWORD PTR [rcx+rbx*4+8]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	ReplaceLabel

; 653  :         hllop->lastjmp = NULL;

	mov	QWORD PTR [r15], 0
	jmp	SHORT $LN6@GetAndExpr
$LN30@GetAndExpr:
	mov	ebx, DWORD PTR ilabel$[rsp]
$LN6@GetAndExpr:

; 654  :       }
; 655  :     }
; 656  :     ptr += strlen(ptr);

	mov	rax, rsi
$LL27@GetAndExpr:
	inc	rax
	cmp	BYTE PTR [rdi+rax], 0
	jne	SHORT $LL27@GetAndExpr

; 657  :     hllop->lasttruelabel = 0; /* v2.08 */
; 658  :     if (ERROR == GetSimpleExpression(hll, i, tokenarray, ilabel, is_true, ptr, hllop))

	mov	rcx, QWORD PTR hll$[rsp]
	add	rdi, rax
	mov	QWORD PTR [rsp+48], r15
	mov	r9d, ebx
	mov	QWORD PTR [rsp+40], rdi
	mov	r8, r13
	mov	rdx, r14
	mov	BYTE PTR [rsp+32], r12b
	mov	DWORD PTR [r15+8], 0
	call	GetSimpleExpression
	cmp	eax, -1
	je	$LN21@GetAndExpr

; 632  :   while (COP_AND == GetCOp(&tokenarray[*i])) {

	movsxd	rcx, DWORD PTR [r14]
	shl	rcx, 5
	add	rcx, r13
	call	GetCOp
	cmp	eax, 7
	je	$LL2@GetAndExpr

; 660  :   };
; 661  : 
; 662  :   if (truelabel > 0) {

	test	ebp, ebp
	je	SHORT $LN10@GetAndExpr
	npad	2
$LL26@GetAndExpr:

; 663  :     ptr += strlen(ptr);

	inc	rsi
	cmp	BYTE PTR [rdi+rsi], 0
	jne	SHORT $LL26@GetAndExpr
	add	rdi, rsi

; 664  :     GetLabelStr(truelabel, ptr);

	lea	rdx, OFFSET FLAT:$SG11028
	mov	rcx, rdi
	mov	r8d, ebp
	call	sprintf

; 665  :     strcat(ptr, LABELQUAL EOLSTR);

	dec	rdi
$LL24@GetAndExpr:
	cmp	BYTE PTR [rdi+1], 0
	lea	rdi, QWORD PTR [rdi+1]
	jne	SHORT $LL24@GetAndExpr
	lea	rdx, OFFSET FLAT:$SG11212
	xor	ecx, ecx
	npad	12
$LL25@GetAndExpr:
	movzx	eax, BYTE PTR [rdx+rcx]
	mov	BYTE PTR [rdi+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL25@GetAndExpr

; 666  :     DebugMsg1(("%u GetAndExpression: label added >%s<\n", evallvl, ptr));
; 667  :     hllop->lastjmp = NULL;

	mov	QWORD PTR [r15], 0
$LN10@GetAndExpr:

; 668  :   }
; 669  :   return(NOT_ERROR);

	xor	eax, eax
$LN1@GetAndExpr:

; 670  : }

	mov	rbx, QWORD PTR [rsp+136]
	add	rsp, 64					; 00000040H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN21@GetAndExpr:

; 659  :       return(ERROR);

	mov	eax, esi
	jmp	SHORT $LN1@GetAndExpr
GetAndExpression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT ReplaceLabel
_TEXT	SEGMENT
newlbl$ = 32
oldlbl$ = 48
p$ = 80
olabel$ = 88
nlabel$ = 96
ReplaceLabel PROC					; COMDAT

; 600  : {

	mov	QWORD PTR [rsp+8], rbx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	ebx, r8d
	mov	rdi, rcx

; 601  :   char oldlbl[16];
; 602  :   char newlbl[16];
; 603  :   int i;
; 604  : 
; 605  :   GetLabelStr(olabel, oldlbl);

	mov	r8d, edx
	lea	rcx, QWORD PTR oldlbl$[rsp]
	lea	rdx, OFFSET FLAT:$SG11028
	call	sprintf

; 606  :   GetLabelStr(nlabel, newlbl);

	mov	r8d, ebx
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR newlbl$[rsp]
	call	sprintf

; 607  : 
; 608  :   i = strlen(newlbl);

	lea	rax, QWORD PTR newlbl$[rsp]
	or	rbx, -1
$LL13@ReplaceLab:
	inc	rbx
	cmp	BYTE PTR [rax+rbx], 0
	jne	SHORT $LL13@ReplaceLab

; 609  : 
; 610  :   DebugMsg1(("%u ReplaceLabel(%s->%s, >%s<)\n", evallvl, oldlbl, newlbl, p));
; 611  :   while (p = strstr(p, oldlbl)) {

	lea	rdx, QWORD PTR oldlbl$[rsp]
	mov	rcx, rdi
	call	strstr
	mov	rdi, rax
	test	rax, rax
	je	SHORT $LN3@ReplaceLab
	movsxd	rbx, ebx
	npad	14
$LL2@ReplaceLab:

; 612  :     memcpy(p, newlbl, i);

	mov	r8, rbx
	lea	rdx, QWORD PTR newlbl$[rsp]
	mov	rcx, rdi
	call	memcpy

; 613  :     p += i;

	lea	rcx, QWORD PTR [rbx+rdi]
	lea	rdx, QWORD PTR oldlbl$[rsp]
	call	strstr
	mov	rdi, rax
	test	rax, rax
	jne	SHORT $LL2@ReplaceLab
$LN3@ReplaceLab:

; 614  :   }
; 615  : }

	mov	rbx, QWORD PTR [rsp+80]
	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
ReplaceLabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT InvertJump
_TEXT	SEGMENT
p$ = 8
InvertJump PROC						; COMDAT

; 549  :   if (*p == NULLC) { /* v2.11: convert 0 to "jmp" */

	cmp	BYTE PTR [rcx], 0
	jne	SHORT $LN2@InvertJump

; 550  :     strcpy(p, "jmp ");

	lea	rdx, OFFSET FLAT:$SG11151
	sub	rcx, rdx
	npad	1
$LL20@InvertJump:
	movzx	eax, BYTE PTR [rdx]
	mov	BYTE PTR [rcx+rdx], al
	lea	rdx, QWORD PTR [rdx+1]
	test	al, al
	jne	SHORT $LL20@InvertJump

; 586  :     *p = ' ';
; 587  :   else
; 588  :     *p = 'e';
; 589  :   return;
; 590  : }

	ret	0
$LN2@InvertJump:

; 551  :     return;
; 552  :   }
; 553  : 
; 554  :   p++;
; 555  :   if (*p == 'e' || *p == 'z' || *p == 'c' || *p == 's' || *p == 'p' || *p == 'o') {

	movzx	edx, BYTE PTR [rcx+1]
	lea	eax, DWORD PTR [rdx-99]
	cmp	al, 23
	ja	SHORT $LN24@InvertJump
	mov	r8d, 8466437				; 00813005H
	bt	r8d, eax
	jae	SHORT $LN24@InvertJump

; 556  :     *(p + 1) = *p;

	mov	BYTE PTR [rcx+2], dl

; 557  :     *p = 'n';

	mov	BYTE PTR [rcx+1], 110			; 0000006eH

; 586  :     *p = ' ';
; 587  :   else
; 588  :     *p = 'e';
; 589  :   return;
; 590  : }

	ret	0
$LN24@InvertJump:

; 558  :     return;
; 559  :   }
; 560  :   else if (*p == 'n') {

	cmp	dl, 110					; 0000006eH
	jne	SHORT $LN6@InvertJump

; 561  :     *p = *(p + 1);

	movzx	eax, BYTE PTR [rcx+2]
	mov	BYTE PTR [rcx+1], al

; 562  :     *(p + 1) = ' ';

	mov	BYTE PTR [rcx+2], 32			; 00000020H

; 586  :     *p = ' ';
; 587  :   else
; 588  :     *p = 'e';
; 589  :   return;
; 590  : }

	ret	0
$LN6@InvertJump:

; 563  :     return;
; 564  :   }
; 565  :   else if (*p == 'a') {

	cmp	dl, 97					; 00000061H
	jne	SHORT $LN8@InvertJump

; 566  :     *p++ = 'b';

	mov	BYTE PTR [rcx+1], 98			; 00000062H

; 567  :   }

	jmp	SHORT $LN26@InvertJump
$LN8@InvertJump:

; 568  :   else if (*p == 'b') {

	cmp	dl, 98					; 00000062H
	jne	SHORT $LN10@InvertJump

; 569  :     *p++ = 'a';

	mov	BYTE PTR [rcx+1], 97			; 00000061H

; 570  :   }

	jmp	SHORT $LN26@InvertJump
$LN10@InvertJump:

; 571  :   else if (*p == 'g') {

	cmp	dl, 103					; 00000067H
	jne	SHORT $LN12@InvertJump

; 572  :     *p++ = 'l';

	mov	BYTE PTR [rcx+1], 108			; 0000006cH

; 573  :   }

	jmp	SHORT $LN26@InvertJump
$LN12@InvertJump:

; 574  :   else if (*p == 'l') {

	cmp	dl, 108					; 0000006cH
	jne	SHORT $LN14@InvertJump

; 575  :     *p++ = 'g';

	mov	BYTE PTR [rcx+1], 103			; 00000067H
$LN26@InvertJump:
	add	rcx, 2

; 582  :     }
; 583  :     return;
; 584  :   }
; 585  :   if (*p == 'e')

	mov	eax, 101				; 00000065H
	mov	edx, 32					; 00000020H
	cmp	BYTE PTR [rcx], al
	cmove	eax, edx
	mov	BYTE PTR [rcx], al

; 586  :     *p = ' ';
; 587  :   else
; 588  :     *p = 'e';
; 589  :   return;
; 590  : }

	ret	0
$LN14@InvertJump:

; 576  :   }
; 577  :   else {
; 578  :     /* v2.11: convert "jmp" to 0 */
; 579  :     if (*p == 'm') {

	cmp	dl, 109					; 0000006dH
	jne	SHORT $LN18@InvertJump

; 580  :       p--;
; 581  :       *p = NULLC;

	mov	BYTE PTR [rcx], 0
$LN18@InvertJump:

; 586  :     *p = ' ';
; 587  :   else
; 588  :     *p = 'e';
; 589  :   return;
; 590  : }

	ret	0
InvertJump ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetSimpleExpression
_TEXT	SEGMENT
op1$ = 64
op2$ = 176
hll$ = 352
op2_pos$1$ = 360
i$ = 360
tokenarray$ = 368
ilabel$ = 376
is_true$ = 384
buffer$ = 392
hllop$ = 400
GetSimpleExpression PROC				; COMDAT

; 347  : {

	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r15
	sub	rsp, 288				; 00000120H

; 348  :   enum c_bop op;
; 349  :   char instr;
; 350  :   int op1_pos;
; 351  :   int op1_end;
; 352  :   int op2_pos;
; 353  :   int op2_end;
; 354  :   char *p;
; 355  :   struct expr op1;
; 356  :   struct expr op2;
; 357  :   uint_32 label;
; 358  : 
; 359  :   DebugMsg1(("%u GetSimpleExpression(>%.32s< buf=>%s<) enter\n", evallvl, tokenarray[*i].tokpos, buffer));
; 360  : 
; 361  :   while (tokenarray[*i].string_ptr[0] == '!' && tokenarray[*i].string_ptr[1] == '\0') {

	movsxd	rax, DWORD PTR [rdx]
	mov	r12d, r9d
	movzx	ebp, BYTE PTR is_true$[rsp]
	mov	rsi, r8
	shl	rax, 5
	mov	rdi, rdx
	mov	r13, rcx
	mov	ebx, 1
	mov	r10, QWORD PTR [rax+r8+8]
	cmp	BYTE PTR [r10], 33			; 00000021H
	jne	SHORT $LN3@GetSimpleE
	npad	10
$LL2@GetSimpleE:
	movsxd	rcx, DWORD PTR [rdx]
	mov	rax, rcx
	shl	rax, 5
	mov	rax, QWORD PTR [rax+r8+8]
	cmp	BYTE PTR [rax+1], 0
	jne	SHORT $LN3@GetSimpleE

; 362  :     (*i)++; //GetCOp( i );

	inc	ecx

; 363  :     is_true = 1 - is_true;

	mov	eax, ebx
	sub	al, bpl
	mov	DWORD PTR [rdx], ecx
	movzx	ebp, al
	movsxd	rax, ecx
	shl	rax, 5
	mov	rax, QWORD PTR [rax+r8+8]
	cmp	BYTE PTR [rax], 33			; 00000021H
	je	SHORT $LL2@GetSimpleE
$LN3@GetSimpleE:

; 364  :   }
; 365  : 
; 366  :   /* the problem with '()' is that is might enclose just a standard Masm
; 367  :   * expression or a "hll" expression. The first case is to be handled
; 368  :   * entirely by the expression evaluator, while the latter case is to be
; 369  :   * handled HERE!
; 370  :   */
; 371  :   if (tokenarray[*i].token == T_OP_BRACKET) {

	movsxd	r15, DWORD PTR [rdx]
	mov	rax, r15
	mov	QWORD PTR [rsp+368], r14
	shl	rax, 5
	cmp	BYTE PTR [rax+r8], 40			; 00000028H
	jne	SHORT $LN18@GetSimpleE

; 372  :     int brcnt;
; 373  :     int j;
; 374  :     for (brcnt = 1, j = *i + 1; tokenarray[j].token != T_FINAL; j++) {

	inc	r15d
	movsxd	r14, r15d
	mov	rax, r14
	shl	rax, 5
	cmp	BYTE PTR [rax+r8], 0
	lea	rcx, QWORD PTR [rax+r8]
	je	$LN108@GetSimpleE
$LL6@GetSimpleE:
	movzx	eax, BYTE PTR [rcx]

; 375  :       if (tokenarray[j].token == T_OP_BRACKET)

	cmp	al, 40					; 00000028H
	jne	SHORT $LN12@GetSimpleE

; 376  :         brcnt++;

	inc	ebx
	jmp	SHORT $LN4@GetSimpleE
$LN12@GetSimpleE:

; 377  :       else if (tokenarray[j].token == T_CL_BRACKET) {

	cmp	al, 41					; 00000029H
	jne	SHORT $LN14@GetSimpleE

; 378  :         brcnt--;

	sub	ebx, 1

; 379  :         if (brcnt == 0) /* a standard Masm expression? */

	jne	SHORT $LN4@GetSimpleE
$LN18@GetSimpleE:

; 398  :     }
; 399  :   }
; 400  : 
; 401  :   /* get (first) operand */
; 402  :   op1_pos = *i;

	movsxd	r12, DWORD PTR [rdi]

; 403  :   if (ERROR == GetToken(hll, i, tokenarray, &op1))

	lea	r9, QWORD PTR op1$[rsp]
	mov	r8, rsi
	mov	rdx, rdi
	mov	rcx, r13
	call	GetToken
	cmp	eax, -1
	je	$LN119@GetSimpleE

; 404  :     return (ERROR);
; 405  :   op1_end = *i;

	movsxd	r15, DWORD PTR [rdi]

; 406  : 
; 407  :   op = GetCOp(&tokenarray[*i]); /* get operator */

	mov	rcx, r15
	shl	rcx, 5
	add	rcx, rsi
	call	GetCOp
	xor	r14d, r14d
	mov	ebx, eax
	lea	ecx, DWORD PTR [rax-7]
	cmp	ecx, 1
	jbe	$LN24@GetSimpleE

; 415  :   }
; 416  :   else if (op != COP_NONE)

	test	eax, eax
	je	$LN25@GetSimpleE

; 417  :     (*i)++;

	inc	DWORD PTR [rdi]
	jmp	$LN25@GetSimpleE
$LN14@GetSimpleE:

; 380  :           break;
; 381  :       }
; 382  :       else if ((GetCOp(&tokenarray[j])) != COP_NONE)

	movsxd	rcx, r15d
	shl	rcx, 5
	add	rcx, rsi
	call	GetCOp
	test	eax, eax
	jne	SHORT $LN100@GetSimpleE
$LN4@GetSimpleE:

; 372  :     int brcnt;
; 373  :     int j;
; 374  :     for (brcnt = 1, j = *i + 1; tokenarray[j].token != T_FINAL; j++) {

	inc	r14
	inc	r15d
	mov	rax, r14
	shl	rax, 5
	cmp	BYTE PTR [rax+rsi], 0
	lea	rcx, QWORD PTR [rax+rsi]
	jne	$LL6@GetSimpleE
$LN100@GetSimpleE:

; 383  :         break;
; 384  :     }
; 385  :     if (brcnt) {

	test	ebx, ebx
	je	$LN18@GetSimpleE
$LN108@GetSimpleE:

; 386  :       (*i)++;
; 387  :       DebugMsg1(("%u GetSimpleExpression: calling GetExpression, i=%u\n", evallvl, *i));
; 388  :       if (ERROR == GetExpression(hll, i, tokenarray, ilabel, is_true, buffer, hllop))

	mov	rax, QWORD PTR hllop$[rsp]
	mov	r9d, r12d
	inc	DWORD PTR [rdi]
	mov	r8, rsi
	mov	QWORD PTR [rsp+48], rax
	mov	rdx, rdi
	mov	rax, QWORD PTR buffer$[rsp]
	mov	rcx, r13
	mov	QWORD PTR [rsp+40], rax
	mov	BYTE PTR [rsp+32], bpl
	call	GetExpression
	cmp	eax, -1
	jne	SHORT $LN19@GetSimpleE
$LN119@GetSimpleE:

; 389  :         return(ERROR);

	or	rax, -1
	jmp	$LN1@GetSimpleE
$LN19@GetSimpleE:

; 390  : 
; 391  :       if (tokenarray[*i].token != T_CL_BRACKET) {

	movsxd	rcx, DWORD PTR [rdi]
	mov	rax, rcx
	shl	rax, 5
	cmp	BYTE PTR [rax+rsi], 41			; 00000029H
	jne	$LN28@GetSimpleE

; 392  :         //if (( tokenarray[*i].token == T_FINAL ) || ( tokenarray[*i].token == T_CL_BRACKET ))
; 393  :         DebugMsg(("GetSimpleExpression: expected ')', found: %s\n", tokenarray[*i].string_ptr));
; 394  :         return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));
; 395  :       }
; 396  :       (*i)++;

	lea	eax, DWORD PTR [rcx+1]
	mov	DWORD PTR [rdi], eax

; 397  :       return(NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@GetSimpleE
$LN24@GetSimpleE:

; 408  : 
; 409  :   /* lower precedence operator ( && or || ) detected? */
; 410  :   if (op == COP_AND || op == COP_OR) {
; 411  :     /* v2.11: next 2 lines removed - && and || operators need a valid first operand */
; 412  :     //if ( op1.kind == EXPR_EMPTY )
; 413  :     //    return( NOT_ERROR );
; 414  :     op = COP_NONE;

	mov	ebx, r14d
$LN25@GetSimpleE:

; 418  : 
; 419  :   label = GetLabel(hll, ilabel);

	movsxd	rax, DWORD PTR ilabel$[rsp]
	mov	r13d, DWORD PTR [r13+rax*4+8]

; 420  : 
; 421  :   DebugMsg1(("%u GetSimpleExpression: EvalOperand ok, kind=%X, i=%u [%s]\n", evallvl, op1.kind, *i, tokenarray[*i].tokpos));
; 422  : 
; 423  :   /* check for special operators with implicite operand:
; 424  :   * COP_ZERO, COP_CARRY, COP_SIGN, COP_PARITY, COP_OVERFLOW
; 425  :   */
; 426  :   if (op >= COP_ZERO) {

	cmp	ebx, 11
	jl	SHORT $LN26@GetSimpleE

; 427  :     if (op1.kind != EXPR_EMPTY) {

	cmp	DWORD PTR op1$[rsp+60], -2
	jne	$LN28@GetSimpleE

; 428  :       DebugMsg(("GetSimpleExpression: non-empty expression rejected: %s\n", tokenarray[op1_pos].tokpos));
; 429  :       return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));
; 430  :     }
; 431  :     p = buffer;
; 432  :     hllop->lastjmp = p;

	mov	rax, QWORD PTR hllop$[rsp]

; 433  :        RenderJcc(p, flaginstr[op - COP_ZERO], !is_true, label);

	lea	rdx, OFFSET FLAT:__ImageBase
	mov	rcx, QWORD PTR buffer$[rsp]
	test	bpl, bpl
	mov	r9d, r13d
	sete	r14b
	mov	QWORD PTR [rax], rcx
	mov	r8d, r14d
	movsxd	rax, ebx
	movzx	edx, BYTE PTR flaginstr[rax+rdx-11]
	call	RenderJcc

; 434  :     return(NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@GetSimpleE
$LN26@GetSimpleE:

; 435  :   }
; 436  : 
; 437  :   switch (op1.kind) {

	mov	ecx, DWORD PTR op1$[rsp+60]
	cmp	ecx, -2
	je	$LN28@GetSimpleE
	cmp	ecx, 3
	je	$LN29@GetSimpleE

; 444  :   }
; 445  : 
; 446  :   if (op == COP_NONE) {

	test	ebx, ebx
	jne	$LN30@GetSimpleE

; 447  :     switch (op1.kind) {

	test	ecx, ecx
	je	$LN34@GetSimpleE
	sub	ecx, 1
	je	SHORT $LN32@GetSimpleE
	cmp	ecx, 1
	jne	$LN37@GetSimpleE

; 448  :     case EXPR_REG:
; 449  :       if (op1.indirect == FALSE) {

	test	BYTE PTR op1$[rsp+76], cl
	jne	SHORT $LN32@GetSimpleE

; 450  :         p = RenderInstr(buffer, "test", op1_pos, op1_end, op1_pos, op1_end, tokenarray);

	mov	rcx, QWORD PTR buffer$[rsp]
	lea	rdx, OFFSET FLAT:$SG11124
	mov	QWORD PTR [rsp+48], rsi
	mov	r9d, r15d
	mov	DWORD PTR [rsp+40], r15d
	mov	r8d, r12d
	mov	DWORD PTR [rsp+32], r12d
	call	RenderInstr

; 451  :         hllop->lastjmp = p;

	mov	rcx, QWORD PTR hllop$[rsp]

; 452  :         RenderJcc(p, 'z', is_true, label);

	mov	r9d, r13d
	movzx	r8d, bpl
	mov	dl, 122					; 0000007aH
	mov	QWORD PTR [rcx], rax
	mov	rcx, rax
	call	RenderJcc

; 481  :       }
; 482  :       break;
; 483  : #ifdef DEBUG_OUT
; 484  :     default: /**/myassert(0); break;
; 485  : #endif
; 486  :     }
; 487  :     return(NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@GetSimpleE
$LN32@GetSimpleE:

; 453  :         break;
; 454  :       }
; 455  :       /* no break */
; 456  :     case EXPR_ADDR:
; 457  :       p = RenderInstr(buffer, "cmp", op1_pos, op1_end, EMPTY, 0, tokenarray);

	lea	rdx, OFFSET FLAT:$SG11126
	or	rax, -1
$LL113@GetSimpleE:
	inc	rax
	cmp	BYTE PTR [rdx+rax], r14b
	jne	SHORT $LL113@GetSimpleE
	mov	rcx, QWORD PTR buffer$[rsp]
	movsxd	rdi, eax
	mov	r8, rdi
	call	memcpy
	add	rdi, QWORD PTR buffer$[rsp]
	mov	rax, r15
	shl	rax, 5
	mov	rdx, r12
	shl	rdx, 5
	mov	BYTE PTR [rdi], 32			; 00000020H
	inc	rdi
	mov	eax, DWORD PTR [rax+rsi+24]
	mov	rcx, rdi
	sub	eax, DWORD PTR [rdx+rsi+24]
	mov	rdx, QWORD PTR [rdx+rsi+24]
	movsxd	rbx, eax
	mov	r8, rbx
	call	memcpy
	add	rdi, rbx
	lea	rdx, OFFSET FLAT:$SG11021
	mov	rcx, rdi
	xor	r8d, r8d
	call	sprintf
	movsxd	rdx, eax

; 458  :       hllop->lastjmp = p;
; 459  :       RenderJcc(p, 'z', is_true, label);

	mov	r9d, r13d
	mov	rax, QWORD PTR hllop$[rsp]
	add	rdi, rdx
	movzx	r8d, bpl
	mov	dl, 122					; 0000007aH
	mov	BYTE PTR [rdi], 10
	inc	rdi
	mov	rcx, rdi
	mov	BYTE PTR [rdi], r14b
	mov	QWORD PTR [rax], rdi
	call	RenderJcc

; 481  :       }
; 482  :       break;
; 483  : #ifdef DEBUG_OUT
; 484  :     default: /**/myassert(0); break;
; 485  : #endif
; 486  :     }
; 487  :     return(NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@GetSimpleE
$LN34@GetSimpleE:
	mov	eax, DWORD PTR op1$[rsp+4]
	inc	eax
	cmp	eax, 1
	jbe	SHORT $LN35@GetSimpleE

; 460  :       break;
; 461  :     case EXPR_CONST:
; 462  : #if 0
; 463  :       /* v2.05: string constant is allowed! */
; 464  :       if (op1.string != NULL) {
; 465  :         return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));
; 466  :       }
; 467  : #endif
; 468  :       /* v2.11: error if constant doesn't fit in 32-bits */
; 469  :       if (op1.hvalue != 0 && op1.hvalue != -1)
; 470  :         return(EmitConstError(&op1));

	lea	rcx, QWORD PTR op1$[rsp]
	call	EmitConstError
	jmp	$LN1@GetSimpleE
$LN35@GetSimpleE:

; 471  : 
; 472  :       hllop->lastjmp = buffer;

	mov	rax, QWORD PTR hllop$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	QWORD PTR [rax], rcx

; 473  : 
; 474  :       if ((is_true == TRUE && op1.value) ||

	cmp	bpl, 1
	jne	SHORT $LN39@GetSimpleE
	cmp	DWORD PTR op1$[rsp], r14d
	jne	SHORT $LN38@GetSimpleE
$LN36@GetSimpleE:

; 477  :       }
; 478  :       else {
; 479  :         //strcpy( buffer, " " EOLSTR ); /* v2.11: obsolete */
; 480  :         *buffer = NULLC;

	mov	BYTE PTR [rcx], r14b
$LN37@GetSimpleE:

; 481  :       }
; 482  :       break;
; 483  : #ifdef DEBUG_OUT
; 484  :     default: /**/myassert(0); break;
; 485  : #endif
; 486  :     }
; 487  :     return(NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@GetSimpleE
$LN39@GetSimpleE:

; 473  : 
; 474  :       if ((is_true == TRUE && op1.value) ||

	test	bpl, bpl
	jne	SHORT $LN36@GetSimpleE
	cmp	DWORD PTR op1$[rsp], r14d
	jne	SHORT $LN36@GetSimpleE
$LN38@GetSimpleE:

; 475  :         (is_true == FALSE && op1.value == 0)) {
; 476  :         sprintf(buffer, "jmp " LABELFMT EOLSTR, label);

	mov	r8d, r13d
	lea	rdx, OFFSET FLAT:$SG11133
	call	sprintf

; 481  :       }
; 482  :       break;
; 483  : #ifdef DEBUG_OUT
; 484  :     default: /**/myassert(0); break;
; 485  : #endif
; 486  :     }
; 487  :     return(NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@GetSimpleE
$LN30@GetSimpleE:

; 488  :   }
; 489  : 
; 490  :   /* get second operand for binary operator */
; 491  :   op2_pos = *i;

	mov	eax, DWORD PTR [rdi]

; 492  :   if (ERROR == GetToken(hll, i, tokenarray, &op2)) {

	lea	r9, QWORD PTR op2$[rsp]
	mov	rcx, QWORD PTR hll$[rsp]
	mov	r8, rsi
	mov	rdx, rdi
	mov	DWORD PTR op2_pos$1$[rsp], eax
	call	GetToken
	cmp	eax, -1
	je	$LN119@GetSimpleE

; 493  :     return(ERROR);
; 494  :   }
; 495  :   DebugMsg1(("%u GetSimpleExpression: EvalOperand 2 ok, type=%X, i=%u [%s]\n", evallvl, op2.type, *i, tokenarray[*i].tokpos));
; 496  :   if (op2.kind != EXPR_CONST && op2.kind != EXPR_ADDR && op2.kind != EXPR_REG) {
; 497  :     DebugMsg(("GetSimpleExpression: syntax error, op2.kind=%u\n", op2.kind));
; 498  :     return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));

	mov	ecx, DWORD PTR op2$[rsp+60]
	cmp	ecx, 2
	ja	$LN28@GetSimpleE

; 499  :   }
; 500  :   op2_end = *i;

	mov	edx, DWORD PTR [rdi]

; 501  : 
; 502  :   /* now generate ASM code for expression */
; 503  : 
; 504  :   if (op == COP_ANDB) {

	cmp	ebx, 9
	jne	SHORT $LN42@GetSimpleE

; 505  :     p = RenderInstr(buffer, "test", op1_pos, op1_end, op2_pos, op2_end, tokenarray);

	mov	eax, DWORD PTR op2_pos$1$[rsp]
	mov	r9d, r15d
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	r8d, r12d
	mov	QWORD PTR [rsp+48], rsi
	mov	DWORD PTR [rsp+40], edx
	lea	rdx, OFFSET FLAT:$SG11138
	mov	DWORD PTR [rsp+32], eax
	call	RenderInstr

; 506  :     hllop->lastjmp = p;

	mov	rcx, QWORD PTR hllop$[rsp]

; 507  :     RenderJcc(p, 'e', is_true, label);

	mov	dl, 101					; 00000065H
	movzx	r8d, bpl

; 526  :     RenderJcc(p, instr, neg_cjmptype[op - COP_EQ] ? is_true : !is_true, label);

	mov	r9d, r13d
	mov	QWORD PTR [rcx], rax
	mov	rcx, rax
	call	RenderJcc

; 527  :   }
; 528  :   else {
; 529  :     DebugMsg(("GetSimpleExpression: unexpected operator %s\n", tokenarray[op1_pos].tokpos));
; 530  :     return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));
; 531  :   }
; 532  :   return(NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@GetSimpleE
$LN42@GetSimpleE:

; 508  :   }
; 509  :   else if (op <= COP_LE) { /* ==, !=, >, <, >= or <= operator */

	cmp	ebx, 6
	jg	$LN28@GetSimpleE

; 510  :     /*
; 511  :     * optimisation: generate 'or EAX,EAX' instead of 'cmp EAX,0'.
; 512  :     * v2.11: use op2.value64 instead of op2.value
; 513  :     */
; 514  :     if (Options.masm_compat_gencode &&
; 515  :       (op == COP_EQ || op == COP_NE) &&
; 516  :       op1.kind == EXPR_REG && op1.indirect == FALSE &&
; 517  :       op2.kind == EXPR_CONST && op2.value64 == 0) {

	cmp	BYTE PTR Options+128, r14b
	je	SHORT $LN46@GetSimpleE
	lea	eax, DWORD PTR [rbx-1]
	cmp	eax, 1
	ja	SHORT $LN46@GetSimpleE
	cmp	DWORD PTR op1$[rsp+60], 2
	jne	SHORT $LN46@GetSimpleE
	test	BYTE PTR op1$[rsp+76], 1
	jne	SHORT $LN46@GetSimpleE
	test	ecx, ecx
	jne	SHORT $LN46@GetSimpleE
	cmp	QWORD PTR op2$[rsp], r14
	jne	SHORT $LN46@GetSimpleE

; 518  :       p = RenderInstr(buffer, "or", op1_pos, op1_end, op1_pos, op1_end, tokenarray);

	mov	QWORD PTR [rsp+48], rsi
	lea	rdx, OFFSET FLAT:$SG11144
	mov	DWORD PTR [rsp+40], r15d
	mov	DWORD PTR [rsp+32], r12d

; 519  :     }

	jmp	SHORT $LN116@GetSimpleE
$LN46@GetSimpleE:

; 520  :     else {
; 521  :       p = RenderInstr(buffer, "cmp", op1_pos, op1_end, op2_pos, op2_end, tokenarray);

	mov	eax, DWORD PTR op2_pos$1$[rsp]
	mov	QWORD PTR [rsp+48], rsi
	mov	DWORD PTR [rsp+40], edx
	lea	rdx, OFFSET FLAT:$SG11145
	mov	DWORD PTR [rsp+32], eax
$LN116@GetSimpleE:
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	r9d, r15d
	mov	r8d, r12d
	call	RenderInstr
	mov	r10, rax

; 522  :     }
; 523  : 
; 524  :     instr = ((IS_SIGNED(op1.mem_type) || IS_SIGNED(op2.mem_type)) ? signed_cjmptype[op - COP_EQ] : unsigned_cjmptype[op - COP_EQ]);

	mov	eax, DWORD PTR op1$[rsp+64]
	and	al, -64					; ffffffffffffffc0H
	cmp	al, 64					; 00000040H
	je	SHORT $LN50@GetSimpleE
	mov	eax, DWORD PTR op2$[rsp+64]
	and	al, -64					; ffffffffffffffc0H
	cmp	al, 64					; 00000040H
	je	SHORT $LN50@GetSimpleE
	movsxd	rcx, ebx
	lea	rdx, OFFSET FLAT:__ImageBase
	movzx	r11d, BYTE PTR unsigned_cjmptype[rcx+rdx-1]
	jmp	SHORT $LN51@GetSimpleE
$LN50@GetSimpleE:
	movsxd	rcx, ebx
	lea	rdx, OFFSET FLAT:__ImageBase
	movzx	r11d, BYTE PTR signed_cjmptype[rcx+rdx-1]
$LN51@GetSimpleE:

; 525  :     hllop->lastjmp = p;

	mov	rax, QWORD PTR hllop$[rsp]
	mov	QWORD PTR [rax], r10

; 526  :     RenderJcc(p, instr, neg_cjmptype[op - COP_EQ] ? is_true : !is_true, label);

	cmp	BYTE PTR neg_cjmptype[rcx+rdx-1], r14b
	je	SHORT $LN52@GetSimpleE
	movzx	r14d, bpl
	jmp	SHORT $LN53@GetSimpleE
$LN52@GetSimpleE:
	test	bpl, bpl
	sete	r14b
$LN53@GetSimpleE:
	mov	r8d, r14d
	movzx	edx, r11b
	mov	rcx, r10
	mov	r9d, r13d
	call	RenderJcc

; 527  :   }
; 528  :   else {
; 529  :     DebugMsg(("GetSimpleExpression: unexpected operator %s\n", tokenarray[op1_pos].tokpos));
; 530  :     return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));
; 531  :   }
; 532  :   return(NOT_ERROR);

	xor	eax, eax
	jmp	SHORT $LN1@GetSimpleE
$LN29@GetSimpleE:

; 441  :   case EXPR_FLOAT:
; 442  :     DebugMsg(("GetSimpleExpression: float expression rejected: %s\n", tokenarray[op1_pos].tokpos));
; 443  :     return(EmitError(REAL_OR_BCD_NUMBER_NOT_ALLOWED)); /* v2.10: added */

	mov	ecx, 270				; 0000010eH
	jmp	SHORT $LN118@GetSimpleE
$LN28@GetSimpleE:

; 438  :   case EXPR_EMPTY:
; 439  :     DebugMsg(("GetSimpleExpression: empty expression rejected\n"));
; 440  :     return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE)); /* v2.09: changed from NOT_ERROR to ERROR */

	mov	ecx, 199				; 000000c7H
$LN118@GetSimpleE:
	call	EmitError
$LN1@GetSimpleE:
	mov	r14, QWORD PTR [rsp+368]

; 533  : }

	add	rsp, 288				; 00000120H
	pop	r15
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	pop	rbx
	ret	0
GetSimpleExpression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetLabel
_TEXT	SEGMENT
hll$ = 8
index$ = 16
GetLabel PROC						; COMDAT

; 335  :   /**/myassert(hll->labels[index]);
; 336  :   return(hll->labels[index]);

	movsxd	rax, edx
	mov	eax, DWORD PTR [rcx+rax*4+8]

; 337  : }

	ret	0
GetLabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT RenderJcc
_TEXT	SEGMENT
dst$ = 48
cc$ = 56
neg$ = 64
label$ = 72
RenderJcc PROC						; COMDAT

; 279  : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 280  : #ifdef DEBUG_OUT
; 281  :   char *old = dst;
; 282  : #endif
; 283  :   /* create the jump opcode: j[n]cc */
; 284  :   *dst++ = 'j';

	mov	BYTE PTR [rcx], 106			; 0000006aH
	lea	rbx, QWORD PTR [rcx+1]

; 285  :   if (neg)

	test	r8d, r8d
	je	SHORT $LN2@RenderJcc

; 286  :     *dst++ = 'n';

	mov	BYTE PTR [rbx], 110			; 0000006eH
	inc	rbx
$LN2@RenderJcc:

; 287  :   *dst++ = cc;

	mov	BYTE PTR [rbx], dl
	inc	rbx

; 288  :   if (neg == FALSE)

	test	r8d, r8d
	jne	SHORT $LN3@RenderJcc

; 289  :     *dst++ = ' '; /* make sure there's room for the inverse jmp */

	mov	BYTE PTR [rbx], 32			; 00000020H
	inc	rbx
$LN3@RenderJcc:

; 290  : 
; 291  :   *dst++ = ' ';
; 292  :   GetLabelStr(label, dst);

	mov	r8d, r9d
	mov	BYTE PTR [rbx], 32			; 00000020H
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR [rbx+1]
	call	sprintf

; 293  :   dst += strlen(dst);

	or	rax, -1
$LL7@RenderJcc:
	inc	rax
	cmp	BYTE PTR [rbx+rax+1], 0
	jne	SHORT $LL7@RenderJcc

; 294  :   *dst++ = EOLCHAR;

	mov	WORD PTR [rbx+rax+1], 10

; 295  :   *dst = NULLC;
; 296  :   DebugMsg1(("%u RenderJcc()=>%s<\n", evallvl, old));
; 297  :   return(dst);

	add	rbx, 2
	add	rax, rbx

; 298  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
RenderJcc ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetLabelStr
_TEXT	SEGMENT
label$ = 48
buff$ = 56
GetLabelStr PROC					; COMDAT

; 270  : {

	push	rbx
	sub	rsp, 32					; 00000020H
	mov	rbx, rdx

; 271  :   sprintf(buff, LABELFMT, label);

	mov	r8d, ecx
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG11028
	call	sprintf

; 272  :   return(buff);

	mov	rax, rbx

; 273  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
GetLabelStr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT RenderInstr
_TEXT	SEGMENT
dst$ = 48
instr$ = 56
start1$ = 64
end1$ = 72
start2$ = 80
end2$ = 88
tokenarray$ = 96
RenderInstr PROC					; COMDAT

; 237  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 32					; 00000020H
	movsxd	rbp, r9d
	mov	rbx, rcx
	movsxd	rsi, r8d

; 238  :   int i;
; 239  : #ifdef DEBUG_OUT
; 240  :   char *old = dst;
; 241  : #endif
; 242  :   i = strlen(instr);

	or	rax, -1
$LL6@RenderInst:
	inc	rax
	cmp	BYTE PTR [rdx+rax], 0
	jne	SHORT $LL6@RenderInst

; 243  :   /* copy the instruction */
; 244  :   memcpy(dst, instr, i);

	movsxd	rdi, eax
	mov	r8, rdi
	call	memcpy

; 245  :   dst += i;

	add	rbx, rdi

; 246  :   /* copy the first operand's tokens */
; 247  :   *dst++ = ' ';
; 248  :   i = tokenarray[end1].tokpos - tokenarray[start1].tokpos;

	mov	rdx, rsi
	mov	rsi, QWORD PTR tokenarray$[rsp]
	mov	rax, rbp
	shl	rdx, 5
	shl	rax, 5
	mov	BYTE PTR [rbx], 32			; 00000020H
	inc	rbx
	mov	ecx, DWORD PTR [rax+rsi+24]
	sub	ecx, DWORD PTR [rdx+rsi+24]

; 249  :   memcpy(dst, tokenarray[start1].tokpos, i);

	mov	rdx, QWORD PTR [rdx+rsi+24]
	movsxd	rdi, ecx
	mov	rcx, rbx
	mov	r8, rdi
	call	memcpy

; 250  :   dst += i;
; 251  :   if (start2 != EMPTY) {

	movsxd	rax, DWORD PTR start2$[rsp]
	add	rbx, rdi
	cmp	eax, -2
	je	SHORT $LN2@RenderInst

; 252  :     *dst++ = ',';

	mov	WORD PTR [rbx], 8236			; 0000202cH

; 253  :     /* copy the second operand's tokens */
; 254  :     *dst++ = ' ';
; 255  :     i = tokenarray[end2].tokpos - tokenarray[start2].tokpos;

	mov	rdx, rax
	movsxd	rax, DWORD PTR end2$[rsp]
	add	rbx, 2
	shl	rdx, 5
	shl	rax, 5
	mov	ecx, DWORD PTR [rax+rsi+24]
	sub	ecx, DWORD PTR [rdx+rsi+24]

; 256  :     memcpy(dst, tokenarray[start2].tokpos, i);

	mov	rdx, QWORD PTR [rdx+rsi+24]
	movsxd	rdi, ecx
	mov	rcx, rbx
	mov	r8, rdi
	call	memcpy

; 257  :     dst += i; 

	add	rbx, rdi

; 258  :   }

	jmp	SHORT $LN4@RenderInst
$LN2@RenderInst:

; 259  :   else if (end2 != EMPTY) {

	mov	r8d, DWORD PTR end2$[rsp]
	cmp	r8d, -2
	je	SHORT $LN4@RenderInst

; 260  :     dst += sprintf(dst, ", %d", end2);

	lea	rdx, OFFSET FLAT:$SG11021
	mov	rcx, rbx
	call	sprintf
	movsxd	rcx, eax
	add	rbx, rcx
$LN4@RenderInst:

; 261  :   }
; 262  :   *dst++ = EOLCHAR;
; 263  :   *dst = NULLC;
; 264  :   DebugMsg1(("%u RenderInstr(%s)=>%s<\n", evallvl, instr, old));
; 265  :   return(dst);
; 266  : }

	mov	rbp, QWORD PTR [rsp+56]
	lea	rax, QWORD PTR [rbx+1]
	mov	rsi, QWORD PTR [rsp+64]
	mov	WORD PTR [rbx], 10
	mov	rbx, QWORD PTR [rsp+48]
	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
RenderInstr ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetCOp
_TEXT	SEGMENT
item$ = 48
GetCOp	PROC						; COMDAT

; 172  : {

	push	rbx
	sub	rsp, 32					; 00000020H

; 173  :   int size;
; 174  :   enum c_bop rc;
; 175  :   char *p = item->string_ptr;
; 176  : 
; 177  :   size = (item->token == T_STRING ? item->stringlen : 0);

	movzx	eax, BYTE PTR [rcx]
	mov	rbx, QWORD PTR [rcx+8]
	cmp	al, 9
	jne	$LN15@GetCOp
	mov	edx, DWORD PTR [rcx+16]

; 178  : 
; 179  :   if (size == 2) {

	cmp	edx, 2
	jne	SHORT $LN6@GetCOp

; 180  :     switch (*(uint_16 *)p) {

	movzx	ecx, WORD PTR [rbx]
	cmp	ecx, 15677				; 00003d3dH
	jg	SHORT $LN47@GetCOp
	je	SHORT $LN8@GetCOp
	sub	ecx, 9766				; 00002626H
	je	SHORT $LN12@GetCOp
	sub	ecx, 5883				; 000016fbH
	je	SHORT $LN9@GetCOp
	cmp	ecx, 27
	jne	$LN42@GetCOp

; 184  :     case CHARS_LE:  rc = COP_LE;  break;

	lea	eax, QWORD PTR [rdx+4]

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN9@GetCOp:

; 182  :     case CHARS_NE:  rc = COP_NE;  break;

	mov	eax, 2

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN12@GetCOp:

; 185  :     case CHARS_AND: rc = COP_AND; break;

	mov	eax, 7

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN8@GetCOp:

; 181  :     case CHARS_EQ:  rc = COP_EQ;  break;

	mov	eax, 1

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN47@GetCOp:

; 180  :     switch (*(uint_16 *)p) {

	cmp	ecx, 15678				; 00003d3eH
	je	SHORT $LN10@GetCOp
	cmp	ecx, 31868				; 00007c7cH
	jne	$LN42@GetCOp

; 186  :     case CHARS_OR:  rc = COP_OR;  break;

	mov	eax, 8

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN10@GetCOp:

; 183  :     case CHARS_GE:  rc = COP_GE;  break;

	mov	eax, 5

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN6@GetCOp:

; 187  :     default: return(COP_NONE);
; 188  :     }
; 189  :   }
; 190  :   else if (size == 1) {

	cmp	edx, 1
	jne	SHORT $LN15@GetCOp

; 191  :     switch (*p) {

	movzx	eax, BYTE PTR [rbx]
	cmp	al, 33					; 00000021H
	je	SHORT $LN20@GetCOp
	cmp	al, 38					; 00000026H
	je	SHORT $LN19@GetCOp
	cmp	al, 60					; 0000003cH
	je	SHORT $LN18@GetCOp
	cmp	al, 62					; 0000003eH
	jne	$LN42@GetCOp

; 192  :     case '>': rc = COP_GT;   break;

	lea	eax, QWORD PTR [rdx+2]

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN18@GetCOp:

; 193  :     case '<': rc = COP_LT;   break;

	mov	eax, 4

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN19@GetCOp:

; 194  :     case '&': rc = COP_ANDB; break;

	mov	eax, 9

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN20@GetCOp:

; 195  :     case '!': rc = COP_NEG;  break;

	mov	eax, 10

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN15@GetCOp:

; 196  :     default: return(COP_NONE);
; 197  :     }
; 198  :   }
; 199  :   else {
; 200  :     if (item->token != T_ID)

	cmp	al, 8
	jne	$LN42@GetCOp

; 201  :       return(COP_NONE);
; 202  :     /* a valid "flag" string must end with a question mark */
; 203  :     size = strlen(p);

	or	rcx, -1
	npad	7
$LL53@GetCOp:
	inc	rcx
	cmp	BYTE PTR [rbx+rcx], 0
	jne	SHORT $LL53@GetCOp

; 204  :     if (*(p + size - 1) != '?')

	movsxd	rax, ecx
	cmp	BYTE PTR [rax+rbx-1], 63		; 0000003fH
	jne	$LN42@GetCOp

; 205  :       return(COP_NONE);
; 206  :     if (size == 5 && (0 == _memicmp(p, "ZERO", 4)))

	cmp	ecx, 5
	jne	SHORT $LN24@GetCOp
	lea	r8d, QWORD PTR [rcx-1]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG10973
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN48@GetCOp

; 207  :       rc = COP_ZERO;

	mov	eax, 11

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN48@GetCOp:

; 210  :     else if (size == 5 && (0 == _memicmp(p, "SIGN", 4)))

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG10979
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN50@GetCOp

; 211  :       rc = COP_SIGN;

	mov	eax, 13

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN50@GetCOp:

; 216  :     //added by habran
; 217  :     else if (size == 5 && (0 == _memicmp(p, "LESS", 4)))

	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG10988
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	jne	$LN42@GetCOp

; 218  :       rc = COP_LESS;

	mov	eax, 16

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN24@GetCOp:

; 208  :     else if (size == 6 && (0 == _memicmp(p, "CARRY", 5)))

	cmp	ecx, 6
	jne	$LN28@GetCOp
	lea	r8d, QWORD PTR [rcx-1]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG10976
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN49@GetCOp

; 209  :       rc = COP_CARRY;

	mov	eax, 12

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN49@GetCOp:

; 221  :     else if (size == 6 && (0 == _memicmp(p, "ABOVE", 5)))

	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG10994
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN51@GetCOp

; 222  :       rc = COP_ABOVE;

	mov	eax, 18

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN51@GetCOp:

; 223  :     else if (size == 6 && (0 == _memicmp(p, "EQUAL", 5)))

	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG10997
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN52@GetCOp

; 224  :       rc = COP_EQUAL;

	mov	eax, 19

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN52@GetCOp:

; 225  :     else if (size == 6 && (0 == _memicmp(p, "BELOW", 5)))

	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG11000
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	jne	$LN42@GetCOp

; 226  :       rc = COP_BELOW;

	mov	eax, 20

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN28@GetCOp:

; 212  :     else if (size == 7 && (0 == _memicmp(p, "PARITY", 6)))

	cmp	ecx, 7
	jne	SHORT $LN30@GetCOp
	lea	r8d, QWORD PTR [rcx-1]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG10982
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN42@GetCOp

; 213  :       rc = COP_PARITY;

	mov	eax, 14

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN30@GetCOp:

; 214  :     else if (size == 9 && (0 == _memicmp(p, "OVERFLOW", 8)))

	cmp	ecx, 9
	jne	SHORT $LN34@GetCOp
	lea	r8d, QWORD PTR [rcx-1]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG10985
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN42@GetCOp

; 215  :       rc = COP_OVERFLOW;

	mov	eax, 15

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN34@GetCOp:

; 219  :     else if (size == 8 && (0 == _memicmp(p, "GREATER", 7)))

	cmp	ecx, 8
	jne	SHORT $LN42@GetCOp
	lea	r8d, QWORD PTR [rcx-1]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG10991
	call	_memicmp
	test	eax, eax
	jne	SHORT $LN42@GetCOp

; 220  :       rc = COP_GREATER;

	mov	eax, 17

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
$LN42@GetCOp:

; 227  :     else
; 228  :       return(COP_NONE);

	xor	eax, eax

; 229  :   }
; 230  :   return(rc);
; 231  : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
GetCOp	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetHllLabel
_TEXT	SEGMENT
GetHllLabel PROC					; COMDAT

; 152  :   return (++ModuleInfo.hll_label);

	mov	eax, DWORD PTR ModuleInfo+352
	inc	eax
	mov	DWORD PTR ModuleInfo+352, eax

; 153  : }

	ret	0
GetHllLabel ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetExpression
_TEXT	SEGMENT
buff$1 = 64
hll$ = 144
i$ = 152
tokenarray$ = 160
ilabel$ = 168
is_true$ = 176
buffer$ = 184
hllop$ = 192
GetExpression PROC					; COMDAT

; 676  : {

	mov	QWORD PTR [rsp+8], rbx
	mov	DWORD PTR [rsp+32], r9d
	mov	QWORD PTR [rsp+24], r8
	push	rbp
	push	rsi
	push	rdi
	push	r12
	push	r13
	push	r14
	push	r15
	sub	rsp, 80					; 00000050H

; 677  :   char *ptr = buffer;
; 678  :   uint_32 truelabel = 0;
; 679  : 
; 680  :   DebugMsg1(("%u GetExpression(>%.32s< buf=>%s<) enter\n", ++evallvl, tokenarray[*i].tokpos, buffer));
; 681  : 
; 682  :   /* v2.08: structure changed from for(;;) to while() to increase
; 683  :   * readability and - optionally - handle the second operand differently
; 684  :   * than the first.
; 685  :   */
; 686  : 
; 687  :   if (ERROR == GetAndExpression(hll, i, tokenarray, ilabel, is_true, ptr, hllop)) {

	mov	r15, QWORD PTR hllop$[rsp]
	mov	r13, rcx
	mov	rcx, QWORD PTR buffer$[rsp]
	mov	rbx, r8
	movzx	ebp, BYTE PTR is_true$[rsp]
	mov	rdi, rcx
	mov	QWORD PTR [rsp+48], r15
	mov	r12, rdx
	mov	QWORD PTR [rsp+40], rcx
	xor	r14d, r14d
	mov	rcx, r13
	mov	BYTE PTR [rsp+32], bpl
	call	GetAndExpression
	cmp	eax, -1
	jne	SHORT $LN30@GetExpress

; 688  :     DebugMsg1(("%u GetExpression exit, error\n", evallvl--));
; 689  :     return(ERROR);

	or	rax, -1
	jmp	$LN1@GetExpress
$LN30@GetExpress:

; 690  :   }
; 691  :   while (COP_OR == GetCOp(&tokenarray[*i])) {

	movsxd	rcx, DWORD PTR [r12]
	shl	rcx, 5
	add	rcx, rbx
	call	GetCOp
	cmp	eax, 8
	jne	$LN13@GetExpress
	or	rsi, -1
	npad	9
$LL2@GetExpress:

; 692  : 
; 693  :     uint_32 nlabel;
; 694  :     uint_32 olabel;
; 695  :     char buff[16];
; 696  : 
; 697  :     /* the generated code of last simple expression has to be modified
; 698  :     1. the last jump must be inverted
; 699  :     2. a "is_true" label must be created (it's used to jump "behind" the expr)
; 700  :     3. create a new label
; 701  :     4. the current "false" label must be generated
; 702  : 
; 703  :     if it is a .REPEAT, step 4 is slightly more difficult, since the "false"
; 704  :     label is already "gone":
; 705  :     4a. create a new label
; 706  :     4b. replace the "false" label in the generated code by the new label
; 707  :     */
; 708  : 
; 709  :     (*i)++;

	inc	DWORD PTR [r12]

; 710  :     DebugMsg1(("%u GetExpression: ||-operator found, is_true=%u, lastjmp=%s\n", evallvl, is_true, hllop->lastjmp ? hllop->lastjmp : "NULL"));
; 711  : 
; 712  :     if (is_true == FALSE) {

	test	bpl, bpl
	jne	$LN11@GetExpress

; 713  :       if (hllop->lastjmp) {

	mov	rbx, QWORD PTR [r15]
	test	rbx, rbx
	je	$LN42@GetExpress

; 714  :         char *p = hllop->lastjmp;
; 715  :         InvertJump(p);           /* step 1 */

	mov	rcx, rbx
	call	InvertJump

; 716  :         if (truelabel == 0)      /* step 2 */

	test	r14d, r14d
	jne	SHORT $LN7@GetExpress

; 717  :           truelabel = GetHllLabel();

	mov	r14d, DWORD PTR ModuleInfo+352
	inc	r14d
	mov	DWORD PTR ModuleInfo+352, r14d
$LN7@GetExpress:

; 718  :         if (*p) { /* v2.11: there might be a 0 at lastjmp */

	cmp	BYTE PTR [rbx], 0
	je	SHORT $LN8@GetExpress

; 719  :           p += 4;                /* skip 'jcc ' or 'jmp ' */
; 720  :           GetLabelStr(truelabel, p);

	mov	r8d, r14d
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR [rbx+4]
	call	sprintf

; 721  :           strcat(p, EOLSTR);

	sub	rbx, -3
$LL40@GetExpress:
	cmp	BYTE PTR [rbx+1], 0
	lea	rbx, QWORD PTR [rbx+1]
	jne	SHORT $LL40@GetExpress
	xor	ecx, ecx
	lea	r15, OFFSET FLAT:$SG11242
	npad	10
$LL41@GetExpress:
	movzx	eax, BYTE PTR [r15+rcx]
	mov	BYTE PTR [rbx+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL41@GetExpress
	mov	r15, QWORD PTR hllop$[rsp]
$LN8@GetExpress:

; 722  :         }
; 723  :         /* v2.08: if-block added */
; 724  :         if (hllop->lasttruelabel)

	mov	edx, DWORD PTR [r15+8]
	test	edx, edx
	je	SHORT $LN9@GetExpress

; 725  :           ReplaceLabel(ptr, hllop->lasttruelabel, truelabel);

	mov	r8d, r14d
	mov	rcx, rdi
	call	ReplaceLabel
$LN9@GetExpress:

; 726  :         DebugMsg1(("%u GetExpression: jmp inverted, dest changed >%s<\n", evallvl, ptr));
; 727  :         hllop->lastjmp = NULL;
; 728  : 
; 729  :         nlabel = GetHllLabel();  /* step 3 */
; 730  :         olabel = GetLabel(hll, ilabel);

	movsxd	rax, DWORD PTR ilabel$[rsp]
	mov	QWORD PTR [r15], 0
	mov	ebx, DWORD PTR ModuleInfo+352
	inc	ebx
	mov	DWORD PTR ModuleInfo+352, ebx

; 731  :         if (hll->cmd == HLL_REPEAT) {

	cmp	DWORD PTR [r13+52], 2
	mov	ebp, DWORD PTR [r13+rax*4+8]
	jne	SHORT $LN10@GetExpress

; 732  :           ReplaceLabel(buffer, olabel, nlabel);

	mov	rcx, QWORD PTR buffer$[rsp]
	mov	r8d, ebx
	mov	edx, ebp
	call	ReplaceLabel

; 733  :           sprintf(ptr + strlen(ptr), "%s" LABELQUAL EOLSTR, GetLabelStr(nlabel, buff));

	mov	r8d, ebx
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$1[rsp]
	call	sprintf
	mov	rcx, rsi
	npad	3
$LL39@GetExpress:
	inc	rcx
	cmp	BYTE PTR [rdi+rcx], 0
	jne	SHORT $LL39@GetExpress
	add	rcx, rdi
	lea	r8, QWORD PTR buff$1[rsp]
	lea	rdx, OFFSET FLAT:$SG11246
	call	sprintf

; 734  :         }

	jmp	SHORT $LN46@GetExpress
$LN10@GetExpress:

; 735  :         else {
; 736  :           sprintf(ptr + strlen(ptr), "%s" LABELQUAL EOLSTR, GetLabelStr(olabel, buff));

	mov	r8d, ebp
	lea	rdx, OFFSET FLAT:$SG11028
	lea	rcx, QWORD PTR buff$1[rsp]
	call	sprintf
	mov	rcx, rsi
$LL38@GetExpress:
	inc	rcx
	cmp	BYTE PTR [rdi+rcx], 0
	jne	SHORT $LL38@GetExpress
	add	rcx, rdi
	lea	r8, QWORD PTR buff$1[rsp]
	lea	rdx, OFFSET FLAT:$SG11247
	call	sprintf

; 737  :           ReplaceLabel(buffer, olabel, nlabel);

	mov	rcx, QWORD PTR buffer$[rsp]
	mov	r8d, ebx
	mov	edx, ebp
	call	ReplaceLabel
$LN46@GetExpress:
	movzx	ebp, BYTE PTR is_true$[rsp]
$LN42@GetExpress:
	mov	rbx, QWORD PTR tokenarray$[rsp]
$LN11@GetExpress:

; 738  :         }
; 739  :         DebugMsg1(("%u GetExpression: dest changed, label added >%s<\n", evallvl, ptr));
; 740  :       }
; 741  :     }
; 742  :     ptr += strlen(ptr);

	mov	rax, rsi
	npad	8
$LL37@GetExpress:
	inc	rax
	cmp	BYTE PTR [rdi+rax], 0
	jne	SHORT $LL37@GetExpress

; 743  :     hllop->lasttruelabel = 0; /* v2.08 */
; 744  :     if (ERROR == GetAndExpression(hll, i, tokenarray, ilabel, is_true, ptr, hllop)) {

	mov	r9d, DWORD PTR ilabel$[rsp]
	add	rdi, rax
	mov	QWORD PTR [rsp+48], r15
	mov	r8, rbx
	mov	QWORD PTR [rsp+40], rdi
	mov	rdx, r12
	mov	rcx, r13
	mov	BYTE PTR [rsp+32], bpl
	mov	DWORD PTR [r15+8], 0
	call	GetAndExpression
	cmp	eax, -1
	je	$LN31@GetExpress

; 690  :   }
; 691  :   while (COP_OR == GetCOp(&tokenarray[*i])) {

	movsxd	rcx, DWORD PTR [r12]
	shl	rcx, 5
	add	rcx, rbx
	call	GetCOp
	cmp	eax, 8
	je	$LL2@GetExpress

; 747  :     }
; 748  :   }
; 749  :   if (truelabel > 0) {

	test	r14d, r14d
	je	$LN13@GetExpress

; 750  :     /* v2.08: this is needed, but ober-hackish. to be improved... */
; 751  :     if (hllop->lastjmp && hllop->lasttruelabel) {

	cmp	QWORD PTR [r15], 0
	je	SHORT $LL14@GetExpress
	mov	edx, DWORD PTR [r15+8]
	test	edx, edx
	je	SHORT $LL14@GetExpress

; 752  :       DebugMsg1(("%u GetExpression: suppressed ReplaceLabel %u -> %u, lastjmp=%s\n", evallvl, hllop->lasttruelabel, truelabel, hllop->lastjmp));
; 753  :       ReplaceLabel(ptr, hllop->lasttruelabel, truelabel);

	mov	r8d, r14d
	mov	rcx, rdi
	call	ReplaceLabel

; 754  :       *(strchr(hllop->lastjmp, EOLCHAR) + 1) = NULLC;

	mov	rcx, QWORD PTR [r15]
	mov	edx, 10
	call	strchr
	mov	BYTE PTR [rax+1], 0
	npad	2
$LL14@GetExpress:

; 755  :     }
; 756  :     ptr += strlen(ptr);

	inc	rsi
	cmp	BYTE PTR [rdi+rsi], 0
	jne	SHORT $LL14@GetExpress
	add	rdi, rsi

; 757  :     GetLabelStr(truelabel, ptr);

	lea	rdx, OFFSET FLAT:$SG11028
	mov	rcx, rdi
	mov	r8d, r14d
	call	sprintf

; 758  :     strcat(ptr, LABELQUAL EOLSTR);

	dec	rdi
$LL34@GetExpress:
	cmp	BYTE PTR [rdi+1], 0
	lea	rdi, QWORD PTR [rdi+1]
	jne	SHORT $LL34@GetExpress
	lea	rdx, OFFSET FLAT:$SG11251
	xor	ecx, ecx
	npad	12
$LL35@GetExpress:
	movzx	eax, BYTE PTR [rdx+rcx]
	mov	BYTE PTR [rdi+rcx], al
	lea	rcx, QWORD PTR [rcx+1]
	test	al, al
	jne	SHORT $LL35@GetExpress

; 759  :     DebugMsg1(("%u GetExpression: label added >%s<\n", evallvl, ptr));
; 760  :     hllop->lasttruelabel = truelabel; /* v2.08 */

	mov	DWORD PTR [r15+8], r14d
$LN13@GetExpress:

; 761  :   }
; 762  :   DebugMsg1(("%u GetExpression exit\n", evallvl--));
; 763  :   return(NOT_ERROR);

	xor	eax, eax
$LN1@GetExpress:

; 764  : }

	mov	rbx, QWORD PTR [rsp+144]
	add	rsp, 80					; 00000050H
	pop	r15
	pop	r14
	pop	r13
	pop	r12
	pop	rdi
	pop	rsi
	pop	rbp
	ret	0
$LN31@GetExpress:

; 745  :       DebugMsg1(("%u GetExpression exit, error\n", evallvl--));
; 746  :       return(ERROR);

	mov	eax, esi
	jmp	SHORT $LN1@GetExpress
GetExpression ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
;	COMDAT GetToken
_TEXT	SEGMENT
hll$ = 80
i$ = 88
tokenarray$ = 96
opnd$ = 104
GetToken PROC						; COMDAT

; 304  : {

	mov	QWORD PTR [rsp+32], rbp
	push	rdi
	push	r14
	push	r15
	sub	rsp, 48					; 00000030H

; 305  :   int end_tok;
; 306  : 
; 307  :   /* scan for the next C operator in the token array.
; 308  :   * because the ASM evaluator may report an error if such a thing
; 309  :   * is found ( CARRY?, ZERO? and alikes will be regarded as - not yet defined - labels )
; 310  :   */
; 311  :   for (end_tok = *i; end_tok < Token_Count; end_tok++) {

	movsxd	rdi, DWORD PTR [rdx]
	mov	rbp, r9
	cmp	edi, DWORD PTR ModuleInfo+496
	mov	r15, r8
	mov	r14, rdx
	jge	$LN81@GetToken
	mov	QWORD PTR [rsp+80], rbx
	mov	QWORD PTR [rsp+88], rsi
	mov	rsi, rdi
	shl	rsi, 5
	mov	QWORD PTR [rsp+96], r12
	add	rsi, r8
	mov	r12, 5764607806502076416		; 5000004200000000H
	npad	7
$LL4@GetToken:

; 312  :     if ((GetCOp(&tokenarray[end_tok])) != COP_NONE)

	movzx	ecx, BYTE PTR [rsi]
	mov	rbx, QWORD PTR [rsi+8]
	cmp	cl, 9
	jne	SHORT $LN24@GetToken
	mov	eax, DWORD PTR [rsi+16]
	cmp	eax, 2
	jne	SHORT $LN15@GetToken
	movzx	ecx, WORD PTR [rbx]
	cmp	ecx, 15677				; 00003d3dH
	jg	SHORT $LN56@GetToken
	je	$LN84@GetToken
	sub	ecx, 9766				; 00002626H
	je	$LN84@GetToken
	sub	ecx, 5883				; 000016fbH
	je	$LN84@GetToken
	sub	ecx, 27
	jmp	$LN85@GetToken
$LN56@GetToken:
	cmp	ecx, 15678				; 00003d3eH
	je	$LN84@GetToken
	cmp	ecx, 31868				; 00007c7cH
	jmp	$LN85@GetToken
$LN15@GetToken:
	cmp	eax, 1
	jne	SHORT $LN24@GetToken
	movzx	eax, BYTE PTR [rbx]
	cmp	al, 62					; 0000003eH
	ja	$LN51@GetToken
	bt	r12, rax
	jb	$LN84@GetToken
	jmp	$LN51@GetToken
$LN24@GetToken:
	cmp	cl, 8
	jne	$LN51@GetToken
	or	rcx, -1
	npad	8
$LL80@GetToken:
	inc	rcx
	cmp	BYTE PTR [rbx+rcx], 0
	jne	SHORT $LL80@GetToken
	movsxd	rax, ecx
	cmp	BYTE PTR [rax+rbx-1], 63		; 0000003fH
	jne	$LN51@GetToken
	cmp	ecx, 5
	jne	SHORT $LN33@GetToken
	lea	r8d, QWORD PTR [rcx-1]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG10973
	call	_memicmp
	test	eax, eax
	je	$LN84@GetToken
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG10979
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	je	$LN84@GetToken
	mov	r8d, 4
	lea	rdx, OFFSET FLAT:$SG10988
	jmp	$LN86@GetToken
$LN33@GetToken:
	cmp	ecx, 6
	jne	SHORT $LN37@GetToken
	lea	r8d, QWORD PTR [rcx-1]
	mov	rcx, rbx
	lea	rdx, OFFSET FLAT:$SG10976
	call	_memicmp
	test	eax, eax
	je	$LN84@GetToken
	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG10994
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	je	SHORT $LN84@GetToken
	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG10997
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
	je	SHORT $LN84@GetToken
	mov	r8d, 5
	lea	rdx, OFFSET FLAT:$SG11000
	jmp	SHORT $LN86@GetToken
$LN37@GetToken:
	cmp	ecx, 7
	jne	SHORT $LN39@GetToken
	lea	r8d, QWORD PTR [rcx-1]
	lea	rdx, OFFSET FLAT:$SG10982
	jmp	SHORT $LN86@GetToken
$LN39@GetToken:
	cmp	ecx, 9
	jne	SHORT $LN43@GetToken
	lea	r8d, QWORD PTR [rcx-1]
	lea	rdx, OFFSET FLAT:$SG10985
	jmp	SHORT $LN86@GetToken
$LN43@GetToken:
	cmp	ecx, 8
	jne	SHORT $LN51@GetToken
	lea	r8d, QWORD PTR [rcx-1]
	lea	rdx, OFFSET FLAT:$SG10991
$LN86@GetToken:
	mov	rcx, rbx
	call	_memicmp
	test	eax, eax
$LN85@GetToken:
	je	SHORT $LN84@GetToken
$LN51@GetToken:

; 305  :   int end_tok;
; 306  : 
; 307  :   /* scan for the next C operator in the token array.
; 308  :   * because the ASM evaluator may report an error if such a thing
; 309  :   * is found ( CARRY?, ZERO? and alikes will be regarded as - not yet defined - labels )
; 310  :   */
; 311  :   for (end_tok = *i; end_tok < Token_Count; end_tok++) {

	inc	edi
	add	rsi, 32					; 00000020H
	cmp	edi, DWORD PTR ModuleInfo+496
	jl	$LL4@GetToken
$LN84@GetToken:
	mov	rsi, QWORD PTR [rsp+88]
	mov	rbx, QWORD PTR [rsp+80]
	mov	r12, QWORD PTR [rsp+96]
$LN81@GetToken:

; 313  :       break;
; 314  :   }
; 315  :   if (end_tok == *i) {

	cmp	edi, DWORD PTR [r14]
	jne	SHORT $LN6@GetToken

; 316  :     opnd->kind = EXPR_EMPTY;

	mov	DWORD PTR [rbp+60], -2
$LN8@GetToken:

; 327  :   }
; 328  : 
; 329  :   return(NOT_ERROR);

	xor	eax, eax

; 330  : }

	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
$LN6@GetToken:

; 317  :     return(NOT_ERROR);
; 318  :   }
; 319  :   if (ERROR == EvalOperand(i, tokenarray, end_tok, opnd, 0))

	mov	r9, rbp
	mov	BYTE PTR [rsp+32], 0
	mov	r8d, edi
	mov	rdx, r15
	mov	rcx, r14
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN7@GetToken

; 320  :     return(ERROR);

	or	eax, eax

; 330  : }

	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi
	ret	0
$LN7@GetToken:

; 321  : 
; 322  :   /* v2.11: emit error 'syntax error in control flow directive'.
; 323  :   * May happen for expressions like ".if 1 + CARRY?"
; 324  :   */
; 325  :   if (*i > end_tok) {

	cmp	DWORD PTR [r14], edi
	jle	SHORT $LN8@GetToken

; 326  :     return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));

	mov	ecx, 199				; 000000c7H

; 330  : }

	mov	rbp, QWORD PTR [rsp+104]
	add	rsp, 48					; 00000030H
	pop	r15
	pop	r14
	pop	rdi

; 326  :     return(EmitError(SYNTAX_ERROR_IN_CONTROL_FLOW_DIRECTIVE));

	jmp	EmitError
GetToken ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
_TEXT	SEGMENT
HllCheckOpen PROC

; 1714 :   if (HllStack) {

	cmp	QWORD PTR ModuleInfo+224, 0
	je	SHORT $LN2@HllCheckOp

; 1715 :     //EmitErr( BLOCK_NESTING_ERROR, ".if-.repeat-.while" );
; 1716 :     EmitErr(UNMATCHED_BLOCK_NESTING, ".if-.repeat-.while");

	lea	rdx, OFFSET FLAT:$SG11735
	mov	ecx, 142				; 0000008eH
	jmp	EmitErr
$LN2@HllCheckOp:

; 1717 :   }
; 1718 :   DebugMsg(("HllCheckOpen: allocated items:%u, reused items:%u, .while cond-blocks/bytes:%u/%u\n", cntAlloc, cntReused, cntCond, cntCondBytes));
; 1719 : }

	ret	0
HllCheckOpen ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\hll.c
_TEXT	SEGMENT
pass$ = 8
HllInit	PROC

; 1742 :   //if ( pass == PASS_1 )
; 1743 :   //    HllFree = NULL;
; 1744 : 
; 1745 :   //HllStack = NULL; /* empty stack of open hll directives */
; 1746 :   ModuleInfo.hll_label = 0; /* init hll label counter */

	mov	DWORD PTR ModuleInfo+352, 0

; 1747 : #ifdef DEBUG_OUT
; 1748 :   evallvl = 0;
; 1749 :   if (pass == PASS_1) {
; 1750 :     cntAlloc = 0;
; 1751 :     cntReused = 0;
; 1752 :     cntCond = 0;
; 1753 :     cntCondBytes = 0;
; 1754 :   }
; 1755 : #endif
; 1756 :   return;
; 1757 : }

	ret	0
HllInit	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Buffer$ = 80
_Format$ = 88
sprintf	PROC						; COMDAT

; 1776 : {

$LN8:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rbx
	push	rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, rdx

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

	lea	rsi, QWORD PTR _Format$[rsp+8]
	mov	rdi, rcx

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	call	__local_stdio_printf_options
	mov	r9, rbx
	mov	QWORD PTR [rsp+40], rsi
	or	rbx, -1
	mov	QWORD PTR [rsp+32], 0
	mov	r8, rbx
	mov	rdx, rdi
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vsprintf
	test	eax, eax
	cmovs	eax, ebx

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);
; 1787 :     return _Result;
; 1788 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	pop	rsi
	pop	rbx
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN6:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	QWORD PTR [rsp+40], rbx
	mov	r9, rsi
	or	rbx, -1
	mov	QWORD PTR [rsp+32], rdi
	mov	r8, rbx
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	or	rcx, 1
	call	__stdio_common_vsprintf

; 1459 :     #pragma warning(pop)
; 1460 : }

	mov	rbp, QWORD PTR [rsp+72]
	test	eax, eax
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ebx
	mov	rbx, QWORD PTR [rsp+64]
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_BufferCount$ = 72
_Format$ = 80
_Locale$ = 88
_ArgList$ = 96
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN4:
	mov	QWORD PTR [rsp+8], rbx
	mov	QWORD PTR [rsp+16], rbp
	mov	QWORD PTR [rsp+24], rsi
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rbx, r9
	mov	rdi, r8
	mov	rsi, rdx
	mov	rbp, rcx

; 1386 :     int const _Result = __stdio_common_vsprintf(

	call	__local_stdio_printf_options
	mov	r9, rdi
	mov	r8, rsi
	mov	rdx, rbp
	mov	rcx, QWORD PTR [rax]
	mov	rax, QWORD PTR _ArgList$[rsp]
	or	rcx, 1
	mov	QWORD PTR [rsp+40], rax
	mov	QWORD PTR [rsp+32], rbx
	call	__stdio_common_vsprintf

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;
; 1391 : }

	mov	rbx, QWORD PTR [rsp+64]
	or	ecx, -1
	mov	rbp, QWORD PTR [rsp+72]
	test	eax, eax
	mov	rsi, QWORD PTR [rsp+80]
	cmovs	eax, ecx
	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Ogtpy
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
