; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	stackreg
_DATA	SEGMENT
COMM	procidx:DWORD
COMM	ProcStatus:DWORD
COMM	StackAdj:DWORD
COMM	StackAdjHigh:DWORD
_DATA	ENDS
_BSS	SEGMENT
$SG12580 DB	01H DUP (?)
$SG11605 DB	01H DUP (?)
$SG11630 DB	01H DUP (?)
$SG11631 DB	01H DUP (?)
$SG11642 DB	01H DUP (?)
$SG11645 DB	01H DUP (?)
$SG11667 DB	01H DUP (?)
$SG11794 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
COMM	evex:BYTE
_DATA	ENDS
_BSS	SEGMENT
$SG11908 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	CurrProc:QWORD
COMM	sym_ReservedStack:QWORD
_DATA	ENDS
_BSS	SEGMENT
$SG12157 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
ms32_regs16 DD	09H
	DD	0bH
	DD	0cH
win64_nvgpr DW	0f0e8H
	ORG $+2
ms32_regs32 DD	012H
	DD	013H
ms32_maxreg DD	03H
	DD	02H
watc_regs8 DD	01H
	DD	03H
	DD	04H
	DD	02H
watc_regs16 DD	09H
	DD	0bH
	DD	0cH
	DD	0aH
watc_regs32 DD	011H
	DD	013H
	DD	014H
	DD	012H
watc_regs_qw DD	09H
	DD	0cH
	DD	0aH
	DD	0bH
ms64_regs DD	074H
	DD	075H
	DD	07bH
	DD	07cH
win64_nvxmm DW	0ffc0H
	ORG $+6
fastcall_tab DQ	FLAT:ms32_pcheck
	DQ	FLAT:ms32_return
	DQ	FLAT:watc_pcheck
	DQ	FLAT:watc_return
	DQ	FLAT:ms64_pcheck
	DQ	FLAT:ms64_return
stackreg DD	0dH
	DD	015H
	DD	077H
	ORG $+4
fmtstk0	DQ	FLAT:$SG11328
	DQ	FLAT:$SG11329
fmtstk1	DQ	FLAT:$SG11331
	DQ	FLAT:$SG11332
CONST	ENDS
_DATA	SEGMENT
$SG12295 DB	'push %r', 00H
$SG12297 DB	'%r %r', 00H
	ORG $+2
$SG12301 DB	'push %r', 00H
$SG12303 DB	'%r %r', 00H
	ORG $+2
$SG12308 DB	'write_win64_default_prologue: localsize=%u resstack=%u', 0aH
	DB	00H
$SG12317 DB	'vmovdqa [%r+%u+%s], %r', 00H
	ORG $+1
$SG12319 DB	'%r %r, %u+%s', 00H
	ORG $+3
$SG12320 DB	'vmovdqa [%r+%u], %r', 00H
$SG12323 DB	'%r', 00H
	ORG $+1
$SG12322 DB	'%r %r, %u', 00H
	ORG $+2
$SG11375 DB	'::', 00H
	ORG $+1
$SG12349 DB	'push %r', 00H
$SG12350 DB	'mov %r, %r', 00H
	ORG $+1
$SG11969 DB	'dw', 00H
	ORG $+1
$SG11328 DB	'sub %r, %d', 00H
	ORG $+1
$SG11329 DB	'%r %d', 00H
	ORG $+2
$SG11378 DB	'%s::%s', 00H
	ORG $+1
$SG11971 DB	',', 00H
	ORG $+2
$SG12354 DB	'push %r', 00H
$SG12355 DB	'sub %r, %d + %s', 00H
$SG11331 DB	'sub %r, %d + %s', 00H
$SG11332 DB	'%r %d + %s', 00H
	ORG $+1
$SG11974 DB	'dw', 00H
	ORG $+1
$SG12360 DB	'add %r, %d', 00H
	ORG $+5
$SG12361 DB	'sub %r, %d', 00H
	ORG $+5
$SG12363 DB	'push %r', 00H
$SG12364 DB	'mov %r, %s', 00H
	ORG $+5
$SG12365 DB	'mov %r, %r', 00H
	ORG $+5
$SG12367 DB	'push %r', 00H
$SG11380 DB	'watc_pcheck(%s.%s): size=%u ptr=%u far=%u reg=%s', 0aH, 00H
	ORG $+2
$SG11388 DB	'%d%c', 00H
	ORG $+7
$SG12423 DB	'SetLocalOffsets(%s): offset of %s (size=%u) set to %d', 0aH
	DB	00H
	ORG $+1
$SG12416 DB	'SetLocalOffsets(%s): cntxmm=%u cntstd=%u start=%u align='
	DB	'%u localsize=%u', 0aH, 00H
	ORG $+7
$SG12428 DB	'SetLocalOffsets(%s): localsize=%u after processing local'
	DB	's', 0aH, 00H
	ORG $+1
$SG11406 DB	'%d%c', 00H
	ORG $+7
$SG12434 DB	'SetLocalOffsets(%s): FPO, adjusting offsets', 0aH, 00H
	ORG $+3
$SG12435 DB	'SetLocalOffsets(%s): FPO, offset for %s %4d -> %4d', 0aH
	DB	00H
	ORG $+4
$SG12436 DB	'SetLocalOffsets(%s): FPO, offset for %s %4d -> %4d', 0aH
	DB	00H
	ORG $+4
$SG12439 DB	'SetLocalOffsets(%s): final localsize=%u', 0aH, 00H
	ORG $+7
$SG12449 DB	'write_prologue(%s): default prologue', 0aH, 00H
	ORG $+2
$SG12452 DB	'write_prologue(%s): prologue is NULL', 0aH, 00H
	ORG $+2
$SG12453 DB	'write_prologue(%s): userdefined prologue %s', 0aH, 00H
	ORG $+3
$SG12470 DB	'pop %r', 00H
	ORG $+1
$SG12472 DB	'pop %r', 00H
	ORG $+1
$SG12497 DB	'write_win64_default_epilogue(%s): %u xmm registers to re'
	DB	'store', 0aH, 00H
	ORG $+1
$SG12500 DB	'write_win64_default_epilogue(%s): restore %s, offset=%d', 0aH
	DB	00H
	ORG $+7
$SG12503 DB	'vmovdqa %r, [%r + %u + %s]', 00H
	ORG $+5
$SG12504 DB	'vmovdqa %r, [%r + %u]', 00H
	ORG $+2
$SG11481 DB	'LocalDir(%u) entry', 0aH, 00H
	ORG $+4
$SG12510 DB	'add %r, %d + %s', 00H
$SG11486 DB	'LocalDir: item=%s', 0aH, 00H
	ORG $+5
$SG12511 DB	'add %r, %d + %s', 00H
$SG12512 DB	'add %r, %d', 00H
	ORG $+5
$SG11490 DB	'LocalDir: SymLCreate( %s ) failed', 0aH, 00H
	ORG $+5
$SG12521 DB	'mov %r, [%r+%u]', 00H
$SG12524 DB	'pop %r', 00H
	ORG $+1
$SG11505 DB	'NULL', 00H
	ORG $+3
$SG11506 DB	'LocalDir: memtype=%X, type=%s, size=%u*%u', 0aH, 00H
	ORG $+5
$SG12534 DB	'add %r, %d + %s', 00H
$SG12536 DB	'pop %r', 00H
	ORG $+1
$SG12542 DB	'leave', 00H
	ORG $+2
$SG12547 DB	'add %r, %d', 00H
	ORG $+5
$SG12549 DB	'mov %r, %r', 00H
	ORG $+1
$SG12550 DB	'pop %r', 00H
	ORG $+5
$SG12581 DB	'%s, 0%XH, 0%XH, 0%XH, <<%s>>, <%s>', 00H
	ORG $+5
$SG12583 DB	'option epilogue:none', 0aH, 00H
	ORG $+2
$SG12599 DB	'RetInstr() enter', 0aH, 00H
	ORG $+6
$SG12605 DB	'RetInstr() exit', 0aH, 00H
	ORG $+7
$SG12606 DB	'RetInstr() exit', 0aH, 00H
	ORG $+3
$SG12618 DB	'%d%c', 00H
	ORG $+3
$SG12622 DB	'%d%c', 00H
	ORG $+7
$SG12623 DB	'RetInstr() exit', 0aH, 00H
	ORG $+7
$SG11606 DB	'ParseParams: name missing/invalid for parameter %u, i=%u'
	DB	0aH, 00H
	ORG $+6
$SG11621 DB	'ParseParams: %s defined already, state=%u, local=%u', 0aH
	DB	00H
	ORG $+3
$SG11641 DB	'ParseParams: different param count', 0aH, 00H
	ORG $+4
$SG11632 DB	'ParseParams: old-new memtype=%X-%X type=%X(%s)-%X(%s) fa'
	DB	'r=%u-%u ind=%u-%u ofss=%d-%d pmt=%X-%X', 0aH, 00H
$SG11634 DB	'ParseParams: calling SymAddLocal(%s, %s)', 0aH, 00H
	ORG $+6
$SG11647 DB	'ParseParams: SymLCreate(%s) failed', 0aH, 00H
	ORG $+4
$SG11663 DB	'ParseParams: error, cntParam=%u, found %s', 0aH, 00H
	ORG $+5
$SG11666 DB	'ParseParams: a param is left over, cntParam=%u', 0aH, 00H
$SG11674 DB	'ParseParams: parm=%s, ofs=%u, size=%d', 0aH, 00H
	ORG $+1
$SG11732 DB	'ParseProc: error, memtype changed, old-new memtype=%X-%X'
	DB	', ofssize=%X-%X', 0aH, 00H
	ORG $+7
$SG11739 DB	'ParseProc: error, language changed, %u - %u', 0aH, 00H
	ORG $+3
$SG11744 DB	'PRIVATE', 00H
$SG11749 DB	'PUBLIC', 00H
	ORG $+1
$SG11751 DB	'EXPORT', 00H
	ORG $+1
$SG11752 DB	'ParseProc(%s): EXPORT detected', 0aH, 00H
$SG11764 DB	'FORCEFRAME', 00H
	ORG $+1
$SG11767 DB	'LOADDS', 00H
	ORG $+1
$SG11780 DB	'USES', 00H
	ORG $+7
$SG11782 DB	'ParseProc: USES found in PROTO', 0aH, 00H
$SG11785 DB	'ParseProc: no registers for regslist', 0aH, 00H
	ORG $+2
$SG11790 DB	'ParseProc(%s): i=%u, Token_Count=%u, CurrWordSize=%u', 0aH
	DB	00H
	ORG $+2
$SG11799 DB	'ParseProc(%s): memtype=%Xh parasize=%u', 0aH, 00H
$SG11845 DB	'DeleteProc(%s) enter', 0aH, 00H
	ORG $+2
$SG11848 DB	'DeleteProc(%s): free %s [next=%p]', 0aH, 00H
	ORG $+5
$SG11852 DB	'DeleteProc(%s): free %p (%s) [next=%p]', 0aH, 00H
$SG11882 DB	'ProcDir enter, curr ofs=%X', 0aH, 00H
$SG11906 DB	'proc.c', 00H
	ORG $+5
$SG11909 DB	'phase error ', 00H
	ORG $+3
$SG11910 DB	'ProcDir(%s): %spass %u, old ofs=%X, new ofs=%X', 0aH, 00H
$SG11939 DB	'CopyPrototype(%s,src=%s): ofssize=%u', 0aH, 00H
	ORG $+2
$SG11959 DB	'.xdata', 00H
	ORG $+1
$SG11963 DB	'%s %r', 00H
	ORG $+2
$SG11964 DB	'%s %r align(%u) flat read ''DATA''', 00H
	ORG $+7
$SG11965 DB	'$xdatasym label near', 00H
	ORG $+3
$SG11967 DB	'db %ut + (0%xh shl 3), %ut, %ut, 0%xh + (0%xh shl 4)', 00H
	ORG $+3
$SG11970 DB	'%s 0%xh', 00H
$SG11975 DB	'%r 4', 00H
	ORG $+3
$SG11977 DB	'dd %r %s', 00H
	ORG $+3
$SG11978 DB	'%r 8', 00H
	ORG $+3
$SG11979 DB	'%s %r', 00H
	ORG $+2
$SG11982 DB	'.pdata', 00H
	ORG $+5
$SG11983 DB	'.pdata$%04u', 00H
$SG11986 DB	'%s %r', 00H
	ORG $+6
$SG11987 DB	'%s %r align(%u) flat read ''DATA''', 00H
	ORG $+7
$SG11988 DB	'dd %r %s, %r %s+0%xh, %r $xdatasym+0%xh', 00H
$SG11989 DB	'%s %r', 00H
	ORG $+2
$SG12015 DB	'NULL', 00H
	ORG $+3
$SG12016 DB	'ProcFini(%s): unmatched block nesting error, proc->seg=%'
	DB	's, CurrSeg=%s', 0aH, 00H
	ORG $+1
$SG12021 DB	'ProcFini(%s): localsize=%u ReservedStack=%u', 0aH, 00H
	ORG $+3
$SG12023 DB	'ProcFini(%s): FPO, offset for %s %8d -> %8d', 0aH, 00H
	ORG $+3
$SG12024 DB	'ProcFini(%s): FPO, offset for %s %8d -> %8d', 0aH, 00H
	ORG $+3
$SG12036 DB	'NULL', 00H
	ORG $+3
$SG12037 DB	'EndpDir(%s) enter, curr ofs=% X, CurrProc=%s', 0aH, 00H
	ORG $+2
$SG12062 DB	'ExcFrameDirective(%s) enter', 0aH, 00H
	ORG $+3
$SG12079 DB	'ExcFrameDirective: UWOP_ALLOC_LARGE, operation info 1, s'
	DB	'ize=%Xh', 0aH, 00H
	ORG $+7
$SG12081 DB	'ExcFrameDirective: UWOP_ALLOC_SMALL, size=%Xh', 0aH, 00H
	ORG $+1
$SG12086 DB	'CODE', 00H
	ORG $+3
$SG12080 DB	'ExcFrameDirective: UWOP_ALLOC_LARGE, operation info 0, s'
	DB	'ize=%Xh', 0aH, 00H
	ORG $+7
$SG12117 DB	'ExcFrameDirective() exit, ok', 0aH, 00H
	ORG $+2
$SG12123 DB	'ProcCheckOpen: unmatched block nesting error, CurrProc=%'
	DB	's', 0aH, 00H
	ORG $+5
$SG12154 DB	'option prologue:none', 0aH, 00H
	ORG $+2
$SG12158 DB	' (%s, 0%XH, 0%XH, 0%XH, <<%s>>, <%s>)', 00H
	ORG $+2
$SG12159 DB	'write_userdef_prologue: macro %s returned >%s<', 0aH, 00H
$SG12182 DB	'movq [%r+%u], %r', 00H
	ORG $+7
$SG12184 DB	'mov [%r+%u], %r', 00H
$SG12185 DB	'mov [%r+%u], %r', 00H
$SG12190 DB	'movq [%r+%u], %r', 00H
	ORG $+7
$SG12191 DB	'mov [%r+%u], %r', 00H
$SG12192 DB	'mov [%r+%u], %r', 00H
$SG12252 DB	'mov [%r+%u], %r', 00H
$SG12253 DB	'%r %r, %u', 00H
	ORG $+6
$SG12277 DB	'write_win64_default_prologue enter', 0aH, 00H
	ORG $+4
$SG12283 DB	'write_win64_default_prologue: no frame register needed', 0aH
	DB	00H
$SG12284 DB	'push %r', 00H
$SG12285 DB	'%r %r', 00H
	ORG $+2
$SG12286 DB	'mov %r, %r', 00H
	ORG $+5
$SG12287 DB	'%r %r, 0', 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	ParseProc
PUBLIC	CreateProc
PUBLIC	DeleteProc
PUBLIC	CopyPrototype
PUBLIC	RetInstr
PUBLIC	write_prologue
PUBLIC	ProcInit
PUBLIC	ProcCheckOpen
PUBLIC	LocalDir
PUBLIC	UpdateStackBase
PUBLIC	UpdateProcStatus
PUBLIC	ProcDir
PUBLIC	EndpDir
PUBLIC	ExcFrameDirective
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp_atoi:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	strcat:PROC
EXTRN	strcmp:PROC
EXTRN	strcpy:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	DoDebugMsg:PROC
EXTRN	DoDebugMsg1:PROC
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	EmitWarn:PROC
EXTRN	AddLinnumDataRef:PROC
EXTRN	LclAlloc:PROC
EXTRN	SymAlloc:PROC
EXTRN	SymFree:PROC
EXTRN	SymCreate:PROC
EXTRN	SymLCreate:PROC
EXTRN	SymAddLocal:PROC
EXTRN	SymFind:PROC
EXTRN	SymClearLocal:PROC
EXTRN	SymSetLocal:PROC
EXTRN	SymGetLocal:PROC
EXTRN	SizeFromMemtype:PROC
EXTRN	SizeFromRegister:PROC
EXTRN	GetLangType:PROC
EXTRN	sym_add_table:PROC
EXTRN	sym_remove_table:PROC
EXTRN	sym_ext2int:PROC
EXTRN	ParseLine:PROC
EXTRN	SetSymSegOfs:PROC
EXTRN	GetSymOfssize:PROC
EXTRN	GetCurrOffset:PROC
EXTRN	GetSegIdx:PROC
EXTRN	SimGetSegName:PROC
EXTRN	AddPublicData:PROC
EXTRN	BackPatch:PROC
EXTRN	GetLineNumber:PROC
EXTRN	get_curr_srcfile:PROC
EXTRN	AddLineQueue:PROC
EXTRN	AddLineQueueX:PROC
EXTRN	RunLineQueue:PROC
EXTRN	Tokenize:PROC
EXTRN	EvalOperand:PROC
EXTRN	EmitConstError:PROC
EXTRN	GetQualifiedType:PROC
EXTRN	RunMacro:PROC
EXTRN	SkipSavedState:PROC
EXTRN	LstWrite:PROC
EXTRN	LstSetPosition:PROC
EXTRN	AlignCurrOffset:PROC
EXTRN	InternalError:PROC
EXTRN	GetResWName:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_UninitUse:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	Parse_Pass:DWORD
EXTRN	SymCmpFunc:QWORD
EXTRN	SymTables:BYTE
EXTRN	SpecialTable:BYTE
EXTRN	LineStoreCurr:QWORD
EXTRN	UseSavedState:BYTE
EXTRN	szDgroup:BYTE
EXTRN	list_pos:DWORD
EXTRN	__ImageBase:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	8

ProcStack DQ	01H DUP (?)
endprolog_found DB 01H DUP (?)
	ALIGN	4

unw_segs_defined DB 01H DUP (?)
	ALIGN	4

unw_info DD	01H DUP (?)
unw_code DW	0102H DUP (?)
?regname@?1??watc_pcheck@@9@9 DB 040H DUP (?)		; `watc_pcheck'::`2'::regname
?regist@?1??watc_pcheck@@9@9 DB 020H DUP (?)		; `watc_pcheck'::`2'::regist
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+140
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$ParseProc DD imagerel $LN91
	DD	imagerel $LN91+4156
	DD	imagerel $unwind$ParseProc
$pdata$CreateProc DD imagerel $LN18
	DD	imagerel $LN18+647
	DD	imagerel $unwind$CreateProc
$pdata$DeleteProc DD imagerel $LN14
	DD	imagerel $LN14+326
	DD	imagerel $unwind$DeleteProc
$pdata$CopyPrototype DD imagerel $LN12
	DD	imagerel $LN12+498
	DD	imagerel $unwind$CopyPrototype
$pdata$RetInstr DD imagerel $LN28
	DD	imagerel $LN28+1022
	DD	imagerel $unwind$RetInstr
$pdata$write_prologue DD imagerel $LN12
	DD	imagerel $LN12+354
	DD	imagerel $unwind$write_prologue
$pdata$ProcInit DD imagerel $LN5
	DD	imagerel $LN5+196
	DD	imagerel $unwind$ProcInit
$pdata$ProcCheckOpen DD imagerel $LN5
	DD	imagerel $LN5+95
	DD	imagerel $unwind$ProcCheckOpen
$pdata$ms32_pcheck DD imagerel ms32_pcheck
	DD	imagerel ms32_pcheck+457
	DD	imagerel $unwind$ms32_pcheck
$pdata$ms32_return DD imagerel ms32_return
	DD	imagerel ms32_return+209
	DD	imagerel $unwind$ms32_return
$pdata$watc_pcheck DD imagerel watc_pcheck
	DD	imagerel watc_pcheck+1315
	DD	imagerel $unwind$watc_pcheck
$pdata$watc_return DD imagerel watc_return
	DD	imagerel watc_return+195
	DD	imagerel $unwind$watc_return
$pdata$ms64_pcheck DD imagerel ms64_pcheck
	DD	imagerel ms64_pcheck+20
	DD	imagerel $unwind$ms64_pcheck
$pdata$ms64_return DD imagerel ms64_return
	DD	imagerel ms64_return+13
	DD	imagerel $unwind$ms64_return
$pdata$pushitem DD imagerel pushitem
	DD	imagerel pushitem+109
	DD	imagerel $unwind$pushitem
$pdata$popitem DD imagerel popitem
	DD	imagerel popitem+91
	DD	imagerel $unwind$popitem
$pdata$push_proc DD imagerel push_proc
	DD	imagerel push_proc+72
	DD	imagerel $unwind$push_proc
$pdata$pop_proc DD imagerel pop_proc
	DD	imagerel pop_proc+53
	DD	imagerel $unwind$pop_proc
$pdata$LocalDir DD imagerel $LN44
	DD	imagerel $LN44+1565
	DD	imagerel $unwind$LocalDir
$pdata$UpdateStackBase DD imagerel $LN4
	DD	imagerel $LN4+76
	DD	imagerel $unwind$UpdateStackBase
$pdata$UpdateProcStatus DD imagerel $LN5
	DD	imagerel $LN5+80
	DD	imagerel $unwind$UpdateProcStatus
$pdata$ParseParams DD imagerel ParseParams
	DD	imagerel ParseParams+4453
	DD	imagerel $unwind$ParseParams
$pdata$ProcDir DD imagerel $LN42
	DD	imagerel $LN42+1732
	DD	imagerel $unwind$ProcDir
$pdata$WriteSEHData DD imagerel WriteSEHData
	DD	imagerel WriteSEHData+1209
	DD	imagerel $unwind$WriteSEHData
$pdata$SetLocalOffsets DD imagerel SetLocalOffsets
	DD	imagerel SetLocalOffsets+1912
	DD	imagerel $unwind$SetLocalOffsets
$pdata$ProcFini DD imagerel ProcFini
	DD	imagerel ProcFini+998
	DD	imagerel $unwind$ProcFini
$pdata$EndpDir DD imagerel $LN9
	DD	imagerel $LN9+298
	DD	imagerel $unwind$EndpDir
$pdata$ExcFrameDirective DD imagerel $LN58
	DD	imagerel $LN58+3256
	DD	imagerel $unwind$ExcFrameDirective
$pdata$write_userdef_prologue DD imagerel write_userdef_prologue
	DD	imagerel write_userdef_prologue+1144
	DD	imagerel $unwind$write_userdef_prologue
$pdata$win64_SaveRegParams DD imagerel win64_SaveRegParams
	DD	imagerel win64_SaveRegParams+761
	DD	imagerel $unwind$win64_SaveRegParams
$pdata$win64_StoreRegHome DD imagerel win64_StoreRegHome
	DD	imagerel win64_StoreRegHome+1042
	DD	imagerel $unwind$win64_StoreRegHome
$pdata$write_win64_default_prologue DD imagerel write_win64_default_prologue
	DD	imagerel write_win64_default_prologue+1829
	DD	imagerel $unwind$write_win64_default_prologue
$pdata$write_default_prologue DD imagerel write_default_prologue
	DD	imagerel write_default_prologue+1119
	DD	imagerel $unwind$write_default_prologue
$pdata$pop_register DD imagerel pop_register
	DD	imagerel pop_register+304
	DD	imagerel $unwind$pop_register
$pdata$write_win64_default_epilogue DD imagerel write_win64_default_epilogue
	DD	imagerel write_win64_default_epilogue+1128
	DD	imagerel $unwind$write_win64_default_epilogue
$pdata$write_default_epilogue DD imagerel write_default_epilogue
	DD	imagerel write_default_epilogue+640
	DD	imagerel $unwind$write_default_epilogue
$pdata$write_userdef_epilogue DD imagerel write_userdef_epilogue
	DD	imagerel write_userdef_epilogue+1046
	DD	imagerel $unwind$write_userdef_epilogue
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
CONST	SEGMENT
RetInstr$rtcName$0 DB 062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
RetInstr$rtcVarDesc DD 050H
	DD	0258H
	DQ	FLAT:RetInstr$rtcName$0
	ORG $+48
RetInstr$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:RetInstr$rtcVarDesc
ms32_pcheck$rtcName$0 DB 072H
	DB	065H
	DB	067H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
LocalDir$rtcName$0 DB 074H
	DB	069H
	DB	00H
	ORG $+5
ms32_pcheck$rtcVarDesc DD 028H
	DD	020H
	DQ	FLAT:ms32_pcheck$rtcName$0
	ORG $+48
ms32_pcheck$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:ms32_pcheck$rtcVarDesc
LocalDir$rtcName$1 DB 06fH
	DB	070H
	DB	06eH
	DB	064H
	DB	078H
	DB	00H
	ORG $+2
LocalDir$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:LocalDir$rtcVarDesc
ParseParams$rtcName$0 DB 066H
	DB	063H
	DB	069H
	DB	06eH
	DB	074H
	DB	00H
	ORG $+2
LocalDir$rtcVarDesc DD 0a0H
	DD	068H
	DQ	FLAT:LocalDir$rtcName$1
	DD	058H
	DD	020H
	DQ	FLAT:LocalDir$rtcName$0
	ORG $+96
ParseParams$rtcName$1 DB 074H
	DB	069H
	DB	00H
	ORG $+5
ParseParams$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:ParseParams$rtcVarDesc
WriteSEHData$rtcName$1 DB 062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
ParseParams$rtcVarDesc DD 0c8H
	DD	020H
	DQ	FLAT:ParseParams$rtcName$1
	DD	0a4H
	DD	04H
	DQ	FLAT:ParseParams$rtcName$0
	ORG $+96
WriteSEHData$rtcName$0 DB 073H
	DB	065H
	DB	067H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	062H
	DB	075H
	DB	066H
	DB	066H
	DB	00H
	ORG $+4
WriteSEHData$rtcVarDesc DD 0a0H
	DD	080H
	DQ	FLAT:WriteSEHData$rtcName$1
	DD	068H
	DD	0cH
	DQ	FLAT:WriteSEHData$rtcName$0
	ORG $+96
WriteSEHData$rtcFrameData DD 02H
	DD	00H
	DQ	FLAT:WriteSEHData$rtcVarDesc
SetLocalOffsets$rtcName$0 DB 070H
	DB	061H
	DB	072H
	DB	061H
	DB	06dH
	DB	061H
	DB	064H
	DB	06aH
	DB	00H
	ORG $+3
ExcFrameDirective$rtcName$0 DB 06fH
	DB	070H
	DB	06eH
	DB	064H
	DB	078H
	DB	00H
	ORG $+6
ExcFrameDirective$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:ExcFrameDirective$rtcVarDesc
write_userdef_prologue$rtcName$1 DB 072H
	DB	065H
	DB	067H
	DB	06cH
	DB	073H
	DB	074H
	DB	00H
	ORG $+1
ExcFrameDirective$rtcVarDesc DD 040H
	DD	068H
	DQ	FLAT:ExcFrameDirective$rtcName$0
	ORG $+48
write_userdef_prologue$rtcName$0 DB 069H
	DB	073H
	DB	05fH
	DB	065H
	DB	078H
	DB	069H
	DB	074H
	DB	06dH
	DB	00H
	ORG $+3
write_userdef_prologue$rtcName$2 DB 062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
write_userdef_prologue$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:write_userdef_prologue$rtcVarDesc
write_userdef_epilogue$rtcName$1 DB 072H
	DB	065H
	DB	067H
	DB	06cH
	DB	073H
	DB	074H
	DB	00H
	ORG $+1
write_userdef_prologue$rtcVarDesc DD 0140H
	DD	0258H
	DQ	FLAT:write_userdef_prologue$rtcName$2
	DD	0a0H
	DD	080H
	DQ	FLAT:write_userdef_prologue$rtcName$1
	DD	064H
	DD	01H
	DQ	FLAT:write_userdef_prologue$rtcName$0
	ORG $+144
write_userdef_epilogue$rtcName$0 DB 069H
	DB	073H
	DB	05fH
	DB	065H
	DB	078H
	DB	069H
	DB	074H
	DB	06dH
	DB	00H
	ORG $+3
write_userdef_epilogue$rtcName$2 DB 062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
write_userdef_epilogue$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:write_userdef_epilogue$rtcVarDesc
	ORG $+8
write_userdef_epilogue$rtcVarDesc DD 0140H
	DD	0258H
	DQ	FLAT:write_userdef_epilogue$rtcName$2
	DD	0a0H
	DD	080H
	DQ	FLAT:write_userdef_epilogue$rtcName$1
	DD	064H
	DD	01H
	DQ	FLAT:write_userdef_epilogue$rtcName$0
CONST	ENDS
xdata	SEGMENT
$unwind$ParseProc DD 023201H
	DD	07014f21bH
$unwind$CreateProc DD 022801H
	DD	070107214H
$unwind$DeleteProc DD 021e01H
	DD	07006720aH
$unwind$CopyPrototype DD 022301H
	DD	0700b720fH
$unwind$RetInstr DD 033e19H
	DD	05c0116H
	DD	0700fH
	DD	imagerel __GSHandlerCheck
	DD	02d8H
$unwind$write_prologue DD 021e01H
	DD	07006520aH
$unwind$ProcInit DD 021501H
	DD	070021206H
$unwind$ProcCheckOpen DD 021501H
	DD	070023206H
$unwind$ms32_pcheck DD 023a19H
	DD	07010d214H
	DD	imagerel __GSHandlerCheck
	DD	068H
$unwind$ms32_return DD 022301H
	DD	0700b520fH
$unwind$watc_pcheck DD 022e01H
	DD	07010f217H
$unwind$watc_return DD 022301H
	DD	0700b520fH
$unwind$ms64_pcheck DD 011001H
	DD	07010H
$unwind$ms64_return DD 010b01H
	DD	0700bH
$unwind$pushitem DD 022301H
	DD	0700b520fH
$unwind$popitem DD 021e01H
	DD	07006320aH
$unwind$push_proc DD 021e01H
	DD	07006320aH
$unwind$pop_proc DD 021501H
	DD	070023206H
$unwind$LocalDir DD 032701H
	DD	0260111H
	DD	0700aH
$unwind$UpdateStackBase DD 010b01H
	DD	0700bH
$unwind$UpdateProcStatus DD 022301H
	DD	0700b120fH
$unwind$ParseParams DD 043301H
	DD	033011cH
	DD	030147015H
$unwind$ProcDir DD 022401H
	DD	0700ad20eH
$unwind$WriteSEHData DD 033619H
	DD	02c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0158H
$unwind$SetLocalOffsets DD 022401H
	DD	07006f20dH
$unwind$ProcFini DD 021e01H
	DD	07006720aH
$unwind$EndpDir DD 022101H
	DD	0700a520eH
$unwind$ExcFrameDirective DD 032701H
	DD	01a0111H
	DD	0700aH
$unwind$write_userdef_prologue DD 033619H
	DD	07c010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	03d0H
$unwind$win64_SaveRegParams DD 021e01H
	DD	07006720aH
$unwind$win64_StoreRegHome DD 021e01H
	DD	07006720aH
$unwind$write_win64_default_prologue DD 022401H
	DD	07006f20dH
$unwind$write_default_prologue DD 021501H
	DD	070027206H
$unwind$pop_register DD 021e01H
	DD	07006520aH
$unwind$write_win64_default_epilogue DD 021e01H
	DD	07006b20aH
$unwind$write_default_epilogue DD 021501H
	DD	070025206H
$unwind$write_userdef_epilogue DD 033a19H
	DD	07a0111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	03c8H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:sprintf$rtcName$0
	ORG $+48
sprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
regs$ = 64
i$ = 72
p$ = 80
is_exitm$ = 100
info$ = 120
flags$ = 128
dir$ = 136
reglst$ = 160
buffer$ = 320
cnt$6 = 932
tv91 = 944
tv130 = 948
tv137 = 952
tv141 = 956
tv167 = 960
__$ArrayPad$ = 968
flag_iret$ = 992
tokenarray$ = 1000
write_userdef_epilogue PROC

; 3096 : {

	mov	QWORD PTR [rsp+16], rdx
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 976				; 000003d0H
	mov	rdi, rsp
	mov	ecx, 244				; 000000f4H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+992]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 3097 :     uint_16 *regs;
; 3098 :     int i;
; 3099 :     char *p;
; 3100 :     bool is_exitm;
; 3101 :     struct proc_info   *info;
; 3102 :     int flags = CurrProc->sym.langtype; /* set bits 0-2 */

	mov	rax, QWORD PTR CurrProc
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR flags$[rsp], eax

; 3103 :     struct dsym *dir;
; 3104 :     char reglst[128];
; 3105 :     char buffer[MAX_LINE_LEN]; /* stores string for RunMacro() */
; 3106 : 
; 3107 :     dir = (struct dsym *)SymSearch( ModuleInfo.proc_epilogue );

	mov	rcx, QWORD PTR ModuleInfo+328
	call	SymFind
	mov	QWORD PTR dir$[rsp], rax

; 3108 :     if (dir == NULL ||
; 3109 :         dir->sym.state != SYM_MACRO ||

	cmp	QWORD PTR dir$[rsp], 0
	je	SHORT $LN6@write_user
	mov	rax, QWORD PTR dir$[rsp]
	cmp	DWORD PTR [rax+32], 9
	jne	SHORT $LN6@write_user
	mov	rax, QWORD PTR dir$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	shr	al, 1
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN5@write_user
$LN6@write_user:

; 3110 :         dir->sym.isfunc == TRUE ) {
; 3111 :         return( EmitErr( EPILOGUE_MUST_BE_MACRO_PROC, ModuleInfo.proc_epilogue ) );

	mov	rdx, QWORD PTR ModuleInfo+328
	mov	ecx, 157				; 0000009dH
	call	EmitErr
	jmp	$LN1@write_user
$LN5@write_user:

; 3112 :     }
; 3113 : 
; 3114 :     info = CurrProc->e.procinfo;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR info$[rsp], rax

; 3115 : 
; 3116 : #if AMD64_SUPPORT
; 3117 :     /* to be compatible with ML64, translate FASTCALL to 0 (not 7) */
; 3118 :     if ( CurrProc->sym.langtype == LANG_FASTCALL && ModuleInfo.fctype == FCT_WIN64 )

	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN7@write_user
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN7@write_user

; 3119 :         flags = 0;

	mov	DWORD PTR flags$[rsp], 0
$LN7@write_user:

; 3120 : #endif
; 3121 :     if ( CurrProc->sym.langtype == LANG_C ||
; 3122 :          CurrProc->sym.langtype == LANG_SYSCALL ||

	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 1
	je	SHORT $LN9@write_user
	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 2
	je	SHORT $LN9@write_user
	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN8@write_user
$LN9@write_user:

; 3123 :          CurrProc->sym.langtype == LANG_FASTCALL)
; 3124 :         flags |= 0x10;

	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 16
	mov	DWORD PTR flags$[rsp], eax
$LN8@write_user:

; 3125 : 
; 3126 :     flags |= ( CurrProc->sym.mem_type == MT_FAR ? 0x20 : 0 );

	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+36], 130			; 00000082H
	jne	SHORT $LN14@write_user
	mov	DWORD PTR tv91[rsp], 32			; 00000020H
	jmp	SHORT $LN15@write_user
$LN14@write_user:
	mov	DWORD PTR tv91[rsp], 0
$LN15@write_user:
	mov	eax, DWORD PTR tv91[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rsp], eax

; 3127 :     flags |= ( CurrProc->sym.ispublic ? 0 : 0x40 );

	mov	rax, QWORD PTR CurrProc
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN16@write_user
	mov	DWORD PTR tv130[rsp], 0
	jmp	SHORT $LN17@write_user
$LN16@write_user:
	mov	DWORD PTR tv130[rsp], 64		; 00000040H
$LN17@write_user:
	mov	eax, DWORD PTR tv130[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rsp], eax

; 3128 :     /* v2.11: set bit 7, the export flag */
; 3129 :     flags |= ( info->isexport ? 0x80 : 0 );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 2
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN18@write_user
	mov	DWORD PTR tv137[rsp], 128		; 00000080H
	jmp	SHORT $LN19@write_user
$LN18@write_user:
	mov	DWORD PTR tv137[rsp], 0
$LN19@write_user:
	mov	eax, DWORD PTR tv137[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rsp], eax

; 3130 :     flags |= flag_iret ? 0x100 : 0;  /* bit 8: 1 if IRET    */

	movzx	eax, BYTE PTR flag_iret$[rsp]
	test	eax, eax
	je	SHORT $LN20@write_user
	mov	DWORD PTR tv141[rsp], 256		; 00000100H
	jmp	SHORT $LN21@write_user
$LN20@write_user:
	mov	DWORD PTR tv141[rsp], 0
$LN21@write_user:
	mov	eax, DWORD PTR tv141[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rsp], eax

; 3131 : 
; 3132 :     p = reglst;

	lea	rax, QWORD PTR reglst$[rsp]
	mov	QWORD PTR p$[rsp], rax

; 3133 :     if ( info->regslist ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN10@write_user

; 3134 :         int cnt = *info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$6[rsp], eax

; 3135 :         regs = info->regslist + cnt;

	movsxd	rax, DWORD PTR cnt$6[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR [rcx]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR regs$[rsp], rax

; 3136 :         for ( ; cnt; regs--, cnt-- ) {

	jmp	SHORT $LN4@write_user
$LN2@write_user:
	mov	rax, QWORD PTR regs$[rsp]
	sub	rax, 2
	mov	QWORD PTR regs$[rsp], rax
	mov	eax, DWORD PTR cnt$6[rsp]
	dec	eax
	mov	DWORD PTR cnt$6[rsp], eax
$LN4@write_user:
	cmp	DWORD PTR cnt$6[rsp], 0
	je	SHORT $LN3@write_user

; 3137 :             GetResWName( *regs, p );

	mov	rax, QWORD PTR regs$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rdx, QWORD PTR p$[rsp]
	mov	ecx, eax
	call	GetResWName

; 3138 :             p += strlen( p );

	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax

; 3139 :             if ( cnt != 1 )

	cmp	DWORD PTR cnt$6[rsp], 1
	je	SHORT $LN11@write_user

; 3140 :                 *p++ = ',';

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 44			; 0000002cH
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN11@write_user:

; 3141 :         }

	jmp	SHORT $LN2@write_user
$LN3@write_user:
$LN10@write_user:

; 3142 :     }
; 3143 :     *p = NULLC;

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0

; 3144 :     //strcat( reglst, ">" );
; 3145 : 
; 3146 :     /* v2.07: make the numeric arguments more Masm-compatible */
; 3147 :     //sprintf( buffer,"%s %s, %02XH, %02XH, %02XH, <<%s>>, <%s>", ModuleInfo.proc_epilogue,
; 3148 :     sprintf( buffer,"%s, 0%XH, 0%XH, 0%XH, <<%s>>, <%s>",

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN22@write_user
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv167[rsp], rax
	jmp	SHORT $LN23@write_user
$LN22@write_user:
	lea	rax, OFFSET FLAT:$SG12580
	mov	QWORD PTR tv167[rsp], rax
$LN23@write_user:
	mov	rax, QWORD PTR tv167[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR reglst$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR flags$[rsp]
	mov	rax, QWORD PTR CurrProc
	mov	r8, QWORD PTR [rax+8]
	lea	rdx, OFFSET FLAT:$SG12581
	lea	rcx, QWORD PTR buffer$[rsp]
	call	sprintf

; 3149 :             CurrProc->sym.name, flags, info->parasize, info->localsize,
; 3150 :             reglst, info->prologuearg ? info->prologuearg : "" );
; 3151 :     i = Token_Count + 1;

	mov	eax, DWORD PTR ModuleInfo+496
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 3152 :     Tokenize( buffer, i, tokenarray, TOK_RESCAN );

	mov	r9d, 1
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	Tokenize

; 3153 : 
; 3154 :     /* if -EP is on, emit "epilogue: none" */
; 3155 :     if ( Options.preprocessor_stdout )

	movzx	eax, BYTE PTR Options+141
	test	eax, eax
	je	SHORT $LN12@write_user

; 3156 :         printf( "option epilogue:none\n" );

	lea	rcx, OFFSET FLAT:$SG12583
	call	printf
$LN12@write_user:

; 3157 : 
; 3158 :     RunMacro( dir, i, tokenarray, NULL, 0, &is_exitm );

	lea	rax, QWORD PTR is_exitm$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	xor	r9d, r9d
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR dir$[rsp]
	call	RunMacro

; 3159 :     Token_Count = i - 1;

	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR ModuleInfo+496, eax

; 3160 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@write_user:

; 3161 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:write_userdef_epilogue$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 976				; 000003d0H
	pop	rdi
	ret	0
write_userdef_epilogue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
info$ = 32
resstack$ = 40
write_default_epilogue PROC

; 3007 : {

	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3008 :     struct proc_info   *info;
; 3009 : #if AMD64_SUPPORT
; 3010 :     int resstack = 0;

	mov	DWORD PTR resstack$[rsp], 0

; 3011 : #endif
; 3012 : 
; 3013 :     info = CurrProc->e.procinfo;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR info$[rsp], rax

; 3014 : 
; 3015 : #if AMD64_SUPPORT
; 3016 :     if ( info->isframe ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@write_defa

; 3017 :         if ( ModuleInfo.frame_auto )

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 17
	and	eax, 1
	test	eax, eax
	je	SHORT $LN3@write_defa

; 3018 :             write_win64_default_epilogue( info );

	mov	rcx, QWORD PTR info$[rsp]
	call	write_win64_default_epilogue
$LN3@write_defa:

; 3019 :         return;

	jmp	$LN1@write_defa
$LN2@write_defa:

; 3020 :     }
; 3021 :     if ( ModuleInfo.Ofssize == USE64 && ModuleInfo.fctype == FCT_WIN64 && ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) ) {

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	jne	SHORT $LN4@write_defa
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN4@write_defa
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN4@write_defa

; 3022 :         resstack  = sym_ReservedStack->value;

	mov	rax, QWORD PTR sym_ReservedStack
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR resstack$[rsp], eax

; 3023 :         /* if no framepointer was pushed, add 8 to align stack on OWORD
; 3024 :          * v2.12: obsolete; localsize contains correct value.
; 3025 :          */
; 3026 :         //if( !(info->localsize || info->stackparam || info->has_vararg || info->forceframe ))
; 3027 :         //    AddLineQueueX( "add %r, 8 + %s", stackreg[ModuleInfo.Ofssize], sym_ReservedStack->name );
; 3028 :         //else
; 3029 :         AddLineQueueX( "add %r, %d + %s", stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize, sym_ReservedStack->name );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR sym_ReservedStack
	mov	r9, QWORD PTR [rdx+8]
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+36]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12534
	call	AddLineQueueX
$LN4@write_defa:

; 3030 :     }
; 3031 : #endif
; 3032 : 
; 3033 :     /* Pop the registers */
; 3034 :     pop_register( CurrProc->e.procinfo->regslist );

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR [rax]
	call	pop_register

; 3035 : 
; 3036 :     if ( info->loadds ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@write_defa

; 3037 :         AddLineQueueX( "pop %r", T_DS );

	mov	edx, 28
	lea	rcx, OFFSET FLAT:$SG12536
	call	AddLineQueueX
$LN5@write_defa:

; 3038 :     }
; 3039 : 
; 3040 :     if( ( info->locallist == NULL ) &&
; 3041 :        info->stackparam == FALSE &&
; 3042 :        info->has_vararg == FALSE &&
; 3043 : #if AMD64_SUPPORT
; 3044 :        resstack == 0 &&

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN6@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@write_defa
	cmp	DWORD PTR resstack$[rsp], 0
	jne	SHORT $LN6@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@write_defa

; 3045 : #endif
; 3046 :        info->forceframe == FALSE )
; 3047 :         return;

	jmp	$LN1@write_defa
$LN6@write_defa:

; 3048 : 
; 3049 :     /* restore registers e/sp and e/bp.
; 3050 :      * emit either "leave" or "mov e/sp,e/bp, pop e/bp".
; 3051 :      */
; 3052 : #if AMD64_SUPPORT
; 3053 :     if( !(info->locallist || info->stackparam || info->has_vararg || info->forceframe ))

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN7@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN7@write_defa

; 3054 :         ;

	jmp	$LN8@write_defa
$LN7@write_defa:

; 3055 :     else
; 3056 : #endif
; 3057 :     if( info->pe_type ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 1
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN9@write_defa

; 3058 :         AddLineQueue( "leave" );

	lea	rcx, OFFSET FLAT:$SG12542
	call	AddLineQueue

; 3059 :     } else  {

	jmp	$LN10@write_defa
$LN9@write_defa:

; 3060 : #if STACKBASESUPP
; 3061 :         if ( info->fpo ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN11@write_defa

; 3062 : #if AMD64_SUPPORT
; 3063 :             if ( ModuleInfo.Ofssize == USE64 && ModuleInfo.fctype == FCT_WIN64 && ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) )

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	jne	SHORT $LN12@write_defa
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN12@write_defa
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN12@write_defa

; 3064 :                 ;

	jmp	SHORT $LN13@write_defa
$LN12@write_defa:

; 3065 :             else
; 3066 : #endif
; 3067 :             if ( info->localsize )

	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN14@write_defa

; 3068 :                 AddLineQueueX( "add %r, %d", stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+36]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12547
	call	AddLineQueueX
$LN14@write_defa:
$LN13@write_defa:

; 3069 :             return;

	jmp	SHORT $LN1@write_defa
$LN11@write_defa:

; 3070 :         }
; 3071 : #endif
; 3072 :         /*
; 3073 :          MOV [E|R]SP, [E|R]BP
; 3074 :          POP [E|R]BP
; 3075 :          */
; 3076 :         if( info->localsize != 0 ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN15@write_defa

; 3077 : #if STACKBASESUPP
; 3078 :             AddLineQueueX( "mov %r, %r", stackreg[ModuleInfo.Ofssize], info->basereg );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:stackreg
	mov	r8d, eax
	mov	edx, DWORD PTR [rdx+rcx*4]
	lea	rcx, OFFSET FLAT:$SG12549
	call	AddLineQueueX
$LN15@write_defa:

; 3079 : #else
; 3080 :             AddLineQueueX( "mov %r, %r", stackreg[ModuleInfo.Ofssize], basereg[ModuleInfo.Ofssize] );
; 3081 : #endif
; 3082 :         }
; 3083 : #if STACKBASESUPP
; 3084 :         AddLineQueueX( "pop %r", info->basereg );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12550
	call	AddLineQueueX
$LN10@write_defa:
$LN8@write_defa:
$LN1@write_defa:

; 3085 : #else
; 3086 :         AddLineQueueX( "pop %r", basereg[ModuleInfo.Ofssize] );
; 3087 : #endif
; 3088 :     }
; 3089 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
write_default_epilogue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
regs$1 = 48
cnt$2 = 56
i$3 = 60
regist$4 = 64
cnt$5 = 72
i$6 = 76
gprzize$7 = 80
info$ = 112
write_win64_default_epilogue PROC

; 2858 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+112]

; 2859 : #if STACKBASESUPP
; 2860 :     /* v2.12: obsolete */
; 2861 :     //if ( GetRegNo( info->basereg ) == 4 || ( info->parasize == 0 && info->locallist == NULL ) )
; 2862 :     //    sizestd = 8;
; 2863 : #endif
; 2864 :     /* restore non-volatile xmm registers */
; 2865 :     if ( info->regslist ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN11@write_win6

; 2866 :         uint_16 *regs;
; 2867 :         int cnt;
; 2868 :         int i;
; 2869 : 
; 2870 :         /* v2.12: space for xmm saves is now included in localsize
; 2871 :          * so first thing to do is to count the xmm regs that were saved
; 2872 :          */
; 2873 :         for( regs = info->regslist, cnt = *regs++, i = 0; cnt; cnt--, regs++ )

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regs$1[rsp], rax
	mov	rax, QWORD PTR regs$1[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$2[rsp], eax
	mov	rax, QWORD PTR regs$1[rsp]
	add	rax, 2
	mov	QWORD PTR regs$1[rsp], rax
	mov	DWORD PTR i$3[rsp], 0
	jmp	SHORT $LN4@write_win6
$LN2@write_win6:
	mov	eax, DWORD PTR cnt$2[rsp]
	dec	eax
	mov	DWORD PTR cnt$2[rsp], eax
	mov	rax, QWORD PTR regs$1[rsp]
	add	rax, 2
	mov	QWORD PTR regs$1[rsp], rax
$LN4@write_win6:
	cmp	DWORD PTR cnt$2[rsp], 0
	je	SHORT $LN3@write_win6

; 2874 :             if ( GetValueSp( *regs ) & OP_XYZMM )

	mov	rax, QWORD PTR regs$1[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN12@write_win6

; 2875 :                 i++;

	mov	eax, DWORD PTR i$3[rsp]
	inc	eax
	mov	DWORD PTR i$3[rsp], eax
$LN12@write_win6:
	jmp	SHORT $LN2@write_win6
$LN3@write_win6:

; 2876 : 
; 2877 :         DebugMsg1(("write_win64_default_epilogue(%s): %u xmm registers to restore\n", CurrProc->sym.name , i ));

	mov	r8d, DWORD PTR i$3[rsp]
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12497
	call	DoDebugMsg1

; 2878 : 
; 2879 :         if ( i ) {

	cmp	DWORD PTR i$3[rsp], 0
	je	$LN13@write_win6

; 2880 :             i = ( info->localsize - i * XYZMMsize ) & ~(XYZMMsize-1);

	imul	eax, DWORD PTR i$3[rsp], 32		; 00000020H
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	sub	ecx, eax
	mov	eax, ecx
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR i$3[rsp], eax

; 2881 :             for( regs = info->regslist, cnt = *regs++; cnt; cnt--, regs++ ) {

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regs$1[rsp], rax
	mov	rax, QWORD PTR regs$1[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$2[rsp], eax
	mov	rax, QWORD PTR regs$1[rsp]
	add	rax, 2
	mov	QWORD PTR regs$1[rsp], rax
	jmp	SHORT $LN7@write_win6
$LN5@write_win6:
	mov	eax, DWORD PTR cnt$2[rsp]
	dec	eax
	mov	DWORD PTR cnt$2[rsp], eax
	mov	rax, QWORD PTR regs$1[rsp]
	add	rax, 2
	mov	QWORD PTR regs$1[rsp], rax
$LN7@write_win6:
	cmp	DWORD PTR cnt$2[rsp], 0
	je	$LN6@write_win6

; 2882 :                 if ( GetValueSp( *regs ) & OP_XYZMM ) {

	mov	rax, QWORD PTR regs$1[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN14@write_win6

; 2883 :                     DebugMsg1(("write_win64_default_epilogue(%s): restore %s, offset=%d\n", CurrProc->sym.name , GetResWName( *regs, NULL ), i ));

	mov	rax, QWORD PTR regs$1[rsp]
	movzx	eax, WORD PTR [rax]
	xor	edx, edx
	mov	ecx, eax
	call	GetResWName
	mov	r9d, DWORD PTR i$3[rsp]
	mov	r8, rax
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12500
	call	DoDebugMsg1

; 2884 :                     //AddLineQueueX( "movdqa %r, [%r+%u]", *regist, stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize + sizexmm );
; 2885 :                     /* v2.11: use @ReservedStack only if option win64:2 is set */
; 2886 :                     if ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP )

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN15@write_win6

; 2887 :                         AddLineQueueX( "vmovdqa %r, [%r + %u + %s]", *regs, stackreg[ModuleInfo.Ofssize], NUMQUAL i, sym_ReservedStack->name );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR regs$1[rsp]
	movzx	edx, WORD PTR [rdx]
	mov	r8, QWORD PTR sym_ReservedStack
	mov	r8, QWORD PTR [r8+8]
	mov	QWORD PTR [rsp+32], r8
	mov	r9d, DWORD PTR i$3[rsp]
	mov	r8d, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12503
	call	AddLineQueueX
	jmp	SHORT $LN16@write_win6
$LN15@write_win6:

; 2888 :                     else
; 2889 :                         AddLineQueueX( "vmovdqa %r, [%r + %u]", *regs, stackreg[ModuleInfo.Ofssize], NUMQUAL i );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR regs$1[rsp]
	movzx	edx, WORD PTR [rdx]
	mov	r9d, DWORD PTR i$3[rsp]
	mov	r8d, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12504
	call	AddLineQueueX
$LN16@write_win6:

; 2890 :                     i += XYZMMsize;

	mov	eax, DWORD PTR i$3[rsp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR i$3[rsp], eax
$LN14@write_win6:

; 2891 :                 }
; 2892 :             }

	jmp	$LN5@write_win6
$LN6@write_win6:
$LN13@write_win6:
$LN11@write_win6:

; 2893 :         }
; 2894 :     }
; 2895 : 
; 2896 :     if (ModuleInfo.fctype == FCT_WIN64 && (ModuleInfo.win64_flags & W64F_AUTOSTACKSP)){

	cmp	DWORD PTR ModuleInfo+376, 2
	jne	$LN17@write_win6
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	$LN17@write_win6

; 2897 :       if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN19@write_win6

; 2898 :         if (info->localsize + sym_ReservedStack->value)

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR sym_ReservedStack
	add	eax, DWORD PTR [rcx+16]
	test	eax, eax
	je	SHORT $LN21@write_win6

; 2899 :           AddLineQueueX("add %r, %d + %s", stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize, sym_ReservedStack->name);

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR sym_ReservedStack
	mov	r9, QWORD PTR [rdx+8]
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+36]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12510
	call	AddLineQueueX
$LN21@write_win6:

; 2900 :       }

	jmp	SHORT $LN20@write_win6
$LN19@write_win6:

; 2901 :         else
; 2902 :           AddLineQueueX("add %r, %d + %s", stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize, sym_ReservedStack->name);

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR sym_ReservedStack
	mov	r9, QWORD PTR [rdx+8]
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+36]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12511
	call	AddLineQueueX
$LN20@write_win6:

; 2903 :     }

	jmp	SHORT $LN18@write_win6
$LN17@write_win6:

; 2904 :     else
; 2905 :         AddLineQueueX( "add %r, %d", stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+36]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12512
	call	AddLineQueueX
$LN18@write_win6:

; 2906 :     pop_register( CurrProc->e.procinfo->regslist );

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR [rax]
	call	pop_register

; 2907 : #if STACKBASESUPP
; 2908 :     if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	$LN22@write_win6

; 2909 :       /* restore non-volatile registers from shadow space */
; 2910 :       if (info->regslist) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN23@write_win6

; 2911 :         uint_16 *regist = info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$4[rsp], rax

; 2912 :         int cnt;
; 2913 :         if (ModuleInfo.win64_flags){

	movzx	eax, BYTE PTR ModuleInfo+413
	test	eax, eax
	je	$LN24@write_win6

; 2914 :           int i = 0;

	mov	DWORD PTR i$6[rsp], 0

; 2915 :           int gprzize = 0;

	mov	DWORD PTR gprzize$7[rsp], 0

; 2916 :           for (cnt = *regist++; cnt; cnt--, regist++)

	mov	rax, QWORD PTR regist$4[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$5[rsp], eax
	mov	rax, QWORD PTR regist$4[rsp]
	add	rax, 2
	mov	QWORD PTR regist$4[rsp], rax
	jmp	SHORT $LN10@write_win6
$LN8@write_win6:
	mov	eax, DWORD PTR cnt$5[rsp]
	dec	eax
	mov	DWORD PTR cnt$5[rsp], eax
	mov	rax, QWORD PTR regist$4[rsp]
	add	rax, 2
	mov	QWORD PTR regist$4[rsp], rax
$LN10@write_win6:
	cmp	DWORD PTR cnt$5[rsp], 0
	je	$LN9@write_win6

; 2917 :           {
; 2918 :             if (GetValueSp(*regist) & OP_XYZMM) continue;

	mov	rax, QWORD PTR regist$4[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN25@write_win6
	jmp	SHORT $LN8@write_win6
	jmp	SHORT $LN26@write_win6
$LN25@write_win6:

; 2919 :             else {
; 2920 :               gprzize += 8;

	mov	eax, DWORD PTR gprzize$7[rsp]
	add	eax, 8
	mov	DWORD PTR gprzize$7[rsp], eax

; 2921 :               if (gprzize <= 0x20)

	cmp	DWORD PTR gprzize$7[rsp], 32		; 00000020H
	jg	SHORT $LN27@write_win6

; 2922 :               {
; 2923 :                 if (info->home_used[i] == 0){

	movsxd	rax, DWORD PTR i$6[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+76]
	test	eax, eax
	jne	SHORT $LN28@write_win6

; 2924 :                   AddLineQueueX("mov %r, [%r+%u]", *regist, stackreg[ModuleInfo.Ofssize], NUMQUAL gprzize);

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR regist$4[rsp]
	movzx	edx, WORD PTR [rdx]
	mov	r9d, DWORD PTR gprzize$7[rsp]
	mov	r8d, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12521
	call	AddLineQueueX

; 2925 :                 }

	jmp	SHORT $LN29@write_win6
$LN28@write_win6:

; 2926 :                 else {
; 2927 :                   cnt++; regist--;

	mov	eax, DWORD PTR cnt$5[rsp]
	inc	eax
	mov	DWORD PTR cnt$5[rsp], eax
	mov	rax, QWORD PTR regist$4[rsp]
	sub	rax, 2
	mov	QWORD PTR regist$4[rsp], rax
$LN29@write_win6:

; 2928 :                 }
; 2929 :                 i++;

	mov	eax, DWORD PTR i$6[rsp]
	inc	eax
	mov	DWORD PTR i$6[rsp], eax
$LN27@write_win6:
$LN26@write_win6:

; 2930 :               }
; 2931 :             }
; 2932 :           }

	jmp	$LN8@write_win6
$LN9@write_win6:
$LN24@write_win6:
$LN23@write_win6:
$LN22@write_win6:

; 2933 :         }
; 2934 :       }
; 2935 :     }
; 2936 :     //if ( !info->fpo )
; 2937 :     if ( GetRegNo( info->basereg ) != 4 && ( info->parasize != 0 || info->locallist != NULL ) )

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	cmp	eax, 4
	je	SHORT $LN30@write_win6
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN31@write_win6
	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	je	SHORT $LN30@write_win6
$LN31@write_win6:

; 2938 :         AddLineQueueX( "pop %r", info->basereg );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12524
	call	AddLineQueueX
$LN30@write_win6:

; 2939 : #else
; 2940 :     AddLineQueueX( "pop %r", basereg[ModuleInfo.Ofssize] );
; 2941 : #endif
; 2942 :     return;
; 2943 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
write_win64_default_epilogue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
cnt$ = 32
regist$ = 64
pop_register PROC

; 2824 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 2825 :     int cnt;
; 2826 :     if( regist == NULL )

	cmp	QWORD PTR regist$[rsp], 0
	jne	SHORT $LN8@pop_regist

; 2827 :         return;

	jmp	$LN1@pop_regist
$LN8@pop_regist:

; 2828 :     cnt = *regist;

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$[rsp], eax

; 2829 :     regist += cnt;

	movsxd	rax, DWORD PTR cnt$[rsp]
	mov	rcx, QWORD PTR regist$[rsp]
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR regist$[rsp], rax

; 2830 :     if (ModuleInfo.win64_flags & W64F_HABRAN)

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN9@pop_regist

; 2831 :     {
; 2832 :       for (cnt = CurrProc->e.procinfo->pushed_reg; cnt; cnt--, regist--) {

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+64]
	mov	DWORD PTR cnt$[rsp], eax
	jmp	SHORT $LN4@pop_regist
$LN2@pop_regist:
	mov	eax, DWORD PTR cnt$[rsp]
	dec	eax
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	sub	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN4@pop_regist:
	cmp	DWORD PTR cnt$[rsp], 0
	je	SHORT $LN3@pop_regist

; 2833 :         /* don't "pop" xmm registers */
; 2834 :         if (GetValueSp(*regist) & OP_XYZMM){

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN11@pop_regist

; 2835 :           cnt++;

	mov	eax, DWORD PTR cnt$[rsp]
	inc	eax
	mov	DWORD PTR cnt$[rsp], eax

; 2836 :           continue;

	jmp	SHORT $LN2@pop_regist
$LN11@pop_regist:

; 2837 :         }
; 2838 :         AddLineQueueX("pop %r", *regist);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12470
	call	AddLineQueueX

; 2839 :       }

	jmp	SHORT $LN2@pop_regist
$LN3@pop_regist:

; 2840 :     }

	jmp	SHORT $LN10@pop_regist
$LN9@pop_regist:

; 2841 :     else {
; 2842 :       for (; cnt; cnt--, regist--) {

	jmp	SHORT $LN7@pop_regist
$LN5@pop_regist:
	mov	eax, DWORD PTR cnt$[rsp]
	dec	eax
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	sub	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN7@pop_regist:
	cmp	DWORD PTR cnt$[rsp], 0
	je	SHORT $LN6@pop_regist

; 2843 :         /* don't "pop" xmm registers */
; 2844 :         if (GetValueSp(*regist) & OP_XYZMM)

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN12@pop_regist

; 2845 :           continue;

	jmp	SHORT $LN5@pop_regist
$LN12@pop_regist:

; 2846 :         AddLineQueueX("pop %r", *regist);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12472
	call	AddLineQueueX

; 2847 :       }

	jmp	SHORT $LN5@pop_regist
$LN6@pop_regist:
$LN10@pop_regist:
$LN1@pop_regist:

; 2848 :     }
; 2849 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
pop_register ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
info$ = 32
regist$ = 40
oldlinenumbers$ = 48
cnt$ = 52
resstack$ = 56
tv227 = 60
write_default_prologue PROC

; 2483 : {

	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 2484 :     struct proc_info    *info;
; 2485 :     uint_16             *regist;
; 2486 :     uint_8              oldlinenumbers;
; 2487 :     int                 cnt;
; 2488 : #if AMD64_SUPPORT
; 2489 :     int                 resstack = 0;

	mov	DWORD PTR resstack$[rsp], 0

; 2490 : #endif
; 2491 : 
; 2492 :     info = CurrProc->e.procinfo;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR info$[rsp], rax

; 2493 : 
; 2494 : #if AMD64_SUPPORT
; 2495 :     if ( info->isframe ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN8@write_defa

; 2496 :         //DebugMsg(("write_default_prologue: isframe\n"));
; 2497 :         if ( ModuleInfo.frame_auto ) {

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 17
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@write_defa

; 2498 :             write_win64_default_prologue( info );

	mov	rcx, QWORD PTR info$[rsp]
	call	write_win64_default_prologue

; 2499 :             /* v2.11: line queue is now run here */
; 2500 :             goto runqueue;

	jmp	$runqueue$32
$LN9@write_defa:

; 2501 :         }
; 2502 :         return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@write_defa
$LN8@write_defa:

; 2503 :     }
; 2504 :     if ( ModuleInfo.Ofssize == USE64 && ModuleInfo.fctype == FCT_WIN64 && ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) )

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	jne	SHORT $LN10@write_defa
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN10@write_defa
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN10@write_defa

; 2505 :         resstack = sym_ReservedStack->value;

	mov	rax, QWORD PTR sym_ReservedStack
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR resstack$[rsp], eax
$LN10@write_defa:

; 2506 : #endif
; 2507 :     /* default processing. if no params/locals are defined, continue */
; 2508 :     if( info->forceframe == FALSE &&
; 2509 :        info->localsize == 0 &&
; 2510 :        info->stackparam == FALSE &&
; 2511 :        info->has_vararg == FALSE &&
; 2512 : #if AMD64_SUPPORT
; 2513 :        resstack == 0 &&

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@write_defa
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	jne	SHORT $LN11@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN11@write_defa
	cmp	DWORD PTR resstack$[rsp], 0
	jne	SHORT $LN11@write_defa
	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	jne	SHORT $LN11@write_defa

; 2514 : #endif
; 2515 :        info->regslist == NULL )
; 2516 :         return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@write_defa
$LN11@write_defa:

; 2517 : 
; 2518 :     /* v2.11: now done in write_prologue() */
; 2519 :     //info->localsize = ROUND_UP( info->localsize, CurrWordSize );
; 2520 :     regist = info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$[rsp], rax

; 2521 : 
; 2522 : #if AMD64_SUPPORT
; 2523 :     /* initialize shadow space for register params */
; 2524 :     if ( ModuleInfo.Ofssize == USE64 &&
; 2525 :         CurrProc->sym.langtype == LANG_FASTCALL &&
; 2526 :         ModuleInfo.fctype == FCT_WIN64 &&

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	jne	SHORT $LN12@write_defa
	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN12@write_defa
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN12@write_defa
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 1
	test	eax, eax
	je	SHORT $LN12@write_defa

; 2527 :         ( ModuleInfo.win64_flags & W64F_SAVEREGPARAMS ) )
; 2528 :         win64_SaveRegParams( info );

	mov	rcx, QWORD PTR info$[rsp]
	call	win64_SaveRegParams
$LN12@write_defa:

; 2529 : #endif
; 2530 :     if( info->locallist || info->stackparam || info->has_vararg || info->forceframe ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN14@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN14@write_defa
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@write_defa
$LN14@write_defa:

; 2531 : 
; 2532 :         /* write 80386 prolog code
; 2533 :          * PUSH [E|R]BP
; 2534 :          * MOV  [E|R]BP, [E|R]SP
; 2535 :          * SUB  [E|R]SP, localsize
; 2536 :          */
; 2537 : #if STACKBASESUPP
; 2538 :         if ( !info->fpo ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@write_defa

; 2539 :             AddLineQueueX( "push %r", info->basereg );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12349
	call	AddLineQueueX

; 2540 :             AddLineQueueX( "mov %r, %r", info->basereg, stackreg[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR info$[rsp]
	movzx	edx, WORD PTR [rdx+86]
	mov	r8d, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12350
	call	AddLineQueueX
$LN15@write_defa:
$LN13@write_defa:

; 2541 :         }
; 2542 : #else
; 2543 :         AddLineQueueX( "push %r", basereg[ModuleInfo.Ofssize] );
; 2544 :         AddLineQueueX( "mov %r, %r", basereg[ModuleInfo.Ofssize], stackreg[ModuleInfo.Ofssize] );
; 2545 : #endif
; 2546 :     }
; 2547 : #if AMD64_SUPPORT
; 2548 :     if( resstack ) {

	cmp	DWORD PTR resstack$[rsp], 0
	je	$LN16@write_defa

; 2549 :         /* in this case, push the USES registers BEFORE the stack space is reserved */
; 2550 :         if ( regist ) {

	cmp	QWORD PTR regist$[rsp], 0
	je	SHORT $LN18@write_defa

; 2551 :             for( cnt = *regist++; cnt; cnt--, regist++ )

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	jmp	SHORT $LN4@write_defa
$LN2@write_defa:
	mov	eax, DWORD PTR cnt$[rsp]
	dec	eax
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN4@write_defa:
	cmp	DWORD PTR cnt$[rsp], 0
	je	SHORT $LN3@write_defa

; 2552 :                 AddLineQueueX( "push %r", *regist );

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12354
	call	AddLineQueueX
	jmp	SHORT $LN2@write_defa
$LN3@write_defa:

; 2553 :             regist = NULL;

	mov	QWORD PTR regist$[rsp], 0
$LN18@write_defa:

; 2554 :         }
; 2555 :         /* if no framepointer was pushed, add 8 to align stack on OWORD.
; 2556 :          * v2.12: obsolete, localsize contains correct value in this case.
; 2557 :          */
; 2558 :         //if( !(info->localsize || info->stackparam || info->has_vararg || info->forceframe ))
; 2559 :         //    AddLineQueueX( "sub %r, 8 + %s", stackreg[ModuleInfo.Ofssize], sym_ReservedStack->name );
; 2560 :         //else
; 2561 :         AddLineQueueX( "sub %r, %d + %s", stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize, sym_ReservedStack->name );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR sym_ReservedStack
	mov	r9, QWORD PTR [rdx+8]
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+36]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12355
	call	AddLineQueueX

; 2562 :     } else

	jmp	SHORT $LN17@write_defa
$LN16@write_defa:

; 2563 : #endif
; 2564 :     if( info->localsize  ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 0
	je	SHORT $LN19@write_defa

; 2565 :         /* using ADD and the 2-complement has one advantage:
; 2566 :          * it will generate short instructions up to a size of 128.
; 2567 :          * with SUB, short instructions work up to 127 only.
; 2568 :          */
; 2569 :         if ( Options.masm_compat_gencode || info->localsize == 128 )

	movzx	eax, BYTE PTR Options+144
	test	eax, eax
	jne	SHORT $LN22@write_defa
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	jne	SHORT $LN20@write_defa
$LN22@write_defa:

; 2570 :             AddLineQueueX( "add %r, %d", stackreg[ModuleInfo.Ofssize], NUMQUAL - info->localsize );

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	neg	eax
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:stackreg
	mov	r8d, eax
	mov	edx, DWORD PTR [rdx+rcx*4]
	lea	rcx, OFFSET FLAT:$SG12360
	call	AddLineQueueX
	jmp	SHORT $LN21@write_defa
$LN20@write_defa:

; 2571 :         else
; 2572 :             AddLineQueueX( "sub %r, %d", stackreg[ModuleInfo.Ofssize], NUMQUAL info->localsize );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+36]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12361
	call	AddLineQueueX
$LN21@write_defa:
$LN19@write_defa:
$LN17@write_defa:

; 2573 :     }
; 2574 : 
; 2575 :     if ( info->loadds ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@write_defa

; 2576 :         AddLineQueueX( "push %r", T_DS );

	mov	edx, 28
	lea	rcx, OFFSET FLAT:$SG12363
	call	AddLineQueueX

; 2577 :         AddLineQueueX( "mov %r, %s", T_AX, szDgroup );

	lea	r8, OFFSET FLAT:szDgroup
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG12364
	call	AddLineQueueX

; 2578 :         AddLineQueueX( "mov %r, %r", T_DS, ModuleInfo.Ofssize ? T_EAX : T_AX );

	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	je	SHORT $LN30@write_defa
	mov	DWORD PTR tv227[rsp], 17
	jmp	SHORT $LN31@write_defa
$LN30@write_defa:
	mov	DWORD PTR tv227[rsp], 9
$LN31@write_defa:
	mov	r8d, DWORD PTR tv227[rsp]
	mov	edx, 28
	lea	rcx, OFFSET FLAT:$SG12365
	call	AddLineQueueX
$LN23@write_defa:

; 2579 :     }
; 2580 : 
; 2581 :     /* Push the GPR registers of the USES clause */
; 2582 :     if ( regist ) {

	cmp	QWORD PTR regist$[rsp], 0
	je	SHORT $LN24@write_defa

; 2583 :         for( cnt = *regist++; cnt; cnt--, regist++ ) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	jmp	SHORT $LN7@write_defa
$LN5@write_defa:
	mov	eax, DWORD PTR cnt$[rsp]
	dec	eax
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN7@write_defa:
	cmp	DWORD PTR cnt$[rsp], 0
	je	SHORT $LN6@write_defa

; 2584 :             AddLineQueueX( "push %r", *regist );

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12367
	call	AddLineQueueX

; 2585 :         }

	jmp	SHORT $LN5@write_defa
$LN6@write_defa:
$LN24@write_defa:
$runqueue$32:

; 2586 :     }
; 2587 : 
; 2588 : #if AMD64_SUPPORT
; 2589 : runqueue:
; 2590 : #endif
; 2591 : 
; 2592 : #if FASTPASS
; 2593 :     /* special case: generated code runs BEFORE the line.*/
; 2594 :     if ( ModuleInfo.list && UseSavedState )

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 11
	and	eax, 1
	test	eax, eax
	je	SHORT $LN25@write_defa
	movzx	eax, BYTE PTR UseSavedState
	test	eax, eax
	je	SHORT $LN25@write_defa

; 2595 :         if ( Parse_Pass == PASS_1 )

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN26@write_defa

; 2596 :             info->prolog_list_pos = list_pos;

	mov	rax, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR list_pos
	mov	DWORD PTR [rax+80], ecx
	jmp	SHORT $LN27@write_defa
$LN26@write_defa:

; 2597 :         else
; 2598 :             list_pos = info->prolog_list_pos;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+80]
	mov	DWORD PTR list_pos, eax
$LN27@write_defa:
$LN25@write_defa:

; 2599 : #endif
; 2600 :     /* line number debug info also needs special treatment
; 2601 :      * because current line number is the first true src line
; 2602 :      * IN the proc.
; 2603 :      */
; 2604 :     oldlinenumbers = Options.line_numbers;

	movzx	eax, BYTE PTR Options+1
	mov	BYTE PTR oldlinenumbers$[rsp], al

; 2605 :     Options.line_numbers = FALSE; /* temporarily disable line numbers */

	mov	BYTE PTR Options+1, 0

; 2606 :     RunLineQueue();

	call	RunLineQueue

; 2607 :     Options.line_numbers = oldlinenumbers;

	movzx	eax, BYTE PTR oldlinenumbers$[rsp]
	mov	BYTE PTR Options+1, al

; 2608 : 
; 2609 : #if FASTPASS
; 2610 :     if ( ModuleInfo.list && UseSavedState && (Parse_Pass > PASS_1))

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 11
	and	eax, 1
	test	eax, eax
	je	SHORT $LN28@write_defa
	movzx	eax, BYTE PTR UseSavedState
	test	eax, eax
	je	SHORT $LN28@write_defa
	cmp	DWORD PTR Parse_Pass, 0
	jbe	SHORT $LN28@write_defa

; 2611 :          LineStoreCurr->list_pos = list_pos;

	mov	rax, QWORD PTR LineStoreCurr
	mov	ecx, DWORD PTR list_pos
	mov	DWORD PTR [rax+12], ecx
$LN28@write_defa:

; 2612 : #endif
; 2613 : 
; 2614 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@write_defa:

; 2615 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
write_default_prologue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
regist$ = 48
ppfmt$ = 56
cntxmm$ = 64
resstack$ = 68
cnt$1 = 72
n$2 = 76
cnt$3 = 80
i$4 = 84
cnt$5 = 88
tv68 = 92
tv381 = 96
tv398 = 100
tv251 = 104
tv447 = 112
tv456 = 116
info$ = 144
write_win64_default_prologue PROC

; 2313 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	rdi, rsp
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 2314 :     uint_16             *regist;
; 2315 :     const char * const  *ppfmt;
; 2316 :     int                 cntxmm;
; 2317 :     int                 resstack = ( ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) ? sym_ReservedStack->value : 0 );

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN43@write_win6
	mov	rax, QWORD PTR sym_ReservedStack
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR tv68[rsp], eax
	jmp	SHORT $LN44@write_win6
$LN43@write_win6:
	mov	DWORD PTR tv68[rsp], 0
$LN44@write_win6:
	mov	eax, DWORD PTR tv68[rsp]
	mov	DWORD PTR resstack$[rsp], eax

; 2318 : 
; 2319 :     DebugMsg1(("write_win64_default_prologue enter\n"));

	lea	rcx, OFFSET FLAT:$SG12277
	call	DoDebugMsg1

; 2320 : 
; 2321 :     if ( ModuleInfo.win64_flags & W64F_SAVEREGPARAMS )

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 1
	test	eax, eax
	je	SHORT $LN11@write_win6

; 2322 :         win64_SaveRegParams( info );

	mov	rcx, QWORD PTR info$[rsp]
	call	win64_SaveRegParams
$LN11@write_win6:

; 2323 :     if (ModuleInfo.win64_flags & W64F_HABRAN) 

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN12@write_win6

; 2324 :       win64_StoreRegHome(info);

	mov	rcx, QWORD PTR info$[rsp]
	call	win64_StoreRegHome
$LN12@write_win6:

; 2325 :     /*
; 2326 :      * PUSH RBP
; 2327 :      * .PUSHREG RBP
; 2328 :      * MOV RBP, RSP
; 2329 :      * .SETFRAME RBP, 0
; 2330 :      */
; 2331 : #if STACKBASESUPP
; 2332 :     /* info->locallist tells whether there are local variables ( info->localsize doesn't! ) */
; 2333 :     if ( info->fpo || ( info->parasize == 0 && info->locallist == NULL ) ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@write_win6
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN13@write_win6
	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN13@write_win6
$LN15@write_win6:

; 2334 :         DebugMsg1(("write_win64_default_prologue: no frame register needed\n"));

	lea	rcx, OFFSET FLAT:$SG12283
	call	DoDebugMsg1

; 2335 :         //sizestd += 8; /* v2.12: obsolete */
; 2336 :     } else {

	jmp	SHORT $LN14@write_win6
$LN13@write_win6:

; 2337 :         AddLineQueueX( "push %r", info->basereg );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12284
	call	AddLineQueueX

; 2338 :         AddLineQueueX( "%r %r", T_DOT_PUSHREG, info->basereg );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	mov	r8d, eax
	mov	edx, 412				; 0000019cH
	lea	rcx, OFFSET FLAT:$SG12285
	call	AddLineQueueX

; 2339 :         AddLineQueueX( "mov %r, %r", info->basereg, T_RSP );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	mov	r8d, 119				; 00000077H
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12286
	call	AddLineQueueX

; 2340 :         AddLineQueueX( "%r %r, 0", T_DOT_SETFRAME, info->basereg );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	mov	r8d, eax
	mov	edx, 416				; 000001a0H
	lea	rcx, OFFSET FLAT:$SG12287
	call	AddLineQueueX
$LN14@write_win6:

; 2341 :     }
; 2342 : #else
; 2343 :     AddLineQueueX( "push %r", basereg[USE64] );
; 2344 :     AddLineQueueX( "%r %r", T_DOT_PUSHREG, basereg[USE64] );
; 2345 :     AddLineQueueX( "mov %r, %r", basereg[USE64], T_RSP );
; 2346 :     AddLineQueueX( "%r %r, 0", T_DOT_SETFRAME, basereg[USE64] );
; 2347 : #endif
; 2348 :     if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	$LN16@write_win6

; 2349 :       cntxmm = 0;

	mov	DWORD PTR cntxmm$[rsp], 0

; 2350 :       if (info->regslist) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN18@write_win6

; 2351 :         int cnt;
; 2352 :         int n = 0;

	mov	DWORD PTR n$2[rsp], 0

; 2353 :         info->pushed_reg = 0; /*count of pushed registers */

	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+64], 0

; 2354 :         regist = info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$[rsp], rax

; 2355 :         for (cnt = *regist++; cnt; cnt--, regist++) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$1[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	jmp	SHORT $LN4@write_win6
$LN2@write_win6:
	mov	eax, DWORD PTR cnt$1[rsp]
	dec	eax
	mov	DWORD PTR cnt$1[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN4@write_win6:
	cmp	DWORD PTR cnt$1[rsp], 0
	je	$LN3@write_win6

; 2356 :           if (GetValueSp(*regist) & OP_XYZMM) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN19@write_win6

; 2357 :             cntxmm += 1;

	mov	eax, DWORD PTR cntxmm$[rsp]
	inc	eax
	mov	DWORD PTR cntxmm$[rsp], eax

; 2358 :           }

	jmp	$LN20@write_win6
$LN19@write_win6:

; 2359 :           else {
; 2360 :             if (n < info->stored_reg) n++;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+60]
	cmp	DWORD PTR n$2[rsp], eax
	jge	SHORT $LN21@write_win6
	mov	eax, DWORD PTR n$2[rsp]
	inc	eax
	mov	DWORD PTR n$2[rsp], eax
	jmp	$LN22@write_win6
$LN21@write_win6:

; 2361 :             else{
; 2362 :               info->pushed_reg += 1;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+64]
	inc	eax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+64], eax

; 2363 :               AddLineQueueX("push %r", *regist);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12295
	call	AddLineQueueX

; 2364 :               if ((1 << GetRegNo(*regist)) & win64_nvgpr) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	ecx, 1
	mov	DWORD PTR tv381[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv381[rsp]
	shl	eax, cl
	movzx	ecx, WORD PTR win64_nvgpr
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN23@write_win6

; 2365 :                 AddLineQueueX("%r %r", T_DOT_PUSHREG, *regist);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r8d, eax
	mov	edx, 412				; 0000019cH
	lea	rcx, OFFSET FLAT:$SG12297
	call	AddLineQueueX
$LN23@write_win6:
$LN22@write_win6:
$LN20@write_win6:

; 2366 :               }
; 2367 :             }
; 2368 :           }
; 2369 :         } /* end for */

	jmp	$LN2@write_win6
$LN3@write_win6:
$LN18@write_win6:

; 2370 :       }
; 2371 :     }

	jmp	$LN17@write_win6
$LN16@write_win6:

; 2372 :     else{
; 2373 :       /* after the "push rbp", the stack is xmmword aligned */
; 2374 : 
; 2375 :       /* Push the registers */
; 2376 :       cntxmm = 0;

	mov	DWORD PTR cntxmm$[rsp], 0

; 2377 :       if (info->regslist) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN24@write_win6

; 2378 :         int cnt;
; 2379 :         regist = info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$[rsp], rax

; 2380 :         for (cnt = *regist++; cnt; cnt--, regist++) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$3[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	jmp	SHORT $LN7@write_win6
$LN5@write_win6:
	mov	eax, DWORD PTR cnt$3[rsp]
	dec	eax
	mov	DWORD PTR cnt$3[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN7@write_win6:
	cmp	DWORD PTR cnt$3[rsp], 0
	je	$LN6@write_win6

; 2381 :           if (GetValueSp(*regist) & OP_XYZMM) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN25@write_win6

; 2382 :             cntxmm += 1;

	mov	eax, DWORD PTR cntxmm$[rsp]
	inc	eax
	mov	DWORD PTR cntxmm$[rsp], eax

; 2383 :           }

	jmp	SHORT $LN26@write_win6
$LN25@write_win6:

; 2384 :           else {
; 2385 :             AddLineQueueX("push %r", *regist);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12301
	call	AddLineQueueX

; 2386 :             if ((1 << GetRegNo(*regist)) & win64_nvgpr) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	ecx, 1
	mov	DWORD PTR tv398[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv398[rsp]
	shl	eax, cl
	movzx	ecx, WORD PTR win64_nvgpr
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN27@write_win6

; 2387 :               AddLineQueueX("%r %r", T_DOT_PUSHREG, *regist);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r8d, eax
	mov	edx, 412				; 0000019cH
	lea	rcx, OFFSET FLAT:$SG12303
	call	AddLineQueueX
$LN27@write_win6:
$LN26@write_win6:

; 2388 :             }
; 2389 :           }
; 2390 :         } /* end for */

	jmp	$LN5@write_win6
$LN6@write_win6:
$LN24@write_win6:
$LN17@write_win6:

; 2391 :       }
; 2392 :     }
; 2393 :     /* v2.11: now done in write_prologue() */
; 2394 :     //info->localsize = ROUND_UP( info->localsize, CurrWordSize );
; 2395 :     if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN28@write_win6

; 2396 :       if (Parse_Pass && sym_ReservedStack->hasinvoke == 0) resstack = 0;

	cmp	DWORD PTR Parse_Pass, 0
	je	SHORT $LN29@write_win6
	mov	rax, QWORD PTR sym_ReservedStack
	cmp	DWORD PTR [rax+16], 0
	jne	SHORT $LN29@write_win6
	mov	DWORD PTR resstack$[rsp], 0
$LN29@write_win6:

; 2397 :       if (!(info->locallist) && !(resstack)) info->localsize = 0;

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN30@write_win6
	cmp	DWORD PTR resstack$[rsp], 0
	jne	SHORT $LN30@write_win6
	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+36], 0
$LN30@write_win6:
$LN28@write_win6:

; 2398 :     }
; 2399 :     /* alloc space for local variables */
; 2400 :     //if( info->localsize + sizestd ) {
; 2401 :     if( info->localsize + resstack ) {

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, DWORD PTR resstack$[rsp]
	test	eax, eax
	je	$LN31@write_win6

; 2402 :         DebugMsg1(("write_win64_default_prologue: localsize=%u resstack=%u\n", info->localsize, resstack ));

	mov	r8d, DWORD PTR resstack$[rsp]
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+36]
	lea	rcx, OFFSET FLAT:$SG12308
	call	DoDebugMsg1

; 2403 :         if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN32@write_win6

; 2404 :           if (((info->pushed_reg & 1) && (info->localsize & 0xF)) ||

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+64]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN35@write_win6
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	and	eax, 15
	test	eax, eax
	jne	SHORT $LN34@write_win6
$LN35@write_win6:
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+64]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN33@write_win6
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	and	eax, 15
	test	eax, eax
	jne	SHORT $LN33@write_win6
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+64]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN33@write_win6
	cmp	DWORD PTR cntxmm$[rsp], 0
	jne	SHORT $LN33@write_win6
$LN34@write_win6:

; 2405 :             ((!(info->pushed_reg & 1)) && (!(info->localsize & 0xF))) && (!(info->pushed_reg & 1)) && (!(cntxmm)))
; 2406 :             info->localsize += 8;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, 8
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN33@write_win6:
$LN32@write_win6:

; 2407 :         }
; 2408 :           /*
; 2409 :          * SUB  RSP, localsize
; 2410 :          * .ALLOCSTACK localsize
; 2411 :          */
; 2412 :         ppfmt = ( resstack ? fmtstk1 : fmtstk0 );

	cmp	DWORD PTR resstack$[rsp], 0
	je	SHORT $LN45@write_win6
	lea	rax, OFFSET FLAT:fmtstk1
	mov	QWORD PTR tv251[rsp], rax
	jmp	SHORT $LN46@write_win6
$LN45@write_win6:
	lea	rax, OFFSET FLAT:fmtstk0
	mov	QWORD PTR tv251[rsp], rax
$LN46@write_win6:
	mov	rax, QWORD PTR tv251[rsp]
	mov	QWORD PTR ppfmt$[rsp], rax

; 2413 : #if STACKPROBE
; 2414 :         if ( info->localsize + resstack > 0x1000 ) {
; 2415 :             AddLineQueueX( *(ppfmt+2), T_RAX, NUMQUAL info->localsize, sym_ReservedStack->name );
; 2416 :             AddLineQueue(  "externdef __chkstk:PROC" );
; 2417 :             AddLineQueue(  "call __chkstk" );
; 2418 :             AddLineQueueX( "mov %r, %r", T_RSP, T_RAX );
; 2419 :         } else
; 2420 : #endif
; 2421 :         AddLineQueueX( *(ppfmt+0), T_RSP, NUMQUAL info->localsize, sym_ReservedStack->name );

	mov	rax, QWORD PTR sym_ReservedStack
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+36]
	mov	edx, 119				; 00000077H
	mov	rax, QWORD PTR ppfmt$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	AddLineQueueX

; 2422 :         AddLineQueueX( *(ppfmt+1), T_DOT_ALLOCSTACK, NUMQUAL info->localsize, sym_ReservedStack->name );

	mov	rax, QWORD PTR sym_ReservedStack
	mov	r9, QWORD PTR [rax+8]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+36]
	mov	edx, 409				; 00000199H
	mov	rax, QWORD PTR ppfmt$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	AddLineQueueX

; 2423 : 
; 2424 :         /* save xmm registers */
; 2425 :         if ( cntxmm ) {

	cmp	DWORD PTR cntxmm$[rsp], 0
	je	$LN36@write_win6

; 2426 :             int i;
; 2427 :             int cnt;
; 2428 :             regist = info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$[rsp], rax

; 2429 :             i = ( info->localsize - cntxmm * 32 ) & ~(32-1);

	imul	eax, DWORD PTR cntxmm$[rsp], 32		; 00000020H
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	sub	ecx, eax
	mov	eax, ecx
	and	eax, -32				; ffffffe0H
	mov	DWORD PTR i$4[rsp], eax

; 2430 :             for( cnt = *regist++; cnt; cnt--, regist++ ) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$5[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	jmp	SHORT $LN10@write_win6
$LN8@write_win6:
	mov	eax, DWORD PTR cnt$5[rsp]
	dec	eax
	mov	DWORD PTR cnt$5[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN10@write_win6:
	cmp	DWORD PTR cnt$5[rsp], 0
	je	$LN9@write_win6

; 2431 :                 if ( GetValueSp( *regist ) & OP_XYZMM ) {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	$LN37@write_win6

; 2432 :                     if ( resstack ) {

	cmp	DWORD PTR resstack$[rsp], 0
	je	$LN38@write_win6

; 2433 :                         AddLineQueueX( "vmovdqa [%r+%u+%s], %r", T_RSP, NUMQUAL i, sym_ReservedStack->name, *regist );

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR sym_ReservedStack
	mov	r9, QWORD PTR [rax+8]
	mov	r8d, DWORD PTR i$4[rsp]
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12317
	call	AddLineQueueX

; 2434 :                         if ( ( 1 << GetRegNo( *regist ) ) & win64_nvxmm )  {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	ecx, 1
	mov	DWORD PTR tv447[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv447[rsp]
	shl	eax, cl
	movzx	ecx, WORD PTR win64_nvxmm
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN40@write_win6

; 2435 :                             AddLineQueueX( "%r %r, %u+%s", T_DOT_SAVEYMM256, *regist, NUMQUAL i, sym_ReservedStack->name );

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rcx, QWORD PTR sym_ReservedStack
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR i$4[rsp]
	mov	r8d, eax
	mov	edx, 415				; 0000019fH
	lea	rcx, OFFSET FLAT:$SG12319
	call	AddLineQueueX
$LN40@write_win6:

; 2436 :                         }
; 2437 :                     } else {

	jmp	SHORT $LN39@write_win6
$LN38@write_win6:

; 2438 :                         AddLineQueueX( "vmovdqa [%r+%u], %r", T_RSP, NUMQUAL i, *regist );

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r9d, eax
	mov	r8d, DWORD PTR i$4[rsp]
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12320
	call	AddLineQueueX

; 2439 :                         if ( ( 1 << GetRegNo( *regist ) ) & win64_nvxmm )  {

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	ecx, 1
	mov	DWORD PTR tv456[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv456[rsp]
	shl	eax, cl
	movzx	ecx, WORD PTR win64_nvxmm
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN41@write_win6

; 2440 :                             AddLineQueueX( "%r %r, %u", T_DOT_SAVEYMM256, *regist, NUMQUAL i );

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r9d, DWORD PTR i$4[rsp]
	mov	r8d, eax
	mov	edx, 415				; 0000019fH
	lea	rcx, OFFSET FLAT:$SG12322
	call	AddLineQueueX
$LN41@write_win6:
$LN39@write_win6:

; 2441 :                         }
; 2442 :                     }
; 2443 :                     i += 32;

	mov	eax, DWORD PTR i$4[rsp]
	add	eax, 32					; 00000020H
	mov	DWORD PTR i$4[rsp], eax
$LN37@write_win6:

; 2444 :                 }
; 2445 :             }

	jmp	$LN8@write_win6
$LN9@write_win6:
$LN36@write_win6:
$LN31@write_win6:

; 2446 :         }
; 2447 : 
; 2448 :     }
; 2449 :     AddLineQueueX( "%r", T_DOT_ENDPROLOG );

	mov	edx, 410				; 0000019aH
	lea	rcx, OFFSET FLAT:$SG12323
	call	AddLineQueueX

; 2450 : 
; 2451 :     /* v2.11: linequeue is now run in write_default_prologue() */
; 2452 :     return;
; 2453 : }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
write_win64_default_prologue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
i$ = 32
cnt$ = 36
grcount$ = 40
sizestd$ = 44
freeshadow$ = 48
regist$ = 56
info$ = 80
win64_StoreRegHome PROC

; 2235 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2236 :   int			       i = 0;

	mov	DWORD PTR i$[rsp], 0

; 2237 :   int			       cnt;
; 2238 :   int            grcount = 0;

	mov	DWORD PTR grcount$[rsp], 0

; 2239 :   int			       sizestd = 0;

	mov	DWORD PTR sizestd$[rsp], 0

; 2240 :   int            freeshadow = 4;

	mov	DWORD PTR freeshadow$[rsp], 4

; 2241 :   uint_16        *regist;
; 2242 :   info->stored_reg = 0;

	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+60], 0

; 2243 :   if (info->regslist) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN26@win64_Stor

; 2244 :     for (regist = info->regslist, cnt = *regist++; cnt; cnt--, regist++, i++) {

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$[rsp], rax
	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	jmp	SHORT $LN4@win64_Stor
$LN2@win64_Stor:
	mov	eax, DWORD PTR cnt$[rsp]
	dec	eax
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@win64_Stor:
	cmp	DWORD PTR cnt$[rsp], 0
	je	SHORT $LN3@win64_Stor

; 2245 :       if (GetValueSp(*regist) & OP_XYZMM) continue;

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN27@win64_Stor
	jmp	SHORT $LN2@win64_Stor
	jmp	SHORT $LN28@win64_Stor
$LN27@win64_Stor:

; 2246 :       else ++grcount;                                       //find how many general registers to save

	mov	eax, DWORD PTR grcount$[rsp]
	inc	eax
	mov	DWORD PTR grcount$[rsp], eax
$LN28@win64_Stor:

; 2247 :     }

	jmp	SHORT $LN2@win64_Stor
$LN3@win64_Stor:

; 2248 :     //for (i = 0, freeshadow = 0; i<4; i++){                  
; 2249 :     //  if (info->home_used[i] == 0) ++freeshadow;
; 2250 :     //}
; 2251 :     freeshadow -= info->home_taken;                         //find out how many free shadows

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+68]
	mov	ecx, DWORD PTR freeshadow$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR freeshadow$[rsp], eax

; 2252 :     if (freeshadow){                                        //skip if all shadow spaces are taken  

	cmp	DWORD PTR freeshadow$[rsp], 0
	je	$LN29@win64_Stor

; 2253 :       if (grcount == 1) memset(info->home_used, 1, 4);      //1 register only? don't store it, push it to prevent 'sub rsp,...8'

	cmp	DWORD PTR grcount$[rsp], 1
	jne	SHORT $LN30@win64_Stor
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 76					; 0000004cH
	mov	r8d, 4
	mov	edx, 1
	mov	rcx, rax
	call	memset
	jmp	$LN31@win64_Stor
$LN30@win64_Stor:

; 2254 :       else if (grcount == 2 && freeshadow >= 2){            //store only one egister, another push to prevent 'sub rsp,...8'

	cmp	DWORD PTR grcount$[rsp], 2
	jne	SHORT $LN32@win64_Stor
	cmp	DWORD PTR freeshadow$[rsp], 2
	jl	SHORT $LN32@win64_Stor

; 2255 :         for (i = 0; i<4; i++){

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN7@win64_Stor
$LN5@win64_Stor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@win64_Stor:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN6@win64_Stor

; 2256 :           if (info->home_used[i] == 0) break;               //we need only one space   

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+76]
	test	eax, eax
	jne	SHORT $LN34@win64_Stor
	jmp	SHORT $LN6@win64_Stor
$LN34@win64_Stor:

; 2257 :         }

	jmp	SHORT $LN5@win64_Stor
$LN6@win64_Stor:

; 2258 :         for (++i; i<4; i++)                                 //the rest of free spaces render as taken

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN10@win64_Stor
$LN8@win64_Stor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@win64_Stor:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN9@win64_Stor

; 2259 :           info->home_used[i] = 1;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+rax+76], 1
	jmp	SHORT $LN8@win64_Stor
$LN9@win64_Stor:

; 2260 :       }

	jmp	$LN33@win64_Stor
$LN32@win64_Stor:

; 2261 :       else if (grcount == 3){                               //3 registers?

	cmp	DWORD PTR grcount$[rsp], 3
	jne	$LN35@win64_Stor

; 2262 :         if (freeshadow == 1) memset(info->home_used, 1, 4); //if only 1 free shadow, don't store it, push them

	cmp	DWORD PTR freeshadow$[rsp], 1
	jne	SHORT $LN37@win64_Stor
	mov	rax, QWORD PTR info$[rsp]
	add	rax, 76					; 0000004cH
	mov	r8d, 4
	mov	edx, 1
	mov	rcx, rax
	call	memset
$LN37@win64_Stor:

; 2263 :         if (freeshadow >= 3){                               //enen if there is enough space we will store only two

	cmp	DWORD PTR freeshadow$[rsp], 3
	jl	$LN38@win64_Stor

; 2264 :           for (i = 0; i<4; i++){                            //the third one we will push to keep uneven stack 

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN13@win64_Stor
$LN11@win64_Stor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN13@win64_Stor:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN12@win64_Stor

; 2265 :             if (info->home_used[i] == 0) break;             //found first availible

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+76]
	test	eax, eax
	jne	SHORT $LN39@win64_Stor
	jmp	SHORT $LN12@win64_Stor
$LN39@win64_Stor:

; 2266 :           }

	jmp	SHORT $LN11@win64_Stor
$LN12@win64_Stor:

; 2267 :           for (++i; i<4; i++){

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN16@win64_Stor
$LN14@win64_Stor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN16@win64_Stor:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN15@win64_Stor

; 2268 :             if (info->home_used[i] == 0) break;            //found second availible

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+76]
	test	eax, eax
	jne	SHORT $LN40@win64_Stor
	jmp	SHORT $LN15@win64_Stor
$LN40@win64_Stor:

; 2269 :           }

	jmp	SHORT $LN14@win64_Stor
$LN15@win64_Stor:

; 2270 :           for (++i; i<4; i++)

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN19@win64_Stor
$LN17@win64_Stor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@win64_Stor:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN18@win64_Stor

; 2271 :             info->home_used[i] = 1;                        //render the rest of the shadow spaces as taken

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+rax+76], 1
	jmp	SHORT $LN17@win64_Stor
$LN18@win64_Stor:
$LN38@win64_Stor:

; 2272 :         }
; 2273 :       }

	jmp	$LN36@win64_Stor
$LN35@win64_Stor:

; 2274 :       else if (grcount == 4 && freeshadow == 4){          //easy case

	cmp	DWORD PTR grcount$[rsp], 4
	jne	SHORT $LN41@win64_Stor
	cmp	DWORD PTR freeshadow$[rsp], 4
	jne	SHORT $LN41@win64_Stor

; 2275 :         info->home_used[3] = 1;                           //render the last shadow spaces as taken

	mov	eax, 1
	imul	rax, rax, 3
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+rax+76], 1

; 2276 :       }                                                   //remember the first space is 0 than 1, 2 and 3 follow 

	jmp	SHORT $LN42@win64_Stor
$LN41@win64_Stor:

; 2277 :       else if (grcount > 4){                              //if more registars than spaces

	cmp	DWORD PTR grcount$[rsp], 4
	jle	SHORT $LN43@win64_Stor

; 2278 :         freeshadow = grcount - freeshadow;                //find out how many we can store

	mov	eax, DWORD PTR freeshadow$[rsp]
	mov	ecx, DWORD PTR grcount$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR freeshadow$[rsp], eax

; 2279 :         if (!(freeshadow & 1)){                           //if it is even number

	mov	eax, DWORD PTR freeshadow$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN44@win64_Stor

; 2280 :           for (i = 0; i<4; i++){                          //than we have to disable one space

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN22@win64_Stor
$LN20@win64_Stor:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN22@win64_Stor:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN21@win64_Stor

; 2281 :             if (info->home_used[i] == 0) break;           //find the first free space 

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+76]
	test	eax, eax
	jne	SHORT $LN45@win64_Stor
	jmp	SHORT $LN21@win64_Stor
$LN45@win64_Stor:

; 2282 :           }

	jmp	SHORT $LN20@win64_Stor
$LN21@win64_Stor:

; 2283 :           info->home_used[i] = 1;                         //and render it as taken

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+rax+76], 1
$LN44@win64_Stor:
$LN43@win64_Stor:
$LN42@win64_Stor:
$LN36@win64_Stor:
$LN33@win64_Stor:
$LN31@win64_Stor:
$LN29@win64_Stor:

; 2284 :         }
; 2285 :       }
; 2286 :     }
; 2287 :     for (i = 0, regist = info->regslist, cnt = *regist++; cnt; cnt--, regist++, i++) {

	mov	DWORD PTR i$[rsp], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$[rsp], rax
	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	jmp	SHORT $LN25@win64_Stor
$LN23@win64_Stor:
	mov	eax, DWORD PTR cnt$[rsp]
	dec	eax
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@win64_Stor:
	cmp	DWORD PTR cnt$[rsp], 0
	je	$LN24@win64_Stor

; 2288 :       if (GetValueSp(*regist) & (OP_XYZMM )) continue;

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN46@win64_Stor
	jmp	SHORT $LN23@win64_Stor
	jmp	$LN47@win64_Stor
$LN46@win64_Stor:

; 2289 :       else {
; 2290 :         sizestd += 8;

	mov	eax, DWORD PTR sizestd$[rsp]
	add	eax, 8
	mov	DWORD PTR sizestd$[rsp], eax

; 2291 :         if (i < 4)

	cmp	DWORD PTR i$[rsp], 4
	jge	$LN48@win64_Stor

; 2292 :         {
; 2293 :           if (info->home_used[i] == 0){

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+76]
	test	eax, eax
	jne	SHORT $LN49@win64_Stor

; 2294 :             AddLineQueueX("mov [%r+%u], %r", T_RSP, NUMQUAL sizestd, *regist);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r9d, eax
	mov	r8d, DWORD PTR sizestd$[rsp]
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12252
	call	AddLineQueueX

; 2295 :             AddLineQueueX("%r %r, %u", T_DOT_SAVEREG, *regist, NUMQUAL sizestd);

	mov	rax, QWORD PTR regist$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	r9d, DWORD PTR sizestd$[rsp]
	mov	r8d, eax
	mov	edx, 413				; 0000019dH
	lea	rcx, OFFSET FLAT:$SG12253
	call	AddLineQueueX

; 2296 :             info->stored_reg++;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+60]
	inc	eax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+60], eax

; 2297 :           }

	jmp	SHORT $LN50@win64_Stor
$LN49@win64_Stor:

; 2298 :           else {
; 2299 :             cnt++; regist--;

	mov	eax, DWORD PTR cnt$[rsp]
	inc	eax
	mov	DWORD PTR cnt$[rsp], eax
	mov	rax, QWORD PTR regist$[rsp]
	sub	rax, 2
	mov	QWORD PTR regist$[rsp], rax
$LN50@win64_Stor:
$LN48@win64_Stor:
$LN47@win64_Stor:

; 2300 :           }
; 2301 :         }
; 2302 :       }
; 2303 :     }/* end for */

	jmp	$LN23@win64_Stor
$LN24@win64_Stor:
$LN26@win64_Stor:

; 2304 :   }
; 2305 :   return;
; 2306 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
win64_StoreRegHome ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
i$ = 32
param$ = 40
regist$1 = 56
info$ = 80
win64_SaveRegParams PROC

; 2180 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 2181 :     int i;
; 2182 :     struct dsym *param;
; 2183 :     if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	$LN8@win64_Save

; 2184 :       int			   cnt;
; 2185 :       uint_16        *regist;
; 2186 :       info->home_taken = 0;

	mov	rax, QWORD PTR info$[rsp]
	mov	DWORD PTR [rax+68], 0

; 2187 :       memset(info->home_used, 0, 4);

	mov	rax, QWORD PTR info$[rsp]
	add	rax, 76					; 0000004cH
	mov	r8d, 4
	xor	edx, edx
	mov	rcx, rax
	call	memset

; 2188 :       if (info->regslist)

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN10@win64_Save

; 2189 :         regist = info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regist$1[rsp], rax
$LN10@win64_Save:

; 2190 : 
; 2191 :       for (i = 0, param = info->paralist; param && (i < 4); i++) {

	mov	DWORD PTR i$[rsp], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR param$[rsp], rax
	jmp	SHORT $LN4@win64_Save
$LN2@win64_Save:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@win64_Save:
	cmp	QWORD PTR param$[rsp], 0
	je	$LN3@win64_Save
	cmp	DWORD PTR i$[rsp], 4
	jge	$LN3@win64_Save

; 2192 :         /* v2.05: save XMMx if type is float/double */
; 2193 :         if (param->sym.is_vararg == FALSE) {

	mov	rax, QWORD PTR param$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	$LN11@win64_Save

; 2194 :           if ((param->sym.mem_type & MT_FLOAT) && param->sym.used){  // added  && param->sym.used

	mov	rax, QWORD PTR param$[rsp]
	mov	eax, DWORD PTR [rax+36]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN13@win64_Save
	mov	rax, QWORD PTR param$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN13@win64_Save

; 2195 :             AddLineQueueX("movq [%r+%u], %r", T_RSP, 8 + i * 8, T_XMM0 + i);

	mov	eax, DWORD PTR i$[rsp]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*8+8]
	mov	r9d, eax
	mov	r8d, ecx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12182
	call	AddLineQueueX

; 2196 :             info->home_used[i] = 1;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+rax+76], 1

; 2197 :             ++info->home_taken;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+68]
	inc	eax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+68], eax

; 2198 :           }

	jmp	SHORT $LN14@win64_Save
$LN13@win64_Save:

; 2199 :           else{
; 2200 :             if (param->sym.used){                                    //here as well 

	mov	rax, QWORD PTR param$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN15@win64_Save

; 2201 :               AddLineQueueX("mov [%r+%u], %r", T_RSP, 8 + i * 8, ms64_regs[i]);

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	edx, DWORD PTR i$[rsp]
	lea	edx, DWORD PTR [rdx*8+8]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	r8d, edx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12184
	call	AddLineQueueX

; 2202 :               info->home_used[i] = 1;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+rax+76], 1

; 2203 :               ++info->home_taken;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+68]
	inc	eax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+68], eax
$LN15@win64_Save:
$LN14@win64_Save:

; 2204 :             }
; 2205 :           }
; 2206 :           param = param->nextparam;

	mov	rax, QWORD PTR param$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR param$[rsp], rax

; 2207 :         }

	jmp	SHORT $LN12@win64_Save
$LN11@win64_Save:

; 2208 :         else { /* v2.09: else branch added */
; 2209 :           AddLineQueueX("mov [%r+%u], %r", T_RSP, 8 + i * 8, ms64_regs[i]);

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	edx, DWORD PTR i$[rsp]
	lea	edx, DWORD PTR [rdx*8+8]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	r8d, edx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12185
	call	AddLineQueueX

; 2210 :           info->home_used[i] = 1;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+rax+76], 1

; 2211 :           ++info->home_taken;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+68]
	inc	eax
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+68], eax
$LN12@win64_Save:

; 2212 :         }
; 2213 :       }

	jmp	$LN2@win64_Save
$LN3@win64_Save:

; 2214 :     }

	jmp	$LN9@win64_Save
$LN8@win64_Save:

; 2215 :     else {
; 2216 :       for (i = 0, param = info->paralist; param && (i < 4); i++) {

	mov	DWORD PTR i$[rsp], 0
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR param$[rsp], rax
	jmp	SHORT $LN7@win64_Save
$LN5@win64_Save:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@win64_Save:
	cmp	QWORD PTR param$[rsp], 0
	je	$LN6@win64_Save
	cmp	DWORD PTR i$[rsp], 4
	jge	$LN6@win64_Save

; 2217 :         /* v2.05: save XMMx if type is float/double */
; 2218 :         if (param->sym.is_vararg == FALSE) {

	mov	rax, QWORD PTR param$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN16@win64_Save

; 2219 :           if (param->sym.mem_type & MT_FLOAT)

	mov	rax, QWORD PTR param$[rsp]
	mov	eax, DWORD PTR [rax+36]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN18@win64_Save

; 2220 :             AddLineQueueX("movq [%r+%u], %r", T_RSP, 8 + i * 8, T_XMM0 + i);

	mov	eax, DWORD PTR i$[rsp]
	add	eax, 40					; 00000028H
	mov	ecx, DWORD PTR i$[rsp]
	lea	ecx, DWORD PTR [rcx*8+8]
	mov	r9d, eax
	mov	r8d, ecx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12190
	call	AddLineQueueX
	jmp	SHORT $LN19@win64_Save
$LN18@win64_Save:

; 2221 :           else
; 2222 :             AddLineQueueX("mov [%r+%u], %r", T_RSP, 8 + i * 8, ms64_regs[i]);

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	edx, DWORD PTR i$[rsp]
	lea	edx, DWORD PTR [rdx*8+8]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	r8d, edx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12191
	call	AddLineQueueX
$LN19@win64_Save:

; 2223 :           param = param->nextparam;

	mov	rax, QWORD PTR param$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR param$[rsp], rax

; 2224 :         }

	jmp	SHORT $LN17@win64_Save
$LN16@win64_Save:

; 2225 :         else { /* v2.09: else branch added */
; 2226 :           AddLineQueueX("mov [%r+%u], %r", T_RSP, 8 + i * 8, ms64_regs[i]);

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	edx, DWORD PTR i$[rsp]
	lea	edx, DWORD PTR [rdx*8+8]
	mov	r9d, DWORD PTR [rcx+rax*4]
	mov	r8d, edx
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG12192
	call	AddLineQueueX
$LN17@win64_Save:

; 2227 :         }
; 2228 :       }

	jmp	$LN5@win64_Save
$LN6@win64_Save:
$LN9@win64_Save:

; 2229 :     }
; 2230 :     return;
; 2231 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
win64_SaveRegParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
len$ = 64
i$ = 68
info$ = 72
p$ = 80
is_exitm$ = 100
dir$ = 120
flags$ = 128
regs$ = 136
reglst$ = 160
buffer$ = 320
curr$6 = 936
tv81 = 952
tv88 = 956
tv95 = 960
tv164 = 968
__$ArrayPad$ = 976
tokenarray$ = 1008
write_userdef_prologue PROC

; 2089 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 992				; 000003e0H
	mov	rdi, rsp
	mov	ecx, 248				; 000000f8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+1008]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 2090 :     int                 len;
; 2091 :     int                 i;
; 2092 :     struct proc_info    *info;
; 2093 :     char                *p;
; 2094 :     bool                is_exitm;
; 2095 :     struct dsym         *dir;
; 2096 :     //int                 align = CurrWordSize;
; 2097 :     int                 flags = CurrProc->sym.langtype; /* set bits 0-2 */

	mov	rax, QWORD PTR CurrProc
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR flags$[rsp], eax

; 2098 :     uint_16             *regs;
; 2099 :     char                reglst[128];
; 2100 :     char                buffer[MAX_LINE_LEN];
; 2101 : 
; 2102 : #if FASTPASS
; 2103 :     if ( Parse_Pass > PASS_1 && UseSavedState )

	cmp	DWORD PTR Parse_Pass, 0
	jbe	SHORT $LN8@write_user
	movzx	eax, BYTE PTR UseSavedState
	test	eax, eax
	je	SHORT $LN8@write_user

; 2104 :         return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@write_user
$LN8@write_user:

; 2105 : #endif
; 2106 : 
; 2107 :     info = CurrProc->e.procinfo;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR info$[rsp], rax

; 2108 :     /* v2.11: now done in write_prologue() */
; 2109 :     //info->localsize = ROUND_UP( info->localsize, CurrWordSize );
; 2110 : #if AMD64_SUPPORT
; 2111 :     /* to be compatible with ML64, translate FASTCALL to 0 (not 7) */
; 2112 :     if ( CurrProc->sym.langtype == LANG_FASTCALL && ModuleInfo.fctype == FCT_WIN64 )

	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN9@write_user
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN9@write_user

; 2113 :         flags = 0;

	mov	DWORD PTR flags$[rsp], 0
$LN9@write_user:

; 2114 : #endif
; 2115 :     /* set bit 4 if the caller restores (E)SP */
; 2116 :     if ( CurrProc->sym.langtype == LANG_C ||
; 2117 :         CurrProc->sym.langtype == LANG_SYSCALL ||

	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 1
	je	SHORT $LN11@write_user
	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 2
	je	SHORT $LN11@write_user
	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN10@write_user
$LN11@write_user:

; 2118 :         CurrProc->sym.langtype == LANG_FASTCALL )
; 2119 :         flags |= 0x10;

	mov	eax, DWORD PTR flags$[rsp]
	or	eax, 16
	mov	DWORD PTR flags$[rsp], eax
$LN10@write_user:

; 2120 : 
; 2121 :     /* set bit 5 if proc is far */
; 2122 :     /* set bit 6 if proc is private */
; 2123 :     /* v2.11: set bit 7 if proc is export */
; 2124 :     flags |= ( CurrProc->sym.mem_type == MT_FAR ? 0x20 : 0 );

	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+36], 130			; 00000082H
	jne	SHORT $LN19@write_user
	mov	DWORD PTR tv81[rsp], 32			; 00000020H
	jmp	SHORT $LN20@write_user
$LN19@write_user:
	mov	DWORD PTR tv81[rsp], 0
$LN20@write_user:
	mov	eax, DWORD PTR tv81[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rsp], eax

; 2125 :     flags |= ( CurrProc->sym.ispublic ? 0 : 0x40 );

	mov	rax, QWORD PTR CurrProc
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@write_user
	mov	DWORD PTR tv88[rsp], 0
	jmp	SHORT $LN22@write_user
$LN21@write_user:
	mov	DWORD PTR tv88[rsp], 64			; 00000040H
$LN22@write_user:
	mov	eax, DWORD PTR tv88[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rsp], eax

; 2126 :     flags |= ( info->isexport ? 0x80 : 0 );

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 2
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@write_user
	mov	DWORD PTR tv95[rsp], 128		; 00000080H
	jmp	SHORT $LN24@write_user
$LN23@write_user:
	mov	DWORD PTR tv95[rsp], 0
$LN24@write_user:
	mov	eax, DWORD PTR tv95[rsp]
	mov	ecx, DWORD PTR flags$[rsp]
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR flags$[rsp], eax

; 2127 : 
; 2128 :     dir = (struct dsym *)SymSearch( ModuleInfo.proc_prologue );

	mov	rcx, QWORD PTR ModuleInfo+320
	call	SymFind
	mov	QWORD PTR dir$[rsp], rax

; 2129 :     if ( dir == NULL || dir->sym.state != SYM_MACRO || dir->sym.isfunc != TRUE ) {

	cmp	QWORD PTR dir$[rsp], 0
	je	SHORT $LN13@write_user
	mov	rax, QWORD PTR dir$[rsp]
	cmp	DWORD PTR [rax+32], 9
	jne	SHORT $LN13@write_user
	mov	rax, QWORD PTR dir$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	shr	al, 1
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	je	SHORT $LN12@write_user
$LN13@write_user:

; 2130 :         return( EmitError( PROLOGUE_MUST_BE_MACRO_FUNC ) );

	mov	ecx, 156				; 0000009cH
	call	EmitError
	jmp	$LN1@write_user
$LN12@write_user:

; 2131 :     }
; 2132 : 
; 2133 :     /* if -EP is on, emit "prologue: none" */
; 2134 :     if ( Options.preprocessor_stdout )

	movzx	eax, BYTE PTR Options+141
	test	eax, eax
	je	SHORT $LN14@write_user

; 2135 :         printf( "option prologue:none\n" );

	lea	rcx, OFFSET FLAT:$SG12154
	call	printf
$LN14@write_user:

; 2136 : 
; 2137 :     p = reglst;

	lea	rax, QWORD PTR reglst$[rsp]
	mov	QWORD PTR p$[rsp], rax

; 2138 :     if ( info->regslist ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN15@write_user

; 2139 :         regs = info->regslist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regs$[rsp], rax

; 2140 :         for ( len = *regs++; len; len--, regs++ ) {

	mov	rax, QWORD PTR regs$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR len$[rsp], eax
	mov	rax, QWORD PTR regs$[rsp]
	add	rax, 2
	mov	QWORD PTR regs$[rsp], rax
	jmp	SHORT $LN4@write_user
$LN2@write_user:
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
	mov	rax, QWORD PTR regs$[rsp]
	add	rax, 2
	mov	QWORD PTR regs$[rsp], rax
$LN4@write_user:
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN3@write_user

; 2141 :             GetResWName( *regs, p );

	mov	rax, QWORD PTR regs$[rsp]
	movzx	eax, WORD PTR [rax]
	mov	rdx, QWORD PTR p$[rsp]
	mov	ecx, eax
	call	GetResWName

; 2142 :             p += strlen( p );

	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax

; 2143 :             if ( len > 1 )

	cmp	DWORD PTR len$[rsp], 1
	jle	SHORT $LN16@write_user

; 2144 :                 *p++ = ',';

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 44			; 0000002cH
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN16@write_user:

; 2145 :         }

	jmp	SHORT $LN2@write_user
$LN3@write_user:
$LN15@write_user:

; 2146 :     }
; 2147 :     *p = NULLC;

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0

; 2148 : 
; 2149 :     /* v2.07: make this work with radix != 10 */
; 2150 :     /* leave a space at pos 0 of buffer, because the buffer is used for
; 2151 :      * both macro arguments and EXITM return value.
; 2152 :      */
; 2153 :     sprintf( buffer," (%s, 0%XH, 0%XH, 0%XH, <<%s>>, <%s>)",

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+40], 0
	je	SHORT $LN25@write_user
	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+40]
	mov	QWORD PTR tv164[rsp], rax
	jmp	SHORT $LN26@write_user
$LN25@write_user:
	lea	rax, OFFSET FLAT:$SG12157
	mov	QWORD PTR tv164[rsp], rax
$LN26@write_user:
	mov	rax, QWORD PTR tv164[rsp]
	mov	QWORD PTR [rsp+56], rax
	lea	rax, QWORD PTR reglst$[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR flags$[rsp]
	mov	rax, QWORD PTR CurrProc
	mov	r8, QWORD PTR [rax+8]
	lea	rdx, OFFSET FLAT:$SG12158
	lea	rcx, QWORD PTR buffer$[rsp]
	call	sprintf

; 2154 :              CurrProc->sym.name, flags, info->parasize, info->localsize,
; 2155 :             reglst, info->prologuearg ? info->prologuearg : "" );
; 2156 :     i = Token_Count + 1;

	mov	eax, DWORD PTR ModuleInfo+496
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 2157 :     Token_Count = Tokenize( buffer, i, tokenarray, TOK_RESCAN );

	mov	r9d, 1
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	Tokenize
	mov	DWORD PTR ModuleInfo+496, eax

; 2158 : 
; 2159 :     RunMacro( dir, i, tokenarray, buffer, 0, &is_exitm );

	lea	rax, QWORD PTR is_exitm$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	DWORD PTR [rsp+32], 0
	lea	r9, QWORD PTR buffer$[rsp]
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR dir$[rsp]
	call	RunMacro

; 2160 :     Token_Count = i - 1;

	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR ModuleInfo+496, eax

; 2161 :     DebugMsg(("write_userdef_prologue: macro %s returned >%s<\n", ModuleInfo.proc_prologue, buffer ));

	lea	r8, QWORD PTR buffer$[rsp]
	mov	rdx, QWORD PTR ModuleInfo+320
	lea	rcx, OFFSET FLAT:$SG12159
	call	DoDebugMsg

; 2162 : 
; 2163 :     if ( Parse_Pass == PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN17@write_user

; 2164 :         struct dsym *curr;
; 2165 :         len = atoi( buffer ) - info->localsize;

	lea	rcx, QWORD PTR buffer$[rsp]
	call	QWORD PTR __imp_atoi
	mov	rcx, QWORD PTR info$[rsp]
	sub	eax, DWORD PTR [rcx+36]
	mov	DWORD PTR len$[rsp], eax

; 2166 :         for ( curr = info->locallist; curr; curr = curr->nextlocal ) {

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR curr$6[rsp], rax
	jmp	SHORT $LN7@write_user
$LN5@write_user:
	mov	rax, QWORD PTR curr$6[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$6[rsp], rax
$LN7@write_user:
	cmp	QWORD PTR curr$6[rsp], 0
	je	SHORT $LN6@write_user

; 2167 :             curr->sym.offset -= len;

	mov	rax, QWORD PTR curr$6[rsp]
	mov	ecx, DWORD PTR len$[rsp]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR curr$6[rsp]
	mov	DWORD PTR [rcx+16], eax

; 2168 :         }

	jmp	SHORT $LN5@write_user
$LN6@write_user:
$LN17@write_user:

; 2169 :     }
; 2170 : 
; 2171 :     return ( NOT_ERROR );

	xor	eax, eax
$LN1@write_user:

; 2172 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:write_userdef_prologue$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 992				; 000003e0H
	pop	rdi
	ret	0
write_userdef_prologue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
opndx$ = 64
token$ = 180
size$ = 184
oldcodes$ = 188
reg$ = 189
ofs$ = 190
puc$ = 192
tv139 = 200
tv398 = 204
i$ = 224
tokenarray$ = 232
ExcFrameDirective PROC

; 1843 : {

$LN58:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 208				; 000000d0H
	mov	rdi, rsp
	mov	ecx, 52					; 00000034H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+224]

; 1844 :     struct expr opndx;
; 1845 :     int token;
; 1846 :     unsigned int size;
; 1847 :     uint_8 oldcodes = unw_info.CountOfCodes;

	movzx	eax, BYTE PTR unw_info+2
	mov	BYTE PTR oldcodes$[rsp], al

; 1848 :     uint_8 reg;
; 1849 :     uint_8 ofs;
; 1850 :     UNWIND_CODE *puc;
; 1851 : 
; 1852 :     DebugMsg1(("ExcFrameDirective(%s) enter\n", tokenarray[i].string_ptr ));

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	lea	rcx, OFFSET FLAT:$SG12062
	call	DoDebugMsg1

; 1853 :     /* v2.05: accept directives for windows only */
; 1854 :     if ( Options.output_format != OFORMAT_COFF
; 1855 : #if PE_SUPPORT
; 1856 :         && ModuleInfo.sub_format != SFORMAT_PE

	cmp	DWORD PTR Options+160, 2
	je	SHORT $LN6@ExcFrameDi
	cmp	DWORD PTR ModuleInfo+372, 2
	je	SHORT $LN6@ExcFrameDi

; 1857 : #endif
; 1858 :        ) {
; 1859 :         return( EmitErr( NOT_SUPPORTED_WITH_CURR_FORMAT, GetResWName( tokenarray[i].tokval, NULL ) ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	xor	edx, edx
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR [rcx+rax+16]
	call	GetResWName
	mov	rdx, rax
	mov	ecx, 224				; 000000e0H
	call	EmitErr
	jmp	$LN1@ExcFrameDi
$LN6@ExcFrameDi:

; 1860 :     }
; 1861 :     if ( CurrProc == NULL || endprolog_found == TRUE ) {

	cmp	QWORD PTR CurrProc, 0
	je	SHORT $LN8@ExcFrameDi
	movzx	eax, BYTE PTR endprolog_found
	cmp	eax, 1
	jne	SHORT $LN7@ExcFrameDi
$LN8@ExcFrameDi:

; 1862 :         return( EmitError( ENDPROLOG_FOUND_BEFORE_EH_DIRECTIVES ) );

	mov	ecx, 254				; 000000feH
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN7@ExcFrameDi:

; 1863 :     }
; 1864 :     if ( CurrProc->e.procinfo->isframe == FALSE ) {

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN9@ExcFrameDi

; 1865 :         return( EmitError( MISSING_FRAME_IN_PROC ) );

	mov	ecx, 255				; 000000ffH
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN9@ExcFrameDi:

; 1866 :     }
; 1867 : 
; 1868 :     puc = &unw_code[unw_info.CountOfCodes];

	movzx	eax, BYTE PTR unw_info+2
	lea	rcx, OFFSET FLAT:unw_code
	lea	rax, QWORD PTR [rcx+rax*2]
	mov	QWORD PTR puc$[rsp], rax

; 1869 : 
; 1870 :     ofs = GetCurrOffset() - CurrProc->sym.offset;

	call	GetCurrOffset
	mov	rcx, QWORD PTR CurrProc
	sub	eax, DWORD PTR [rcx+16]
	mov	BYTE PTR ofs$[rsp], al

; 1871 :     token = tokenarray[i].tokval;

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	mov	DWORD PTR token$[rsp], eax

; 1872 :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1873 : 
; 1874 :     /* note: since the codes will be written from "right to left",
; 1875 :      * the opcode item has to be written last!
; 1876 :      */
; 1877 : 
; 1878 :     switch ( token ) {

	mov	eax, DWORD PTR token$[rsp]
	mov	DWORD PTR tv139[rsp], eax
	mov	eax, DWORD PTR tv139[rsp]
	sub	eax, 409				; 00000199H
	mov	DWORD PTR tv139[rsp], eax
	cmp	DWORD PTR tv139[rsp], 7
	ja	$LN2@ExcFrameDi
	movsxd	rax, DWORD PTR tv139[rsp]
	lea	rcx, OFFSET FLAT:__ImageBase
	mov	eax, DWORD PTR $LN57@ExcFrameDi[rcx+rax*4]
	add	rax, rcx
	jmp	rax
$LN10@ExcFrameDi:

; 1879 :     case T_DOT_ALLOCSTACK: /* syntax: .ALLOCSTACK size */
; 1880 :         if ( ERROR == EvalOperand( &i, tokenarray, Token_Count, &opndx, 0 ) )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN11@ExcFrameDi

; 1881 :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@ExcFrameDi
$LN11@ExcFrameDi:

; 1882 :         if ( opndx.kind == EXPR_ADDR && opndx.sym->state == SYM_UNDEFINED ) /* v2.11: allow forward references */

	cmp	DWORD PTR opndx$[rsp+60], 1
	jne	SHORT $LN12@ExcFrameDi
	mov	rax, QWORD PTR opndx$[rsp+80]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN12@ExcFrameDi

; 1883 :              ;

	jmp	SHORT $LN13@ExcFrameDi
$LN12@ExcFrameDi:

; 1884 :         else if ( opndx.kind != EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	je	SHORT $LN14@ExcFrameDi

; 1885 :             return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN14@ExcFrameDi:
$LN13@ExcFrameDi:

; 1886 :         }
; 1887 :         /* v2.11: check added */
; 1888 :         if ( opndx.hvalue ) {

	cmp	DWORD PTR opndx$[rsp+4], 0
	je	SHORT $LN15@ExcFrameDi

; 1889 :             return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	$LN1@ExcFrameDi
$LN15@ExcFrameDi:

; 1890 :         }
; 1891 :         if ( opndx.uvalue == 0 ) {

	cmp	DWORD PTR opndx$[rsp], 0
	jne	SHORT $LN16@ExcFrameDi

; 1892 :             return( EmitError( NONZERO_VALUE_EXPECTED ) );

	mov	ecx, 257				; 00000101H
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN16@ExcFrameDi:

; 1893 :         }
; 1894 :         if ( opndx.value & 7 ) {

	mov	eax, DWORD PTR opndx$[rsp]
	and	eax, 7
	test	eax, eax
	je	SHORT $LN17@ExcFrameDi

; 1895 :             return( EmitError( BAD_ALIGNMENT_FOR_OFFSET_IN_UNWIND_CODE ) );

	mov	ecx, 256				; 00000100H
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN17@ExcFrameDi:

; 1896 :         }
; 1897 :         //opndx.value -= 8; /* v2.11: subtract 8 only for UWOP_ALLOC_SMALL! */
; 1898 :         if ( opndx.uvalue > 16*8 ) {

	cmp	DWORD PTR opndx$[rsp], 128		; 00000080H
	jbe	$LN18@ExcFrameDi

; 1899 :             if ( opndx.uvalue >= 65536*8 ) {

	cmp	DWORD PTR opndx$[rsp], 524288		; 00080000H
	jb	$LN20@ExcFrameDi

; 1900 :                 /* allocation size 512k - 4G-8 */
; 1901 :                 /* v2.11: value is stored UNSCALED in 2 WORDs! */
; 1902 :                 puc->FrameOffset = ( opndx.uvalue >> 16 );

	mov	eax, DWORD PTR opndx$[rsp]
	shr	eax, 16
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 1903 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 1904 :                 puc->FrameOffset = opndx.uvalue & 0xFFFF;

	mov	eax, DWORD PTR opndx$[rsp]
	and	eax, 65535				; 0000ffffH
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 1905 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 1906 :                 unw_info.CountOfCodes += 2;

	movzx	eax, BYTE PTR unw_info+2
	add	eax, 2
	mov	BYTE PTR unw_info+2, al

; 1907 :                 puc->OpInfo = 1;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 15
	or	al, 16
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1908 :                 DebugMsg1(("ExcFrameDirective: UWOP_ALLOC_LARGE, operation info 1, size=%Xh\n", opndx.value ));

	mov	edx, DWORD PTR opndx$[rsp]
	lea	rcx, OFFSET FLAT:$SG12079
	call	DoDebugMsg1

; 1909 :             } else {

	jmp	SHORT $LN21@ExcFrameDi
$LN20@ExcFrameDi:

; 1910 :                 /* allocation size 128+8 - 512k-8 */
; 1911 :                 puc->FrameOffset = ( opndx.uvalue >> 3 );

	mov	eax, DWORD PTR opndx$[rsp]
	shr	eax, 3
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 1912 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 1913 :                 unw_info.CountOfCodes++;

	movzx	eax, BYTE PTR unw_info+2
	inc	al
	mov	BYTE PTR unw_info+2, al

; 1914 :                 puc->OpInfo = 0;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 15
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1915 :                 DebugMsg1(("ExcFrameDirective: UWOP_ALLOC_LARGE, operation info 0, size=%Xh\n", opndx.value ));

	mov	edx, DWORD PTR opndx$[rsp]
	lea	rcx, OFFSET FLAT:$SG12080
	call	DoDebugMsg1
$LN21@ExcFrameDi:

; 1916 :             }
; 1917 :             puc->UnwindOp = UWOP_ALLOC_LARGE;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 1
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1918 :         } else {

	jmp	SHORT $LN19@ExcFrameDi
$LN18@ExcFrameDi:

; 1919 :             /* allocation size 8-128 bytes */
; 1920 :             puc->UnwindOp = UWOP_ALLOC_SMALL;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 2
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1921 :             /* v2.11: subtract 8 only for UWOP_ALLOC_SMALL! */
; 1922 :             //puc->OpInfo = ( opndx.value >> 3 );
; 1923 :             puc->OpInfo = ( (opndx.uvalue - 8 ) >> 3 );

	mov	eax, DWORD PTR opndx$[rsp]
	sub	eax, 8
	shr	eax, 3
	and	al, 15
	shl	al, 4
	mov	rcx, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1924 :             DebugMsg1(("ExcFrameDirective: UWOP_ALLOC_SMALL, size=%Xh\n", opndx.value ));

	mov	edx, DWORD PTR opndx$[rsp]
	lea	rcx, OFFSET FLAT:$SG12081
	call	DoDebugMsg1
$LN19@ExcFrameDi:

; 1925 :         }
; 1926 :         puc->CodeOffset = ofs;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR ofs$[rsp]
	mov	BYTE PTR [rax], cl

; 1927 :         unw_info.CountOfCodes++;

	movzx	eax, BYTE PTR unw_info+2
	inc	al
	mov	BYTE PTR unw_info+2, al

; 1928 :         break;

	jmp	$LN2@ExcFrameDi
$LN22@ExcFrameDi:

; 1929 :     case T_DOT_ENDPROLOG: /* syntax: .ENDPROLOG */
; 1930 :         opndx.value = GetCurrOffset() - CurrProc->sym.offset;

	call	GetCurrOffset
	mov	rcx, QWORD PTR CurrProc
	sub	eax, DWORD PTR [rcx+16]
	mov	DWORD PTR opndx$[rsp], eax

; 1931 :         if ( opndx.uvalue > 255 ) {

	cmp	DWORD PTR opndx$[rsp], 255		; 000000ffH
	jbe	SHORT $LN23@ExcFrameDi

; 1932 :             return( EmitError( SIZE_OF_PROLOG_TOO_BIG ) );

	mov	ecx, 258				; 00000102H
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN23@ExcFrameDi:

; 1933 :         }
; 1934 :         unw_info.SizeOfProlog = (uint_8)opndx.uvalue;

	movzx	eax, BYTE PTR opndx$[rsp]
	mov	BYTE PTR unw_info+1, al

; 1935 :         endprolog_found = TRUE;

	mov	BYTE PTR endprolog_found, 1

; 1936 :         break;

	jmp	$LN2@ExcFrameDi
$LN24@ExcFrameDi:

; 1937 :     case T_DOT_PUSHFRAME: /* syntax: .PUSHFRAME [code] */
; 1938 :         puc->CodeOffset = ofs;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR ofs$[rsp]
	mov	BYTE PTR [rax], cl

; 1939 :         puc->UnwindOp = UWOP_PUSH_MACHFRAME;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 10
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1940 :         puc->OpInfo = 0;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 15
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1941 :         if ( tokenarray[i].token == T_ID && (_stricmp( tokenarray[i].string_ptr, "CODE") == 0 ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	SHORT $LN25@ExcFrameDi
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG12086
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN25@ExcFrameDi

; 1942 :             puc->OpInfo = 1;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 15
	or	al, 16
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1943 :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN25@ExcFrameDi:

; 1944 :         }
; 1945 :         unw_info.CountOfCodes++;

	movzx	eax, BYTE PTR unw_info+2
	inc	al
	mov	BYTE PTR unw_info+2, al

; 1946 :         break;

	jmp	$LN2@ExcFrameDi
$LN26@ExcFrameDi:

; 1947 :     case T_DOT_PUSHREG: /* syntax: .PUSHREG r64 */
; 1948 :         if ( tokenarray[i].token != T_REG || !( GetValueSp( tokenarray[i].tokval ) & OP_R64 ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 2
	jne	SHORT $LN28@ExcFrameDi
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN27@ExcFrameDi
$LN28@ExcFrameDi:

; 1949 :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ExcFrameDi
$LN27@ExcFrameDi:

; 1950 :         }
; 1951 :         puc->CodeOffset = ofs;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR ofs$[rsp]
	mov	BYTE PTR [rax], cl

; 1952 :         puc->UnwindOp = UWOP_PUSH_NONVOL;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1953 :         puc->OpInfo = GetRegNo( tokenarray[i].tokval );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	and	al, 15
	shl	al, 4
	mov	rcx, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 1954 :         unw_info.CountOfCodes++;

	movzx	eax, BYTE PTR unw_info+2
	inc	al
	mov	BYTE PTR unw_info+2, al

; 1955 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1956 :         break;

	jmp	$LN2@ExcFrameDi
$LN29@ExcFrameDi:

; 1957 :     case T_DOT_SAVEREG:    /* syntax: .SAVEREG r64, offset       */
; 1958 :     case T_DOT_SAVEXMM128: /* syntax: .SAVEXMM128 xmmreg, offset */
; 1959 :     case T_DOT_SAVEYMM256: /* syntax: .SAVEYMM256 ymmreg, offset */
; 1960 : #if EVEXSUPP
; 1961 :     case T_DOT_SAVEZMM512: /* syntax: .SAVEXMM512 zmmreg, offset */
; 1962 : #endif
; 1963 :     case T_DOT_SETFRAME:   /* syntax: .SETFRAME r64, offset      */
; 1964 :         if ( tokenarray[i].token != T_REG ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 2
	je	SHORT $LN30@ExcFrameDi

; 1965 :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ExcFrameDi
$LN30@ExcFrameDi:

; 1966 :         }
; 1967 :         if ( token == T_DOT_SAVEXMM128 ) {

	cmp	DWORD PTR token$[rsp], 414		; 0000019eH
	jne	SHORT $LN31@ExcFrameDi

; 1968 :             if ( !( GetValueSp( tokenarray[i].tokval ) & OP_XMM ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN33@ExcFrameDi

; 1969 :                 return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ExcFrameDi
$LN33@ExcFrameDi:

; 1970 :             }
; 1971 :         } 

	jmp	$LN32@ExcFrameDi
$LN31@ExcFrameDi:

; 1972 :         else if (token == T_DOT_SAVEYMM256) {

	cmp	DWORD PTR token$[rsp], 415		; 0000019fH
	jne	SHORT $LN34@ExcFrameDi

; 1973 :           if (!(GetValueSp(tokenarray[i].tokval) & OP_YMM)) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	jne	SHORT $LN36@ExcFrameDi

; 1974 :             return(EmitErr(SYNTAX_ERROR_EX, tokenarray[i].string_ptr));

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ExcFrameDi
$LN36@ExcFrameDi:

; 1975 :           }
; 1976 :         }

	jmp	SHORT $LN35@ExcFrameDi
$LN34@ExcFrameDi:

; 1977 : #if EVEXSUPP
; 1978 :         else if (token == T_DOT_SAVEZMM512) {
; 1979 :           if (!(GetValueSp(tokenarray[i].tokval) & OP_ZMM)) {
; 1980 :             return(EmitErr(SYNTAX_ERROR_EX, tokenarray[i].string_ptr));
; 1981 :           }
; 1982 :         }
; 1983 : #endif
; 1984 :         else {
; 1985 :             if ( !( GetValueSp( tokenarray[i].tokval ) & OP_R64 ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 8
	test	eax, eax
	jne	SHORT $LN37@ExcFrameDi

; 1986 :                 return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ExcFrameDi
$LN37@ExcFrameDi:
$LN35@ExcFrameDi:
$LN32@ExcFrameDi:

; 1987 :             }
; 1988 :         }
; 1989 :         reg = GetRegNo( tokenarray[i].tokval );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	BYTE PTR reg$[rsp], al

; 1990 : 
; 1991 :         if ( token == T_DOT_SAVEREG )

	cmp	DWORD PTR token$[rsp], 413		; 0000019dH
	jne	SHORT $LN38@ExcFrameDi

; 1992 :             size = 8;

	mov	DWORD PTR size$[rsp], 8
	jmp	SHORT $LN39@ExcFrameDi
$LN38@ExcFrameDi:

; 1993 :         else
; 1994 :             size = 16;

	mov	DWORD PTR size$[rsp], 16
$LN39@ExcFrameDi:

; 1995 : 
; 1996 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1997 :         if ( tokenarray[i].token != T_COMMA ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN40@ExcFrameDi

; 1998 :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ExcFrameDi
$LN40@ExcFrameDi:

; 1999 :         }
; 2000 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 2001 :         if ( ERROR == EvalOperand( &i, tokenarray, Token_Count, &opndx, 0 ) )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN41@ExcFrameDi

; 2002 :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@ExcFrameDi
$LN41@ExcFrameDi:

; 2003 :         if ( opndx.kind == EXPR_ADDR && opndx.sym->state == SYM_UNDEFINED ) /* v2.11: allow forward references */

	cmp	DWORD PTR opndx$[rsp+60], 1
	jne	SHORT $LN42@ExcFrameDi
	mov	rax, QWORD PTR opndx$[rsp+80]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN42@ExcFrameDi

; 2004 :              ;

	jmp	SHORT $LN43@ExcFrameDi
$LN42@ExcFrameDi:

; 2005 :         else if ( opndx.kind != EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	je	SHORT $LN44@ExcFrameDi

; 2006 :             return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN44@ExcFrameDi:
$LN43@ExcFrameDi:

; 2007 :         }
; 2008 :         if ( opndx.value & (size - 1) ) {

	mov	eax, DWORD PTR size$[rsp]
	dec	eax
	mov	ecx, DWORD PTR opndx$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN45@ExcFrameDi

; 2009 :             return( EmitError( BAD_ALIGNMENT_FOR_OFFSET_IN_UNWIND_CODE ) );

	mov	ecx, 256				; 00000100H
	call	EmitError
	jmp	$LN1@ExcFrameDi
$LN45@ExcFrameDi:

; 2010 :         }
; 2011 :         switch ( token ) {

	mov	eax, DWORD PTR token$[rsp]
	mov	DWORD PTR tv398[rsp], eax
	cmp	DWORD PTR tv398[rsp], 413		; 0000019dH
	je	SHORT $LN46@ExcFrameDi
	cmp	DWORD PTR tv398[rsp], 414		; 0000019eH
	je	$LN49@ExcFrameDi
	cmp	DWORD PTR tv398[rsp], 416		; 000001a0H
	je	$LN52@ExcFrameDi
	jmp	$LN4@ExcFrameDi
$LN46@ExcFrameDi:

; 2012 :         case T_DOT_SAVEREG:
; 2013 :             puc->OpInfo = reg;

	movzx	eax, BYTE PTR reg$[rsp]
	and	al, 15
	shl	al, 4
	mov	rcx, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2014 :             if ( opndx.value > 65536 * size ) {

	imul	eax, DWORD PTR size$[rsp], 65536	; 00010000H
	cmp	DWORD PTR opndx$[rsp], eax
	jbe	SHORT $LN47@ExcFrameDi

; 2015 :                 puc->FrameOffset = ( opndx.value >> 19 );

	mov	eax, DWORD PTR opndx$[rsp]
	sar	eax, 19
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 2016 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 2017 :                 puc->FrameOffset = ( opndx.value >> 3 );

	mov	eax, DWORD PTR opndx$[rsp]
	sar	eax, 3
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 2018 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 2019 :                 puc->UnwindOp = UWOP_SAVE_NONVOL_FAR;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 5
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2020 :                 unw_info.CountOfCodes += 3;

	movzx	eax, BYTE PTR unw_info+2
	add	eax, 3
	mov	BYTE PTR unw_info+2, al

; 2021 :             } else {

	jmp	SHORT $LN48@ExcFrameDi
$LN47@ExcFrameDi:

; 2022 :                 puc->FrameOffset = ( opndx.value >> 3 );

	mov	eax, DWORD PTR opndx$[rsp]
	sar	eax, 3
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 2023 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 2024 :                 puc->UnwindOp = UWOP_SAVE_NONVOL;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 4
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2025 :                 unw_info.CountOfCodes += 2;

	movzx	eax, BYTE PTR unw_info+2
	add	eax, 2
	mov	BYTE PTR unw_info+2, al
$LN48@ExcFrameDi:

; 2026 :             }
; 2027 :             puc->CodeOffset = ofs;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR ofs$[rsp]
	mov	BYTE PTR [rax], cl

; 2028 :             puc->OpInfo = reg;

	movzx	eax, BYTE PTR reg$[rsp]
	and	al, 15
	shl	al, 4
	mov	rcx, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2029 :             break;

	jmp	$LN4@ExcFrameDi
$LN49@ExcFrameDi:

; 2030 :         case T_DOT_SAVEXMM128:
; 2031 :             if ( opndx.value > 65536 * size ) {

	imul	eax, DWORD PTR size$[rsp], 65536	; 00010000H
	cmp	DWORD PTR opndx$[rsp], eax
	jbe	SHORT $LN50@ExcFrameDi

; 2032 :                 puc->FrameOffset = ( opndx.value >> 20 );

	mov	eax, DWORD PTR opndx$[rsp]
	sar	eax, 20
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 2033 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 2034 :                 puc->FrameOffset = ( opndx.value >> 4 );

	mov	eax, DWORD PTR opndx$[rsp]
	sar	eax, 4
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 2035 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 2036 :                 puc->UnwindOp = UWOP_SAVE_XMM128_FAR;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 9
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2037 :                 unw_info.CountOfCodes += 3;

	movzx	eax, BYTE PTR unw_info+2
	add	eax, 3
	mov	BYTE PTR unw_info+2, al

; 2038 :             } else {

	jmp	SHORT $LN51@ExcFrameDi
$LN50@ExcFrameDi:

; 2039 :                 puc->FrameOffset = ( opndx.value >> 4 );

	mov	eax, DWORD PTR opndx$[rsp]
	sar	eax, 4
	mov	rcx, QWORD PTR puc$[rsp]
	mov	WORD PTR [rcx], ax

; 2040 :                 puc++;

	mov	rax, QWORD PTR puc$[rsp]
	add	rax, 2
	mov	QWORD PTR puc$[rsp], rax

; 2041 :                 puc->UnwindOp = UWOP_SAVE_XMM128;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 8
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2042 :                 unw_info.CountOfCodes += 2;

	movzx	eax, BYTE PTR unw_info+2
	add	eax, 2
	mov	BYTE PTR unw_info+2, al
$LN51@ExcFrameDi:

; 2043 :             }
; 2044 :             puc->CodeOffset = ofs;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR ofs$[rsp]
	mov	BYTE PTR [rax], cl

; 2045 :             puc->OpInfo = reg;

	movzx	eax, BYTE PTR reg$[rsp]
	and	al, 15
	shl	al, 4
	mov	rcx, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2046 :             break;

	jmp	$LN4@ExcFrameDi
$LN52@ExcFrameDi:

; 2047 :         case T_DOT_SETFRAME:
; 2048 :             if ( opndx.uvalue > 240 ) {

	cmp	DWORD PTR opndx$[rsp], 240		; 000000f0H
	jbe	SHORT $LN53@ExcFrameDi

; 2049 :                 return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	$LN1@ExcFrameDi
$LN53@ExcFrameDi:

; 2050 :             }
; 2051 :             unw_info.FrameRegister = reg;

	movzx	eax, BYTE PTR reg$[rsp]
	and	al, 15
	movzx	ecx, BYTE PTR unw_info+3
	and	cl, 240					; 000000f0H
	or	cl, al
	movzx	eax, cl
	mov	BYTE PTR unw_info+3, al

; 2052 :             unw_info.FrameOffset = ( opndx.uvalue >> 4 );

	mov	eax, DWORD PTR opndx$[rsp]
	shr	eax, 4
	and	al, 15
	shl	al, 4
	movzx	ecx, BYTE PTR unw_info+3
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	BYTE PTR unw_info+3, al

; 2053 :             puc->CodeOffset = ofs;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR ofs$[rsp]
	mov	BYTE PTR [rax], cl

; 2054 :             puc->UnwindOp = UWOP_SET_FPREG;

	mov	rax, QWORD PTR puc$[rsp]
	movzx	eax, BYTE PTR [rax+1]
	and	al, 240					; 000000f0H
	or	al, 3
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2055 :             //puc->OpInfo = ( opndx.uvalue >> 4 );
; 2056 :             puc->OpInfo = reg;

	movzx	eax, BYTE PTR reg$[rsp]
	and	al, 15
	shl	al, 4
	mov	rcx, QWORD PTR puc$[rsp]
	movzx	ecx, BYTE PTR [rcx+1]
	and	cl, 15
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR puc$[rsp]
	mov	BYTE PTR [rcx+1], al

; 2057 :             unw_info.CountOfCodes++;

	movzx	eax, BYTE PTR unw_info+2
	inc	al
	mov	BYTE PTR unw_info+2, al
$LN4@ExcFrameDi:
$LN2@ExcFrameDi:

; 2058 :             break;
; 2059 :         }
; 2060 :         break;
; 2061 :     }
; 2062 :     if ( tokenarray[i].token != T_FINAL ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN54@ExcFrameDi

; 2063 :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@ExcFrameDi
$LN54@ExcFrameDi:

; 2064 :     }
; 2065 :     /* v2.11: check if the table of codes has been exceeded */
; 2066 :     if ( oldcodes > unw_info.CountOfCodes ) {

	movzx	eax, BYTE PTR oldcodes$[rsp]
	movzx	ecx, BYTE PTR unw_info+2
	cmp	eax, ecx
	jle	SHORT $LN55@ExcFrameDi

; 2067 :         return( EmitErr( TOO_MANY_UNWIND_CODES_IN_FRAME_PROC ) );

	mov	ecx, 210				; 000000d2H
	call	EmitErr
	jmp	SHORT $LN1@ExcFrameDi
$LN55@ExcFrameDi:

; 2068 :     }
; 2069 :     DebugMsg1(("ExcFrameDirective() exit, ok\n" ));

	lea	rcx, OFFSET FLAT:$SG12117
	call	DoDebugMsg1

; 2070 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@ExcFrameDi:

; 2071 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:ExcFrameDirective$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 208				; 000000d0H
	pop	rdi
	ret	0
	npad	1
$LN57@ExcFrameDi:
	DD	$LN10@ExcFrameDi
	DD	$LN22@ExcFrameDi
	DD	$LN24@ExcFrameDi
	DD	$LN26@ExcFrameDi
	DD	$LN29@ExcFrameDi
	DD	$LN29@ExcFrameDi
	DD	$LN29@ExcFrameDi
	DD	$LN29@ExcFrameDi
ExcFrameDirective ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
tv66 = 32
i$ = 64
tokenarray$ = 72
EndpDir	PROC

; 1814 : {

$LN9:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+64]

; 1815 :     DebugMsg1(("EndpDir(%s) enter, curr ofs=% " I32_SPEC "X, CurrProc=%s\n", tokenarray[0].string_ptr, GetCurrOffset(), CurrProc ? CurrProc->sym.name : "NULL" ));

	cmp	QWORD PTR CurrProc, 0
	je	SHORT $LN7@EndpDir
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv66[rsp], rax
	jmp	SHORT $LN8@EndpDir
$LN7@EndpDir:
	lea	rax, OFFSET FLAT:$SG12036
	mov	QWORD PTR tv66[rsp], rax
$LN8@EndpDir:
	call	GetCurrOffset
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 0
	mov	r9, QWORD PTR tv66[rsp]
	mov	r8d, eax
	mov	rax, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rax+rcx+8]
	lea	rcx, OFFSET FLAT:$SG12037
	call	DoDebugMsg1

; 1816 :     if( i != 1 || tokenarray[2].token != T_FINAL ) {

	cmp	DWORD PTR i$[rsp], 1
	jne	SHORT $LN3@EndpDir
	mov	eax, 32					; 00000020H
	imul	rax, rax, 2
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN2@EndpDir
$LN3@EndpDir:

; 1817 :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@EndpDir
$LN2@EndpDir:

; 1818 :     }
; 1819 :     /* v2.10: "+ 1" added to CurrProc->sym.name_size */
; 1820 :     if( CurrProc &&

	cmp	QWORD PTR CurrProc, 0
	je	SHORT $LN4@EndpDir
	mov	rax, QWORD PTR CurrProc
	movzx	eax, BYTE PTR [rax+72]
	inc	eax
	cdqe
	mov	ecx, 32					; 00000020H
	imul	rcx, rcx, 0
	mov	r8, rax
	mov	rax, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rax+rcx+8]
	mov	rax, QWORD PTR CurrProc
	mov	rcx, QWORD PTR [rax+8]
	call	QWORD PTR SymCmpFunc
	test	eax, eax
	jne	SHORT $LN4@EndpDir

; 1821 :        ( SymCmpFunc(CurrProc->sym.name, tokenarray[0].string_ptr, CurrProc->sym.name_size + 1 ) == 0 ) ) {
; 1822 :         ProcFini( CurrProc );

	mov	rcx, QWORD PTR CurrProc
	call	ProcFini

; 1823 :     } else {

	jmp	SHORT $LN5@EndpDir
$LN4@EndpDir:

; 1824 :         return( EmitErr( UNMATCHED_BLOCK_NESTING, tokenarray[0].string_ptr ) );

	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 142				; 0000008eH
	call	EmitErr
	jmp	SHORT $LN1@EndpDir
$LN5@EndpDir:

; 1825 :     }
; 1826 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@EndpDir:

; 1827 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
EndpDir	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
curr$ = 48
tv73 = 56
proc$ = 80
ProcFini PROC

; 1738 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1739 :     struct dsym *curr;
; 1740 :     /* v2.06: emit an error if current segment isn't equal to
; 1741 :      * the one of the matching PROC directive. Close the proc anyway!
; 1742 :      */
; 1743 :     if ( proc->sym.segment == &CurrSeg->sym ) {

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR proc$[rsp]
	cmp	QWORD PTR [rcx+24], rax
	jne	SHORT $LN14@ProcFini

; 1744 :         proc->sym.total_size = GetCurrOffset() - proc->sym.offset;

	call	GetCurrOffset
	mov	rcx, QWORD PTR proc$[rsp]
	sub	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	DWORD PTR [rcx+56], eax

; 1745 :     } else {

	jmp	$LN15@ProcFini
$LN14@ProcFini:

; 1746 :         DebugMsg1(("ProcFini(%s): unmatched block nesting error, proc->seg=%s, CurrSeg=%s\n",

	cmp	QWORD PTR ModuleInfo+432, 0
	je	SHORT $LN27@ProcFini
	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN28@ProcFini
$LN27@ProcFini:
	lea	rax, OFFSET FLAT:$SG12015
	mov	QWORD PTR tv73[rsp], rax
$LN28@ProcFini:
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	r9, QWORD PTR tv73[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12016
	call	DoDebugMsg1

; 1747 :                    proc->sym.name, proc->sym.segment->name, CurrSeg ? CurrSeg->sym.name : "NULL" ));
; 1748 :         EmitErr( UNMATCHED_BLOCK_NESTING, proc->sym.name );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 142				; 0000008eH
	call	EmitErr

; 1749 :         proc->sym.total_size = CurrProc->sym.segment->offset - proc->sym.offset;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+24]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	eax, DWORD PTR [rax+16]
	sub	eax, ecx
	mov	rcx, QWORD PTR proc$[rsp]
	mov	DWORD PTR [rcx+56], eax
$LN15@ProcFini:

; 1750 :     }
; 1751 : 
; 1752 :     /* v2.03: for W3+, check for unused params and locals */
; 1753 :     if ( Options.warning_level > 2 && Parse_Pass == PASS_1 ) {

	movzx	eax, BYTE PTR Options+13
	cmp	eax, 2
	jle	$LN16@ProcFini
	cmp	DWORD PTR Parse_Pass, 0
	jne	$LN16@ProcFini

; 1754 :         for ( curr = proc->e.procinfo->paralist; curr; curr = curr->nextparam ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN4@ProcFini
$LN2@ProcFini:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN4@ProcFini:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN3@ProcFini

; 1755 :             if ( curr->sym.used == FALSE )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN17@ProcFini

; 1756 :                 EmitWarn( 3, PROCEDURE_ARGUMENT_OR_LOCAL_NOT_REFERENCED, curr->sym.name );

	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	edx, 265				; 00000109H
	mov	ecx, 3
	call	EmitWarn
$LN17@ProcFini:

; 1757 :         }

	jmp	SHORT $LN2@ProcFini
$LN3@ProcFini:

; 1758 :         for ( curr = proc->e.procinfo->locallist; curr; curr = curr->nextlocal ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN7@ProcFini
$LN5@ProcFini:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN7@ProcFini:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN6@ProcFini

; 1759 :             if ( curr->sym.used == FALSE )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN18@ProcFini

; 1760 :                 EmitWarn( 3, PROCEDURE_ARGUMENT_OR_LOCAL_NOT_REFERENCED, curr->sym.name );

	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	edx, 265				; 00000109H
	mov	ecx, 3
	call	EmitWarn
$LN18@ProcFini:

; 1761 :         }

	jmp	SHORT $LN5@ProcFini
$LN6@ProcFini:
$LN16@ProcFini:

; 1762 :     }
; 1763 : #if AMD64_SUPPORT
; 1764 :     /* save stack space reserved for INVOKE if OPTION WIN64:2 is set */
; 1765 :     if ( Parse_Pass == PASS_1 &&
; 1766 :         ModuleInfo.fctype == FCT_WIN64 &&

	cmp	DWORD PTR Parse_Pass, 0
	jne	$LN19@ProcFini
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	$LN19@ProcFini
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	$LN19@ProcFini

; 1767 :         ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) ) {
; 1768 :         proc->e.procinfo->ReservedStack = sym_ReservedStack->value;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR sym_ReservedStack
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rax+56], ecx

; 1769 :         DebugMsg1(("ProcFini(%s): localsize=%u ReservedStack=%u\n", proc->sym.name, proc->e.procinfo->localsize, proc->e.procinfo->ReservedStack ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	r9d, DWORD PTR [rax+56]
	mov	r8d, DWORD PTR [rcx+36]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12021
	call	DoDebugMsg1

; 1770 : #if STACKBASESUPP
; 1771 :         if ( proc->e.procinfo->fpo ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	$LN20@ProcFini

; 1772 :             for ( curr = proc->e.procinfo->locallist; curr; curr = curr->nextlocal ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN10@ProcFini
$LN8@ProcFini:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN10@ProcFini:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN9@ProcFini

; 1773 :                 DebugMsg1(("ProcFini(%s): FPO, offset for %s %8d -> %8d\n", proc->sym.name, curr->sym.name, curr->sym.offset, curr->sym.offset + proc->e.procinfo->ReservedStack ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	add	ecx, DWORD PTR [rax+56]
	mov	eax, ecx
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR curr$[rsp]
	mov	r9d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12023
	call	DoDebugMsg1

; 1774 :                 curr->sym.offset += proc->e.procinfo->ReservedStack;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	add	ecx, DWORD PTR [rax+56]
	mov	eax, ecx
	mov	rcx, QWORD PTR curr$[rsp]
	mov	DWORD PTR [rcx+16], eax

; 1775 :             }

	jmp	SHORT $LN8@ProcFini
$LN9@ProcFini:

; 1776 :             for ( curr = proc->e.procinfo->paralist; curr; curr = curr->nextparam ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN13@ProcFini
$LN11@ProcFini:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN13@ProcFini:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN12@ProcFini

; 1777 :                 DebugMsg1(("ProcFini(%s): FPO, offset for %s %8d -> %8d\n", proc->sym.name, curr->sym.name, curr->sym.offset, curr->sym.offset + proc->e.procinfo->ReservedStack ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	add	ecx, DWORD PTR [rax+56]
	mov	eax, ecx
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR curr$[rsp]
	mov	r9d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12024
	call	DoDebugMsg1

; 1778 :                 curr->sym.offset += proc->e.procinfo->ReservedStack;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	add	ecx, DWORD PTR [rax+56]
	mov	eax, ecx
	mov	rcx, QWORD PTR curr$[rsp]
	mov	DWORD PTR [rcx+16], eax

; 1779 :             }

	jmp	SHORT $LN11@ProcFini
$LN12@ProcFini:
$LN20@ProcFini:
$LN19@ProcFini:

; 1780 :         }
; 1781 : #endif
; 1782 :     }
; 1783 : 
; 1784 :     /* create the .pdata and .xdata stuff */
; 1785 :     if ( proc->e.procinfo->isframe ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN21@ProcFini

; 1786 : #if FASTPASS
; 1787 :         LstSetPosition(); /* needed if generated code is done BEFORE the line is listed */

	call	LstSetPosition

; 1788 : #endif
; 1789 :         WriteSEHData( proc );

	mov	rcx, QWORD PTR proc$[rsp]
	call	WriteSEHData
$LN21@ProcFini:

; 1790 :     }
; 1791 : #endif
; 1792 :     if ( ModuleInfo.list )

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 11
	and	eax, 1
	test	eax, eax
	je	SHORT $LN22@ProcFini

; 1793 :         LstWrite( LSTTYPE_LABEL, 0, NULL );

	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 7
	call	LstWrite
$LN22@ProcFini:

; 1794 : 
; 1795 :     /* create the list of locals */
; 1796 :     if ( Parse_Pass == PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN23@ProcFini

; 1797 :         /* in case the procedure is empty, init addresses of local variables ( for proper listing ) */
; 1798 :         if( ProcStatus & PRST_PROLOGUE_NOT_DONE )

	mov	eax, DWORD PTR ProcStatus
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN24@ProcFini

; 1799 :             SetLocalOffsets( CurrProc->e.procinfo );

	mov	rax, QWORD PTR CurrProc
	mov	rcx, QWORD PTR [rax+96]
	call	SetLocalOffsets
$LN24@ProcFini:

; 1800 :         SymGetLocal( (struct asym *)CurrProc );

	mov	rcx, QWORD PTR CurrProc
	call	SymGetLocal
$LN23@ProcFini:

; 1801 :     }
; 1802 : 
; 1803 :     CurrProc = pop_proc();

	call	pop_proc
	mov	QWORD PTR CurrProc, rax

; 1804 :     if ( CurrProc )

	cmp	QWORD PTR CurrProc, 0
	je	SHORT $LN25@ProcFini

; 1805 :         SymSetLocal( (struct asym *)CurrProc );  /* restore local symbol table */

	mov	rcx, QWORD PTR CurrProc
	call	SymSetLocal
$LN25@ProcFini:

; 1806 : 
; 1807 :     ProcStatus = 0; /* in case there was an empty PROC/ENDP pair */

	mov	DWORD PTR ProcStatus, 0

; 1808 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
ProcFini ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
curr$ = 64
cntxmm$ = 72
cntstd$ = 76
start$ = 80
rspalign$ = 84
align$ = 88
cnt$2 = 92
regs$3 = 96
itemsize$4 = 104
n$5 = 108
localadj$6 = 112
paramadj$7 = 116
$T8 = 120
tv194 = 124
info$ = 144
SetLocalOffsets PROC

; 2630 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	rdi, rsp
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 2631 :     struct dsym *curr;
; 2632 : #if AMD64_SUPPORT || STACKBASESUPP
; 2633 :     int         cntxmm = 0;

	mov	DWORD PTR cntxmm$[rsp], 0

; 2634 :     int         cntstd = 0;

	mov	DWORD PTR cntstd$[rsp], 0

; 2635 :     int         start = 0;

	mov	DWORD PTR start$[rsp], 0

; 2636 : #endif
; 2637 : #if AMD64_SUPPORT
; 2638 :     int         rspalign = FALSE;

	mov	DWORD PTR rspalign$[rsp], 0

; 2639 : #endif
; 2640 :     int         align = CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR align$[rsp], eax

; 2641 : 
; 2642 : #if AMD64_SUPPORT
; 2643 :     if ( info->isframe || ( ModuleInfo.fctype == FCT_WIN64 && ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) ) ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN15@SetLocalOf
	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN14@SetLocalOf
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN14@SetLocalOf
$LN15@SetLocalOf:

; 2644 :         rspalign = TRUE;

	mov	DWORD PTR rspalign$[rsp], 1

; 2645 :         if ( ModuleInfo.win64_flags & W64F_STACKALIGN16 )

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 4
	test	eax, eax
	je	SHORT $LN16@SetLocalOf

; 2646 :             align = 16;

	mov	DWORD PTR align$[rsp], 16
$LN16@SetLocalOf:
$LN14@SetLocalOf:

; 2647 :     }
; 2648 : #endif
; 2649 : #if AMD64_SUPPORT || STACKBASESUPP
; 2650 :     /* in 64-bit, if the FRAME attribute is set, the space for the registers
; 2651 :      * saved by the USES clause is located ABOVE the local variables!
; 2652 :      * v2.09: if stack space is to be reserved for INVOKE ( option WIN64:2 ),
; 2653 :      * the registers are also saved ABOVE the local variables.
; 2654 :      */
; 2655 :     if (
; 2656 : #if STACKBASESUPP
; 2657 :         info->fpo
; 2658 : #endif
; 2659 : #if AMD64_SUPPORT
; 2660 :         || rspalign

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN18@SetLocalOf
	cmp	DWORD PTR rspalign$[rsp], 0
	je	$LN17@SetLocalOf
$LN18@SetLocalOf:

; 2661 : #endif
; 2662 :        ) {
; 2663 :         /* count registers to be saved ABOVE local variables.
; 2664 :          * v2.06: the list may contain xmm registers, which have size 16!
; 2665 :          */
; 2666 :         if ( info->regslist ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax], 0
	je	$LN19@SetLocalOf

; 2667 :             int         cnt;
; 2668 :             uint_16     *regs;
; 2669 :             for( regs = info->regslist, cnt = *regs++; cnt; cnt--, regs++ )

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR regs$3[rsp], rax
	mov	rax, QWORD PTR regs$3[rsp]
	movzx	eax, WORD PTR [rax]
	mov	DWORD PTR cnt$2[rsp], eax
	mov	rax, QWORD PTR regs$3[rsp]
	add	rax, 2
	mov	QWORD PTR regs$3[rsp], rax
	jmp	SHORT $LN4@SetLocalOf
$LN2@SetLocalOf:
	mov	eax, DWORD PTR cnt$2[rsp]
	dec	eax
	mov	DWORD PTR cnt$2[rsp], eax
	mov	rax, QWORD PTR regs$3[rsp]
	add	rax, 2
	mov	QWORD PTR regs$3[rsp], rax
$LN4@SetLocalOf:
	cmp	DWORD PTR cnt$2[rsp], 0
	je	SHORT $LN3@SetLocalOf

; 2670 :                 if ( GetValueSp( *regs ) & OP_XYZMM )

	mov	rax, QWORD PTR regs$3[rsp]
	movzx	eax, WORD PTR [rax]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN20@SetLocalOf

; 2671 :                     cntxmm++;

	mov	eax, DWORD PTR cntxmm$[rsp]
	inc	eax
	mov	DWORD PTR cntxmm$[rsp], eax
	jmp	SHORT $LN21@SetLocalOf
$LN20@SetLocalOf:

; 2672 :                 else
; 2673 :                     cntstd++;

	mov	eax, DWORD PTR cntstd$[rsp]
	inc	eax
	mov	DWORD PTR cntstd$[rsp], eax
$LN21@SetLocalOf:
	jmp	SHORT $LN2@SetLocalOf
$LN3@SetLocalOf:
$LN19@SetLocalOf:

; 2674 :         }        
; 2675 :         /* in case there's no frame register, adjust start offset. */
; 2676 :         if ( info->parasize == 0 && info->locallist == NULL  )

	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN22@SetLocalOf
	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN22@SetLocalOf

; 2677 :             start = CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR start$[rsp], eax
$LN22@SetLocalOf:

; 2678 :         if (info->fpo && !(ModuleInfo.win64_flags & W64F_HABRAN)) start = CurrWordSize;

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN23@SetLocalOf
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	jne	SHORT $LN23@SetLocalOf
	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR start$[rsp], eax
$LN23@SetLocalOf:

; 2679 : #if AMD64_SUPPORT
; 2680 :         if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN24@SetLocalOf

; 2681 :           info->localsize += start;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, DWORD PTR start$[rsp]
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax

; 2682 :           cntstd = info->pushed_reg;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+64]
	mov	DWORD PTR cntstd$[rsp], eax

; 2683 :           if (rspalign && cntxmm) {

	cmp	DWORD PTR rspalign$[rsp], 0
	je	SHORT $LN26@SetLocalOf
	cmp	DWORD PTR cntxmm$[rsp], 0
	je	SHORT $LN26@SetLocalOf

; 2684 :               if (!(cntstd & 1)) info->localsize += 8;

	mov	eax, DWORD PTR cntstd$[rsp]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN27@SetLocalOf
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, 8
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN27@SetLocalOf:

; 2685 :               info->localsize += 32 * cntxmm;

	imul	eax, DWORD PTR cntxmm$[rsp], 32		; 00000020H
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN26@SetLocalOf:

; 2686 :               }
; 2687 :            }

	jmp	SHORT $LN25@SetLocalOf
$LN24@SetLocalOf:

; 2688 :         else {
; 2689 :           if (rspalign) {

	cmp	DWORD PTR rspalign$[rsp], 0
	je	SHORT $LN28@SetLocalOf

; 2690 :             info->localsize = start + cntstd * CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR cntstd$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	ecx, DWORD PTR start$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax

; 2691 :             if (cntxmm) {

	cmp	DWORD PTR cntxmm$[rsp], 0
	je	SHORT $LN29@SetLocalOf

; 2692 :               info->localsize += 16 * cntxmm;

	imul	eax, DWORD PTR cntxmm$[rsp], 16
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+36]
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax

; 2693 :               info->localsize = ROUND_UP(info->localsize, 16);

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, 15
	and	eax, -16				; fffffff0H
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN29@SetLocalOf:
$LN28@SetLocalOf:
$LN25@SetLocalOf:

; 2694 :             }
; 2695 :           }
; 2696 :         }
; 2697 : #endif
; 2698 :         DebugMsg1(("SetLocalOffsets(%s): cntxmm=%u cntstd=%u start=%u align=%u localsize=%u\n", CurrProc->sym.name, cntxmm, cntstd, start, align, info->localsize ));

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR align$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR start$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR cntstd$[rsp]
	mov	r8d, DWORD PTR cntxmm$[rsp]
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12416
	call	DoDebugMsg1
$LN17@SetLocalOf:

; 2699 :     }
; 2700 : #endif
; 2701 : 
; 2702 :     /* scan the locals list and set member sym.offset */
; 2703 :     for( curr = info->locallist; curr; curr = curr->nextlocal ) {

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN7@SetLocalOf
$LN5@SetLocalOf:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN7@SetLocalOf:
	cmp	QWORD PTR curr$[rsp], 0
	je	$LN6@SetLocalOf

; 2704 :         uint_32 itemsize = ( curr->sym.total_size == 0 ? 0 : curr->sym.total_size / curr->sym.total_length );

	mov	rax, QWORD PTR curr$[rsp]
	cmp	DWORD PTR [rax+56], 0
	jne	SHORT $LN48@SetLocalOf
	mov	DWORD PTR tv194[rsp], 0
	jmp	SHORT $LN49@SetLocalOf
$LN48@SetLocalOf:
	xor	edx, edx
	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	rcx, QWORD PTR curr$[rsp]
	div	DWORD PTR [rcx+64]
	mov	DWORD PTR tv194[rsp], eax
$LN49@SetLocalOf:
	mov	eax, DWORD PTR tv194[rsp]
	mov	DWORD PTR itemsize$4[rsp], eax

; 2705 :         if (ModuleInfo.win64_flags & W64F_HABRAN){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN30@SetLocalOf

; 2706 :           int n = 0;

	mov	DWORD PTR n$5[rsp], 0

; 2707 :           if (curr->sym.isarray) n = curr->sym.total_size & 0x7;

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 1
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@SetLocalOf
	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+56]
	and	eax, 7
	mov	DWORD PTR n$5[rsp], eax
$LN31@SetLocalOf:

; 2708 :           curr->sym.offset = info->localsize + n; //that works

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, DWORD PTR n$5[rsp]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	DWORD PTR [rcx+16], eax
$LN30@SetLocalOf:

; 2709 :         }
; 2710 :         info->localsize += curr->sym.total_size;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	rcx, QWORD PTR curr$[rsp]
	add	eax, DWORD PTR [rcx+56]
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax

; 2711 :         if ( itemsize > align )

	mov	eax, DWORD PTR align$[rsp]
	cmp	DWORD PTR itemsize$4[rsp], eax
	jbe	SHORT $LN32@SetLocalOf

; 2712 :             info->localsize = ROUND_UP( info->localsize, align );

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	ecx, DWORD PTR align$[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	ecx, DWORD PTR align$[rsp]
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
	jmp	SHORT $LN33@SetLocalOf
$LN32@SetLocalOf:

; 2713 :         else if ( itemsize ) /* v2.04: skip if size == 0 */

	cmp	DWORD PTR itemsize$4[rsp], 0
	je	SHORT $LN34@SetLocalOf

; 2714 :             info->localsize = ROUND_UP( info->localsize, itemsize );

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	ecx, DWORD PTR itemsize$4[rsp]
	lea	eax, DWORD PTR [rax+rcx-1]
	mov	ecx, DWORD PTR itemsize$4[rsp]
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN34@SetLocalOf:
$LN33@SetLocalOf:

; 2715 :         if (!(ModuleInfo.win64_flags & W64F_HABRAN))

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	jne	SHORT $LN35@SetLocalOf

; 2716 :         curr->sym.offset = - info->localsize;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	neg	eax
	mov	rcx, QWORD PTR curr$[rsp]
	mov	DWORD PTR [rcx+16], eax
$LN35@SetLocalOf:

; 2717 :         DebugMsg1(("SetLocalOffsets(%s): offset of %s (size=%u) set to %d\n", CurrProc->sym.name, curr->sym.name, curr->sym.total_size, curr->sym.offset));

	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR curr$[rsp]
	mov	r9d, DWORD PTR [rax+56]
	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12423
	call	DoDebugMsg1

; 2718 :     }

	jmp	$LN5@SetLocalOf
$LN6@SetLocalOf:

; 2719 : 
; 2720 :     /* v2.11: localsize must be rounded before offset adjustment if fpo */
; 2721 :     if (!(ModuleInfo.win64_flags & W64F_HABRAN))

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	jne	SHORT $LN36@SetLocalOf

; 2722 :     info->localsize = ROUND_UP( info->localsize, CurrWordSize );

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	lea	eax, DWORD PTR [rcx+rax-1]
	movzx	ecx, BYTE PTR ModuleInfo+406
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN36@SetLocalOf:

; 2723 : #if AMD64_SUPPORT
; 2724 :     /* RSP 16-byte alignment? */
; 2725 :     if ( rspalign ) {

	cmp	DWORD PTR rspalign$[rsp], 0
	je	SHORT $LN37@SetLocalOf

; 2726 :       if (ModuleInfo.win64_flags & W64F_HABRAN)info->localsize = ROUND_UP(info->localsize, 8);

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN38@SetLocalOf
	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, 7
	and	eax, -8					; fffffff8H
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
	jmp	SHORT $LN39@SetLocalOf
$LN38@SetLocalOf:

; 2727 :       else  info->localsize = ROUND_UP( info->localsize, 16 );

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	add	eax, 15
	and	eax, -16				; fffffff0H
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax
$LN39@SetLocalOf:
$LN37@SetLocalOf:

; 2728 :     }
; 2729 : #endif
; 2730 : 
; 2731 :     DebugMsg1(("SetLocalOffsets(%s): localsize=%u after processing locals\n", CurrProc->sym.name, info->localsize ));

	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+36]
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12428
	call	DoDebugMsg1

; 2732 : 
; 2733 : #if STACKBASESUPP
; 2734 :     /* v2.11: recalculate offsets for params and locals if there's no frame pointer.
; 2735 :      * Problem in 64-bit: option win64:2 triggers the "stack space reservation" feature -
; 2736 :      * but the final value of this space is known at the procedure's END only.
; 2737 :      * Hence in this case the values calculated below are "preliminary".
; 2738 :      */
; 2739 :     if (info->fpo) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	$LN40@SetLocalOf
	mov	BYTE PTR $T8[rsp], 0

; 2740 :       unsigned localadj;
; 2741 :       unsigned paramadj;
; 2742 : #if AMD64_SUPPORT
; 2743 :       if (rspalign) {

	cmp	DWORD PTR rspalign$[rsp], 0
	je	SHORT $LN41@SetLocalOf

; 2744 :         localadj = info->localsize;

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR localadj$6[rsp], eax

; 2745 :         if (!(ModuleInfo.win64_flags & W64F_HABRAN))

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	jne	SHORT $LN43@SetLocalOf

; 2746 :           paramadj = info->localsize - CurrWordSize - start;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	sub	ecx, eax
	mov	eax, ecx
	sub	eax, DWORD PTR start$[rsp]
	mov	BYTE PTR $T8[rsp], 1
	mov	DWORD PTR paramadj$7[rsp], eax
$LN43@SetLocalOf:

; 2747 :       }

	jmp	SHORT $LN42@SetLocalOf
$LN41@SetLocalOf:

; 2748 :       else {
; 2749 : #endif
; 2750 :         localadj = info->localsize + cntstd * CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR cntstd$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	add	eax, DWORD PTR [rcx+36]
	mov	DWORD PTR localadj$6[rsp], eax

; 2751 :         paramadj = info->localsize + cntstd * CurrWordSize - CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR cntstd$[rsp]
	imul	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	add	ecx, eax
	mov	eax, ecx
	movzx	ecx, BYTE PTR ModuleInfo+406
	sub	eax, ecx
	mov	BYTE PTR $T8[rsp], 1
	mov	DWORD PTR paramadj$7[rsp], eax
$LN42@SetLocalOf:

; 2752 : #if AMD64_SUPPORT
; 2753 :       }
; 2754 : #endif
; 2755 :       if (!(ModuleInfo.win64_flags & W64F_HABRAN)){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	jne	$LN44@SetLocalOf

; 2756 :         DebugMsg1(("SetLocalOffsets(%s): FPO, adjusting offsets\n", CurrProc->sym.name));

	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12434
	call	DoDebugMsg1

; 2757 :         /* subtract CurrWordSize value for params, since no space is required to save the frame pointer value */
; 2758 :         for (curr = info->locallist; curr; curr = curr->nextlocal) {

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN10@SetLocalOf
$LN8@SetLocalOf:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN10@SetLocalOf:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN9@SetLocalOf

; 2759 :           DebugMsg1(("SetLocalOffsets(%s): FPO, offset for %s %4d -> %4d\n", CurrProc->sym.name, curr->sym.name, curr->sym.offset, curr->sym.offset + localadj));

	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, DWORD PTR localadj$6[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR curr$[rsp]
	mov	r9d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12435
	call	DoDebugMsg1

; 2760 :           curr->sym.offset += localadj;

	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, DWORD PTR localadj$6[rsp]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	DWORD PTR [rcx+16], eax

; 2761 :         }

	jmp	SHORT $LN8@SetLocalOf
$LN9@SetLocalOf:

; 2762 :         for (curr = info->paralist; curr; curr = curr->nextparam) {

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN13@SetLocalOf
$LN11@SetLocalOf:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN13@SetLocalOf:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN12@SetLocalOf

; 2763 :           DebugMsg1(("SetLocalOffsets(%s): FPO, offset for %s %4d -> %4d\n", CurrProc->sym.name, curr->sym.name, curr->sym.offset, curr->sym.offset + paramadj));

	cmp	BYTE PTR $T8[rsp], 0
	jne	SHORT $LN50@SetLocalOf
	lea	rcx, OFFSET FLAT:SetLocalOffsets$rtcName$0
	call	_RTC_UninitUse
$LN50@SetLocalOf:
	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, DWORD PTR paramadj$7[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR curr$[rsp]
	mov	r9d, DWORD PTR [rax+16]
	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12436
	call	DoDebugMsg1

; 2764 :           curr->sym.offset += paramadj;

	cmp	BYTE PTR $T8[rsp], 0
	jne	SHORT $LN51@SetLocalOf
	lea	rcx, OFFSET FLAT:SetLocalOffsets$rtcName$0
	call	_RTC_UninitUse
$LN51@SetLocalOf:
	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+16]
	add	eax, DWORD PTR paramadj$7[rsp]
	mov	rcx, QWORD PTR curr$[rsp]
	mov	DWORD PTR [rcx+16], eax

; 2765 :         }

	jmp	$LN11@SetLocalOf
$LN12@SetLocalOf:
$LN44@SetLocalOf:
$LN40@SetLocalOf:

; 2766 :       }
; 2767 :     }
; 2768 : #endif
; 2769 : 
; 2770 : #if AMD64_SUPPORT
; 2771 :     /* v2.12: if the space used for register saves has been added to localsize,
; 2772 :      * the part that covers "pushed" GPRs has to be subtracted now, before prologue code is generated.
; 2773 :      */
; 2774 :     if (!(ModuleInfo.win64_flags & W64F_HABRAN)){

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	jne	SHORT $LN45@SetLocalOf

; 2775 :       if (rspalign) {

	cmp	DWORD PTR rspalign$[rsp], 0
	je	SHORT $LN46@SetLocalOf

; 2776 :         info->localsize -= cntstd * 8 + start;

	mov	eax, DWORD PTR start$[rsp]
	mov	ecx, DWORD PTR cntstd$[rsp]
	lea	eax, DWORD PTR [rax+rcx*8]
	mov	rcx, QWORD PTR info$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	sub	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR info$[rsp]
	mov	DWORD PTR [rcx+36], eax

; 2777 :         DebugMsg1(("SetLocalOffsets(%s): final localsize=%u\n", CurrProc->sym.name, info->localsize));

	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+36]
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12439
	call	DoDebugMsg1
$LN46@SetLocalOf:
$LN45@SetLocalOf:

; 2778 :       }
; 2779 :     }
; 2780 : #endif
; 2781 : }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
SetLocalOffsets ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
xdata$ = 64
segname$ = 72
i$ = 80
simplespec$ = 84
olddotname$ = 88
xdataofs$ = 92
segnamebuff$ = 104
buffer$ = 160
pfx$5 = 296
$T6 = 312
$T7 = 320
tv128 = 328
tv146 = 332
tv260 = 336
__$ArrayPad$ = 344
proc$ = 368
WriteSEHData PROC

; 1642 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 352				; 00000160H
	mov	rdi, rsp
	mov	ecx, 88					; 00000058H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+368]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 1643 :     struct dsym *xdata;
; 1644 :     char *segname = ".xdata";

	lea	rax, OFFSET FLAT:$SG11959
	mov	QWORD PTR segname$[rsp], rax

; 1645 :     int i;
; 1646 :     int simplespec;
; 1647 :     uint_8 olddotname;
; 1648 :     uint_32 xdataofs = 0;

	mov	DWORD PTR xdataofs$[rsp], 0

; 1649 :     char segnamebuff[12];
; 1650 :     char buffer[128];
; 1651 : 
; 1652 :     if ( endprolog_found == FALSE ) {

	movzx	eax, BYTE PTR endprolog_found
	test	eax, eax
	jne	SHORT $LN5@WriteSEHDa

; 1653 :         EmitErr( MISSING_ENDPROLOG, proc->sym.name );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 259				; 00000103H
	call	EmitErr
$LN5@WriteSEHDa:

; 1654 :     }
; 1655 :     if ( unw_segs_defined )

	movzx	eax, BYTE PTR unw_segs_defined
	test	eax, eax
	je	SHORT $LN6@WriteSEHDa

; 1656 :         AddLineQueueX("%s %r", segname, T_SEGMENT );

	mov	r8d, 436				; 000001b4H
	mov	rdx, QWORD PTR segname$[rsp]
	lea	rcx, OFFSET FLAT:$SG11963
	call	AddLineQueueX
	jmp	SHORT $LN7@WriteSEHDa
$LN6@WriteSEHDa:

; 1657 :     else {
; 1658 :         AddLineQueueX("%s %r align(%u) flat read 'DATA'", segname, T_SEGMENT, 8 );

	mov	r9d, 8
	mov	r8d, 436				; 000001b4H
	mov	rdx, QWORD PTR segname$[rsp]
	lea	rcx, OFFSET FLAT:$SG11964
	call	AddLineQueueX

; 1659 :         AddLineQueue("$xdatasym label near");

	lea	rcx, OFFSET FLAT:$SG11965
	call	AddLineQueue
$LN7@WriteSEHDa:

; 1660 :     }
; 1661 :     xdataofs = 0;

	mov	DWORD PTR xdataofs$[rsp], 0

; 1662 :     xdata = (struct dsym *)SymSearch( segname );

	mov	rcx, QWORD PTR segname$[rsp]
	call	SymFind
	mov	QWORD PTR xdata$[rsp], rax

; 1663 :     if ( xdata ) {

	cmp	QWORD PTR xdata$[rsp], 0
	je	SHORT $LN8@WriteSEHDa

; 1664 :         /* v2.11: changed offset to max_offset.
; 1665 :          * However, value structinfo.current_loc might even be better.
; 1666 :          */
; 1667 :         xdataofs = xdata->sym.max_offset;

	mov	rax, QWORD PTR xdata$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR xdataofs$[rsp], eax
$LN8@WriteSEHDa:

; 1668 :     }
; 1669 : 
; 1670 :     /* write the .xdata stuff (a UNWIND_INFO entry )
; 1671 :      * v2.11: 't'-suffix added to ensure the values are correct if radix is != 10.
; 1672 :      */
; 1673 :     AddLineQueueX( "db %ut + (0%xh shl 3), %ut, %ut, 0%xh + (0%xh shl 4)",

	movzx	eax, BYTE PTR unw_info+3
	shr	al, 4
	and	al, 15
	movzx	eax, al
	movzx	ecx, BYTE PTR unw_info+3
	and	cl, 15
	movzx	ecx, cl
	movzx	edx, BYTE PTR unw_info+2
	movzx	r8d, BYTE PTR unw_info+1
	movzx	r9d, BYTE PTR unw_info
	shr	r9b, 3
	and	r9b, 31
	movzx	r9d, r9b
	mov	DWORD PTR tv128[rsp], r9d
	mov	DWORD PTR [rsp+48], eax
	mov	DWORD PTR [rsp+40], ecx
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, r8d
	mov	eax, DWORD PTR tv128[rsp]
	mov	r8d, eax
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11967
	call	AddLineQueueX

; 1674 :             UNW_VERSION, unw_info.Flags, unw_info.SizeOfProlog,
; 1675 :             unw_info.CountOfCodes, unw_info.FrameRegister, unw_info.FrameOffset );
; 1676 :     if ( unw_info.CountOfCodes ) {

	movzx	eax, BYTE PTR unw_info+2
	test	eax, eax
	je	$LN9@WriteSEHDa

; 1677 :         char *pfx = "dw";

	lea	rax, OFFSET FLAT:$SG11969
	mov	QWORD PTR pfx$5[rsp], rax

; 1678 :         buffer[0] = NULLC;

	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T6[rsp], rax
	cmp	QWORD PTR $T6[rsp], 128			; 00000080H
	jae	SHORT $LN18@WriteSEHDa
	jmp	SHORT $LN19@WriteSEHDa
$LN18@WriteSEHDa:
	call	__report_rangecheckfailure
$LN19@WriteSEHDa:
	mov	rax, QWORD PTR $T6[rsp]
	mov	BYTE PTR buffer$[rsp+rax], 0

; 1679 :         /* write the codes from right to left */
; 1680 :         for ( i = unw_info.CountOfCodes; i ; i-- ) {

	movzx	eax, BYTE PTR unw_info+2
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN4@WriteSEHDa
$LN2@WriteSEHDa:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@WriteSEHDa:
	cmp	DWORD PTR i$[rsp], 0
	je	$LN3@WriteSEHDa

; 1681 :             /* v2.11: use field FrameOffset */
; 1682 :             //sprintf( buffer + strlen( buffer ), "%s 0%xh", pfx, unw_code[i-1] );
; 1683 :             sprintf( buffer + strlen( buffer ), "%s 0%xh", pfx, unw_code[i-1].FrameOffset );

	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	lea	rcx, OFFSET FLAT:unw_code
	movzx	eax, WORD PTR [rcx+rax*2]
	mov	DWORD PTR tv146[rsp], eax
	lea	rcx, QWORD PTR buffer$[rsp]
	call	strlen
	lea	rax, QWORD PTR buffer$[rsp+rax]
	mov	ecx, DWORD PTR tv146[rsp]
	mov	r9d, ecx
	mov	r8, QWORD PTR pfx$5[rsp]
	lea	rdx, OFFSET FLAT:$SG11970
	mov	rcx, rax
	call	sprintf

; 1684 :             pfx = ",";

	lea	rax, OFFSET FLAT:$SG11971
	mov	QWORD PTR pfx$5[rsp], rax

; 1685 :             if ( i == 1 || strlen( buffer ) > 72 ) {

	cmp	DWORD PTR i$[rsp], 1
	je	SHORT $LN11@WriteSEHDa
	lea	rcx, QWORD PTR buffer$[rsp]
	call	strlen
	cmp	rax, 72					; 00000048H
	jbe	SHORT $LN10@WriteSEHDa
$LN11@WriteSEHDa:

; 1686 :                 AddLineQueue( buffer );

	lea	rcx, QWORD PTR buffer$[rsp]
	call	AddLineQueue

; 1687 :                 buffer[0] = NULLC;

	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T7[rsp], rax
	cmp	QWORD PTR $T7[rsp], 128			; 00000080H
	jae	SHORT $LN20@WriteSEHDa
	jmp	SHORT $LN21@WriteSEHDa
$LN20@WriteSEHDa:
	call	__report_rangecheckfailure
$LN21@WriteSEHDa:
	mov	rax, QWORD PTR $T7[rsp]
	mov	BYTE PTR buffer$[rsp+rax], 0

; 1688 :                 pfx = "dw";

	lea	rax, OFFSET FLAT:$SG11974
	mov	QWORD PTR pfx$5[rsp], rax
$LN10@WriteSEHDa:

; 1689 :             }
; 1690 :         }

	jmp	$LN2@WriteSEHDa
$LN3@WriteSEHDa:
$LN9@WriteSEHDa:

; 1691 :     }
; 1692 :     /* make sure the unwind codes array has an even number of entries */
; 1693 :     AddLineQueueX( "%r 4", T_ALIGN );

	mov	edx, 434				; 000001b2H
	lea	rcx, OFFSET FLAT:$SG11975
	call	AddLineQueueX

; 1694 : 
; 1695 :     if ( proc->e.procinfo->exc_handler ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN12@WriteSEHDa

; 1696 :         AddLineQueueX( "dd %r %s", T_IMAGEREL, proc->e.procinfo->exc_handler->name );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+48]
	mov	r8, QWORD PTR [rax+8]
	mov	edx, 233				; 000000e9H
	lea	rcx, OFFSET FLAT:$SG11977
	call	AddLineQueueX

; 1697 :         AddLineQueueX( "%r 8", T_ALIGN );

	mov	edx, 434				; 000001b2H
	lea	rcx, OFFSET FLAT:$SG11978
	call	AddLineQueueX
$LN12@WriteSEHDa:

; 1698 :     }
; 1699 :     AddLineQueueX( "%s %r", segname, T_ENDS );

	mov	r8d, 437				; 000001b5H
	mov	rdx, QWORD PTR segname$[rsp]
	lea	rcx, OFFSET FLAT:$SG11979
	call	AddLineQueueX

; 1700 : 
; 1701 :     /* v2.07: ensure that .pdata items are sorted */
; 1702 :     if ( 0 == strcmp( SimGetSegName( SIM_CODE ), proc->sym.segment->name ) ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR tv260[rsp], rax
	xor	ecx, ecx
	call	SimGetSegName
	mov	rcx, QWORD PTR tv260[rsp]
	mov	rdx, QWORD PTR [rcx+8]
	mov	rcx, rax
	call	strcmp
	test	eax, eax
	jne	SHORT $LN13@WriteSEHDa

; 1703 :         segname = ".pdata";

	lea	rax, OFFSET FLAT:$SG11982
	mov	QWORD PTR segname$[rsp], rax

; 1704 :         simplespec = ( unw_segs_defined & 1 );

	movzx	eax, BYTE PTR unw_segs_defined
	and	eax, 1
	mov	DWORD PTR simplespec$[rsp], eax

; 1705 :         unw_segs_defined = 3;

	mov	BYTE PTR unw_segs_defined, 3

; 1706 :     } else {

	jmp	SHORT $LN14@WriteSEHDa
$LN13@WriteSEHDa:

; 1707 :         segname = segnamebuff;

	lea	rax, QWORD PTR segnamebuff$[rsp]
	mov	QWORD PTR segname$[rsp], rax

; 1708 :         sprintf( segname, ".pdata$%04u", GetSegIdx( proc->sym.segment ) );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+24]
	call	GetSegIdx
	mov	r8d, eax
	lea	rdx, OFFSET FLAT:$SG11983
	mov	rcx, QWORD PTR segname$[rsp]
	call	sprintf

; 1709 :         simplespec = 0;

	mov	DWORD PTR simplespec$[rsp], 0

; 1710 :         unw_segs_defined |= 2;

	movzx	eax, BYTE PTR unw_segs_defined
	or	eax, 2
	mov	BYTE PTR unw_segs_defined, al
$LN14@WriteSEHDa:

; 1711 :     }
; 1712 : 
; 1713 :     if ( simplespec )

	cmp	DWORD PTR simplespec$[rsp], 0
	je	SHORT $LN15@WriteSEHDa

; 1714 :         AddLineQueueX( "%s %r", segname, T_SEGMENT );

	mov	r8d, 436				; 000001b4H
	mov	rdx, QWORD PTR segname$[rsp]
	lea	rcx, OFFSET FLAT:$SG11986
	call	AddLineQueueX
	jmp	SHORT $LN16@WriteSEHDa
$LN15@WriteSEHDa:

; 1715 :     else
; 1716 :         AddLineQueueX( "%s %r align(%u) flat read 'DATA'", segname, T_SEGMENT, 4 );

	mov	r9d, 4
	mov	r8d, 436				; 000001b4H
	mov	rdx, QWORD PTR segname$[rsp]
	lea	rcx, OFFSET FLAT:$SG11987
	call	AddLineQueueX
$LN16@WriteSEHDa:

; 1717 :     /* write the .pdata stuff ( type IMAGE_RUNTIME_FUNCTION_ENTRY )*/
; 1718 :     AddLineQueueX( "dd %r %s, %r %s+0%xh, %r $xdatasym+0%xh",

	mov	eax, DWORD PTR xdataofs$[rsp]
	mov	DWORD PTR [rsp+56], eax
	mov	DWORD PTR [rsp+48], 233			; 000000e9H
	mov	rax, QWORD PTR proc$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 233				; 000000e9H
	mov	rax, QWORD PTR proc$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	edx, 233				; 000000e9H
	lea	rcx, OFFSET FLAT:$SG11988
	call	AddLineQueueX

; 1719 :                   T_IMAGEREL, proc->sym.name,
; 1720 :                   T_IMAGEREL, proc->sym.name, proc->sym.total_size,
; 1721 :                   T_IMAGEREL, xdataofs );
; 1722 :     AddLineQueueX("%s %r", segname, T_ENDS );

	mov	r8d, 437				; 000001b5H
	mov	rdx, QWORD PTR segname$[rsp]
	lea	rcx, OFFSET FLAT:$SG11989
	call	AddLineQueueX

; 1723 :     olddotname = ModuleInfo.dotname;

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 4
	and	eax, 1
	mov	BYTE PTR olddotname$[rsp], al

; 1724 :     ModuleInfo.dotname = TRUE; /* set OPTION DOTNAME because .pdata and .xdata */

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 16
	mov	DWORD PTR ModuleInfo+408, eax

; 1725 :     RunLineQueue();

	call	RunLineQueue

; 1726 :     ModuleInfo.dotname = olddotname;

	movzx	eax, BYTE PTR olddotname$[rsp]
	and	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR ModuleInfo+408
	and	ecx, -17				; ffffffefH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax
$LN17@WriteSEHDa:

; 1727 :     return;
; 1728 : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:WriteSEHData$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 352				; 00000160H
	pop	rdi
	ret	0
WriteSEHData ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
sym$ = 48
ofs$ = 56
name$ = 64
oldpubstate$ = 72
is_global$ = 73
tv146 = 76
tv260 = 80
tv276 = 88
tv306 = 96
tv365 = 100
i$ = 128
tokenarray$ = 136
ProcDir	PROC

; 1408 : {

$LN42:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rdi, rsp
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+128]

; 1409 :     struct asym         *sym;
; 1410 :     unsigned int        ofs;
; 1411 :     char                *name;
; 1412 :     bool                oldpubstate;
; 1413 :     bool                is_global;
; 1414 : 
; 1415 :     DebugMsg1(("ProcDir enter, curr ofs=%X\n", GetCurrOffset() ));

	call	GetCurrOffset
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11882
	call	DoDebugMsg1

; 1416 :     if( i != 1 ) {

	cmp	DWORD PTR i$[rsp], 1
	je	SHORT $LN2@ProcDir

; 1417 :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ProcDir
$LN2@ProcDir:

; 1418 :     }
; 1419 :     /* v2.04b: check was missing */
; 1420 :     if( CurrSeg == NULL ) {

	cmp	QWORD PTR ModuleInfo+432, 0
	jne	SHORT $LN3@ProcDir

; 1421 :         return( EmitError( MUST_BE_IN_SEGMENT_BLOCK ) );

	mov	ecx, 82					; 00000052H
	call	EmitError
	jmp	$LN1@ProcDir
$LN3@ProcDir:

; 1422 :     }
; 1423 : 
; 1424 :     name = tokenarray[0].string_ptr;

	mov	eax, 32					; 00000020H
	imul	rax, rax, 0
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR name$[rsp], rax

; 1425 : 
; 1426 :     if( CurrProc != NULL ) {

	cmp	QWORD PTR CurrProc, 0
	je	SHORT $LN4@ProcDir

; 1427 : 
; 1428 :         /* this is not needed for HJWasm, but Masm will reject nested
; 1429 :          * procs if there are params, locals or used registers.
; 1430 :          */
; 1431 :         if ( CurrProc->e.procinfo->paralist ||
; 1432 : #if AMD64_SUPPORT
; 1433 :             CurrProc->e.procinfo->isframe ||
; 1434 : #endif
; 1435 :             CurrProc->e.procinfo->locallist ||

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN6@ProcDir
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@ProcDir
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN6@ProcDir
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN5@ProcDir
$LN6@ProcDir:

; 1436 :             CurrProc->e.procinfo->regslist ) {
; 1437 :             return( EmitErr( CANNOT_NEST_PROCEDURES, name ) );

	mov	rdx, QWORD PTR name$[rsp]
	mov	ecx, 93					; 0000005dH
	call	EmitErr
	jmp	$LN1@ProcDir
$LN5@ProcDir:

; 1438 :         }
; 1439 :         /* nested procs ... push currproc on a stack */
; 1440 :         push_proc( CurrProc );

	mov	rcx, QWORD PTR CurrProc
	call	push_proc
$LN4@ProcDir:

; 1441 :     }
; 1442 : 
; 1443 : 
; 1444 :     if ( ModuleInfo.procalign ) {

	movzx	eax, BYTE PTR ModuleInfo+399
	test	eax, eax
	je	SHORT $LN7@ProcDir

; 1445 :         AlignCurrOffset( ModuleInfo.procalign );

	movzx	eax, BYTE PTR ModuleInfo+399
	mov	ecx, eax
	call	AlignCurrOffset
$LN7@ProcDir:

; 1446 :     }
; 1447 : 
; 1448 :     i++; /* go past PROC */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1449 : 
; 1450 :     sym = SymSearch( name );

	mov	rcx, QWORD PTR name$[rsp]
	call	SymFind
	mov	QWORD PTR sym$[rsp], rax

; 1451 : 
; 1452 :     if( Parse_Pass == PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, 0
	jne	$LN8@ProcDir

; 1453 : 
; 1454 :         oldpubstate = sym ? sym->ispublic : FALSE;

	cmp	QWORD PTR sym$[rsp], 0
	je	SHORT $LN32@ProcDir
	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	mov	DWORD PTR tv146[rsp], eax
	jmp	SHORT $LN33@ProcDir
$LN32@ProcDir:
	mov	DWORD PTR tv146[rsp], 0
$LN33@ProcDir:
	movzx	eax, BYTE PTR tv146[rsp]
	mov	BYTE PTR oldpubstate$[rsp], al

; 1455 :         if( sym == NULL || sym->state == SYM_UNDEFINED ) {

	cmp	QWORD PTR sym$[rsp], 0
	je	SHORT $LN12@ProcDir
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN10@ProcDir
$LN12@ProcDir:

; 1456 :             sym = CreateProc( sym, name, SYM_INTERNAL );

	mov	r8d, 1
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR sym$[rsp]
	call	CreateProc
	mov	QWORD PTR sym$[rsp], rax

; 1457 :             is_global = FALSE;

	mov	BYTE PTR is_global$[rsp], 0
	jmp	$LN11@ProcDir
$LN10@ProcDir:

; 1458 :         } else if ( sym->state == SYM_EXTERNAL && sym->weak == TRUE ) {

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+32], 2
	jne	$LN13@ProcDir
	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN13@ProcDir

; 1459 :             /* PROTO or EXTERNDEF item */
; 1460 :             is_global = TRUE;

	mov	BYTE PTR is_global$[rsp], 1

; 1461 :             if ( sym->isproc == TRUE  ) {

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN15@ProcDir

; 1462 :                 /* don't create the procinfo extension; it exists already */
; 1463 :                 procidx++; /* v2.04: added */

	mov	eax, DWORD PTR procidx
	inc	eax
	mov	DWORD PTR procidx, eax

; 1464 :                 if ( Options.line_numbers ) {

	movzx	eax, BYTE PTR Options+1
	test	eax, eax
	je	SHORT $LN17@ProcDir

; 1465 :                     sym->debuginfo = LclAlloc( sizeof( struct debug_info ) );

	mov	ecx, 24
	call	LclAlloc
	mov	rcx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rcx+64], rax

; 1466 :                     sym->debuginfo->file = get_curr_srcfile();

	call	get_curr_srcfile
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	WORD PTR [rcx+14], ax
$LN17@ProcDir:

; 1467 :                 }
; 1468 :             } else {

	jmp	SHORT $LN16@ProcDir
$LN15@ProcDir:

; 1469 :                 /* it's a simple EXTERNDEF. Create a PROC item!
; 1470 :                  * this will be SYM_INTERNAL */
; 1471 :                 /* v2.03: don't call dir_free(), it'll clear field Ofssize */
; 1472 :                 //dir_free( (struct dsym *)sym );
; 1473 :                 sym = CreateProc( sym, name, SYM_INTERNAL );

	mov	r8d, 1
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR sym$[rsp]
	call	CreateProc
	mov	QWORD PTR sym$[rsp], rax
$LN16@ProcDir:

; 1474 :             }
; 1475 :         } else {

	jmp	SHORT $LN14@ProcDir
$LN13@ProcDir:

; 1476 :             /* Masm won't reject a redefinition if "certain" parameters
; 1477 :              * won't change. However, in a lot of cases one gets "internal assembler error".
; 1478 :              * Hence this "feature" isn't active in hjwasm.
; 1479 :              */
; 1480 :             //} else if ( sym->state != SYM_INTERNAL || sym->isproc != TRUE ||
; 1481 :             //           sym->offset != GetCurrOffset() || sym->segment != &CurrSeg->sym ) {
; 1482 :             return( EmitErr( SYMBOL_REDEFINITION, sym->name ) );

	mov	rax, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 143				; 0000008fH
	call	EmitErr
	jmp	$LN1@ProcDir
$LN14@ProcDir:
$LN11@ProcDir:

; 1483 :         }
; 1484 :         SetSymSegOfs( sym );

	mov	rcx, QWORD PTR sym$[rsp]
	call	SetSymSegOfs

; 1485 : 
; 1486 :         SymClearLocal();

	call	SymClearLocal

; 1487 : 
; 1488 : #if STACKBASESUPP
; 1489 :         /* v2.11: added. Note that fpo flag is only set if there ARE params! */
; 1490 :         ((struct dsym *)sym)->e.procinfo->basereg = ModuleInfo.basereg[ModuleInfo.Ofssize];

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:ModuleInfo+500
	mov	rdx, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rdx+96]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [rdx+86], ax

; 1491 : #endif
; 1492 :         /* CurrProc must be set, it's used inside SymFind() and SymLCreate()! */
; 1493 :         CurrProc = (struct dsym *)sym;

	mov	rax, QWORD PTR sym$[rsp]
	mov	QWORD PTR CurrProc, rax

; 1494 :         if( ParseProc( (struct dsym *)sym, i, tokenarray, TRUE, ModuleInfo.langtype ) == ERROR ) {

	mov	eax, DWORD PTR ModuleInfo+364
	mov	DWORD PTR [rsp+32], eax
	mov	r9b, 1
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR sym$[rsp]
	call	ParseProc
	cmp	eax, -1
	jne	SHORT $LN18@ProcDir

; 1495 :             CurrProc = NULL;

	mov	QWORD PTR CurrProc, 0

; 1496 :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@ProcDir
$LN18@ProcDir:

; 1497 :         }
; 1498 :         /* v2.04: added */
; 1499 :         if ( is_global && Options.masm8_proc_visibility )

	movzx	eax, BYTE PTR is_global$[rsp]
	test	eax, eax
	je	SHORT $LN19@ProcDir
	movzx	eax, BYTE PTR Options+145
	test	eax, eax
	je	SHORT $LN19@ProcDir

; 1500 :             sym->ispublic = TRUE;

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 128					; 00000080H
	mov	rcx, QWORD PTR sym$[rsp]
	mov	BYTE PTR [rcx+40], al
$LN19@ProcDir:

; 1501 : 
; 1502 :         /* if there was a PROTO (or EXTERNDEF name:PROTO ...),
; 1503 :          * change symbol to SYM_INTERNAL!
; 1504 :          */
; 1505 :         if ( sym->state == SYM_EXTERNAL && sym->isproc == TRUE ) {

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+32], 2
	jne	$LN20@ProcDir
	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN20@ProcDir

; 1506 :             sym_ext2int( sym );

	mov	rcx, QWORD PTR sym$[rsp]
	call	sym_ext2int

; 1507 :             /* v2.11: added ( may be better to call CreateProc() - currently not possible ) */
; 1508 :             if ( SymTables[TAB_PROC].head == NULL )

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN21@ProcDir

; 1509 :                 SymTables[TAB_PROC].head = (struct dsym *)sym;

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	mov	rdx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	jmp	SHORT $LN22@ProcDir
$LN21@ProcDir:

; 1510 :             else {
; 1511 :                 SymTables[TAB_PROC].tail->nextproc = (struct dsym *)sym;

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rax+112], rcx
$LN22@ProcDir:

; 1512 :             }
; 1513 :             SymTables[TAB_PROC].tail = (struct dsym *)sym;

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	mov	rdx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx
$LN20@ProcDir:

; 1514 :         }
; 1515 : 
; 1516 :         /* v2.11: sym->isproc is set inside ParseProc() */
; 1517 :         //sym->isproc = TRUE;
; 1518 : #if STACKBASESUPP
; 1519 :         /* v2.11: Note that fpo flag is only set if there ARE params ( or locals )! */
; 1520 :         if ( CurrProc->e.procinfo->paralist && GetRegNo( CurrProc->e.procinfo->basereg ) == 4 )

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN23@ProcDir
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, WORD PTR [rax+86]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	cmp	eax, 4
	jne	SHORT $LN23@ProcDir

; 1521 :             CurrProc->e.procinfo->fpo = TRUE;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 128					; 00000080H
	mov	rcx, QWORD PTR CurrProc
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al
$LN23@ProcDir:

; 1522 : #endif
; 1523 :         if( sym->ispublic == TRUE && oldpubstate == FALSE )

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN24@ProcDir
	movzx	eax, BYTE PTR oldpubstate$[rsp]
	test	eax, eax
	jne	SHORT $LN24@ProcDir

; 1524 :             AddPublicData( sym );

	mov	rcx, QWORD PTR sym$[rsp]
	call	AddPublicData
$LN24@ProcDir:

; 1525 : 
; 1526 :         /* v2.04: add the proc to the list of labels attached to curr segment.
; 1527 :          * this allows to reduce the number of passes (see fixup.c)
; 1528 :          */
; 1529 :         ((struct dsym *)sym)->next = (struct dsym *)CurrSeg->e.seginfo->label_list;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR [rcx+104], rax

; 1530 :         CurrSeg->e.seginfo->label_list = sym;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rax+32], rcx

; 1531 : 
; 1532 :     } else {

	jmp	$LN9@ProcDir
$LN8@ProcDir:

; 1533 :         /**/myassert( sym != NULL );

	cmp	QWORD PTR sym$[rsp], 0
	je	SHORT $LN34@ProcDir
	mov	DWORD PTR tv260[rsp], 0
	jmp	SHORT $LN35@ProcDir
$LN34@ProcDir:
	mov	edx, 1533				; 000005fdH
	lea	rcx, OFFSET FLAT:$SG11906
	call	InternalError
	mov	DWORD PTR tv260[rsp], eax
$LN35@ProcDir:

; 1534 : 
; 1535 :         procidx++;

	mov	eax, DWORD PTR procidx
	inc	eax
	mov	DWORD PTR procidx, eax

; 1536 :         sym->isdefined = TRUE;

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 2
	mov	rcx, QWORD PTR sym$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1537 : 
; 1538 :         SymSetLocal( sym );

	mov	rcx, QWORD PTR sym$[rsp]
	call	SymSetLocal

; 1539 : 
; 1540 :         /* it's necessary to check for a phase error here
; 1541 :          as it is done in LabelCreate() and data_dir()!
; 1542 :          */
; 1543 :         ofs = GetCurrOffset();

	call	GetCurrOffset
	mov	DWORD PTR ofs$[rsp], eax

; 1544 : 
; 1545 :         if ( ofs != sym->offset) {

	mov	rax, QWORD PTR sym$[rsp]
	mov	eax, DWORD PTR [rax+16]
	cmp	DWORD PTR ofs$[rsp], eax
	je	SHORT $LN25@ProcDir

; 1546 :             DebugMsg(("ProcDir(%s): %spass %u, old ofs=%" I32_SPEC "X, new ofs=%" I32_SPEC "X\n",

	movzx	eax, BYTE PTR ModuleInfo+422
	test	eax, eax
	je	SHORT $LN36@ProcDir
	lea	rax, OFFSET FLAT:$SG11908
	mov	QWORD PTR tv276[rsp], rax
	jmp	SHORT $LN37@ProcDir
$LN36@ProcDir:
	lea	rax, OFFSET FLAT:$SG11909
	mov	QWORD PTR tv276[rsp], rax
$LN37@ProcDir:
	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	ecx, DWORD PTR ofs$[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, QWORD PTR sym$[rsp]
	mov	ecx, DWORD PTR [rcx+16]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, eax
	mov	r8, QWORD PTR tv276[rsp]
	mov	rax, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11910
	call	DoDebugMsg

; 1547 :                     sym->name,
; 1548 :                     ModuleInfo.PhaseError ? "" : "phase error ",
; 1549 :                     Parse_Pass+1, sym->offset, ofs ));
; 1550 :             sym->offset = ofs;

	mov	rax, QWORD PTR sym$[rsp]
	mov	ecx, DWORD PTR ofs$[rsp]
	mov	DWORD PTR [rax+16], ecx

; 1551 :             ModuleInfo.PhaseError = TRUE;

	mov	BYTE PTR ModuleInfo+422, 1
$LN25@ProcDir:

; 1552 :         }
; 1553 :         CurrProc = (struct dsym *)sym;

	mov	rax, QWORD PTR sym$[rsp]
	mov	QWORD PTR CurrProc, rax

; 1554 : #if AMD64_SUPPORT
; 1555 :         /* check if the exception handler set by FRAME is defined */
; 1556 :         if ( CurrProc->e.procinfo->isframe &&
; 1557 :             CurrProc->e.procinfo->exc_handler &&

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN26@ProcDir
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN26@ProcDir
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN26@ProcDir

; 1558 :             CurrProc->e.procinfo->exc_handler->state == SYM_UNDEFINED ) {
; 1559 :             EmitErr( SYMBOL_NOT_DEFINED, CurrProc->e.procinfo->exc_handler->name );

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+48]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 102				; 00000066H
	call	EmitErr
$LN26@ProcDir:
$LN9@ProcDir:

; 1560 :         }
; 1561 : #endif
; 1562 :     }
; 1563 : 
; 1564 :     /* v2.11: init @ProcStatus - prologue not written yet, optionally set FPO flag */
; 1565 : #if STACKBASESUPP
; 1566 :     ProcStatus = PRST_PROLOGUE_NOT_DONE | ( CurrProc->e.procinfo->fpo ? PRST_FPO : 0 );

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN38@ProcDir
	mov	DWORD PTR tv306[rsp], 4
	jmp	SHORT $LN39@ProcDir
$LN38@ProcDir:
	mov	DWORD PTR tv306[rsp], 0
$LN39@ProcDir:
	mov	eax, DWORD PTR tv306[rsp]
	bts	eax, 7
	mov	DWORD PTR ProcStatus, eax

; 1567 :     StackAdj = 0;  /* init @StackBase to 0 */

	mov	DWORD PTR StackAdj, 0

; 1568 :     StackAdjHigh = 0;

	mov	DWORD PTR StackAdjHigh, 0

; 1569 : #else
; 1570 :     ProcStatus = PRST_PROLOGUE_NOT_DONE;
; 1571 : #endif
; 1572 : 
; 1573 : #if AMD64_SUPPORT
; 1574 :     if ( CurrProc->e.procinfo->isframe ) {

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	shr	al, 6
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN27@ProcDir

; 1575 :         endprolog_found = FALSE;

	mov	BYTE PTR endprolog_found, 0

; 1576 :         /* v2.11: clear all fields */
; 1577 :         memset( &unw_info, 0, sizeof( unw_info ) );

	mov	r8d, 4
	xor	edx, edx
	lea	rcx, OFFSET FLAT:unw_info
	call	memset

; 1578 :         if ( CurrProc->e.procinfo->exc_handler )

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN28@ProcDir

; 1579 :             unw_info.Flags = UNW_FLAG_FHANDLER;

	movzx	eax, BYTE PTR unw_info
	and	al, 7
	or	al, 24
	mov	BYTE PTR unw_info, al
$LN28@ProcDir:
$LN27@ProcDir:

; 1580 :     }
; 1581 : #endif
; 1582 : 
; 1583 :     sym->asmpass = Parse_Pass;

	mov	rax, QWORD PTR sym$[rsp]
	movzx	ecx, BYTE PTR Parse_Pass
	mov	BYTE PTR [rax+46], cl

; 1584 :     if ( ModuleInfo.list )

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 11
	and	eax, 1
	test	eax, eax
	je	SHORT $LN29@ProcDir

; 1585 :         LstWrite( LSTTYPE_LABEL, 0, NULL );

	xor	r8d, r8d
	xor	edx, edx
	mov	ecx, 7
	call	LstWrite
$LN29@ProcDir:

; 1586 : 
; 1587 :     if( Options.line_numbers ) {

	movzx	eax, BYTE PTR Options+1
	test	eax, eax
	je	SHORT $LN30@ProcDir

; 1588 : #if COFF_SUPPORT
; 1589 :         AddLinnumDataRef( get_curr_srcfile(), Options.output_format == OFORMAT_COFF ? 0 : GetLineNumber() );

	cmp	DWORD PTR Options+160, 2
	jne	SHORT $LN40@ProcDir
	mov	DWORD PTR tv365[rsp], 0
	jmp	SHORT $LN41@ProcDir
$LN40@ProcDir:
	call	GetLineNumber
	mov	DWORD PTR tv365[rsp], eax
$LN41@ProcDir:
	call	get_curr_srcfile
	mov	edx, DWORD PTR tv365[rsp]
	mov	ecx, eax
	call	AddLinnumDataRef
$LN30@ProcDir:

; 1590 : #else
; 1591 :         AddLinnumDataRef( get_curr_srcfile(), GetLineNumber() );
; 1592 : #endif
; 1593 :     }
; 1594 : 
; 1595 :     BackPatch( sym );

	mov	rcx, QWORD PTR sym$[rsp]
	call	BackPatch

; 1596 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@ProcDir:

; 1597 : }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
ProcDir	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
name$ = 128
sym$ = 136
cntParam$ = 144
offset$ = 148
fcint$ = 164
ti$ = 200
is_vararg$ = 244
init_done$ = 245
paranode$ = 248
paracurr$ = 256
curr$ = 264
to$5 = 272
tn$6 = 280
oo$7 = 288
on$8 = 289
l$9 = 296
tv671 = 304
tv171 = 308
tv188 = 312
tv239 = 320
tv250 = 328
tv256 = 332
tv299 = 336
tv311 = 344
tv310 = 352
tv317 = 360
tv596 = 368
tv448 = 376
tv795 = 380
tv458 = 384
tv800 = 388
tv466 = 392
tv531 = 396
proc$ = 432
i$ = 440
tokenarray$ = 448
IsPROC$ = 456
ParseParams PROC

; 632  : {

	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rbx
	push	rdi
	sub	rsp, 408				; 00000198H
	mov	rdi, rsp
	mov	ecx, 102				; 00000066H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+432]

; 633  :     char            *name;
; 634  :     struct asym     *sym;
; 635  :     int             cntParam;
; 636  :     int             offset;
; 637  :     //int             size;
; 638  :     int             fcint = 0;

	mov	DWORD PTR fcint$[rsp], 0

; 639  :     struct qualified_type ti;
; 640  :     bool            is_vararg;
; 641  :     bool            init_done;
; 642  :     struct dsym     *paranode;
; 643  :     struct dsym     *paracurr;
; 644  :     int             curr;
; 645  : 
; 646  :     /*
; 647  :      * find "first" parameter ( that is, the first to be pushed in INVOKE ).
; 648  :      */
; 649  :     if (proc->sym.langtype == LANG_C ||
; 650  :         proc->sym.langtype == LANG_SYSCALL ||
; 651  : #if AMD64_SUPPORT
; 652  :         ( proc->sym.langtype == LANG_FASTCALL && ModuleInfo.Ofssize != USE64 ) ||

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 1
	je	SHORT $LN37@ParseParam
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 2
	je	SHORT $LN37@ParseParam
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN38@ParseParam
	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	jne	SHORT $LN37@ParseParam
$LN38@ParseParam:
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 3
	jne	SHORT $LN35@ParseParam
$LN37@ParseParam:

; 653  : #else
; 654  :         proc->sym.langtype == LANG_FASTCALL ||
; 655  : #endif
; 656  :         proc->sym.langtype == LANG_STDCALL)
; 657  :         for ( paracurr = proc->e.procinfo->paralist; paracurr && paracurr->nextparam; paracurr = paracurr->nextparam );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR paracurr$[rsp], rax
	jmp	SHORT $LN4@ParseParam
$LN2@ParseParam:
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR paracurr$[rsp], rax
$LN4@ParseParam:
	cmp	QWORD PTR paracurr$[rsp], 0
	je	SHORT $LN3@ParseParam
	mov	rax, QWORD PTR paracurr$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN3@ParseParam
	jmp	SHORT $LN2@ParseParam
$LN3@ParseParam:
	jmp	SHORT $LN36@ParseParam
$LN35@ParseParam:

; 658  :     else
; 659  :         paracurr = proc->e.procinfo->paralist;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR paracurr$[rsp], rax
$LN36@ParseParam:

; 660  : 
; 661  :     /* v2.11: proc_info.init_done has been removed, sym.isproc flag is used instead */
; 662  :     init_done = proc->sym.isproc;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	mov	BYTE PTR init_done$[rsp], al

; 663  : 
; 664  :     for( cntParam = 0 ; tokenarray[i].token != T_FINAL ; cntParam++ ) {

	mov	DWORD PTR cntParam$[rsp], 0
	jmp	SHORT $LN7@ParseParam
$LN5@ParseParam:
	mov	eax, DWORD PTR cntParam$[rsp]
	inc	eax
	mov	DWORD PTR cntParam$[rsp], eax
$LN7@ParseParam:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN6@ParseParam

; 665  : 
; 666  :         if ( tokenarray[i].token == T_ID ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	SHORT $LN39@ParseParam

; 667  :             name = tokenarray[i++].string_ptr;

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR name$[rsp], rax
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN40@ParseParam
$LN39@ParseParam:

; 668  :         } else if ( IsPROC == FALSE && tokenarray[i].token == T_COLON ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	jne	SHORT $LN41@ParseParam
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN41@ParseParam

; 669  :             if ( paracurr )

	cmp	QWORD PTR paracurr$[rsp], 0
	je	SHORT $LN43@ParseParam

; 670  :                 name = paracurr->sym.name;

	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR name$[rsp], rax
	jmp	SHORT $LN44@ParseParam
$LN43@ParseParam:

; 671  :             else
; 672  :                 name = "";

	lea	rax, OFFSET FLAT:$SG11605
	mov	QWORD PTR name$[rsp], rax
$LN44@ParseParam:

; 673  :         } else {

	jmp	SHORT $LN42@ParseParam
$LN41@ParseParam:

; 674  :             /* PROC needs a parameter name, PROTO accepts <void> also */
; 675  :             DebugMsg(("ParseParams: name missing/invalid for parameter %u, i=%u\n", cntParam+1, i));

	mov	eax, DWORD PTR cntParam$[rsp]
	inc	eax
	mov	r8d, DWORD PTR i$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11606
	call	DoDebugMsg

; 676  :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ParseParam
$LN42@ParseParam:
$LN40@ParseParam:

; 677  :         }
; 678  : 
; 679  :         ti.symtype = NULL;

	mov	QWORD PTR ti$[rsp+8], 0

; 680  :         ti.is_ptr = 0;

	mov	BYTE PTR ti$[rsp+20], 0

; 681  :         ti.ptr_memtype = MT_EMPTY;

	mov	DWORD PTR ti$[rsp+24], 192		; 000000c0H

; 682  :         /* v2.02: init is_far depending on memory model */
; 683  :         //ti.is_far = FALSE;
; 684  :         if ( SIZE_DATAPTR & ( 1 << ModuleInfo.model ) )

	mov	eax, DWORD PTR ModuleInfo+360
	mov	ecx, 1
	mov	DWORD PTR tv671[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv671[rsp]
	shl	eax, cl
	and	eax, 104				; 00000068H
	test	eax, eax
	je	SHORT $LN45@ParseParam

; 685  :             ti.is_far = TRUE;

	mov	BYTE PTR ti$[rsp+21], 1
	jmp	SHORT $LN46@ParseParam
$LN45@ParseParam:

; 686  :         else
; 687  :             ti.is_far = FALSE;

	mov	BYTE PTR ti$[rsp+21], 0
$LN46@ParseParam:

; 688  :         ti.Ofssize = ModuleInfo.Ofssize;

	movzx	eax, BYTE PTR ModuleInfo+404
	mov	BYTE PTR ti$[rsp+22], al

; 689  :         ti.size = CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR ti$[rsp], eax

; 690  : 
; 691  :         is_vararg = FALSE;

	mov	BYTE PTR is_vararg$[rsp], 0

; 692  : 
; 693  :         /* read colon. It's optional for PROC.
; 694  :          * Masm also allows a missing colon for PROTO - if there's
; 695  :          * just one parameter. Probably a Masm bug.
; 696  :          * HJWasm always require a colon for PROTO.
; 697  :          */
; 698  :         if( tokenarray[i].token != T_COLON ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN47@ParseParam

; 699  :             if ( IsPROC == FALSE ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	jne	SHORT $LN49@ParseParam

; 700  :                 return( EmitError( COLON_EXPECTED ) );

	mov	ecx, 84					; 00000054H
	call	EmitError
	jmp	$LN1@ParseParam
$LN49@ParseParam:

; 701  :             }
; 702  :             switch ( ti.Ofssize ) {

	movzx	eax, BYTE PTR ti$[rsp+22]
	mov	BYTE PTR tv171[rsp], al
	cmp	BYTE PTR tv171[rsp], 0
	je	SHORT $LN50@ParseParam
	jmp	SHORT $LN51@ParseParam
$LN50@ParseParam:

; 703  :             case USE16:
; 704  :                 ti.mem_type = MT_WORD; break;

	mov	DWORD PTR ti$[rsp+16], 1
	jmp	SHORT $LN8@ParseParam
$LN51@ParseParam:

; 705  : #if AMD64_SUPPORT
; 706  :                 /* v2.08: default size for arguments is DWORD in 64-bit ( Win64 ) */
; 707  :                 //case USE64: ti.mem_type = MT_QWORD; break;
; 708  : #endif
; 709  :             default:
; 710  :                 ti.mem_type = MT_DWORD; break;

	mov	DWORD PTR ti$[rsp+16], 3
$LN8@ParseParam:

; 711  :             }
; 712  :         } else {

	jmp	$LN48@ParseParam
$LN47@ParseParam:

; 713  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 714  :             if (( tokenarray[i].token == T_RES_ID ) && ( tokenarray[i].tokval == T_VARARG )) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 7
	jne	$LN52@ParseParam
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 262		; 00000106H
	jne	$LN52@ParseParam

; 715  :                 switch( proc->sym.langtype ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR tv188[rsp], eax
	cmp	DWORD PTR tv188[rsp], 0
	je	SHORT $LN54@ParseParam
	cmp	DWORD PTR tv188[rsp], 2
	jle	SHORT $LN10@ParseParam
	cmp	DWORD PTR tv188[rsp], 6
	jle	SHORT $LN54@ParseParam
	jmp	SHORT $LN10@ParseParam
$LN54@ParseParam:

; 716  :                 case LANG_NONE:
; 717  :                 case LANG_BASIC:
; 718  :                 case LANG_FORTRAN:
; 719  :                 case LANG_PASCAL:
; 720  :                 case LANG_STDCALL:
; 721  :                     return( EmitError( VARARG_REQUIRES_C_CALLING_CONVENTION ) );

	mov	ecx, 94					; 0000005eH
	call	EmitError
	jmp	$LN1@ParseParam
$LN10@ParseParam:

; 722  :                 }
; 723  :                 /* v2.05: added check */
; 724  :                 if ( tokenarray[i+1].token != T_FINAL )

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN55@ParseParam

; 725  :                     EmitError( VARARG_PARAMETER_MUST_BE_LAST );

	mov	ecx, 147				; 00000093H
	call	EmitError
	jmp	SHORT $LN56@ParseParam
$LN55@ParseParam:

; 726  :                 else
; 727  :                     is_vararg = TRUE;

	mov	BYTE PTR is_vararg$[rsp], 1
$LN56@ParseParam:

; 728  :                 ti.mem_type = MT_EMPTY;

	mov	DWORD PTR ti$[rsp+16], 192		; 000000c0H

; 729  :                 ti.size = 0;

	mov	DWORD PTR ti$[rsp], 0

; 730  :                 i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 731  :             } else {

	jmp	SHORT $LN53@ParseParam
$LN52@ParseParam:

; 732  :                 if ( GetQualifiedType( &i, tokenarray, &ti ) == ERROR )

	lea	r8, QWORD PTR ti$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	GetQualifiedType
	cmp	eax, -1
	jne	SHORT $LN57@ParseParam

; 733  :                     return( ERROR );

	mov	eax, -1
	jmp	$LN1@ParseParam
$LN57@ParseParam:
$LN53@ParseParam:
$LN48@ParseParam:

; 734  :             }
; 735  :         }
; 736  : 
; 737  :         /* check if parameter name is defined already */
; 738  :         if (( IsPROC ) && ( sym = SymSearch( name ) ) && sym->state != SYM_UNDEFINED ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	$LN58@ParseParam
	mov	rcx, QWORD PTR name$[rsp]
	call	SymFind
	mov	QWORD PTR sym$[rsp], rax
	cmp	QWORD PTR sym$[rsp], 0
	je	SHORT $LN58@ParseParam
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN58@ParseParam

; 739  :             DebugMsg(("ParseParams: %s defined already, state=%u, local=%u\n", sym->name, sym->state, sym->scoped ));

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 2
	and	al, 1
	movzx	eax, al
	mov	r9d, eax
	mov	rax, QWORD PTR sym$[rsp]
	mov	r8d, DWORD PTR [rax+32]
	mov	rax, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11621
	call	DoDebugMsg

; 740  :             return( EmitErr( SYMBOL_REDEFINITION, name ) );

	mov	rdx, QWORD PTR name$[rsp]
	mov	ecx, 143				; 0000008fH
	call	EmitErr
	jmp	$LN1@ParseParam
$LN58@ParseParam:

; 741  :         }
; 742  : 
; 743  :         /* redefinition? */
; 744  :         if ( paracurr ) {

	cmp	QWORD PTR paracurr$[rsp], 0
	je	$LN59@ParseParam

; 745  : #if 0 /* was active till v2.04 */
; 746  :             int newsize = ti.size;
; 747  :             int oldsize;
; 748  : 
; 749  :             /* check size only (so UINT <-> DWORD wont cause an error) */
; 750  :             if ( paracurr->sym.type )
; 751  :                 oldsize = paracurr->sym.total_size;
; 752  :             else if ( paracurr->sym.mem_type == MT_EMPTY )
; 753  :                 oldsize = 0;
; 754  :             else if ( paracurr->sym.mem_type == MT_PTR )
; 755  :                 oldsize = SizeFromMemtype( paracurr->sym.isfar ? MT_FAR : MT_NEAR, paracurr->sym.Ofssize, NULL );
; 756  :             else
; 757  :                 oldsize = SizeFromMemtype( paracurr->sym.mem_type, paracurr->sym.Ofssize, paracurr->sym.type );
; 758  :             if ( oldsize != newsize ) {
; 759  :                 DebugMsg(("ParseParams: old memtype=%u, new memtype=%u\n", paracurr->sym.mem_type, ti.mem_type));
; 760  :                 EmitErr( CONFLICTING_PARAMETER_DEFINITION, name );
; 761  :                 //return( ERROR );
; 762  :             }
; 763  :             /* the parameter type used in PROC has highest priority! */
; 764  :             if ( IsPROC ) {
; 765  :                 if ( ti.symtype ) {
; 766  :                     paracurr->sym.type = ti.symtype;
; 767  :                     paracurr->sym.mem_type = MT_TYPE;
; 768  :                 } else
; 769  :                     paracurr->sym.mem_type = ti.mem_type;
; 770  :             }
; 771  : #else
; 772  :             struct asym *to;
; 773  :             struct asym *tn;
; 774  :             char oo;
; 775  :             char on;
; 776  :             for( tn = ti.symtype; tn && tn->type; tn = tn->type );

	mov	rax, QWORD PTR ti$[rsp+8]
	mov	QWORD PTR tn$6[rsp], rax
	jmp	SHORT $LN14@ParseParam
$LN12@ParseParam:
	mov	rax, QWORD PTR tn$6[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tn$6[rsp], rax
$LN14@ParseParam:
	cmp	QWORD PTR tn$6[rsp], 0
	je	SHORT $LN13@ParseParam
	mov	rax, QWORD PTR tn$6[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN13@ParseParam
	jmp	SHORT $LN12@ParseParam
$LN13@ParseParam:

; 777  :             /* v2.12: don't assume pointer type if mem_type is != MT_TYPE!
; 778  :              * regression test proc9.asm.
; 779  :              */
; 780  :             //to = ( paracurr->sym.mem_type == MT_TYPE ) ? paracurr->sym.type : paracurr->sym.target_type;
; 781  :             if ( paracurr->sym.mem_type == MT_TYPE )

	mov	rax, QWORD PTR paracurr$[rsp]
	cmp	DWORD PTR [rax+36], 196			; 000000c4H
	jne	SHORT $LN61@ParseParam

; 782  :                 to = paracurr->sym.type;

	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR to$5[rsp], rax
	jmp	SHORT $LN62@ParseParam
$LN61@ParseParam:

; 783  :             else
; 784  :                 to = ( paracurr->sym.mem_type == MT_PTR ? paracurr->sym.target_type : NULL );

	mov	rax, QWORD PTR paracurr$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN103@ParseParam
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv239[rsp], rax
	jmp	SHORT $LN104@ParseParam
$LN103@ParseParam:
	mov	QWORD PTR tv239[rsp], 0
$LN104@ParseParam:
	mov	rax, QWORD PTR tv239[rsp]
	mov	QWORD PTR to$5[rsp], rax
$LN62@ParseParam:

; 785  :             for( ; to && to->type; to = to->type );

	jmp	SHORT $LN17@ParseParam
$LN15@ParseParam:
	mov	rax, QWORD PTR to$5[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR to$5[rsp], rax
$LN17@ParseParam:
	cmp	QWORD PTR to$5[rsp], 0
	je	SHORT $LN16@ParseParam
	mov	rax, QWORD PTR to$5[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN16@ParseParam
	jmp	SHORT $LN15@ParseParam
$LN16@ParseParam:

; 786  :             oo = ( paracurr->sym.Ofssize != USE_EMPTY ) ? paracurr->sym.Ofssize : ModuleInfo.Ofssize;

	mov	rax, QWORD PTR paracurr$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	cmp	eax, 254				; 000000feH
	je	SHORT $LN105@ParseParam
	mov	rax, QWORD PTR paracurr$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	mov	DWORD PTR tv250[rsp], eax
	jmp	SHORT $LN106@ParseParam
$LN105@ParseParam:
	movzx	eax, BYTE PTR ModuleInfo+404
	mov	DWORD PTR tv250[rsp], eax
$LN106@ParseParam:
	movzx	eax, BYTE PTR tv250[rsp]
	mov	BYTE PTR oo$7[rsp], al

; 787  :             on = ( ti.Ofssize != USE_EMPTY ) ? ti.Ofssize : ModuleInfo.Ofssize;

	movzx	eax, BYTE PTR ti$[rsp+22]
	cmp	eax, 254				; 000000feH
	je	SHORT $LN107@ParseParam
	movzx	eax, BYTE PTR ti$[rsp+22]
	mov	DWORD PTR tv256[rsp], eax
	jmp	SHORT $LN108@ParseParam
$LN107@ParseParam:
	movzx	eax, BYTE PTR ModuleInfo+404
	mov	DWORD PTR tv256[rsp], eax
$LN108@ParseParam:
	movzx	eax, BYTE PTR tv256[rsp]
	mov	BYTE PTR on$8[rsp], al

; 788  :             if ( ti.mem_type != paracurr->sym.mem_type ||
; 789  :                 ( ti.mem_type == MT_TYPE && tn != to ) ||

	mov	rax, QWORD PTR paracurr$[rsp]
	mov	eax, DWORD PTR [rax+36]
	cmp	DWORD PTR ti$[rsp+16], eax
	jne	$LN64@ParseParam
	cmp	DWORD PTR ti$[rsp+16], 196		; 000000c4H
	jne	SHORT $LN65@ParseParam
	mov	rax, QWORD PTR to$5[rsp]
	cmp	QWORD PTR tn$6[rsp], rax
	jne	SHORT $LN64@ParseParam
$LN65@ParseParam:
	cmp	DWORD PTR ti$[rsp+16], 195		; 000000c3H
	jne	$LN63@ParseParam
	movzx	eax, BYTE PTR ti$[rsp+21]
	mov	rcx, QWORD PTR paracurr$[rsp]
	movzx	ecx, BYTE PTR [rcx+47]
	shr	cl, 4
	and	cl, 1
	movzx	ecx, cl
	cmp	eax, ecx
	jne	SHORT $LN66@ParseParam
	movsx	eax, BYTE PTR on$8[rsp]
	movsx	ecx, BYTE PTR oo$7[rsp]
	cmp	eax, ecx
	jne	SHORT $LN66@ParseParam
	mov	rax, QWORD PTR paracurr$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	cmp	DWORD PTR ti$[rsp+24], eax
	jne	SHORT $LN66@ParseParam
	mov	rax, QWORD PTR to$5[rsp]
	cmp	QWORD PTR tn$6[rsp], rax
	je	$LN63@ParseParam
$LN66@ParseParam:
$LN64@ParseParam:

; 790  :                 ( ti.mem_type == MT_PTR &&
; 791  :                  ( ti.is_far != paracurr->sym.isfar ||
; 792  :                   on != oo ||
; 793  :                   ti.ptr_memtype != paracurr->sym.ptr_memtype ||
; 794  :                   tn != to ))) {
; 795  :                 DebugMsg(("ParseParams: old-new memtype=%X-%X type=%X(%s)-%X(%s) far=%u-%u ind=%u-%u ofss=%d-%d pmt=%X-%X\n",

	cmp	QWORD PTR ti$[rsp+8], 0
	je	SHORT $LN109@ParseParam
	mov	rax, QWORD PTR ti$[rsp+8]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv299[rsp], rax
	jmp	SHORT $LN110@ParseParam
$LN109@ParseParam:
	lea	rax, OFFSET FLAT:$SG11630
	mov	QWORD PTR tv299[rsp], rax
$LN110@ParseParam:
	mov	rax, QWORD PTR paracurr$[rsp]
	cmp	DWORD PTR [rax+36], 196			; 000000c4H
	jne	SHORT $LN113@ParseParam
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv311[rsp], rax
	jmp	SHORT $LN114@ParseParam
$LN113@ParseParam:
	mov	rax, QWORD PTR paracurr$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN111@ParseParam
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv310[rsp], rax
	jmp	SHORT $LN112@ParseParam
$LN111@ParseParam:
	lea	rax, OFFSET FLAT:$SG11631
	mov	QWORD PTR tv310[rsp], rax
$LN112@ParseParam:
	mov	rax, QWORD PTR tv310[rsp]
	mov	QWORD PTR tv311[rsp], rax
$LN114@ParseParam:
	mov	rax, QWORD PTR paracurr$[rsp]
	cmp	DWORD PTR [rax+36], 196			; 000000c4H
	jne	SHORT $LN115@ParseParam
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR tv317[rsp], rax
	jmp	SHORT $LN116@ParseParam
$LN115@ParseParam:
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR tv317[rsp], rax
$LN116@ParseParam:
	mov	rax, QWORD PTR paracurr$[rsp]
	movzx	eax, BYTE PTR [rax+46]
	movzx	ecx, BYTE PTR ti$[rsp+22]
	mov	rdx, QWORD PTR paracurr$[rsp]
	movzx	edx, BYTE PTR [rdx+44]
	movzx	r8d, BYTE PTR ti$[rsp+20]
	mov	r9, QWORD PTR paracurr$[rsp]
	movzx	r9d, BYTE PTR [r9+45]
	movzx	r10d, BYTE PTR ti$[rsp+21]
	mov	r11, QWORD PTR paracurr$[rsp]
	movzx	r11d, BYTE PTR [r11+47]
	shr	r11b, 4
	and	r11b, 1
	movzx	r11d, r11b
	mov	ebx, DWORD PTR ti$[rsp+24]
	mov	DWORD PTR [rsp+112], ebx
	mov	DWORD PTR [rsp+104], eax
	mov	DWORD PTR [rsp+96], ecx
	mov	DWORD PTR [rsp+88], edx
	mov	DWORD PTR [rsp+80], r8d
	mov	DWORD PTR [rsp+72], r9d
	mov	DWORD PTR [rsp+64], r10d
	mov	DWORD PTR [rsp+56], r11d
	mov	rax, QWORD PTR tv299[rsp]
	mov	QWORD PTR [rsp+48], rax
	mov	rax, QWORD PTR ti$[rsp+8]
	mov	QWORD PTR [rsp+40], rax
	mov	rax, QWORD PTR tv311[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv317[rsp]
	mov	r8d, DWORD PTR ti$[rsp+16]
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	edx, DWORD PTR [rax+36]
	lea	rcx, OFFSET FLAT:$SG11632
	call	DoDebugMsg

; 796  :                           paracurr->sym.mem_type, ti.mem_type, 
; 797  :                           (paracurr->sym.mem_type == MT_TYPE) ? paracurr->sym.type : paracurr->sym.target_type,
; 798  :                           (paracurr->sym.mem_type == MT_TYPE) ? paracurr->sym.type->name : paracurr->sym.target_type ? paracurr->sym.target_type->name : "",
; 799  :                           ti.symtype, ti.symtype ? ti.symtype->name : "",
; 800  :                           paracurr->sym.isfar, ti.is_far,
; 801  :                           paracurr->sym.is_ptr, ti.is_ptr,
; 802  :                           paracurr->sym.Ofssize, ti.Ofssize,
; 803  :                           paracurr->sym.ptr_memtype, ti.ptr_memtype ));
; 804  :                 EmitErr( CONFLICTING_PARAMETER_DEFINITION, name );

	mov	rdx, QWORD PTR name$[rsp]
	mov	ecx, 137				; 00000089H
	call	EmitErr
$LN63@ParseParam:

; 805  :                 //return( ERROR );
; 806  :             }
; 807  : #endif
; 808  :             if ( IsPROC ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN67@ParseParam

; 809  :                 DebugMsg1(("ParseParams: calling SymAddLocal(%s, %s)\n", paracurr->sym.name, name ));

	mov	r8, QWORD PTR name$[rsp]
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11634
	call	DoDebugMsg1

; 810  :                 /* it has been checked already that the name isn't found - SymAddLocal() shouldn't fail */
; 811  :                 SymAddLocal( &paracurr->sym, name );

	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, rax
	call	SymAddLocal
$LN67@ParseParam:

; 812  :             }
; 813  :             /* set paracurr to next parameter */
; 814  :             if ( proc->sym.langtype == LANG_C ||
; 815  :                 proc->sym.langtype == LANG_SYSCALL ||
; 816  : #if AMD64_SUPPORT
; 817  :                 ( proc->sym.langtype == LANG_FASTCALL && ti.Ofssize != USE64 ) ||

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 1
	je	SHORT $LN70@ParseParam
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 2
	je	SHORT $LN70@ParseParam
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN71@ParseParam
	movzx	eax, BYTE PTR ti$[rsp+22]
	cmp	eax, 2
	jne	SHORT $LN70@ParseParam
$LN71@ParseParam:
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 3
	jne	SHORT $LN68@ParseParam
$LN70@ParseParam:

; 818  : #else
; 819  :                 proc->sym.langtype == LANG_FASTCALL ||
; 820  : #endif
; 821  :                 proc->sym.langtype == LANG_STDCALL) {
; 822  :                 struct dsym *l;
; 823  :                 for (l = proc->e.procinfo->paralist;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR l$9[rsp], rax
	jmp	SHORT $LN20@ParseParam
$LN18@ParseParam:

; 825  :                      l = l->nextparam );

	mov	rax, QWORD PTR l$9[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR l$9[rsp], rax
$LN20@ParseParam:

; 824  :                      l && ( l->nextparam != paracurr );

	cmp	QWORD PTR l$9[rsp], 0
	je	SHORT $LN19@ParseParam
	mov	rax, QWORD PTR l$9[rsp]
	mov	rcx, QWORD PTR paracurr$[rsp]
	cmp	QWORD PTR [rax+112], rcx
	je	SHORT $LN19@ParseParam

; 825  :                      l = l->nextparam );

	jmp	SHORT $LN18@ParseParam
$LN19@ParseParam:

; 826  :                 paracurr = l;

	mov	rax, QWORD PTR l$9[rsp]
	mov	QWORD PTR paracurr$[rsp], rax

; 827  :             } else

	jmp	SHORT $LN69@ParseParam
$LN68@ParseParam:

; 828  :                 paracurr = paracurr->nextparam;

	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR paracurr$[rsp], rax
$LN69@ParseParam:

; 829  : 
; 830  :         //} else if ( proc->e.procinfo->init_done == TRUE ) {
; 831  :         } else if ( init_done == TRUE ) {

	jmp	$LN60@ParseParam
$LN59@ParseParam:
	movzx	eax, BYTE PTR init_done$[rsp]
	cmp	eax, 1
	jne	SHORT $LN72@ParseParam

; 832  :             /* second definition has more parameters than first */
; 833  :             DebugMsg(("ParseParams: different param count\n"));

	lea	rcx, OFFSET FLAT:$SG11641
	call	DoDebugMsg

; 834  :             return( EmitErr( CONFLICTING_PARAMETER_DEFINITION, "" ) );

	lea	rdx, OFFSET FLAT:$SG11642
	mov	ecx, 137				; 00000089H
	call	EmitErr
	jmp	$LN1@ParseParam

; 835  :         } else {

	jmp	$LN73@ParseParam
$LN72@ParseParam:

; 836  :             if ( IsPROC ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN74@ParseParam

; 837  :                 paranode = (struct dsym *)SymLCreate( name );

	mov	rcx, QWORD PTR name$[rsp]
	call	SymLCreate
	mov	QWORD PTR paranode$[rsp], rax

; 838  :             } else

	jmp	SHORT $LN75@ParseParam
$LN74@ParseParam:

; 839  :                 paranode = (struct dsym *)SymAlloc( "" );/* for PROTO, no param name needed */

	lea	rcx, OFFSET FLAT:$SG11645
	call	SymAlloc
	mov	QWORD PTR paranode$[rsp], rax
$LN75@ParseParam:

; 840  : 
; 841  :             if( paranode == NULL ) { /* error msg has been displayed already */

	cmp	QWORD PTR paranode$[rsp], 0
	jne	SHORT $LN76@ParseParam

; 842  :                 DebugMsg(("ParseParams: SymLCreate(%s) failed\n", name ));

	mov	rdx, QWORD PTR name$[rsp]
	lea	rcx, OFFSET FLAT:$SG11647
	call	DoDebugMsg

; 843  :                 return( ERROR );

	mov	eax, -1
	jmp	$LN1@ParseParam
$LN76@ParseParam:

; 844  :             }
; 845  :             paranode->sym.isdefined = TRUE;

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 2
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	BYTE PTR [rcx+40], al

; 846  :             paranode->sym.mem_type = ti.mem_type;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR ti$[rsp+16]
	mov	DWORD PTR [rax+36], ecx

; 847  :             if ( ti.mem_type == MT_TYPE ) {

	cmp	DWORD PTR ti$[rsp+16], 196		; 000000c4H
	jne	SHORT $LN77@ParseParam

; 848  :                 paranode->sym.type = ti.symtype;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	rcx, QWORD PTR ti$[rsp+8]
	mov	QWORD PTR [rax+80], rcx

; 849  :             } else {

	jmp	SHORT $LN78@ParseParam
$LN77@ParseParam:

; 850  :                 paranode->sym.target_type = ti.symtype;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	rcx, QWORD PTR ti$[rsp+8]
	mov	QWORD PTR [rax+48], rcx
$LN78@ParseParam:

; 851  :             }
; 852  : 
; 853  :             /* v2.05: moved BEFORE fastcall_tab() */
; 854  :             paranode->sym.isfar   = ti.is_far;

	movzx	eax, BYTE PTR ti$[rsp+21]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	ecx, BYTE PTR [rcx+47]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	BYTE PTR [rcx+47], al

; 855  :             paranode->sym.Ofssize = ti.Ofssize;

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	ecx, BYTE PTR ti$[rsp+22]
	mov	BYTE PTR [rax+44], cl

; 856  :             paranode->sym.is_ptr  = ti.is_ptr;

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	ecx, BYTE PTR ti$[rsp+20]
	mov	BYTE PTR [rax+45], cl

; 857  :             paranode->sym.ptr_memtype = ti.ptr_memtype;

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	ecx, BYTE PTR ti$[rsp+24]
	mov	BYTE PTR [rax+46], cl

; 858  :             paranode->sym.is_vararg = is_vararg;

	movzx	eax, BYTE PTR is_vararg$[rsp]
	and	al, 1
	shl	al, 5
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	ecx, BYTE PTR [rcx+47]
	and	cl, 223					; 000000dfH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	BYTE PTR [rcx+47], al

; 859  :             if ( proc->sym.langtype == LANG_FASTCALL &&

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN79@ParseParam
	movsxd	rax, DWORD PTR ModuleInfo+376
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:fastcall_tab
	mov	QWORD PTR tv596[rsp], rcx
	lea	r8, QWORD PTR fcint$[rsp]
	mov	rdx, QWORD PTR paranode$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rbx, QWORD PTR tv596[rsp]
	call	QWORD PTR [rbx+rax]
	test	eax, eax
	je	SHORT $LN79@ParseParam

; 860  :                 fastcall_tab[ModuleInfo.fctype].paramcheck( proc, paranode, &fcint ) ) {
; 861  :             } else {

	jmp	SHORT $LN80@ParseParam
$LN79@ParseParam:

; 862  :                 paranode->sym.state = SYM_STACK;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	DWORD PTR [rax+32], 5
$LN80@ParseParam:

; 863  :             }
; 864  : 
; 865  :             paranode->sym.total_length = 1; /* v2.04: added */

	mov	rax, QWORD PTR paranode$[rsp]
	mov	DWORD PTR [rax+64], 1

; 866  :             paranode->sym.total_size = ti.size;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR ti$[rsp]
	mov	DWORD PTR [rax+56], ecx

; 867  : 
; 868  :             if( paranode->sym.is_vararg == FALSE )

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	$LN81@ParseParam

; 869  :                 /* v2.11: CurrWordSize does reflect the default parameter size only for PROCs.
; 870  :                  * For PROTOs and TYPEs use member seg_ofssize.
; 871  :                  */
; 872  :                 //proc->e.procinfo->parasize += ROUND_UP( ti.size, CurrWordSize );
; 873  :                 proc->e.procinfo->parasize += ROUND_UP( ti.size, IsPROC ? CurrWordSize : ( 2 << proc->sym.seg_ofssize ) );

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN117@ParseParam
	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR tv448[rsp], eax
	jmp	SHORT $LN118@ParseParam
$LN117@ParseParam:
	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	and	al, 3
	movzx	eax, al
	mov	ecx, 2
	mov	DWORD PTR tv795[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv795[rsp]
	shl	eax, cl
	mov	DWORD PTR tv448[rsp], eax
$LN118@ParseParam:
	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN119@ParseParam
	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR tv458[rsp], eax
	jmp	SHORT $LN120@ParseParam
$LN119@ParseParam:
	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	and	al, 3
	movzx	eax, al
	mov	ecx, 2
	mov	DWORD PTR tv800[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv800[rsp]
	shl	eax, cl
	mov	DWORD PTR tv458[rsp], eax
$LN120@ParseParam:
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR ti$[rsp]
	mov	edx, DWORD PTR tv448[rsp]
	lea	ecx, DWORD PTR [rcx+rdx-1]
	mov	edx, DWORD PTR tv458[rsp]
	dec	edx
	not	edx
	and	ecx, edx
	add	ecx, DWORD PTR [rax+32]
	mov	eax, ecx
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+32], eax
$LN81@ParseParam:

; 874  : 
; 875  :             /* v2.05: the PROC's vararg flag has been set already */
; 876  :             //proc->e.procinfo->is_vararg |= paranode->sym.is_vararg;
; 877  : 
; 878  :             /* Parameters usually are stored in "push" order.
; 879  :              * However, for Win64, it's better to store them
; 880  :              * the "natural" way from left to right, since the
; 881  :              * arguments aren't "pushed".
; 882  :              */
; 883  : 
; 884  :             switch( proc->sym.langtype ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR tv466[rsp], eax
	cmp	DWORD PTR tv466[rsp], 4
	jl	$LN89@ParseParam
	cmp	DWORD PTR tv466[rsp], 6
	jle	SHORT $LN82@ParseParam
	cmp	DWORD PTR tv466[rsp], 7
	je	$LN86@ParseParam
	jmp	$LN89@ParseParam
$LN82@ParseParam:
$left_to_right$123:

; 885  :             case LANG_BASIC:
; 886  :             case LANG_FORTRAN:
; 887  :             case LANG_PASCAL:
; 888  :             left_to_right:
; 889  :                 paranode->nextparam = NULL;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	QWORD PTR [rax+112], 0

; 890  :                 if( proc->e.procinfo->paralist == NULL ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN83@ParseParam

; 891  :                     proc->e.procinfo->paralist = paranode;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 892  :                 } else {

	jmp	SHORT $LN84@ParseParam
$LN83@ParseParam:

; 893  :                     for( paracurr = proc->e.procinfo->paralist;; paracurr = paracurr->nextparam ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR paracurr$[rsp], rax
	jmp	SHORT $LN25@ParseParam
$LN23@ParseParam:
	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR paracurr$[rsp], rax
$LN25@ParseParam:

; 894  :                         if( paracurr->nextparam == NULL ) {

	mov	rax, QWORD PTR paracurr$[rsp]
	cmp	QWORD PTR [rax+112], 0
	jne	SHORT $LN85@ParseParam

; 895  :                             break;

	jmp	SHORT $LN24@ParseParam
$LN85@ParseParam:

; 896  :                         }
; 897  :                     }

	jmp	SHORT $LN23@ParseParam
$LN24@ParseParam:

; 898  :                     paracurr->nextparam = paranode;

	mov	rax, QWORD PTR paracurr$[rsp]
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	QWORD PTR [rax+112], rcx

; 899  :                     paracurr = NULL;

	mov	QWORD PTR paracurr$[rsp], 0
$LN84@ParseParam:

; 900  :                 }
; 901  :                 break;

	jmp	SHORT $LN21@ParseParam
$LN86@ParseParam:

; 902  :             case LANG_FASTCALL:
; 903  : #if AMD64_SUPPORT
; 904  :                 if ( ti.Ofssize == USE64 )

	movzx	eax, BYTE PTR ti$[rsp+22]
	cmp	eax, 2
	jne	SHORT $LN87@ParseParam

; 905  :                     goto left_to_right;

	jmp	$left_to_right$123
$LN87@ParseParam:

; 906  : #endif
; 907  :                 /* v2.07: MS fastcall 16-bit is PASCAL! */
; 908  :                 if ( ti.Ofssize == USE16 && ModuleInfo.fctype == FCT_MSC )

	movzx	eax, BYTE PTR ti$[rsp+22]
	test	eax, eax
	jne	SHORT $LN88@ParseParam
	cmp	DWORD PTR ModuleInfo+376, 0
	jne	SHORT $LN88@ParseParam

; 909  :                     goto left_to_right;

	jmp	$left_to_right$123
$LN88@ParseParam:
$LN89@ParseParam:

; 910  :             default:
; 911  :                 paranode->nextparam = proc->e.procinfo->paralist;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR [rcx+112], rax

; 912  :                 proc->e.procinfo->paralist = paranode;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	QWORD PTR [rax+8], rcx
$LN21@ParseParam:
$LN73@ParseParam:
$LN60@ParseParam:

; 913  :                 break;
; 914  :             }
; 915  :         }
; 916  :         if ( tokenarray[i].token != T_FINAL ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN90@ParseParam

; 917  :             if( tokenarray[i].token != T_COMMA ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN91@ParseParam

; 918  :                 DebugMsg(("ParseParams: error, cntParam=%u, found %s\n", cntParam, tokenarray[i].tokpos ));

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	r8, QWORD PTR [rcx+rax+24]
	mov	edx, DWORD PTR cntParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11663
	call	DoDebugMsg

; 919  :                 return( EmitErr( EXPECTING_COMMA, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 39					; 00000027H
	call	EmitErr
	jmp	$LN1@ParseParam
$LN91@ParseParam:

; 920  :             }
; 921  :             i++;    /* go past comma */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN90@ParseParam:

; 922  :         }
; 923  :     } /* end for */

	jmp	$LN5@ParseParam
$LN6@ParseParam:

; 924  : 
; 925  :     //if ( proc->e.procinfo->init_done == TRUE ) {
; 926  :     if ( init_done == TRUE ) {

	movzx	eax, BYTE PTR init_done$[rsp]
	cmp	eax, 1
	jne	SHORT $LN92@ParseParam

; 927  :         if ( paracurr ) {

	cmp	QWORD PTR paracurr$[rsp], 0
	je	SHORT $LN93@ParseParam

; 928  :             /* first definition has more parameters than second */
; 929  :             DebugMsg(("ParseParams: a param is left over, cntParam=%u\n", cntParam));

	mov	edx, DWORD PTR cntParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11666
	call	DoDebugMsg

; 930  :             return( EmitErr( CONFLICTING_PARAMETER_DEFINITION, "" ) );

	lea	rdx, OFFSET FLAT:$SG11667
	mov	ecx, 137				; 00000089H
	call	EmitErr
	jmp	$LN1@ParseParam
$LN93@ParseParam:
$LN92@ParseParam:

; 931  :         }
; 932  :     }
; 933  : 
; 934  :     if ( IsPROC ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	$LN94@ParseParam

; 935  :         /* calc starting offset for parameters,
; 936  :          * offset from [E|R]BP : return addr + old [E|R]BP
; 937  :          * NEAR: 2 * wordsize, FAR: 3 * wordsize
; 938  :          *         NEAR  FAR
; 939  :          *-------------------------
; 940  :          * USE16   +4    +6
; 941  :          * USE32   +8    +12
; 942  :          * USE64   +16   +24
; 943  :          * without frame pointer:
; 944  :          * USE16   +2    +4
; 945  :          * USE32   +4    +8
; 946  :          * USE64   +8    +16
; 947  :          */
; 948  :         offset = ( ( 2 + ( proc->sym.mem_type == MT_FAR ? 1 : 0 ) ) * CurrWordSize );

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+36], 130			; 00000082H
	jne	SHORT $LN121@ParseParam
	mov	DWORD PTR tv531[rsp], 1
	jmp	SHORT $LN122@ParseParam
$LN121@ParseParam:
	mov	DWORD PTR tv531[rsp], 0
$LN122@ParseParam:
	mov	eax, DWORD PTR tv531[rsp]
	add	eax, 2
	movzx	ecx, BYTE PTR ModuleInfo+406
	imul	eax, ecx
	mov	DWORD PTR offset$[rsp], eax

; 949  : 
; 950  :         /* now calculate the [E|R]BP offsets */
; 951  : 
; 952  : #if AMD64_SUPPORT
; 953  :         if ( ModuleInfo.Ofssize == USE64 && proc->sym.langtype == LANG_FASTCALL ) {

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	jne	$LN95@ParseParam
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	$LN95@ParseParam

; 954  :             for ( paranode = proc->e.procinfo->paralist; paranode ;paranode = paranode->nextparam )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR paranode$[rsp], rax
	jmp	SHORT $LN28@ParseParam
$LN26@ParseParam:
	mov	rax, QWORD PTR paranode$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR paranode$[rsp], rax
$LN28@ParseParam:
	cmp	QWORD PTR paranode$[rsp], 0
	je	$LN27@ParseParam

; 955  :                 if ( paranode->sym.state == SYM_TMACRO ) /* register param */

	mov	rax, QWORD PTR paranode$[rsp]
	cmp	DWORD PTR [rax+32], 10
	jne	SHORT $LN97@ParseParam

; 956  :                     ;

	jmp	$LN98@ParseParam
$LN97@ParseParam:

; 957  :                 else {
; 958  :                     paranode->sym.offset = offset;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	mov	DWORD PTR [rax+16], ecx

; 959  :                     proc->e.procinfo->stackparam = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al

; 960  :                     offset += ROUND_UP( paranode->sym.total_size, CurrWordSize );

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	lea	eax, DWORD PTR [rcx+rax-1]
	movzx	ecx, BYTE PTR ModuleInfo+406
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	ecx, DWORD PTR offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR offset$[rsp], eax

; 961  :                     //set isparam var for W64F_HABRAN
; 962  :                     if (ModuleInfo.win64_flags & W64F_HABRAN) paranode->sym.isparam = TRUE;

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN99@ParseParam
	mov	rax, QWORD PTR paranode$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	or	al, 128					; 00000080H
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	BYTE PTR [rcx+41], al
$LN99@ParseParam:
$LN98@ParseParam:

; 963  :                 }

	jmp	$LN26@ParseParam
$LN27@ParseParam:

; 964  :         } else

	jmp	$LN96@ParseParam
$LN95@ParseParam:

; 965  : #endif
; 966  :         for ( ; cntParam; cntParam-- ) {

	jmp	SHORT $LN31@ParseParam
$LN29@ParseParam:
	mov	eax, DWORD PTR cntParam$[rsp]
	dec	eax
	mov	DWORD PTR cntParam$[rsp], eax
$LN31@ParseParam:
	cmp	DWORD PTR cntParam$[rsp], 0
	je	$LN30@ParseParam

; 967  :             for ( curr = 1, paranode = proc->e.procinfo->paralist; curr < cntParam;paranode = paranode->nextparam, curr++ );

	mov	DWORD PTR curr$[rsp], 1
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR paranode$[rsp], rax
	jmp	SHORT $LN34@ParseParam
$LN32@ParseParam:
	mov	rax, QWORD PTR paranode$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR paranode$[rsp], rax
	mov	eax, DWORD PTR curr$[rsp]
	inc	eax
	mov	DWORD PTR curr$[rsp], eax
$LN34@ParseParam:
	mov	eax, DWORD PTR cntParam$[rsp]
	cmp	DWORD PTR curr$[rsp], eax
	jge	SHORT $LN33@ParseParam
	jmp	SHORT $LN32@ParseParam
$LN33@ParseParam:

; 968  :             DebugMsg1(("ParseParams: parm=%s, ofs=%u, size=%d\n", paranode->sym.name, offset, paranode->sym.total_size));

	mov	rax, QWORD PTR paranode$[rsp]
	mov	r9d, DWORD PTR [rax+56]
	mov	r8d, DWORD PTR offset$[rsp]
	mov	rax, QWORD PTR paranode$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11674
	call	DoDebugMsg1

; 969  :             if ( paranode->sym.state == SYM_TMACRO ) /* register param? */

	mov	rax, QWORD PTR paranode$[rsp]
	cmp	DWORD PTR [rax+32], 10
	jne	SHORT $LN100@ParseParam

; 970  :                 ;

	jmp	SHORT $LN101@ParseParam
$LN100@ParseParam:

; 971  :             else {
; 972  :                 paranode->sym.offset = offset;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR offset$[rsp]
	mov	DWORD PTR [rax+16], ecx

; 973  :                 proc->e.procinfo->stackparam = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al

; 974  :                 offset += ROUND_UP( paranode->sym.total_size, CurrWordSize );

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	lea	eax, DWORD PTR [rcx+rax-1]
	movzx	ecx, BYTE PTR ModuleInfo+406
	dec	ecx
	not	ecx
	and	eax, ecx
	mov	ecx, DWORD PTR offset$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR offset$[rsp], eax
$LN101@ParseParam:

; 975  :             }
; 976  :         }

	jmp	$LN29@ParseParam
$LN30@ParseParam:
$LN96@ParseParam:
$LN94@ParseParam:

; 977  :     }
; 978  :     return ( NOT_ERROR );

	xor	eax, eax
$LN1@ParseParam:

; 979  : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:ParseParams$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 408				; 00000198H
	pop	rdi
	pop	rbx
	ret	0
ParseParams ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
tv66 = 0
sym$ = 32
opnd$ = 40
UpdateProcStatus PROC

; 620  : {

$LN5:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+32]

; 621  :     sym->value = ( CurrProc ? ProcStatus : 0 );

	cmp	QWORD PTR CurrProc, 0
	je	SHORT $LN3@UpdateProc
	mov	eax, DWORD PTR ProcStatus
	mov	DWORD PTR tv66[rsp], eax
	jmp	SHORT $LN4@UpdateProc
$LN3@UpdateProc:
	mov	DWORD PTR tv66[rsp], 0
$LN4@UpdateProc:
	mov	rax, QWORD PTR sym$[rsp]
	mov	ecx, DWORD PTR tv66[rsp]
	mov	DWORD PTR [rax+16], ecx

; 622  : }

	add	rsp, 16
	pop	rdi
	ret	0
UpdateProcStatus ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
sym$ = 16
opnd$ = 24
UpdateStackBase PROC

; 607  : {

$LN4:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 608  :     if ( opnd ) {

	cmp	QWORD PTR opnd$[rsp], 0
	je	SHORT $LN2@UpdateStac

; 609  :         StackAdj = opnd->uvalue;

	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR StackAdj, eax

; 610  :         StackAdjHigh = opnd->hvalue;

	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+4]
	mov	DWORD PTR StackAdjHigh, eax
$LN2@UpdateStac:

; 611  :     }
; 612  :     sym->value = StackAdj;

	mov	rax, QWORD PTR sym$[rsp]
	mov	ecx, DWORD PTR StackAdj
	mov	DWORD PTR [rax+16], ecx

; 613  :     sym->value3264 = StackAdjHigh;

	mov	rax, QWORD PTR sym$[rsp]
	mov	ecx, DWORD PTR StackAdjHigh
	mov	DWORD PTR [rax+56], ecx

; 614  : }

	pop	rdi
	ret	0
UpdateStackBase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
name$ = 48
local$ = 56
curr$ = 64
info$ = 72
ti$ = 88
j$5 = 132
opndx$6 = 160
tv306 = 276
tv160 = 280
tv230 = 288
i$ = 320
tokenarray$ = 328
LocalDir PROC

; 441  : {

$LN44:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 304				; 00000130H
	mov	rdi, rsp
	mov	ecx, 76					; 0000004cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+320]

; 442  :     char        *name;
; 443  :     struct dsym *local;
; 444  :     struct dsym *curr;
; 445  :     struct proc_info *info;
; 446  :     //int         size;
; 447  :     //int         idx;
; 448  :     struct qualified_type ti;
; 449  : 
; 450  :     if ( Parse_Pass != PASS_1 ) /* everything is done in pass 1 */

	cmp	DWORD PTR Parse_Pass, 0
	je	SHORT $LN13@LocalDir

; 451  :         return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@LocalDir
$LN13@LocalDir:

; 452  : 
; 453  :     DebugMsg1(("LocalDir(%u) entry\n", i));

	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG11481
	call	DoDebugMsg1

; 454  : 
; 455  :     if( !( ProcStatus & PRST_PROLOGUE_NOT_DONE ) || CurrProc == NULL ) {

	mov	eax, DWORD PTR ProcStatus
	and	eax, 128				; 00000080H
	test	eax, eax
	je	SHORT $LN15@LocalDir
	cmp	QWORD PTR CurrProc, 0
	jne	SHORT $LN14@LocalDir
$LN15@LocalDir:

; 456  :         return( EmitError( PROC_MACRO_MUST_PRECEDE_LOCAL ) );

	mov	ecx, 92					; 0000005cH
	call	EmitError
	jmp	$LN1@LocalDir
$LN14@LocalDir:

; 457  :     }
; 458  : 
; 459  :     info = CurrProc->e.procinfo;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR info$[rsp], rax

; 460  : #if STACKBASESUPP
; 461  :     /* ensure the fpo bit is set - it's too late to set it in write_prologue().
; 462  :      * Note that the fpo bit is set only IF there are locals or arguments.
; 463  :      * fixme: what if pass > 1?
; 464  :      */
; 465  :     if ( GetRegNo( info->basereg ) == 4 ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, WORD PTR [rax+86]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	cmp	eax, 4
	jne	SHORT $LN16@LocalDir

; 466  :         info->fpo = TRUE;

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 128					; 00000080H
	mov	rcx, QWORD PTR info$[rsp]
	mov	BYTE PTR [rcx+84], al

; 467  :         ProcStatus |= PRST_FPO;

	mov	eax, DWORD PTR ProcStatus
	or	eax, 4
	mov	DWORD PTR ProcStatus, eax
$LN16@LocalDir:

; 468  :     }
; 469  : #endif
; 470  : 
; 471  :     i++; /* go past LOCAL */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@LocalDir:

; 472  : 
; 473  :     do  {
; 474  :         if( tokenarray[i].token != T_ID ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	je	SHORT $LN17@LocalDir

; 475  :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@LocalDir
$LN17@LocalDir:

; 476  :         }
; 477  :         name = tokenarray[i].string_ptr;

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR name$[rsp], rax

; 478  : 
; 479  :         DebugMsg1(("LocalDir: item=%s\n", tokenarray[i].tokpos ));

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	lea	rcx, OFFSET FLAT:$SG11486
	call	DoDebugMsg1

; 480  : 
; 481  :         ti.symtype = NULL;

	mov	QWORD PTR ti$[rsp+8], 0

; 482  :         ti.is_ptr = 0;

	mov	BYTE PTR ti$[rsp+20], 0

; 483  :         ti.ptr_memtype = MT_EMPTY;

	mov	DWORD PTR ti$[rsp+24], 192		; 000000c0H

; 484  :         if ( SIZE_DATAPTR & ( 1 << ModuleInfo.model ) )

	mov	eax, DWORD PTR ModuleInfo+360
	mov	ecx, 1
	mov	DWORD PTR tv306[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv306[rsp]
	shl	eax, cl
	and	eax, 104				; 00000068H
	test	eax, eax
	je	SHORT $LN18@LocalDir

; 485  :             ti.is_far = TRUE;

	mov	BYTE PTR ti$[rsp+21], 1
	jmp	SHORT $LN19@LocalDir
$LN18@LocalDir:

; 486  :         else
; 487  :             ti.is_far = FALSE;

	mov	BYTE PTR ti$[rsp+21], 0
$LN19@LocalDir:

; 488  :         ti.Ofssize = ModuleInfo.Ofssize;

	movzx	eax, BYTE PTR ModuleInfo+404
	mov	BYTE PTR ti$[rsp+22], al

; 489  : 
; 490  : #if 0
; 491  :         /* since v1.95 a local hash table is used. No need to search the
; 492  :          * symbol before SymLCreate() is called. SymLCreate() will display
; 493  :          * an error if the symbol is already defined.
; 494  :          */
; 495  :         if ((local = (struct dsym *)SymSearch( name )) && local->sym.state != SYM_UNDEFINED ) {
; 496  :             return( EmitErr( SYMBOL_ALREADY_DEFINED, name ) );
; 497  :         }
; 498  : #endif
; 499  :         local = (struct dsym *)SymLCreate( name );

	mov	rcx, QWORD PTR name$[rsp]
	call	SymLCreate
	mov	QWORD PTR local$[rsp], rax

; 500  :         if( !local ) { /* if it failed, an error msg has been written already */

	cmp	QWORD PTR local$[rsp], 0
	jne	SHORT $LN20@LocalDir

; 501  :             DebugMsg(("LocalDir: SymLCreate( %s ) failed\n", name ));

	mov	rdx, QWORD PTR name$[rsp]
	lea	rcx, OFFSET FLAT:$SG11490
	call	DoDebugMsg

; 502  :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@LocalDir
$LN20@LocalDir:

; 503  :         }
; 504  :         if (ModuleInfo.win64_flags & W64F_HABRAN) local->sym.isparam = FALSE; //clear isparam var, added  by habran

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 11
	test	eax, eax
	je	SHORT $LN21@LocalDir
	mov	rax, QWORD PTR local$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR local$[rsp]
	mov	BYTE PTR [rcx+41], al
$LN21@LocalDir:

; 505  :         local->sym.state = SYM_STACK;

	mov	rax, QWORD PTR local$[rsp]
	mov	DWORD PTR [rax+32], 5

; 506  :         local->sym.isdefined = TRUE;

	mov	rax, QWORD PTR local$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 2
	mov	rcx, QWORD PTR local$[rsp]
	mov	BYTE PTR [rcx+40], al

; 507  :         local->sym.total_length = 1; /* v2.04: added */

	mov	rax, QWORD PTR local$[rsp]
	mov	DWORD PTR [rax+64], 1

; 508  :         switch ( ti.Ofssize ) {

	movzx	eax, BYTE PTR ti$[rsp+22]
	mov	BYTE PTR tv160[rsp], al
	cmp	BYTE PTR tv160[rsp], 0
	je	SHORT $LN22@LocalDir
	jmp	SHORT $LN23@LocalDir
$LN22@LocalDir:

; 509  :         case USE16:
; 510  :             local->sym.mem_type = MT_WORD;

	mov	rax, QWORD PTR local$[rsp]
	mov	DWORD PTR [rax+36], 1

; 511  :             ti.size = sizeof( uint_16 );

	mov	DWORD PTR ti$[rsp], 2

; 512  :             break;

	jmp	SHORT $LN5@LocalDir
$LN23@LocalDir:

; 513  : #if AMD64_SUPPORT
; 514  :             /* v2.08: default type for locals in 64-bit is still DWORD (at least in Win64) */
; 515  :             //case USE64: local->sym.mem_type = MT_QWORD; break;
; 516  :             //ti.size = sizeof( uint_64 );
; 517  : #endif
; 518  :         default: 
; 519  :             local->sym.mem_type = MT_DWORD;

	mov	rax, QWORD PTR local$[rsp]
	mov	DWORD PTR [rax+36], 3

; 520  :             ti.size = sizeof( uint_32 );

	mov	DWORD PTR ti$[rsp], 4
$LN5@LocalDir:

; 521  :             break;
; 522  :         }
; 523  : 
; 524  :         i++; /* go past name */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 525  : 
; 526  :         /* get the optional index factor: local name[xx]:... */
; 527  :         if( tokenarray[i].token == T_OP_SQ_BRACKET ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 91					; 0000005bH
	jne	$LN24@LocalDir

; 528  :             int j;
; 529  :             struct expr opndx;
; 530  :             i++; /* go past '[' */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 531  :             /* scan for comma or colon. this isn't really necessary,
; 532  :              * but will prevent the expression evaluator from emitting
; 533  :              * confusing error messages.
; 534  :              */
; 535  :             for ( j = i; j < Token_Count; j++ )

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$5[rsp], eax
	jmp	SHORT $LN9@LocalDir
$LN7@LocalDir:
	mov	eax, DWORD PTR j$5[rsp]
	inc	eax
	mov	DWORD PTR j$5[rsp], eax
$LN9@LocalDir:
	mov	eax, DWORD PTR ModuleInfo+496
	cmp	DWORD PTR j$5[rsp], eax
	jge	SHORT $LN8@LocalDir

; 536  :                 if ( tokenarray[j].token == T_COMMA ||

	movsxd	rax, DWORD PTR j$5[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN26@LocalDir
	movsxd	rax, DWORD PTR j$5[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN25@LocalDir
$LN26@LocalDir:

; 537  :                     tokenarray[j].token == T_COLON)
; 538  :                     break;

	jmp	SHORT $LN8@LocalDir
$LN25@LocalDir:
	jmp	SHORT $LN7@LocalDir
$LN8@LocalDir:

; 539  :             if ( ERROR == EvalOperand( &i, tokenarray, j, &opndx, 0 ) )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$6[rsp]
	mov	r8d, DWORD PTR j$5[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN27@LocalDir

; 540  :                 return( ERROR );

	mov	eax, -1
	jmp	$LN1@LocalDir
$LN27@LocalDir:

; 541  :             if ( opndx.kind != EXPR_CONST ) {

	cmp	DWORD PTR opndx$6[rsp+60], 0
	je	SHORT $LN28@LocalDir

; 542  :                 EmitError( CONSTANT_EXPECTED );

	mov	ecx, 65					; 00000041H
	call	EmitError

; 543  :                 opndx.value = 1;

	mov	DWORD PTR opndx$6[rsp], 1
$LN28@LocalDir:

; 544  :             }
; 545  :             /* zero is allowed as value! */
; 546  :             local->sym.total_length = opndx.value;

	mov	rax, QWORD PTR local$[rsp]
	mov	ecx, DWORD PTR opndx$6[rsp]
	mov	DWORD PTR [rax+64], ecx

; 547  :             local->sym.isarray = TRUE;

	mov	rax, QWORD PTR local$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	or	al, 2
	mov	rcx, QWORD PTR local$[rsp]
	mov	BYTE PTR [rcx+41], al

; 548  :             if( tokenarray[i].token == T_CL_SQ_BRACKET ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 93					; 0000005dH
	jne	SHORT $LN29@LocalDir

; 549  :                 i++; /* go past ']' */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 550  :             } else {

	jmp	SHORT $LN30@LocalDir
$LN29@LocalDir:

; 551  :                 EmitError( EXPECTED_CL_SQ_BRACKET );

	mov	ecx, 111				; 0000006fH
	call	EmitError
$LN30@LocalDir:
$LN24@LocalDir:

; 552  :             }
; 553  :         }
; 554  : 
; 555  :         /* get the optional type: local name[xx]:type  */
; 556  :         if( tokenarray[i].token == T_COLON ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	jne	$LN31@LocalDir

; 557  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 558  : 
; 559  :             if ( GetQualifiedType( &i, tokenarray, &ti ) == ERROR )

	lea	r8, QWORD PTR ti$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	GetQualifiedType
	cmp	eax, -1
	jne	SHORT $LN32@LocalDir

; 560  :                 return( ERROR );

	mov	eax, -1
	jmp	$LN1@LocalDir
$LN32@LocalDir:

; 561  : 
; 562  :             local->sym.mem_type = ti.mem_type;

	mov	rax, QWORD PTR local$[rsp]
	mov	ecx, DWORD PTR ti$[rsp+16]
	mov	DWORD PTR [rax+36], ecx

; 563  :             if ( ti.mem_type == MT_TYPE ) {

	cmp	DWORD PTR ti$[rsp+16], 196		; 000000c4H
	jne	SHORT $LN33@LocalDir

; 564  :                 local->sym.type = ti.symtype;

	mov	rax, QWORD PTR local$[rsp]
	mov	rcx, QWORD PTR ti$[rsp+8]
	mov	QWORD PTR [rax+80], rcx

; 565  :             } else {

	jmp	SHORT $LN34@LocalDir
$LN33@LocalDir:

; 566  :                 local->sym.target_type = ti.symtype;

	mov	rax, QWORD PTR local$[rsp]
	mov	rcx, QWORD PTR ti$[rsp+8]
	mov	QWORD PTR [rax+48], rcx
$LN34@LocalDir:

; 567  :             }
; 568  :             DebugMsg1(("LocalDir: memtype=%X, type=%s, size=%u*%u\n",

	cmp	QWORD PTR ti$[rsp+8], 0
	je	SHORT $LN42@LocalDir
	mov	rax, QWORD PTR ti$[rsp+8]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv230[rsp], rax
	jmp	SHORT $LN43@LocalDir
$LN42@LocalDir:
	lea	rax, OFFSET FLAT:$SG11505
	mov	QWORD PTR tv230[rsp], rax
$LN43@LocalDir:
	mov	rax, QWORD PTR local$[rsp]
	mov	eax, DWORD PTR [rax+64]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ti$[rsp]
	mov	r8, QWORD PTR tv230[rsp]
	mov	rax, QWORD PTR local$[rsp]
	mov	edx, DWORD PTR [rax+36]
	lea	rcx, OFFSET FLAT:$SG11506
	call	DoDebugMsg1
$LN31@LocalDir:

; 569  :                        local->sym.mem_type,
; 570  :                        ti.symtype ? ti.symtype->name : "NULL",
; 571  :                        ti.size, local->sym.total_length ));
; 572  :         }
; 573  :         local->sym.is_ptr  = ti.is_ptr;

	mov	rax, QWORD PTR local$[rsp]
	movzx	ecx, BYTE PTR ti$[rsp+20]
	mov	BYTE PTR [rax+45], cl

; 574  :         local->sym.isfar   = ti.is_far;

	movzx	eax, BYTE PTR ti$[rsp+21]
	and	al, 1
	shl	al, 4
	mov	rcx, QWORD PTR local$[rsp]
	movzx	ecx, BYTE PTR [rcx+47]
	and	cl, 239					; 000000efH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR local$[rsp]
	mov	BYTE PTR [rcx+47], al

; 575  :         local->sym.Ofssize = ti.Ofssize;

	mov	rax, QWORD PTR local$[rsp]
	movzx	ecx, BYTE PTR ti$[rsp+22]
	mov	BYTE PTR [rax+44], cl

; 576  :         local->sym.ptr_memtype = ti.ptr_memtype;

	mov	rax, QWORD PTR local$[rsp]
	movzx	ecx, BYTE PTR ti$[rsp+24]
	mov	BYTE PTR [rax+46], cl

; 577  :         local->sym.total_size = ti.size * local->sym.total_length;

	mov	rax, QWORD PTR local$[rsp]
	mov	ecx, DWORD PTR ti$[rsp]
	imul	ecx, DWORD PTR [rax+64]
	mov	eax, ecx
	mov	rcx, QWORD PTR local$[rsp]
	mov	DWORD PTR [rcx+56], eax

; 578  : 
; 579  :         /* v2.12: address calculation is now done in SetLocalOffsets() */
; 580  : 
; 581  :         if( info->locallist == NULL ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	QWORD PTR [rax+16], 0
	jne	SHORT $LN35@LocalDir

; 582  :             info->locallist = local;

	mov	rax, QWORD PTR info$[rsp]
	mov	rcx, QWORD PTR local$[rsp]
	mov	QWORD PTR [rax+16], rcx

; 583  :         } else {

	jmp	SHORT $LN36@LocalDir
$LN35@LocalDir:

; 584  :             for( curr = info->locallist; curr->nextlocal ; curr = curr->nextlocal );

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN12@LocalDir
$LN10@LocalDir:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN12@LocalDir:
	mov	rax, QWORD PTR curr$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN11@LocalDir
	jmp	SHORT $LN10@LocalDir
$LN11@LocalDir:

; 585  :             curr->nextlocal = local;

	mov	rax, QWORD PTR curr$[rsp]
	mov	rcx, QWORD PTR local$[rsp]
	mov	QWORD PTR [rax+112], rcx
$LN36@LocalDir:

; 586  :         }
; 587  : 
; 588  :         if ( tokenarray[i].token != T_FINAL )

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN37@LocalDir

; 589  :             if ( tokenarray[i].token == T_COMMA ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN38@LocalDir

; 590  :                 if ( (i + 1) < Token_Count )

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cmp	eax, DWORD PTR ModuleInfo+496
	jge	SHORT $LN40@LocalDir

; 591  :                     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN40@LocalDir:

; 592  :             } else {

	jmp	SHORT $LN39@LocalDir
$LN38@LocalDir:

; 593  :                 return( EmitErr( EXPECTING_COMMA, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 39					; 00000027H
	call	EmitErr
	jmp	SHORT $LN1@LocalDir
$LN39@LocalDir:
$LN37@LocalDir:

; 594  :             }
; 595  : 
; 596  :     } while ( i < Token_Count );

	mov	eax, DWORD PTR ModuleInfo+496
	cmp	DWORD PTR i$[rsp], eax
	jl	$LN4@LocalDir

; 597  : 
; 598  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@LocalDir:

; 599  : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:LocalDir$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 304				; 00000130H
	pop	rdi
	ret	0
LocalDir ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
pop_proc PROC

; 425  : {

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 426  :     if( ProcStack == NULL )

	cmp	QWORD PTR ProcStack, 0
	jne	SHORT $LN2@pop_proc

; 427  :         return( NULL );

	xor	eax, eax
	jmp	SHORT $LN1@pop_proc
$LN2@pop_proc:

; 428  :     return( (struct dsym *)popitem( &ProcStack ) );

	lea	rcx, OFFSET FLAT:ProcStack
	call	popitem
$LN1@pop_proc:

; 429  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
pop_proc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
proc$ = 48
push_proc PROC

; 416  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 417  :     if ( Parse_Pass == PASS_1 ) /* get the locals stored so far */

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN2@push_proc

; 418  :         SymGetLocal( (struct asym *)proc );

	mov	rcx, QWORD PTR proc$[rsp]
	call	SymGetLocal
$LN2@push_proc:

; 419  :     pushitem( &ProcStack, proc );

	mov	rdx, QWORD PTR proc$[rsp]
	lea	rcx, OFFSET FLAT:ProcStack
	call	pushitem

; 420  :     return;
; 421  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
push_proc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
stack$ = 0
node$ = 8
elmt$ = 16
stk$ = 48
popitem	PROC

; 385  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 386  :     void        **stack = stk;

	mov	rax, QWORD PTR stk$[rsp]
	mov	QWORD PTR stack$[rsp], rax

; 387  :     struct qnode *node;
; 388  :     void        *elmt;
; 389  : 
; 390  :     node = (struct qnode *)(*stack);

	mov	rax, QWORD PTR stack$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR node$[rsp], rax

; 391  :     *stack = node->next;

	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 392  :     elmt = (void *)node->elmt;

	mov	rax, QWORD PTR node$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR elmt$[rsp], rax

; 393  :     LclFree( node );
; 394  :     return( elmt );

	mov	rax, QWORD PTR elmt$[rsp]

; 395  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
popitem	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
stack$ = 32
node$ = 40
stk$ = 64
elmt$ = 72
pushitem PROC

; 373  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 374  :     void      **stack = stk;

	mov	rax, QWORD PTR stk$[rsp]
	mov	QWORD PTR stack$[rsp], rax

; 375  :     struct qnode *node;
; 376  : 
; 377  :     node = LclAlloc( sizeof( struct qnode ));

	mov	ecx, 16
	call	LclAlloc
	mov	QWORD PTR node$[rsp], rax

; 378  :     node->next = *stack;

	mov	rax, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 379  :     node->elmt = elmt;

	mov	rax, QWORD PTR node$[rsp]
	mov	rcx, QWORD PTR elmt$[rsp]
	mov	QWORD PTR [rax+8], rcx

; 380  :     *stack = node;

	mov	rax, QWORD PTR stack$[rsp]
	mov	rcx, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax], rcx

; 381  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
pushitem ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
proc$ = 16
buffer$ = 24
ms64_return PROC

; 365  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 366  :     /* nothing to do, the caller cleans the stack */
; 367  :     return;
; 368  : }

	pop	rdi
	ret	0
ms64_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
proc$ = 16
paranode$ = 24
used$ = 32
ms64_pcheck PROC

; 354  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 355  :     /* since the parameter names refer the stack-backup locations,
; 356  :      * there's nothing to do here!
; 357  :      * That is, if a parameter's size is > 8, it has to be changed
; 358  :      * to a pointer. This is to be done yet.
; 359  :      */
; 360  :     return( 0 );

	xor	eax, eax

; 361  : }

	pop	rdi
	ret	0
ms64_pcheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
value$ = 32
tv77 = 36
tv81 = 40
proc$ = 64
buffer$ = 72
watc_return PROC

; 292  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 293  :     int value;
; 294  :     value = 4 * CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	shl	eax, 2
	mov	DWORD PTR value$[rsp], eax

; 295  :     if( proc->e.procinfo->has_vararg == FALSE && proc->e.procinfo->parasize > value )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN2@watc_retur
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR value$[rsp]
	cmp	DWORD PTR [rax+32], ecx
	jbe	SHORT $LN2@watc_retur

; 296  :         sprintf( buffer + strlen( buffer ), "%d%c", proc->e.procinfo->parasize - value, ModuleInfo.radix != 10 ? 't' : NULLC );

	movzx	eax, BYTE PTR ModuleInfo+396
	cmp	eax, 10
	je	SHORT $LN4@watc_retur
	mov	DWORD PTR tv77[rsp], 116		; 00000074H
	jmp	SHORT $LN5@watc_retur
$LN4@watc_retur:
	mov	DWORD PTR tv77[rsp], 0
$LN5@watc_retur:
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR value$[rsp]
	mov	eax, DWORD PTR [rax+32]
	sub	eax, ecx
	mov	DWORD PTR tv81[rsp], eax
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strlen
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9d, DWORD PTR tv77[rsp]
	mov	ecx, DWORD PTR tv81[rsp]
	mov	r8d, ecx
	lea	rdx, OFFSET FLAT:$SG11388
	mov	rcx, rax
	call	sprintf
$LN2@watc_retur:

; 297  :     return;
; 298  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
watc_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
newflg$ = 64
shift$ = 68
firstreg$ = 72
Ofssize$ = 76
size$ = 80
$T1 = 88
tv88 = 96
tv91 = 100
tv134 = 104
tv271 = 112
tv209 = 120
proc$ = 144
paranode$ = 152
used$ = 160
watc_pcheck PROC

; 211  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	rdi, rsp
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 212  :     static char regname[64];
; 213  :     static char regist[32];
; 214  :     int newflg;
; 215  :     int shift;
; 216  :     int firstreg;
; 217  :     uint_8 Ofssize = GetSymOfssize( &proc->sym );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, rax
	call	GetSymOfssize
	mov	BYTE PTR Ofssize$[rsp], al

; 218  :     int size = SizeFromMemtype( paranode->sym.mem_type, paranode->sym.Ofssize, paranode->sym.type );

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	r8, QWORD PTR [rcx+80]
	mov	edx, eax
	mov	rax, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	SizeFromMemtype
	mov	DWORD PTR size$[rsp], eax

; 219  : 
; 220  :     /* v2.05: VARARG procs don't have register params */
; 221  :     if ( proc->e.procinfo->has_vararg )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN10@watc_pchec

; 222  :         return( 0 );

	xor	eax, eax
	jmp	$LN1@watc_pchec
$LN10@watc_pchec:

; 223  : 
; 224  :     if ( size != 1 && size != 2 && size != 4 && size != 8 )

	cmp	DWORD PTR size$[rsp], 1
	je	SHORT $LN11@watc_pchec
	cmp	DWORD PTR size$[rsp], 2
	je	SHORT $LN11@watc_pchec
	cmp	DWORD PTR size$[rsp], 4
	je	SHORT $LN11@watc_pchec
	cmp	DWORD PTR size$[rsp], 8
	je	SHORT $LN11@watc_pchec

; 225  :         return( 0 );

	xor	eax, eax
	jmp	$LN1@watc_pchec
$LN11@watc_pchec:

; 226  : 
; 227  :     /* v2.05: rewritten. The old code didn't allow to "fill holes" */
; 228  :     if ( size == 8 ) {

	cmp	DWORD PTR size$[rsp], 8
	jne	SHORT $LN12@watc_pchec

; 229  :         newflg = Ofssize ? 3 : 15;

	movzx	eax, BYTE PTR Ofssize$[rsp]
	test	eax, eax
	je	SHORT $LN30@watc_pchec
	mov	DWORD PTR tv88[rsp], 3
	jmp	SHORT $LN31@watc_pchec
$LN30@watc_pchec:
	mov	DWORD PTR tv88[rsp], 15
$LN31@watc_pchec:
	mov	eax, DWORD PTR tv88[rsp]
	mov	DWORD PTR newflg$[rsp], eax

; 230  :         shift = Ofssize ? 2 : 4;

	movzx	eax, BYTE PTR Ofssize$[rsp]
	test	eax, eax
	je	SHORT $LN32@watc_pchec
	mov	DWORD PTR tv91[rsp], 2
	jmp	SHORT $LN33@watc_pchec
$LN32@watc_pchec:
	mov	DWORD PTR tv91[rsp], 4
$LN33@watc_pchec:
	mov	eax, DWORD PTR tv91[rsp]
	mov	DWORD PTR shift$[rsp], eax
	jmp	SHORT $LN13@watc_pchec
$LN12@watc_pchec:

; 231  :     } else if ( size == 4 && Ofssize == USE16 ) {

	cmp	DWORD PTR size$[rsp], 4
	jne	SHORT $LN14@watc_pchec
	movzx	eax, BYTE PTR Ofssize$[rsp]
	test	eax, eax
	jne	SHORT $LN14@watc_pchec

; 232  :         newflg = 3;

	mov	DWORD PTR newflg$[rsp], 3

; 233  :         shift = 2;

	mov	DWORD PTR shift$[rsp], 2

; 234  :     } else {

	jmp	SHORT $LN15@watc_pchec
$LN14@watc_pchec:

; 235  :         newflg = 1;

	mov	DWORD PTR newflg$[rsp], 1

; 236  :         shift = 1;

	mov	DWORD PTR shift$[rsp], 1
$LN15@watc_pchec:
$LN13@watc_pchec:

; 237  :     }
; 238  : 
; 239  :     /* scan if there's a free register (pair/quadrupel) */
; 240  :     for ( firstreg = 0; firstreg < 4 && (newflg & *used ); newflg <<= shift, firstreg += shift );

	mov	DWORD PTR firstreg$[rsp], 0
	jmp	SHORT $LN4@watc_pchec
$LN2@watc_pchec:
	mov	eax, DWORD PTR shift$[rsp]
	movzx	ecx, al
	mov	eax, DWORD PTR newflg$[rsp]
	shl	eax, cl
	mov	DWORD PTR newflg$[rsp], eax
	mov	eax, DWORD PTR shift$[rsp]
	mov	ecx, DWORD PTR firstreg$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR firstreg$[rsp], eax
$LN4@watc_pchec:
	cmp	DWORD PTR firstreg$[rsp], 4
	jge	SHORT $LN3@watc_pchec
	mov	rax, QWORD PTR used$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	ecx, DWORD PTR newflg$[rsp]
	and	ecx, eax
	mov	eax, ecx
	test	eax, eax
	je	SHORT $LN3@watc_pchec
	jmp	SHORT $LN2@watc_pchec
$LN3@watc_pchec:

; 241  :     if ( firstreg >= 4 ) /* exit if nothing is free */

	cmp	DWORD PTR firstreg$[rsp], 4
	jl	SHORT $LN16@watc_pchec

; 242  :         return( 0 );

	xor	eax, eax
	jmp	$LN1@watc_pchec
$LN16@watc_pchec:

; 243  : 
; 244  :     paranode->sym.state = SYM_TMACRO;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	DWORD PTR [rax+32], 10

; 245  :     switch ( size ) {

	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR tv134[rsp], eax
	cmp	DWORD PTR tv134[rsp], 1
	je	SHORT $LN17@watc_pchec
	cmp	DWORD PTR tv134[rsp], 2
	je	SHORT $LN18@watc_pchec
	cmp	DWORD PTR tv134[rsp], 4
	je	SHORT $LN19@watc_pchec
	cmp	DWORD PTR tv134[rsp], 8
	je	$LN22@watc_pchec
	jmp	$LN5@watc_pchec
$LN17@watc_pchec:

; 246  :     case 1:
; 247  :         paranode->sym.regist[0] = watc_regs8[firstreg];

	movsxd	rax, DWORD PTR firstreg$[rsp]
	lea	rcx, OFFSET FLAT:watc_regs8
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [r8+rdx+48], ax

; 248  :         break;

	jmp	$LN5@watc_pchec
$LN18@watc_pchec:

; 249  :     case 2:
; 250  :         paranode->sym.regist[0] = watc_regs16[firstreg];

	movsxd	rax, DWORD PTR firstreg$[rsp]
	lea	rcx, OFFSET FLAT:watc_regs16
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [r8+rdx+48], ax

; 251  :         break;

	jmp	$LN5@watc_pchec
$LN19@watc_pchec:

; 252  :     case 4:
; 253  :         if ( Ofssize ) {

	movzx	eax, BYTE PTR Ofssize$[rsp]
	test	eax, eax
	je	SHORT $LN20@watc_pchec

; 254  :             paranode->sym.regist[0] = watc_regs32[firstreg];

	movsxd	rax, DWORD PTR firstreg$[rsp]
	lea	rcx, OFFSET FLAT:watc_regs32
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [r8+rdx+48], ax

; 255  :         } else {

	jmp	SHORT $LN21@watc_pchec
$LN20@watc_pchec:

; 256  :             paranode->sym.regist[0] = watc_regs16[firstreg];

	movsxd	rax, DWORD PTR firstreg$[rsp]
	lea	rcx, OFFSET FLAT:watc_regs16
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [r8+rdx+48], ax

; 257  :             paranode->sym.regist[1] = watc_regs16[firstreg+1];

	mov	eax, DWORD PTR firstreg$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:watc_regs16
	mov	edx, 2
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [r8+rdx+48], ax
$LN21@watc_pchec:

; 258  :         }
; 259  :         break;

	jmp	$LN5@watc_pchec
$LN22@watc_pchec:

; 260  :     case 8:
; 261  :         if ( Ofssize ) {

	movzx	eax, BYTE PTR Ofssize$[rsp]
	test	eax, eax
	je	SHORT $LN23@watc_pchec

; 262  :             paranode->sym.regist[0] = watc_regs32[firstreg];

	movsxd	rax, DWORD PTR firstreg$[rsp]
	lea	rcx, OFFSET FLAT:watc_regs32
	mov	edx, 2
	imul	rdx, rdx, 0
	mov	r8, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [r8+rdx+48], ax

; 263  :             paranode->sym.regist[1] = watc_regs32[firstreg+1];

	mov	eax, DWORD PTR firstreg$[rsp]
	inc	eax
	cdqe
	lea	rcx, OFFSET FLAT:watc_regs32
	mov	edx, 2
	imul	rdx, rdx, 1
	mov	r8, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax*4]
	mov	WORD PTR [r8+rdx+48], ax

; 264  :         } else {

	jmp	$LN24@watc_pchec
$LN23@watc_pchec:

; 265  :             /* the AX:BX:CX:DX sequence is for 16-bit only.
; 266  :              * fixme: no support for codeview debug info yet;
; 267  :              * the S_REGISTER record supports max 2 registers only.
; 268  :              */
; 269  :             for( firstreg = 0, regname[0] = NULLC; firstreg < 4; firstreg++ ) {

	mov	DWORD PTR firstreg$[rsp], 0
	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T1[rsp], rax
	cmp	QWORD PTR $T1[rsp], 64			; 00000040H
	jae	SHORT $LN34@watc_pchec
	jmp	SHORT $LN35@watc_pchec
$LN34@watc_pchec:
	call	__report_rangecheckfailure
$LN35@watc_pchec:
	lea	rax, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	mov	rcx, QWORD PTR $T1[rsp]
	mov	BYTE PTR [rax+rcx], 0
	jmp	SHORT $LN9@watc_pchec
$LN7@watc_pchec:
	mov	eax, DWORD PTR firstreg$[rsp]
	inc	eax
	mov	DWORD PTR firstreg$[rsp], eax
$LN9@watc_pchec:
	cmp	DWORD PTR firstreg$[rsp], 4
	jge	SHORT $LN8@watc_pchec

; 270  :                 GetResWName( watc_regs_qw[firstreg], regname + strlen( regname ) );

	lea	rcx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	call	strlen
	lea	rcx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	add	rcx, rax
	mov	rax, rcx
	movsxd	rcx, DWORD PTR firstreg$[rsp]
	lea	rdx, OFFSET FLAT:watc_regs_qw
	mov	QWORD PTR tv271[rsp], rdx
	mov	rdx, rax
	mov	rax, QWORD PTR tv271[rsp]
	mov	ecx, DWORD PTR [rax+rcx*4]
	call	GetResWName

; 271  :                 if ( firstreg != 3 )

	cmp	DWORD PTR firstreg$[rsp], 3
	je	SHORT $LN25@watc_pchec

; 272  :                     strcat( regname, "::");

	lea	rdx, OFFSET FLAT:$SG11375
	lea	rcx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	call	strcat
$LN25@watc_pchec:

; 273  :             }

	jmp	SHORT $LN7@watc_pchec
$LN8@watc_pchec:
$LN24@watc_pchec:
$LN5@watc_pchec:

; 274  :         }
; 275  :     }
; 276  :     if ( paranode->sym.regist[1] ) {

	mov	eax, 2
	imul	rax, rax, 1
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax+48]
	test	eax, eax
	je	SHORT $LN26@watc_pchec

; 277  :         sprintf( regname, "%s::%s",

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax+48]
	xor	edx, edx
	mov	ecx, eax
	call	GetResWName
	mov	QWORD PTR tv209[rsp], rax
	mov	ecx, 2
	imul	rcx, rcx, 1
	mov	rdx, QWORD PTR paranode$[rsp]
	movzx	ecx, WORD PTR [rdx+rcx+48]
	lea	rdx, OFFSET FLAT:?regist@?1??watc_pcheck@@9@9
	call	GetResWName
	mov	rcx, QWORD PTR tv209[rsp]
	mov	r9, rcx
	mov	r8, rax
	lea	rdx, OFFSET FLAT:$SG11378
	lea	rcx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	call	sprintf
	jmp	SHORT $LN27@watc_pchec
$LN26@watc_pchec:

; 278  :                 GetResWName( paranode->sym.regist[1], regist ),
; 279  :                 GetResWName( paranode->sym.regist[0], NULL ) );
; 280  :     } else if ( paranode->sym.regist[0] ) {

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax+48]
	test	eax, eax
	je	SHORT $LN28@watc_pchec

; 281  :         GetResWName( paranode->sym.regist[0], regname );

	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	eax, WORD PTR [rcx+rax+48]
	lea	rdx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	mov	ecx, eax
	call	GetResWName
$LN28@watc_pchec:
$LN27@watc_pchec:

; 282  :     }
; 283  :     *used |= newflg;

	mov	rax, QWORD PTR used$[rsp]
	mov	ecx, DWORD PTR newflg$[rsp]
	mov	eax, DWORD PTR [rax]
	or	eax, ecx
	mov	rcx, QWORD PTR used$[rsp]
	mov	DWORD PTR [rcx], eax

; 284  :     paranode->sym.string_ptr = LclAlloc( strlen( regname ) + 1 );

	lea	rcx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	call	strlen
	inc	rax
	mov	rcx, rax
	call	LclAlloc
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 285  :     strcpy( paranode->sym.string_ptr, regname );

	lea	rdx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	mov	rax, QWORD PTR paranode$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	strcpy

; 286  :     DebugMsg(("watc_pcheck(%s.%s): size=%u ptr=%u far=%u reg=%s\n", proc->sym.name, paranode->sym.name, size, paranode->sym.is_ptr, paranode->sym.isfar, regname ));

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	ecx, BYTE PTR [rcx+45]
	lea	rdx, OFFSET FLAT:?regname@?1??watc_pcheck@@9@9
	mov	QWORD PTR [rsp+48], rdx
	mov	DWORD PTR [rsp+40], eax
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR size$[rsp]
	mov	rax, QWORD PTR paranode$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11380
	call	DoDebugMsg

; 287  :     return( 1 );

	mov	eax, 1
$LN1@watc_pchec:
$LN29@watc_pchec:

; 288  : }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
watc_pcheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
tv75 = 32
tv84 = 36
proc$ = 64
buffer$ = 72
ms32_return PROC

; 330  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 331  :     /* v2.07: changed */
; 332  :     //if( proc->e.procinfo->parasize > ( 2 * CurrWordSize ) )
; 333  :     //    sprintf( buffer + strlen( buffer ), "%d%c", proc->e.procinfo->parasize - (2 * CurrWordSize), ModuleInfo.radix != 10 ? 't' : NULLC );
; 334  :     if( proc->e.procinfo->parasize > ( ms32_maxreg[ModuleInfo.Ofssize] * CurrWordSize ) )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:ms32_maxreg
	movzx	r8d, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR [rdx+rcx*4]
	imul	ecx, r8d
	cmp	DWORD PTR [rax+32], ecx
	jbe	SHORT $LN2@ms32_retur

; 335  :         sprintf( buffer + strlen( buffer ), "%d%c", proc->e.procinfo->parasize - ( ms32_maxreg[ModuleInfo.Ofssize] * CurrWordSize), ModuleInfo.radix != 10 ? 't' : NULLC );

	movzx	eax, BYTE PTR ModuleInfo+396
	cmp	eax, 10
	je	SHORT $LN4@ms32_retur
	mov	DWORD PTR tv75[rsp], 116		; 00000074H
	jmp	SHORT $LN5@ms32_retur
$LN4@ms32_retur:
	mov	DWORD PTR tv75[rsp], 0
$LN5@ms32_retur:
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:ms32_maxreg
	movzx	r8d, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR [rdx+rcx*4]
	imul	ecx, r8d
	mov	eax, DWORD PTR [rax+32]
	sub	eax, ecx
	mov	DWORD PTR tv84[rsp], eax
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strlen
	mov	rcx, QWORD PTR buffer$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	r9d, DWORD PTR tv75[rsp]
	mov	ecx, DWORD PTR tv84[rsp]
	mov	r8d, ecx
	lea	rdx, OFFSET FLAT:$SG11406
	mov	rcx, rax
	call	sprintf
$LN2@ms32_retur:

; 336  :     return;
; 337  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ms32_return ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
regname$ = 40
size$ = 84
tv90 = 96
tv134 = 100
__$ArrayPad$ = 104
proc$ = 128
paranode$ = 136
used$ = 144
ms32_pcheck PROC

; 310  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rdi, rsp
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+128]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 311  :     char regname[32];
; 312  :     int size = SizeFromMemtype( paranode->sym.mem_type, paranode->sym.Ofssize, paranode->sym.type );

	mov	rax, QWORD PTR paranode$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	r8, QWORD PTR [rcx+80]
	mov	edx, eax
	mov	rax, QWORD PTR paranode$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	SizeFromMemtype
	mov	DWORD PTR size$[rsp], eax

; 313  : 
; 314  :     /* v2.07: 16-bit has 3 register params (AX,DX,BX) */
; 315  :     //if ( size > CurrWordSize || *used >= 2 )
; 316  :     if ( size > CurrWordSize || *used >= ms32_maxreg[ModuleInfo.Ofssize] )

	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	DWORD PTR size$[rsp], eax
	jg	SHORT $LN3@ms32_pchec
	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:ms32_maxreg
	mov	rdx, QWORD PTR used$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	cmp	DWORD PTR [rdx], eax
	jl	SHORT $LN2@ms32_pchec
$LN3@ms32_pchec:

; 317  :         return( 0 );

	xor	eax, eax
	jmp	$LN1@ms32_pchec
$LN2@ms32_pchec:

; 318  :     paranode->sym.state = SYM_TMACRO;

	mov	rax, QWORD PTR paranode$[rsp]
	mov	DWORD PTR [rax+32], 10

; 319  :     /* v2.10: for codeview debug info, store the register index in the symbol */
; 320  :     paranode->sym.regist[0] = ModuleInfo.Ofssize ? ms32_regs32[*used] : ms32_regs16[*used];

	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	je	SHORT $LN5@ms32_pchec
	mov	rax, QWORD PTR used$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:ms32_regs32
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR tv90[rsp], eax
	jmp	SHORT $LN6@ms32_pchec
$LN5@ms32_pchec:
	mov	rax, QWORD PTR used$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:ms32_regs16
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR tv90[rsp], eax
$LN6@ms32_pchec:
	mov	eax, 2
	imul	rax, rax, 0
	mov	rcx, QWORD PTR paranode$[rsp]
	movzx	edx, WORD PTR tv90[rsp]
	mov	WORD PTR [rcx+rax+48], dx

; 321  :     GetResWName( ModuleInfo.Ofssize ? ms32_regs32[*used] : ms32_regs16[*used], regname );

	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	je	SHORT $LN7@ms32_pchec
	mov	rax, QWORD PTR used$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:ms32_regs32
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR tv134[rsp], eax
	jmp	SHORT $LN8@ms32_pchec
$LN7@ms32_pchec:
	mov	rax, QWORD PTR used$[rsp]
	movsxd	rax, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:ms32_regs16
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR tv134[rsp], eax
$LN8@ms32_pchec:
	lea	rdx, QWORD PTR regname$[rsp]
	mov	ecx, DWORD PTR tv134[rsp]
	call	GetResWName

; 322  :     paranode->sym.string_ptr = LclAlloc( strlen( regname ) + 1 );

	lea	rcx, QWORD PTR regname$[rsp]
	call	strlen
	inc	rax
	mov	rcx, rax
	call	LclAlloc
	mov	rcx, QWORD PTR paranode$[rsp]
	mov	QWORD PTR [rcx+16], rax

; 323  :     strcpy( paranode->sym.string_ptr, regname );

	lea	rdx, QWORD PTR regname$[rsp]
	mov	rax, QWORD PTR paranode$[rsp]
	mov	rcx, QWORD PTR [rax+16]
	call	strcpy

; 324  :     (*used)++;

	mov	rax, QWORD PTR used$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR used$[rsp]
	mov	DWORD PTR [rcx], eax

; 325  :     return( 1 );

	mov	eax, 1
$LN1@ms32_pchec:

; 326  : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:ms32_pcheck$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
ms32_pcheck ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
ProcCheckOpen PROC

; 2079 : {

$LN5:
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
$LN2@ProcCheckO:

; 2080 :     while( CurrProc != NULL ) {

	cmp	QWORD PTR CurrProc, 0
	je	SHORT $LN3@ProcCheckO

; 2081 :         DebugMsg1(("ProcCheckOpen: unmatched block nesting error, CurrProc=%s\n", CurrProc->sym.name ));

	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12123
	call	DoDebugMsg1

; 2082 :         EmitErr( UNMATCHED_BLOCK_NESTING, CurrProc->sym.name );

	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 142				; 0000008eH
	call	EmitErr

; 2083 :         ProcFini( CurrProc );

	mov	rcx, QWORD PTR CurrProc
	call	ProcFini

; 2084 :     }

	jmp	SHORT $LN2@ProcCheckO
$LN3@ProcCheckO:

; 2085 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ProcCheckOpen ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
tv66 = 0
ProcInit PROC

; 3269 : {

$LN5:
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 3270 :     ProcStack = NULL;

	mov	QWORD PTR ProcStack, 0

; 3271 :     CurrProc  = NULL;

	mov	QWORD PTR CurrProc, 0

; 3272 :     procidx = 1;

	mov	DWORD PTR procidx, 1

; 3273 :     ProcStatus = 0;

	mov	DWORD PTR ProcStatus, 0

; 3274 :     /* v2.09: reset prolog and epilog mode */
; 3275 :     ModuleInfo.prologuemode = PEM_DEFAULT;

	mov	BYTE PTR ModuleInfo+424, 0

; 3276 :     ModuleInfo.epiloguemode = PEM_DEFAULT;

	mov	BYTE PTR ModuleInfo+425, 0

; 3277 :     /* v2.06: no forward references in INVOKE if -Zne is set */
; 3278 :     ModuleInfo.invoke_exprparm = ( Options.strict_masm_compat ? EXPF_NOUNDEF : 0 );

	movzx	eax, BYTE PTR Options+143
	test	eax, eax
	je	SHORT $LN3@ProcInit
	mov	DWORD PTR tv66[rsp], 2
	jmp	SHORT $LN4@ProcInit
$LN3@ProcInit:
	mov	DWORD PTR tv66[rsp], 0
$LN4@ProcInit:
	movzx	eax, BYTE PTR tv66[rsp]
	mov	BYTE PTR ModuleInfo+426, al

; 3279 : #if STACKBASESUPP
; 3280 :     ModuleInfo.basereg[USE16] = T_BP;

	mov	eax, 4
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+500
	mov	DWORD PTR [rcx+rax], 14

; 3281 :     ModuleInfo.basereg[USE32] = T_EBP;

	mov	eax, 4
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+500
	mov	DWORD PTR [rcx+rax], 22

; 3282 : #if AMD64_SUPPORT
; 3283 :     ModuleInfo.basereg[USE64] = T_RBP;

	mov	eax, 4
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+500
	mov	DWORD PTR [rcx+rax], 120		; 00000078H

; 3284 : #endif
; 3285 : #endif
; 3286 : #if AMD64_SUPPORT
; 3287 :     unw_segs_defined = 0;

	mov	BYTE PTR unw_segs_defined, 0

; 3288 : #endif
; 3289 : }

	add	rsp, 16
	pop	rdi
	ret	0
ProcInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
tv74 = 32
tokenarray$ = 64
write_prologue PROC

; 2785 : {

$LN12:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 2786 :     /* reset @ProcStatus flag */
; 2787 :     ProcStatus &= ~PRST_PROLOGUE_NOT_DONE;

	mov	eax, DWORD PTR ProcStatus
	btr	eax, 7
	mov	DWORD PTR ProcStatus, eax

; 2788 : 
; 2789 : #if AMD64_SUPPORT
; 2790 :     if ( ModuleInfo.fctype == FCT_WIN64 && ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) ) {

	cmp	DWORD PTR ModuleInfo+376, 2
	jne	SHORT $LN2@write_prol
	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN2@write_prol

; 2791 :         /* in pass one init reserved stack with 4*8 to force stack frame creation */
; 2792 :         sym_ReservedStack->value = ( Parse_Pass == PASS_1 ? 4 * sizeof( uint_64 ) : CurrProc->e.procinfo->ReservedStack );

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN10@write_prol
	mov	QWORD PTR tv74[rsp], 32			; 00000020H
	jmp	SHORT $LN11@write_prol
$LN10@write_prol:
	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	movsxd	rax, DWORD PTR [rax+56]
	mov	QWORD PTR tv74[rsp], rax
$LN11@write_prol:
	mov	rax, QWORD PTR sym_ReservedStack
	mov	ecx, DWORD PTR tv74[rsp]
	mov	DWORD PTR [rax+16], ecx

; 2793 :         if (Parse_Pass == PASS_1) sym_ReservedStack->hasinvoke = 0;

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN3@write_prol
	mov	rax, QWORD PTR sym_ReservedStack
	mov	DWORD PTR [rax+16], 0
$LN3@write_prol:
$LN2@write_prol:

; 2794 :     }
; 2795 : #endif
; 2796 :     if ( Parse_Pass == PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN4@write_prol

; 2797 :         /* v2.12: calculation of offsets of local variables is done delayed now */
; 2798 :         SetLocalOffsets( CurrProc->e.procinfo );

	mov	rax, QWORD PTR CurrProc
	mov	rcx, QWORD PTR [rax+96]
	call	SetLocalOffsets
$LN4@write_prol:

; 2799 :     }
; 2800 :     ProcStatus |= PRST_INSIDE_PROLOGUE;

	mov	eax, DWORD PTR ProcStatus
	or	eax, 1
	mov	DWORD PTR ProcStatus, eax

; 2801 :     /* there are 3 cases:
; 2802 :      * option prologue:NONE           proc_prologue == NULL
; 2803 :      * option prologue:default        *proc_prologue == NULLC
; 2804 :      * option prologue:usermacro      *proc_prologue != NULLC
; 2805 :      */
; 2806 :     if ( ModuleInfo.prologuemode == PEM_DEFAULT ) {

	movzx	eax, BYTE PTR ModuleInfo+424
	test	eax, eax
	jne	SHORT $LN5@write_prol

; 2807 :         DebugMsg1(("write_prologue(%s): default prologue\n", CurrProc->sym.name ));

	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12449
	call	DoDebugMsg1

; 2808 :         write_default_prologue();

	call	write_default_prologue
	jmp	SHORT $LN6@write_prol
$LN5@write_prol:

; 2809 :     } else if ( ModuleInfo.prologuemode == PEM_NONE ) {

	movzx	eax, BYTE PTR ModuleInfo+424
	cmp	eax, 2
	jne	SHORT $LN7@write_prol

; 2810 :         DebugMsg1(("write_prologue(%s): prologue is NULL\n", CurrProc->sym.name  ));

	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12452
	call	DoDebugMsg1

; 2811 :     } else {

	jmp	SHORT $LN8@write_prol
$LN7@write_prol:

; 2812 :         DebugMsg1(("write_prologue(%s): userdefined prologue %s\n", CurrProc->sym.name , ModuleInfo.proc_prologue ));

	mov	r8, QWORD PTR ModuleInfo+320
	mov	rax, QWORD PTR CurrProc
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12453
	call	DoDebugMsg1

; 2813 :         write_userdef_prologue( tokenarray );

	mov	rcx, QWORD PTR tokenarray$[rsp]
	call	write_userdef_prologue
$LN8@write_prol:
$LN6@write_prol:

; 2814 :     }
; 2815 :     ProcStatus &= ~PRST_INSIDE_PROLOGUE;

	mov	eax, DWORD PTR ProcStatus
	and	eax, -2
	mov	DWORD PTR ProcStatus, eax

; 2816 :     /* v2.10: for debug info, calculate prologue size */
; 2817 :     CurrProc->e.procinfo->size_prolog = GetCurrOffset() - CurrProc->sym.offset;

	call	GetCurrOffset
	mov	rcx, QWORD PTR CurrProc
	sub	eax, DWORD PTR [rcx+16]
	mov	rcx, QWORD PTR CurrProc
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+85], al

; 2818 :     return;
; 2819 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
write_prologue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
info$ = 32
is_iret$ = 40
p$ = 48
rc$ = 56
buffer$ = 80
tv161 = 704
tv167 = 708
tv204 = 712
tv187 = 720
__$ArrayPad$ = 728
i$ = 752
tokenarray$ = 760
count$ = 768
RetInstr PROC

; 3169 : {

$LN28:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 736				; 000002e0H
	mov	rdi, rsp
	mov	ecx, 184				; 000000b8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+752]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 3170 :     struct proc_info   *info;
; 3171 :     bool        is_iret = FALSE;

	mov	BYTE PTR is_iret$[rsp], 0

; 3172 :     char        *p;
; 3173 : #ifdef DEBUG_OUT
; 3174 :     ret_code    rc;
; 3175 : #endif
; 3176 :     char        buffer[MAX_LINE_LEN]; /* stores modified RETN/RETF/IRET instruction */
; 3177 : 
; 3178 :     DebugMsg1(( "RetInstr() enter\n" ));

	lea	rcx, OFFSET FLAT:$SG12599
	call	DoDebugMsg1

; 3179 : 
; 3180 : #if AMD64_SUPPORT
; 3181 :     if( tokenarray[i].tokval == T_IRET || tokenarray[i].tokval == T_IRETD || tokenarray[i].tokval == T_IRETQ )

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 622		; 0000026eH
	je	SHORT $LN5@RetInstr
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 623		; 0000026fH
	je	SHORT $LN5@RetInstr
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 1203		; 000004b3H
	jne	SHORT $LN4@RetInstr
$LN5@RetInstr:

; 3182 : #else
; 3183 :     if( tokenarray[i].tokval == T_IRET || tokenarray[i].tokval == T_IRETD )
; 3184 : #endif
; 3185 :         is_iret = TRUE;

	mov	BYTE PTR is_iret$[rsp], 1
$LN4@RetInstr:

; 3186 : 
; 3187 :     if ( ModuleInfo.epiloguemode == PEM_MACRO ) {

	movzx	eax, BYTE PTR ModuleInfo+425
	cmp	eax, 1
	jne	SHORT $LN6@RetInstr

; 3188 : #if FASTPASS
; 3189 :         /* don't run userdefined epilogue macro if pass > 1 */
; 3190 :         if ( UseSavedState ) {

	movzx	eax, BYTE PTR UseSavedState
	test	eax, eax
	je	SHORT $LN7@RetInstr

; 3191 :             if ( Parse_Pass > PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, 0
	jbe	SHORT $LN8@RetInstr

; 3192 :                 DebugMsg(( "RetInstr() exit\n" ));

	lea	rcx, OFFSET FLAT:$SG12605
	call	DoDebugMsg

; 3193 :                 //return( NOT_ERROR );
; 3194 :                 return( ParseLine( tokenarray ) );

	mov	rcx, QWORD PTR tokenarray$[rsp]
	call	ParseLine
	jmp	$LN1@RetInstr
$LN8@RetInstr:

; 3195 :             }
; 3196 :             /* handle the current line as if it is REPLACED by the macro content */
; 3197 :             *(LineStoreCurr->line) = ';';

	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR LineStoreCurr
	mov	BYTE PTR [rcx+rax+16], 59		; 0000003bH
$LN7@RetInstr:

; 3198 :         }
; 3199 : #endif
; 3200 : #ifdef DEBUG_OUT
; 3201 :         rc = write_userdef_epilogue( is_iret, tokenarray );

	mov	rdx, QWORD PTR tokenarray$[rsp]
	movzx	ecx, BYTE PTR is_iret$[rsp]
	call	write_userdef_epilogue
	mov	DWORD PTR rc$[rsp], eax

; 3202 :         DebugMsg(( "RetInstr() exit\n" ));

	lea	rcx, OFFSET FLAT:$SG12606
	call	DoDebugMsg

; 3203 :         return( rc );

	mov	eax, DWORD PTR rc$[rsp]
	jmp	$LN1@RetInstr
$LN6@RetInstr:

; 3204 : #else
; 3205 :         return( write_userdef_epilogue( is_iret, tokenarray ) );
; 3206 : #endif
; 3207 :     }
; 3208 : 
; 3209 :     if ( ModuleInfo.list ) {

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 11
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@RetInstr

; 3210 :         LstWrite( LSTTYPE_DIRECTIVE, GetCurrOffset(), NULL );

	call	GetCurrOffset
	xor	r8d, r8d
	mov	edx, eax
	mov	ecx, 4
	call	LstWrite
$LN9@RetInstr:

; 3211 :     }
; 3212 : 
; 3213 :     strcpy( buffer, tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	strcpy

; 3214 :     p = buffer + strlen( buffer );

	lea	rcx, QWORD PTR buffer$[rsp]
	call	strlen
	lea	rax, QWORD PTR buffer$[rsp+rax]
	mov	QWORD PTR p$[rsp], rax

; 3215 : 
; 3216 :     write_default_epilogue();

	call	write_default_epilogue

; 3217 : 
; 3218 :     info = CurrProc->e.procinfo;

	mov	rax, QWORD PTR CurrProc
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR info$[rsp], rax

; 3219 : 
; 3220 :     /* skip this part for IRET */
; 3221 :     if( is_iret == FALSE ) {

	movzx	eax, BYTE PTR is_iret$[rsp]
	test	eax, eax
	jne	SHORT $LN10@RetInstr

; 3222 :         if ( CurrProc->sym.mem_type == MT_FAR )

	mov	rax, QWORD PTR CurrProc
	cmp	DWORD PTR [rax+36], 130			; 00000082H
	jne	SHORT $LN11@RetInstr

; 3223 :             *p++ = 'f';   /* ret -> retf */

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 102			; 00000066H
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN12@RetInstr
$LN11@RetInstr:

; 3224 :         else
; 3225 :             *p++ = 'n';     /* ret -> retn */

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 110			; 0000006eH
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN12@RetInstr:
$LN10@RetInstr:

; 3226 :     }
; 3227 :     i++; /* skip directive */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 3228 :     if ( info->parasize || ( count != i ) )

	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN14@RetInstr
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR count$[rsp], eax
	je	SHORT $LN13@RetInstr
$LN14@RetInstr:

; 3229 :         *p++ = ' ';

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 32			; 00000020H
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN13@RetInstr:

; 3230 :     *p = NULLC;

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0

; 3231 :     /* RET without argument? Then calculate the value */
; 3232 :     if( is_iret == FALSE && count == i ) {

	movzx	eax, BYTE PTR is_iret$[rsp]
	test	eax, eax
	jne	$LN15@RetInstr
	mov	eax, DWORD PTR i$[rsp]
	cmp	DWORD PTR count$[rsp], eax
	jne	$LN15@RetInstr

; 3233 :         if ( ModuleInfo.epiloguemode != PEM_NONE ) {

	movzx	eax, BYTE PTR ModuleInfo+425
	cmp	eax, 2
	je	$LN17@RetInstr

; 3234 :             switch( CurrProc->sym.langtype ) {

	mov	rax, QWORD PTR CurrProc
	mov	eax, DWORD PTR [rax+76]
	mov	DWORD PTR tv161[rsp], eax
	cmp	DWORD PTR tv161[rsp], 3
	je	$LN21@RetInstr
	cmp	DWORD PTR tv161[rsp], 3
	jle	$LN2@RetInstr
	cmp	DWORD PTR tv161[rsp], 6
	jle	SHORT $LN18@RetInstr
	cmp	DWORD PTR tv161[rsp], 7
	je	SHORT $LN20@RetInstr
	jmp	$LN2@RetInstr
$LN18@RetInstr:

; 3235 :             case LANG_BASIC:
; 3236 :             case LANG_FORTRAN:
; 3237 :             case LANG_PASCAL:
; 3238 :                 if( info->parasize != 0 ) {

	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN19@RetInstr

; 3239 :                     sprintf( p, "%d%c", info->parasize, ModuleInfo.radix != 10 ? 't' : NULLC );

	movzx	eax, BYTE PTR ModuleInfo+396
	cmp	eax, 10
	je	SHORT $LN24@RetInstr
	mov	DWORD PTR tv167[rsp], 116		; 00000074H
	jmp	SHORT $LN25@RetInstr
$LN24@RetInstr:
	mov	DWORD PTR tv167[rsp], 0
$LN25@RetInstr:
	mov	r9d, DWORD PTR tv167[rsp]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+32]
	lea	rdx, OFFSET FLAT:$SG12618
	mov	rcx, QWORD PTR p$[rsp]
	call	sprintf
$LN19@RetInstr:

; 3240 :                 }
; 3241 :                 break;

	jmp	$LN2@RetInstr
$LN20@RetInstr:

; 3242 :             case LANG_FASTCALL:
; 3243 :                 fastcall_tab[ModuleInfo.fctype].handlereturn( CurrProc, buffer );

	movsxd	rax, DWORD PTR ModuleInfo+376
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:fastcall_tab
	mov	QWORD PTR tv204[rsp], rcx
	lea	rdx, QWORD PTR buffer$[rsp]
	mov	rcx, QWORD PTR CurrProc
	mov	r8, QWORD PTR tv204[rsp]
	call	QWORD PTR [r8+rax+8]

; 3244 :                 break;

	jmp	SHORT $LN2@RetInstr
$LN21@RetInstr:

; 3245 :             case LANG_STDCALL:
; 3246 :                 if( !info->has_vararg && info->parasize != 0 ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN22@RetInstr
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN22@RetInstr

; 3247 :                     sprintf( p, "%d%c", info->parasize, ModuleInfo.radix != 10 ? 't' : NULLC  );

	movzx	eax, BYTE PTR ModuleInfo+396
	cmp	eax, 10
	je	SHORT $LN26@RetInstr
	mov	DWORD PTR tv187[rsp], 116		; 00000074H
	jmp	SHORT $LN27@RetInstr
$LN26@RetInstr:
	mov	DWORD PTR tv187[rsp], 0
$LN27@RetInstr:
	mov	r9d, DWORD PTR tv187[rsp]
	mov	rax, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rax+32]
	lea	rdx, OFFSET FLAT:$SG12622
	mov	rcx, QWORD PTR p$[rsp]
	call	sprintf
$LN22@RetInstr:
$LN2@RetInstr:
$LN17@RetInstr:

; 3248 :                 }
; 3249 :                 break;
; 3250 :             }
; 3251 :         }
; 3252 :     } else {

	jmp	SHORT $LN16@RetInstr
$LN15@RetInstr:

; 3253 :         /* v2.04: changed. Now works for both RET nn and IRETx */
; 3254 :         /* v2.06: changed. Now works even if RET has ben "renamed" */
; 3255 :         strcpy( p, tokenarray[i].tokpos );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy
$LN16@RetInstr:

; 3256 :     }
; 3257 :     AddLineQueue( buffer );

	lea	rcx, QWORD PTR buffer$[rsp]
	call	AddLineQueue

; 3258 :     RunLineQueue();

	call	RunLineQueue

; 3259 : 
; 3260 :     DebugMsg1(( "RetInstr() exit\n" ));

	lea	rcx, OFFSET FLAT:$SG12623
	call	DoDebugMsg1

; 3261 : 
; 3262 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@RetInstr:

; 3263 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:RetInstr$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 736				; 000002e0H
	pop	rdi
	ret	0
RetInstr ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
curr$ = 32
newl$ = 40
oldl$ = 48
proc$ = 80
src$ = 88
CopyPrototype PROC

; 1601 : {

$LN12:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1602 :     struct dsym *curr;
; 1603 :     struct dsym *newl;
; 1604 :     struct dsym *oldl;
; 1605 : 
; 1606 :     if ( src->sym.isproc == FALSE )

	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN8@CopyProtot

; 1607 :         return( ERROR );

	mov	eax, -1
	jmp	$LN1@CopyProtot
$LN8@CopyProtot:

; 1608 :     memcpy(proc->e.procinfo, src->e.procinfo, sizeof( struct proc_info ) );

	mov	r8d, 88					; 00000058H
	mov	rax, QWORD PTR src$[rsp]
	mov	rdx, QWORD PTR [rax+96]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rax+96]
	call	memcpy

; 1609 :     proc->sym.mem_type = src->sym.mem_type;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	mov	ecx, DWORD PTR [rcx+36]
	mov	DWORD PTR [rax+36], ecx

; 1610 :     proc->sym.langtype = src->sym.langtype;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR src$[rsp]
	mov	ecx, DWORD PTR [rcx+76]
	mov	DWORD PTR [rax+76], ecx

; 1611 : #if MANGLERSUPP
; 1612 :     proc->sym.mangler  = src->sym.mangler;
; 1613 : #endif
; 1614 :     proc->sym.ispublic   = src->sym.ispublic;

	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	and	al, 1
	shl	al, 7
	mov	rcx, QWORD PTR proc$[rsp]
	movzx	ecx, BYTE PTR [rcx+40]
	and	cl, 127					; 0000007fH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1615 :     /* we use the PROTO part, not the TYPE part */
; 1616 :     //dir->sym.seg_ofssize = src->sym.Ofssize;
; 1617 :     proc->sym.seg_ofssize = src->sym.seg_ofssize;

	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	and	al, 3
	and	al, 3
	mov	rcx, QWORD PTR proc$[rsp]
	movzx	ecx, BYTE PTR [rcx+47]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+47], al

; 1618 :     proc->sym.isproc = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	or	al, 8
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+41], al

; 1619 :     proc->e.procinfo->paralist = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR [rax+8], 0

; 1620 :     for ( curr = src->e.procinfo->paralist; curr; curr = curr->nextparam ) {

	mov	rax, QWORD PTR src$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN4@CopyProtot
$LN2@CopyProtot:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN4@CopyProtot:
	cmp	QWORD PTR curr$[rsp], 0
	je	$LN3@CopyProtot

; 1621 :         newl = LclAlloc( sizeof( struct dsym ) );

	mov	ecx, 120				; 00000078H
	call	LclAlloc
	mov	QWORD PTR newl$[rsp], rax

; 1622 :         memcpy( newl, curr, sizeof( struct dsym ) );

	mov	r8d, 120				; 00000078H
	mov	rdx, QWORD PTR curr$[rsp]
	mov	rcx, QWORD PTR newl$[rsp]
	call	memcpy

; 1623 :         newl->nextparam = NULL;

	mov	rax, QWORD PTR newl$[rsp]
	mov	QWORD PTR [rax+112], 0

; 1624 :         if ( proc->e.procinfo->paralist == NULL)

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+8], 0
	jne	SHORT $LN9@CopyProtot

; 1625 :             proc->e.procinfo->paralist = newl;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR newl$[rsp]
	mov	QWORD PTR [rax+8], rcx
	jmp	SHORT $LN10@CopyProtot
$LN9@CopyProtot:

; 1626 :         else {
; 1627 :             for ( oldl = proc->e.procinfo->paralist; oldl->nextparam; oldl = oldl->nextparam );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR oldl$[rsp], rax
	jmp	SHORT $LN7@CopyProtot
$LN5@CopyProtot:
	mov	rax, QWORD PTR oldl$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR oldl$[rsp], rax
$LN7@CopyProtot:
	mov	rax, QWORD PTR oldl$[rsp]
	cmp	QWORD PTR [rax+112], 0
	je	SHORT $LN6@CopyProtot
	jmp	SHORT $LN5@CopyProtot
$LN6@CopyProtot:

; 1628 :             oldl->nextparam = newl;

	mov	rax, QWORD PTR oldl$[rsp]
	mov	rcx, QWORD PTR newl$[rsp]
	mov	QWORD PTR [rax+112], rcx
$LN10@CopyProtot:

; 1629 :         }
; 1630 :     }

	jmp	$LN2@CopyProtot
$LN3@CopyProtot:

; 1631 :     DebugMsg1(("CopyPrototype(%s,src=%s): ofssize=%u\n",

	mov	rax, QWORD PTR src$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	and	al, 3
	movzx	eax, al
	mov	r9d, eax
	mov	rax, QWORD PTR src$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11939
	call	DoDebugMsg1

; 1632 :                proc->sym.name, src->sym.name, src->sym.seg_ofssize ));
; 1633 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@CopyProtot:

; 1634 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
CopyPrototype ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
curr$ = 48
next$ = 56
proc$ = 80
DeleteProc PROC

; 1366 : {

$LN14:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1367 :     struct dsym *curr;
; 1368 :     struct dsym *next;
; 1369 : 
; 1370 :     DebugMsg(("DeleteProc(%s) enter\n", proc->sym.name ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11845
	call	DoDebugMsg

; 1371 :     if ( proc->sym.state == SYM_INTERNAL ) {

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+32], 1
	jne	$LN8@DeleteProc

; 1372 : 
; 1373 :         /* delete all local symbols ( params, locals, labels ) */
; 1374 :         for( curr = proc->e.procinfo->labellist; curr; ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR curr$[rsp], rax
$LN2@DeleteProc:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN3@DeleteProc

; 1375 :             next = curr->e.nextll;

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR next$[rsp], rax

; 1376 :             DebugMsg(("DeleteProc(%s): free %s [next=%p]\n", proc->sym.name, curr->sym.name, curr->next ));

	mov	rax, QWORD PTR curr$[rsp]
	mov	r9, QWORD PTR [rax+104]
	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11848
	call	DoDebugMsg

; 1377 :             SymFree( &curr->sym );

	mov	rax, QWORD PTR curr$[rsp]
	mov	rcx, rax
	call	SymFree

; 1378 :             curr = next;

	mov	rax, QWORD PTR next$[rsp]
	mov	QWORD PTR curr$[rsp], rax

; 1379 :         }

	jmp	SHORT $LN2@DeleteProc
$LN3@DeleteProc:

; 1380 : 
; 1381 :         if ( proc->e.procinfo->regslist )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]

; 1382 :             LclFree( proc->e.procinfo->regslist );
; 1383 : 
; 1384 :         if ( proc->e.procinfo->prologuearg )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]

; 1385 :             LclFree( proc->e.procinfo->prologuearg );
; 1386 : 
; 1387 :         if ( Options.line_numbers && proc->sym.state == SYM_INTERNAL )

	movzx	eax, BYTE PTR Options+1
	test	eax, eax
	je	SHORT $LN12@DeleteProc
	mov	rax, QWORD PTR proc$[rsp]
$LN12@DeleteProc:

; 1388 :             LclFree( proc->sym.debuginfo );
; 1389 : #if FASTMEM==0 || defined(DEBUG_OUT)
; 1390 :     } else {

	jmp	SHORT $LN9@DeleteProc
$LN8@DeleteProc:

; 1391 :         /* PROTOs have just a parameter list, usually without names */
; 1392 :         for( curr = proc->e.procinfo->paralist; curr; ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
$LN5@DeleteProc:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN6@DeleteProc

; 1393 :             next = curr->nextparam;

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR next$[rsp], rax

; 1394 :             DebugMsg(("DeleteProc(%s): free %p (%s) [next=%p]\n", proc->sym.name, curr, curr->sym.name, curr->next ));

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR curr$[rsp]
	mov	r9, QWORD PTR [rax+8]
	mov	r8, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11852
	call	DoDebugMsg

; 1395 :             SymFree( &curr->sym );

	mov	rax, QWORD PTR curr$[rsp]
	mov	rcx, rax
	call	SymFree

; 1396 :             curr = next;

	mov	rax, QWORD PTR next$[rsp]
	mov	QWORD PTR curr$[rsp], rax

; 1397 :         }

	jmp	SHORT $LN5@DeleteProc
$LN6@DeleteProc:
$LN9@DeleteProc:

; 1398 : #endif
; 1399 :     }
; 1400 :     LclFree( proc->e.procinfo );
; 1401 :     return;
; 1402 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
DeleteProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
info$1 = 32
tv71 = 40
tv79 = 48
tv133 = 56
sym$ = 80
name$ = 88
state$ = 96
CreateProc PROC

; 1314 : {

$LN18:
	mov	DWORD PTR [rsp+24], r8d
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1315 :     if ( sym == NULL )

	cmp	QWORD PTR sym$[rsp], 0
	jne	SHORT $LN4@CreateProc

; 1316 :         sym = ( *name ? SymCreate( name ) : SymAlloc( name ) );

	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN14@CreateProc
	mov	rcx, QWORD PTR name$[rsp]
	call	SymCreate
	mov	QWORD PTR tv71[rsp], rax
	jmp	SHORT $LN15@CreateProc
$LN14@CreateProc:
	mov	rcx, QWORD PTR name$[rsp]
	call	SymAlloc
	mov	QWORD PTR tv71[rsp], rax
$LN15@CreateProc:
	mov	rax, QWORD PTR tv71[rsp]
	mov	QWORD PTR sym$[rsp], rax
	jmp	SHORT $LN5@CreateProc
$LN4@CreateProc:

; 1317 :     else
; 1318 :         sym_remove_table( ( sym->state == SYM_UNDEFINED ) ? &SymTables[TAB_UNDEF] : &SymTables[TAB_EXT], (struct dsym *)sym );

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN16@CreateProc
	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:SymTables
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv79[rsp], rax
	jmp	SHORT $LN17@CreateProc
$LN16@CreateProc:
	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:SymTables
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR tv79[rsp], rax
$LN17@CreateProc:
	mov	rdx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR tv79[rsp]
	call	sym_remove_table
$LN5@CreateProc:

; 1319 : 
; 1320 :     if ( sym ) {

	cmp	QWORD PTR sym$[rsp], 0
	je	$LN6@CreateProc

; 1321 :         struct proc_info *info;
; 1322 :         sym->state = state;

	mov	rax, QWORD PTR sym$[rsp]
	mov	ecx, DWORD PTR state$[rsp]
	mov	DWORD PTR [rax+32], ecx

; 1323 :         if ( state != SYM_INTERNAL ) {

	cmp	DWORD PTR state$[rsp], 1
	je	SHORT $LN7@CreateProc

; 1324 :             sym->seg_ofssize = ModuleInfo.Ofssize;

	movzx	eax, BYTE PTR ModuleInfo+404
	and	al, 3
	mov	rcx, QWORD PTR sym$[rsp]
	movzx	ecx, BYTE PTR [rcx+47]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR sym$[rsp]
	mov	BYTE PTR [rcx+47], al
$LN7@CreateProc:

; 1325 :         }
; 1326 :         info = LclAlloc( sizeof( struct proc_info ) );

	mov	ecx, 88					; 00000058H
	call	LclAlloc
	mov	QWORD PTR info$1[rsp], rax

; 1327 :         ((struct dsym *)sym)->e.procinfo = info;

	mov	rax, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR info$1[rsp]
	mov	QWORD PTR [rax+96], rcx

; 1328 :         info->regslist = NULL;

	mov	rax, QWORD PTR info$1[rsp]
	mov	QWORD PTR [rax], 0

; 1329 :         info->paralist = NULL;

	mov	rax, QWORD PTR info$1[rsp]
	mov	QWORD PTR [rax+8], 0

; 1330 :         info->locallist = NULL;

	mov	rax, QWORD PTR info$1[rsp]
	mov	QWORD PTR [rax+16], 0

; 1331 :         info->labellist = NULL;

	mov	rax, QWORD PTR info$1[rsp]
	mov	QWORD PTR [rax+24], 0

; 1332 :         info->parasize = 0;

	mov	rax, QWORD PTR info$1[rsp]
	mov	DWORD PTR [rax+32], 0

; 1333 :         info->localsize = 0;

	mov	rax, QWORD PTR info$1[rsp]
	mov	DWORD PTR [rax+36], 0

; 1334 :         info->prologuearg = NULL;

	mov	rax, QWORD PTR info$1[rsp]
	mov	QWORD PTR [rax+40], 0

; 1335 :         info->flags = 0;

	mov	rax, QWORD PTR info$1[rsp]
	mov	BYTE PTR [rax+84], 0

; 1336 :         switch ( sym->state ) {

	mov	rax, QWORD PTR sym$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR tv133[rsp], eax
	cmp	DWORD PTR tv133[rsp], 1
	je	SHORT $LN8@CreateProc
	cmp	DWORD PTR tv133[rsp], 2
	je	$LN12@CreateProc
	jmp	$LN2@CreateProc
$LN8@CreateProc:

; 1337 :         case SYM_INTERNAL:
; 1338 :             /* v2.04: don't use sym_add_table() and thus
; 1339 :              * free the <next> member field!
; 1340 :              */
; 1341 :             if ( SymTables[TAB_PROC].head == NULL )

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN9@CreateProc

; 1342 :                 SymTables[TAB_PROC].head = (struct dsym *)sym;

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	mov	rdx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rcx+rax], rdx
	jmp	SHORT $LN10@CreateProc
$LN9@CreateProc:

; 1343 :             else {
; 1344 :                 SymTables[TAB_PROC].tail->nextproc = (struct dsym *)sym;

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rax+112], rcx
$LN10@CreateProc:

; 1345 :             }
; 1346 :             SymTables[TAB_PROC].tail = (struct dsym *)sym;

	mov	eax, 16
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:SymTables
	mov	rdx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rcx+rax+8], rdx

; 1347 :             procidx++;

	mov	eax, DWORD PTR procidx
	inc	eax
	mov	DWORD PTR procidx, eax

; 1348 :             if ( Options.line_numbers ) {

	movzx	eax, BYTE PTR Options+1
	test	eax, eax
	je	SHORT $LN11@CreateProc

; 1349 :                 sym->debuginfo = LclAlloc( sizeof( struct debug_info ) );

	mov	ecx, 24
	call	LclAlloc
	mov	rcx, QWORD PTR sym$[rsp]
	mov	QWORD PTR [rcx+64], rax

; 1350 :                 sym->debuginfo->file = get_curr_srcfile();

	call	get_curr_srcfile
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rcx+64]
	mov	WORD PTR [rcx+14], ax
$LN11@CreateProc:

; 1351 :             }
; 1352 :             break;

	jmp	SHORT $LN2@CreateProc
$LN12@CreateProc:

; 1353 :         case SYM_EXTERNAL:
; 1354 :             sym->weak = TRUE;

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	or	al, 8
	mov	rcx, QWORD PTR sym$[rsp]
	mov	BYTE PTR [rcx+47], al

; 1355 :             sym_add_table( &SymTables[TAB_EXT], (struct dsym *)sym );

	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:SymTables
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR sym$[rsp]
	mov	rcx, rax
	call	sym_add_table
$LN2@CreateProc:
$LN6@CreateProc:

; 1356 :             break;
; 1357 :         }
; 1358 :     }
; 1359 :     return( sym );

	mov	rax, QWORD PTR sym$[rsp]

; 1360 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
CreateProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\proc.c
_TEXT	SEGMENT
token$ = 48
regist$ = 56
newmemtype$ = 64
newofssize$ = 68
oldofssize$ = 69
oldpublic$ = 70
Ofssize$1 = 71
idx$2 = 72
max$3 = 76
sym$4 = 80
cnt$5 = 88
j$6 = 92
tv141 = 96
tv157 = 100
tv213 = 104
tv858 = 108
tv219 = 112
proc$ = 144
i$ = 152
tokenarray$ = 160
IsPROC$ = 168
langtype$ = 176
ParseProc PROC

; 1000 : {

$LN91:
	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	rdi, rsp
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 1001 :     char            *token;
; 1002 :     uint_16         *regist;
; 1003 :     //int             type;
; 1004 :     //enum lang_type  langtype;
; 1005 :     enum memtype    newmemtype;
; 1006 :     uint_8          newofssize;
; 1007 :     uint_8          oldofssize;
; 1008 : #if FASTPASS
; 1009 :     bool            oldpublic = proc->sym.ispublic;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	mov	BYTE PTR oldpublic$[rsp], al

; 1010 : #endif
; 1011 : 
; 1012 :     /* set some default values */
; 1013 : 
; 1014 :     if ( IsPROC ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	$LN11@ParseProc

; 1015 :         proc->e.procinfo->isexport = ModuleInfo.procs_export;

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 3
	and	eax, 1
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	and	al, 1
	shl	al, 2
	movzx	ecx, BYTE PTR [rcx+84]
	and	cl, 251					; 000000fbH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al

; 1016 :         /* don't overwrite a PUBLIC directive for this symbol! */
; 1017 :         if ( ModuleInfo.procs_private == FALSE )

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 2
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN12@ParseProc

; 1018 :             proc->sym.ispublic = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 128					; 00000080H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+40], al
$LN12@ParseProc:

; 1019 : 
; 1020 :         /* set type of epilog code */
; 1021 : #if STACKBASESUPP
; 1022 :         /* v2.11: if base register isn't [E|R]BP, don't use LEAVE! */
; 1023 :         if ( GetRegNo( proc->e.procinfo->basereg ) != 5 ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, WORD PTR [rax+86]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	cmp	eax, 5
	je	SHORT $LN13@ParseProc

; 1024 :             proc->e.procinfo->pe_type = 0;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 253					; 000000fdH
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al

; 1025 :         } else

	jmp	$LN14@ParseProc
$LN13@ParseProc:

; 1026 : #endif
; 1027 :         if ( Options.masm_compat_gencode ) {

	movzx	eax, BYTE PTR Options+144
	test	eax, eax
	je	SHORT $LN15@ParseProc

; 1028 :             /* v2.07: Masm uses LEAVE if
; 1029 :              * - current code is 32-bit/64-bit or
; 1030 :              * - cpu is .286 or .586+ */
; 1031 :             //proc->e.procinfo->pe_type = ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_286 );
; 1032 :             proc->e.procinfo->pe_type = ( ModuleInfo.Ofssize > USE16 ||

	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	jg	SHORT $LN83@ParseProc
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 32					; 00000020H
	je	SHORT $LN83@ParseProc
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 80					; 00000050H
	jge	SHORT $LN83@ParseProc
	mov	DWORD PTR tv141[rsp], 0
	jmp	SHORT $LN84@ParseProc
$LN83@ParseProc:
	mov	DWORD PTR tv141[rsp], 1
$LN84@ParseProc:
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	ecx, BYTE PTR tv141[rsp]
	and	cl, 1
	shl	cl, 1
	movzx	eax, BYTE PTR [rax+84]
	and	al, 253					; 000000fdH
	or	al, cl
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al

; 1033 :                                          ( ModuleInfo.curr_cpu & P_CPU_MASK ) == P_286 ||
; 1034 :                                          ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_586 ) ? 1 : 0;
; 1035 :         } else {

	jmp	SHORT $LN16@ParseProc
$LN15@ParseProc:

; 1036 :             /* use LEAVE for 286, 386 (and x64) */
; 1037 :             proc->e.procinfo->pe_type = ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) == P_286 ||

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 32					; 00000020H
	je	SHORT $LN85@ParseProc
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 112				; 00000070H
	je	SHORT $LN85@ParseProc
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	je	SHORT $LN85@ParseProc
	mov	DWORD PTR tv157[rsp], 0
	jmp	SHORT $LN86@ParseProc
$LN85@ParseProc:
	mov	DWORD PTR tv157[rsp], 1
$LN86@ParseProc:
	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	ecx, BYTE PTR tv157[rsp]
	and	cl, 1
	shl	cl, 1
	movzx	eax, BYTE PTR [rax+84]
	and	al, 253					; 000000fdH
	or	al, cl
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al
$LN16@ParseProc:
$LN14@ParseProc:
$LN11@ParseProc:

; 1038 : #if AMD64_SUPPORT
; 1039 :                                          ( ModuleInfo.curr_cpu & P_CPU_MASK ) == P_64 ||
; 1040 : #endif
; 1041 :                                          ( ModuleInfo.curr_cpu & P_CPU_MASK ) == P_386 ) ? 1 : 0;
; 1042 :         }
; 1043 :     }
; 1044 : 
; 1045 : #if MANGLERSUPP
; 1046 :     /* OW name mangling */
; 1047 :     if( tokenarray[i].token == T_STRING && IsPROC ) {
; 1048 :         /* SetMangler() will ignore LANG_NONE */
; 1049 :         SetMangler( &proc->sym, LANG_NONE, tokenarray[i].string_ptr );
; 1050 :         i++;
; 1051 :     }
; 1052 : #endif
; 1053 : 
; 1054 :     /* 1. attribute is <distance> */
; 1055 :     if ( tokenarray[i].token == T_STYPE &&
; 1056 :         tokenarray[i].tokval >= T_NEAR && tokenarray[i].tokval <= T_FAR32 ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 6
	jne	$LN17@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 221		; 000000ddH
	jb	$LN17@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 226		; 000000e2H
	ja	$LN17@ParseProc

; 1057 :         uint_8 Ofssize = GetSflagsSp( tokenarray[i].tokval );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+4]
	mov	BYTE PTR Ofssize$1[rsp], al

; 1058 :         /* v2.06: SimpleType is obsolete */
; 1059 :         /* v2.05: FindStdType() is obsolete */
; 1060 :         //type = tokenarray[i].bytval;
; 1061 :         //type = FindStdType(tokenarray[i].value);
; 1062 :         if ( IsPROC ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN19@ParseProc

; 1063 :             if ( ( ModuleInfo.Ofssize >= USE32 && Ofssize == USE16 ) ||

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 1
	jl	SHORT $LN22@ParseProc
	movzx	eax, BYTE PTR Ofssize$1[rsp]
	test	eax, eax
	je	SHORT $LN21@ParseProc
$LN22@ParseProc:
	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	jne	SHORT $LN20@ParseProc
	movzx	eax, BYTE PTR Ofssize$1[rsp]
	cmp	eax, 1
	jne	SHORT $LN20@ParseProc
$LN21@ParseProc:

; 1064 :                 ( ModuleInfo.Ofssize == USE16 && Ofssize == USE32 ) ) {
; 1065 :                 EmitError( DISTANCE_INVALID );

	mov	ecx, 171				; 000000abH
	call	EmitError
$LN20@ParseProc:
$LN19@ParseProc:

; 1066 :             }
; 1067 :         }
; 1068 :         newmemtype = GetMemtypeSp( tokenarray[i].tokval );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	DWORD PTR newmemtype$[rsp], eax

; 1069 :         newofssize = (( Ofssize != USE_EMPTY ) ? Ofssize : ModuleInfo.Ofssize );

	movzx	eax, BYTE PTR Ofssize$1[rsp]
	cmp	eax, 254				; 000000feH
	je	SHORT $LN87@ParseProc
	movzx	eax, BYTE PTR Ofssize$1[rsp]
	mov	DWORD PTR tv213[rsp], eax
	jmp	SHORT $LN88@ParseProc
$LN87@ParseProc:
	movzx	eax, BYTE PTR ModuleInfo+404
	mov	DWORD PTR tv213[rsp], eax
$LN88@ParseProc:
	movzx	eax, BYTE PTR tv213[rsp]
	mov	BYTE PTR newofssize$[rsp], al

; 1070 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1071 :     } else {

	jmp	SHORT $LN18@ParseProc
$LN17@ParseProc:

; 1072 :         newmemtype = ( ( SIZE_CODEPTR & ( 1 << ModuleInfo.model ) ) ? MT_FAR : MT_NEAR );

	mov	eax, DWORD PTR ModuleInfo+360
	mov	ecx, 1
	mov	DWORD PTR tv858[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv858[rsp]
	shl	eax, cl
	and	eax, 112				; 00000070H
	test	eax, eax
	je	SHORT $LN89@ParseProc
	mov	DWORD PTR tv219[rsp], 130		; 00000082H
	jmp	SHORT $LN90@ParseProc
$LN89@ParseProc:
	mov	DWORD PTR tv219[rsp], 129		; 00000081H
$LN90@ParseProc:
	mov	eax, DWORD PTR tv219[rsp]
	mov	DWORD PTR newmemtype$[rsp], eax

; 1073 :         newofssize = ModuleInfo.Ofssize;

	movzx	eax, BYTE PTR ModuleInfo+404
	mov	BYTE PTR newofssize$[rsp], al
$LN18@ParseProc:

; 1074 :     }
; 1075 : 
; 1076 :     /* v2.11: GetSymOfssize() cannot handle SYM_TYPE correctly */
; 1077 :     if ( proc->sym.state == SYM_TYPE )

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN23@ParseProc

; 1078 :         oldofssize = proc->sym.seg_ofssize;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	and	al, 3
	mov	BYTE PTR oldofssize$[rsp], al
	jmp	SHORT $LN24@ParseProc
$LN23@ParseProc:

; 1079 :     else
; 1080 :         oldofssize = GetSymOfssize( &proc->sym );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, rax
	call	GetSymOfssize
	mov	BYTE PTR oldofssize$[rsp], al
$LN24@ParseProc:

; 1081 : 
; 1082 :     /* did the distance attribute change? */
; 1083 :     if ( proc->sym.mem_type != MT_EMPTY &&

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+36], 192			; 000000c0H
	je	$LN25@ParseProc
	mov	rax, QWORD PTR proc$[rsp]
	mov	ecx, DWORD PTR newmemtype$[rsp]
	cmp	DWORD PTR [rax+36], ecx
	jne	SHORT $LN27@ParseProc
	movzx	eax, BYTE PTR oldofssize$[rsp]
	movzx	ecx, BYTE PTR newofssize$[rsp]
	cmp	eax, ecx
	je	SHORT $LN25@ParseProc
$LN27@ParseProc:

; 1084 :         ( proc->sym.mem_type != newmemtype ||
; 1085 :          oldofssize != newofssize ) ) {
; 1086 :         DebugMsg(("ParseProc: error, memtype changed, old-new memtype=%X-%X, ofssize=%X-%X\n", proc->sym.mem_type, newmemtype, proc->sym.Ofssize, newofssize));

	movzx	eax, BYTE PTR newofssize$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	movzx	ecx, BYTE PTR [rcx+44]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, DWORD PTR newmemtype$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	edx, DWORD PTR [rax+36]
	lea	rcx, OFFSET FLAT:$SG11732
	call	DoDebugMsg

; 1087 :         if ( proc->sym.mem_type == MT_NEAR || proc->sym.mem_type == MT_FAR )

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+36], 129			; 00000081H
	je	SHORT $LN30@ParseProc
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+36], 130			; 00000082H
	jne	SHORT $LN28@ParseProc
$LN30@ParseProc:

; 1088 :             EmitError( PROC_AND_PROTO_CALLING_CONV_CONFLICT );

	mov	ecx, 138				; 0000008aH
	call	EmitError
	jmp	SHORT $LN29@ParseProc
$LN28@ParseProc:

; 1089 :         else {
; 1090 :             return( EmitErr( SYMBOL_REDEFINITION, proc->sym.name ) );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 143				; 0000008fH
	call	EmitErr
	jmp	$LN1@ParseProc
$LN29@ParseProc:

; 1091 :         }
; 1092 :     } else {

	jmp	SHORT $LN26@ParseProc
$LN25@ParseProc:

; 1093 :         proc->sym.mem_type = newmemtype;

	mov	rax, QWORD PTR proc$[rsp]
	mov	ecx, DWORD PTR newmemtype$[rsp]
	mov	DWORD PTR [rax+36], ecx

; 1094 :         if ( IsPROC == FALSE )

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	jne	SHORT $LN31@ParseProc

; 1095 :             proc->sym.seg_ofssize = newofssize;

	movzx	eax, BYTE PTR newofssize$[rsp]
	and	al, 3
	mov	rcx, QWORD PTR proc$[rsp]
	movzx	ecx, BYTE PTR [rcx+47]
	and	cl, 252					; 000000fcH
	or	cl, al
	movzx	eax, cl
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+47], al
$LN31@ParseProc:
$LN26@ParseProc:

; 1096 :     }
; 1097 : 
; 1098 :     /* 2. attribute is <langtype> */
; 1099 :     /* v2.09: the default language value is now a function argument. This is because
; 1100 :      * EXTERN[DEF] allows to set the language attribute by:
; 1101 :      * EXTERN[DEF] <langtype> <name> PROTO ...
; 1102 :      * ( see CreateProto() in extern.c )
; 1103 :      */
; 1104 :     //langtype = ModuleInfo.langtype; /* set the default value */
; 1105 :     GetLangType( &i, tokenarray, &langtype ); /* optionally overwrite the value */

	lea	r8, QWORD PTR langtype$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	GetLangType

; 1106 :     /* has language changed? */
; 1107 :     if ( proc->sym.langtype != LANG_NONE && proc->sym.langtype != langtype ) {

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN32@ParseProc
	mov	rax, QWORD PTR proc$[rsp]
	mov	ecx, DWORD PTR langtype$[rsp]
	cmp	DWORD PTR [rax+76], ecx
	je	SHORT $LN32@ParseProc

; 1108 :         DebugMsg(("ParseProc: error, language changed, %u - %u\n", proc->sym.langtype, langtype ));

	mov	r8d, DWORD PTR langtype$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	edx, DWORD PTR [rax+76]
	lea	rcx, OFFSET FLAT:$SG11739
	call	DoDebugMsg

; 1109 :         EmitError( PROC_AND_PROTO_CALLING_CONV_CONFLICT );

	mov	ecx, 138				; 0000008aH
	call	EmitError

; 1110 :     } else

	jmp	SHORT $LN33@ParseProc
$LN32@ParseProc:

; 1111 :         proc->sym.langtype = langtype;

	mov	rax, QWORD PTR proc$[rsp]
	mov	ecx, DWORD PTR langtype$[rsp]
	mov	DWORD PTR [rax+76], ecx
$LN33@ParseProc:

; 1112 : 
; 1113 :     /* 3. attribute is <visibility> */
; 1114 :     /* note that reserved word PUBLIC is a directive! */
; 1115 :     /* PROTO does NOT accept PUBLIC! However,
; 1116 :      * PROTO accepts PRIVATE and EXPORT, but these attributes are just ignored!
; 1117 :      */
; 1118 : 
; 1119 :     if ( tokenarray[i].token == T_ID || tokenarray[i].token == T_DIRECTIVE ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	je	SHORT $LN35@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 3
	jne	$LN34@ParseProc
$LN35@ParseProc:

; 1120 :         token = tokenarray[i].string_ptr;

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR token$[rsp], rax

; 1121 :         if ( _stricmp( token, "PRIVATE") == 0 ) {

	lea	rdx, OFFSET FLAT:$SG11744
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	$LN36@ParseProc

; 1122 :             if ( IsPROC ) { /* v2.11: ignore PRIVATE for PROTO */

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN38@ParseProc

; 1123 :                 proc->sym.ispublic = FALSE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	and	al, 127					; 0000007fH
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1124 : #if FASTPASS
; 1125 :                 /* error if there was a PUBLIC directive! */
; 1126 :                 proc->sym.scoped = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 4
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1127 :                 if ( oldpublic ) {

	movzx	eax, BYTE PTR oldpublic$[rsp]
	test	eax, eax
	je	SHORT $LN39@ParseProc

; 1128 :                     SkipSavedState(); /* do a full pass-2 scan */

	call	SkipSavedState
$LN39@ParseProc:

; 1129 :                 }
; 1130 : #endif
; 1131 :                 proc->e.procinfo->isexport = FALSE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 251					; 000000fbH
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al
$LN38@ParseProc:

; 1132 :             }
; 1133 :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN37@ParseProc
$LN36@ParseProc:

; 1134 :         } else if ( IsPROC && (_stricmp(token, "PUBLIC") == 0 ) ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN40@ParseProc
	lea	rdx, OFFSET FLAT:$SG11749
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN40@ParseProc

; 1135 :             proc->sym.ispublic = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 128					; 00000080H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1136 :             proc->e.procinfo->isexport = FALSE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 251					; 000000fbH
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al

; 1137 :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN41@ParseProc
$LN40@ParseProc:

; 1138 :         } else if ( _stricmp(token, "EXPORT") == 0 ) {

	lea	rdx, OFFSET FLAT:$SG11751
	mov	rcx, QWORD PTR token$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	$LN42@ParseProc

; 1139 :             DebugMsg1(("ParseProc(%s): EXPORT detected\n", proc->sym.name ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11752
	call	DoDebugMsg1

; 1140 :             if ( IsPROC ) { /* v2.11: ignore EXPORT for PROTO */

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	SHORT $LN43@ParseProc

; 1141 :                 proc->sym.ispublic = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 128					; 00000080H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1142 :                 proc->e.procinfo->isexport = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 4
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al

; 1143 :                 /* v2.11: no export for 16-bit near */
; 1144 :                 if ( ModuleInfo.Ofssize == USE16 && proc->sym.mem_type == MT_NEAR )

	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	jne	SHORT $LN44@ParseProc
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+36], 129			; 00000081H
	jne	SHORT $LN44@ParseProc

; 1145 :                     EmitErr( EXPORT_MUST_BE_FAR, proc->sym.name );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 276				; 00000114H
	call	EmitErr
$LN44@ParseProc:
$LN43@ParseProc:

; 1146 :             }
; 1147 :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN42@ParseProc:
$LN41@ParseProc:
$LN37@ParseProc:
$LN34@ParseProc:

; 1148 :         }
; 1149 :     }
; 1150 : 
; 1151 :     /* 4. attribute is <prologuearg>, for PROC only.
; 1152 :      * it must be enclosed in <>
; 1153 :      */
; 1154 :     if ( IsPROC && tokenarray[i].token == T_STRING && tokenarray[i].string_delim == '<' ) {

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	$LN45@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 9
	jne	$LN45@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+1]
	cmp	eax, 60					; 0000003cH
	jne	$LN45@ParseProc

; 1155 :         int idx = Token_Count + 1;

	mov	eax, DWORD PTR ModuleInfo+496
	inc	eax
	mov	DWORD PTR idx$2[rsp], eax

; 1156 :         int max;
; 1157 :         if ( ModuleInfo.prologuemode == PEM_NONE )

	movzx	eax, BYTE PTR ModuleInfo+424
	cmp	eax, 2
	jne	SHORT $LN46@ParseProc

; 1158 :             ; /* no prologue at all */

	jmp	$LN47@ParseProc
$LN46@ParseProc:

; 1159 :         else if ( ModuleInfo.prologuemode == PEM_MACRO ) {

	movzx	eax, BYTE PTR ModuleInfo+424
	cmp	eax, 1
	jne	SHORT $LN48@ParseProc

; 1160 :             proc->e.procinfo->prologuearg = LclAlloc( tokenarray[i].stringlen + 1 );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	inc	eax
	mov	eax, eax
	mov	ecx, eax
	call	LclAlloc
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	QWORD PTR [rcx+40], rax

; 1161 :             strcpy( proc->e.procinfo->prologuearg, tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rdx+rax+8]
	mov	rcx, QWORD PTR [rcx+40]
	call	strcpy

; 1162 :         } else {

	jmp	$LN49@ParseProc
$LN48@ParseProc:

; 1163 :             /* check the argument. The default prologue
; 1164 :              understands FORCEFRAME and LOADDS only
; 1165 :              */
; 1166 :             max = Tokenize( tokenarray[i].string_ptr, idx, tokenarray, TOK_RESCAN );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	r9d, 1
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR idx$2[rsp]
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	Tokenize
	mov	DWORD PTR max$3[rsp], eax

; 1167 :             for ( ; idx < max; idx++ ) {

	jmp	SHORT $LN4@ParseProc
$LN2@ParseProc:
	mov	eax, DWORD PTR idx$2[rsp]
	inc	eax
	mov	DWORD PTR idx$2[rsp], eax
$LN4@ParseProc:
	mov	eax, DWORD PTR max$3[rsp]
	cmp	DWORD PTR idx$2[rsp], eax
	jge	$LN3@ParseProc

; 1168 :                 if ( tokenarray[idx].token == T_ID ) {

	movsxd	rax, DWORD PTR idx$2[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	$LN50@ParseProc

; 1169 :                     if ( _stricmp( tokenarray[idx].string_ptr, "FORCEFRAME") == 0 ) {

	movsxd	rax, DWORD PTR idx$2[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11764
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN52@ParseProc

; 1170 :                         proc->e.procinfo->forceframe = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 8
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al
	jmp	$LN53@ParseProc
$LN52@ParseProc:

; 1171 : #if AMD64_SUPPORT
; 1172 :                     } else if ( ModuleInfo.Ofssize != USE64 && (_stricmp( tokenarray[idx].string_ptr, "LOADDS") == 0 ) ) {

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	je	SHORT $LN54@ParseProc
	movsxd	rax, DWORD PTR idx$2[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11767
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	SHORT $LN54@ParseProc

; 1173 : #else
; 1174 :                     } else if ( _stricmp( tokenarray[idx].string_ptr, "LOADDS") == 0 ) {
; 1175 : #endif
; 1176 :                         if ( ModuleInfo.model == MODEL_FLAT ) {

	cmp	DWORD PTR ModuleInfo+360, 7
	jne	SHORT $LN56@ParseProc

; 1177 :                             EmitWarn( 2, LOADDS_IGNORED_IN_FLAT_MODEL );

	mov	edx, 226				; 000000e2H
	mov	ecx, 2
	call	EmitWarn

; 1178 :                         } else

	jmp	SHORT $LN57@ParseProc
$LN56@ParseProc:

; 1179 :                             proc->e.procinfo->loadds = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 16
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al
$LN57@ParseProc:

; 1180 :                     } else {

	jmp	SHORT $LN55@ParseProc
$LN54@ParseProc:

; 1181 :                         return( EmitErr( UNKNOWN_DEFAULT_PROLOGUE_ARGUMENT, tokenarray[idx].string_ptr ) );

	movsxd	rax, DWORD PTR idx$2[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 225				; 000000e1H
	call	EmitErr
	jmp	$LN1@ParseProc
$LN55@ParseProc:
$LN53@ParseProc:

; 1182 :                     }
; 1183 :                     if ( tokenarray[idx+1].token == T_COMMA && tokenarray[idx+2].token != T_FINAL)

	mov	eax, DWORD PTR idx$2[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN58@ParseProc
	mov	eax, DWORD PTR idx$2[rsp]
	add	eax, 2
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN58@ParseProc

; 1184 :                         idx++;

	mov	eax, DWORD PTR idx$2[rsp]
	inc	eax
	mov	DWORD PTR idx$2[rsp], eax
$LN58@ParseProc:

; 1185 :                 } else {

	jmp	SHORT $LN51@ParseProc
$LN50@ParseProc:

; 1186 :                     return( EmitErr( SYNTAX_ERROR_EX, tokenarray[idx].string_ptr ) );

	movsxd	rax, DWORD PTR idx$2[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ParseProc
$LN51@ParseProc:

; 1187 :                 }
; 1188 :             }

	jmp	$LN2@ParseProc
$LN3@ParseProc:
$LN49@ParseProc:
$LN47@ParseProc:

; 1189 :         }
; 1190 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN45@ParseProc:

; 1191 :     }
; 1192 : 
; 1193 : #if AMD64_SUPPORT
; 1194 :     /* check for optional FRAME[:exc_proc] */
; 1195 :     if ( ModuleInfo.Ofssize == USE64 &&
; 1196 :         IsPROC &&
; 1197 :         tokenarray[i].token == T_RES_ID &&

	movzx	eax, BYTE PTR ModuleInfo+404
	cmp	eax, 2
	jne	$LN59@ParseProc
	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	je	$LN59@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 7
	jne	$LN59@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 263		; 00000107H
	jne	$LN59@ParseProc

; 1198 :         tokenarray[i].tokval == T_FRAME ) {
; 1199 :         /* v2.05: don't accept FRAME for ELF */
; 1200 :         if ( Options.output_format != OFORMAT_COFF
; 1201 : #if PE_SUPPORT
; 1202 :             && ModuleInfo.sub_format != SFORMAT_PE

	cmp	DWORD PTR Options+160, 2
	je	SHORT $LN60@ParseProc
	cmp	DWORD PTR ModuleInfo+372, 2
	je	SHORT $LN60@ParseProc

; 1203 : #endif
; 1204 :            ) {
; 1205 :             return( EmitErr( NOT_SUPPORTED_WITH_CURR_FORMAT, GetResWName( T_FRAME, NULL ) ) );

	xor	edx, edx
	mov	ecx, 263				; 00000107H
	call	GetResWName
	mov	rdx, rax
	mov	ecx, 224				; 000000e0H
	call	EmitErr
	jmp	$LN1@ParseProc
$LN60@ParseProc:

; 1206 :         }
; 1207 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1208 :         if( tokenarray[i].token == T_COLON ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	jne	$LN61@ParseProc

; 1209 :             struct asym *sym;
; 1210 :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1211 :             if ( tokenarray[i].token != T_ID ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	je	SHORT $LN63@ParseProc

; 1212 :                 return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ParseProc
$LN63@ParseProc:

; 1213 :             }
; 1214 :             sym = SymSearch( tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	SymFind
	mov	QWORD PTR sym$4[rsp], rax

; 1215 :             if ( sym == NULL ) {

	cmp	QWORD PTR sym$4[rsp], 0
	jne	SHORT $LN64@ParseProc

; 1216 :                 sym = SymCreate( tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	SymCreate
	mov	QWORD PTR sym$4[rsp], rax

; 1217 :                 sym->state = SYM_UNDEFINED;

	mov	rax, QWORD PTR sym$4[rsp]
	mov	DWORD PTR [rax+32], 0

; 1218 :                 sym->used = TRUE;

	mov	rax, QWORD PTR sym$4[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 1
	mov	rcx, QWORD PTR sym$4[rsp]
	mov	BYTE PTR [rcx+40], al

; 1219 :                 sym_add_table( &SymTables[TAB_UNDEF], (struct dsym *)sym ); /* add UNDEFINED */

	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:SymTables
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR sym$4[rsp]
	mov	rcx, rax
	call	sym_add_table

; 1220 :             } else if ( sym->state != SYM_UNDEFINED &&

	jmp	SHORT $LN65@ParseProc
$LN64@ParseProc:

; 1221 :                        sym->state != SYM_INTERNAL &&

	mov	rax, QWORD PTR sym$4[rsp]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN66@ParseProc
	mov	rax, QWORD PTR sym$4[rsp]
	cmp	DWORD PTR [rax+32], 1
	je	SHORT $LN66@ParseProc
	mov	rax, QWORD PTR sym$4[rsp]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN66@ParseProc

; 1222 :                        sym->state != SYM_EXTERNAL ) {
; 1223 :                 return( EmitErr( SYMBOL_REDEFINITION, sym->name ) );

	mov	rax, QWORD PTR sym$4[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 143				; 0000008fH
	call	EmitErr
	jmp	$LN1@ParseProc
$LN66@ParseProc:
$LN65@ParseProc:

; 1224 :             }
; 1225 :             proc->e.procinfo->exc_handler = sym;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR sym$4[rsp]
	mov	QWORD PTR [rax+48], rcx

; 1226 :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1227 :         } else

	jmp	SHORT $LN62@ParseProc
$LN61@ParseProc:

; 1228 :             proc->e.procinfo->exc_handler = NULL;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR [rax+48], 0
$LN62@ParseProc:

; 1229 :         proc->e.procinfo->isframe = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 64					; 00000040H
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al
$LN59@ParseProc:

; 1230 :     }
; 1231 : #endif
; 1232 :     /* check for USES */
; 1233 :     if ( tokenarray[i].token == T_ID && _stricmp( tokenarray[i].string_ptr, "USES" ) == 0 ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	$LN67@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11780
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	$LN67@ParseProc

; 1234 :         int cnt;
; 1235 :         int j;
; 1236 :         if ( !IsPROC ) {/* not for PROTO! */

	movzx	eax, BYTE PTR IsPROC$[rsp]
	test	eax, eax
	jne	SHORT $LN68@ParseProc

; 1237 :             DebugMsg(("ParseProc: USES found in PROTO\n"));

	lea	rcx, OFFSET FLAT:$SG11782
	call	DoDebugMsg

; 1238 :             EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
$LN68@ParseProc:

; 1239 :         }
; 1240 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1241 :         /* count register names which follow */
; 1242 :         for ( cnt = 0, j = i; tokenarray[j].token == T_REG; j++, cnt++ );

	mov	DWORD PTR cnt$5[rsp], 0
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$6[rsp], eax
	jmp	SHORT $LN7@ParseProc
$LN5@ParseProc:
	mov	eax, DWORD PTR j$6[rsp]
	inc	eax
	mov	DWORD PTR j$6[rsp], eax
	mov	eax, DWORD PTR cnt$5[rsp]
	inc	eax
	mov	DWORD PTR cnt$5[rsp], eax
$LN7@ParseProc:
	movsxd	rax, DWORD PTR j$6[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 2
	jne	SHORT $LN6@ParseProc
	jmp	SHORT $LN5@ParseProc
$LN6@ParseProc:

; 1243 : 
; 1244 :         if ( cnt == 0 ) {

	cmp	DWORD PTR cnt$5[rsp], 0
	jne	SHORT $LN69@ParseProc

; 1245 :             DebugMsg(("ParseProc: no registers for regslist\n"));

	lea	rcx, OFFSET FLAT:$SG11785
	call	DoDebugMsg

; 1246 :             EmitErr( SYNTAX_ERROR_EX, tokenarray[i-1].tokpos );

	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr

; 1247 :         } else {

	jmp	$LN70@ParseProc
$LN69@ParseProc:

; 1248 :             regist = LclAlloc( (cnt + 1) * sizeof( uint_16 ) );

	mov	eax, DWORD PTR cnt$5[rsp]
	inc	eax
	cdqe
	shl	rax, 1
	mov	rcx, rax
	call	LclAlloc
	mov	QWORD PTR regist$[rsp], rax

; 1249 :             proc->e.procinfo->regslist = regist;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR regist$[rsp]
	mov	QWORD PTR [rax], rcx

; 1250 :             *regist++ = cnt;

	mov	rax, QWORD PTR regist$[rsp]
	movzx	ecx, WORD PTR cnt$5[rsp]
	mov	WORD PTR [rax], cx
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax

; 1251 :             /* read in registers */
; 1252 :             for( ; tokenarray[i].token == T_REG; i++ ) {

	jmp	SHORT $LN10@ParseProc
$LN8@ParseProc:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN10@ParseProc:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 2
	jne	SHORT $LN9@ParseProc

; 1253 :                 if ( SizeFromRegister( tokenarray[i].tokval ) == 1 ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR [rcx+rax+16]
	call	SizeFromRegister
	cmp	eax, 1
	jne	SHORT $LN71@ParseProc

; 1254 :                     EmitError( INVALID_USE_OF_REGISTER );

	mov	ecx, 170				; 000000aaH
	call	EmitError
$LN71@ParseProc:

; 1255 :                 }
; 1256 :                 *regist++ = tokenarray[i].tokval;

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR regist$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	movzx	eax, WORD PTR [rdx+rax+16]
	mov	WORD PTR [rcx], ax
	mov	rax, QWORD PTR regist$[rsp]
	add	rax, 2
	mov	QWORD PTR regist$[rsp], rax

; 1257 :             }

	jmp	$LN8@ParseProc
$LN9@ParseProc:
$LN70@ParseProc:
$LN67@ParseProc:

; 1258 :         }
; 1259 :     }
; 1260 : 
; 1261 :     /* the parameters must follow */
; 1262 :     if ( tokenarray[i].token == T_STYPE || tokenarray[i].token == T_RES_ID || tokenarray[i].token == T_DIRECTIVE ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 6
	je	SHORT $LN73@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 7
	je	SHORT $LN73@ParseProc
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 3
	jne	SHORT $LN72@ParseProc
$LN73@ParseProc:

; 1263 :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@ParseProc
$LN72@ParseProc:

; 1264 :     }
; 1265 : 
; 1266 :     /* skip optional comma */
; 1267 :     if ( tokenarray[i].token == T_COMMA )

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN74@ParseProc

; 1268 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN74@ParseProc:

; 1269 : 
; 1270 :     DebugMsg1(("ParseProc(%s): i=%u, Token_Count=%u, CurrWordSize=%u\n", proc->sym.name, i, Token_Count, CurrWordSize ));

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR ModuleInfo+496
	mov	r8d, DWORD PTR i$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11790
	call	DoDebugMsg1

; 1271 : 
; 1272 :     if( i >= Token_Count ) {

	mov	eax, DWORD PTR ModuleInfo+496
	cmp	DWORD PTR i$[rsp], eax
	jl	SHORT $LN75@ParseProc

; 1273 :         /* procedure has no parameters at all */
; 1274 :         if ( proc->e.procinfo->paralist != NULL )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+8], 0
	je	SHORT $LN77@ParseProc

; 1275 :             EmitErr( CONFLICTING_PARAMETER_DEFINITION, "" );

	lea	rdx, OFFSET FLAT:$SG11794
	mov	ecx, 137				; 00000089H
	call	EmitErr
$LN77@ParseProc:

; 1276 :     } else if( proc->sym.langtype == LANG_NONE ) {

	jmp	$LN76@ParseProc
$LN75@ParseProc:
	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 0
	jne	SHORT $LN78@ParseProc

; 1277 :         EmitError( LANG_MUST_BE_SPECIFIED );

	mov	ecx, 91					; 0000005bH
	call	EmitError

; 1278 :     } else {

	jmp	$LN79@ParseProc
$LN78@ParseProc:

; 1279 :         /* v2.05: set PROC's vararg flag BEFORE params are scanned! */
; 1280 :         if ( tokenarray[Token_Count - 1].token == T_RES_ID &&

	mov	eax, DWORD PTR ModuleInfo+496
	dec	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 7
	jne	SHORT $LN80@ParseProc
	mov	eax, DWORD PTR ModuleInfo+496
	dec	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 262		; 00000106H
	jne	SHORT $LN80@ParseProc

; 1281 :             tokenarray[Token_Count - 1].tokval == T_VARARG )
; 1282 :             proc->e.procinfo->has_vararg = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	or	al, 1
	mov	rcx, QWORD PTR proc$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+84], al
$LN80@ParseProc:

; 1283 :         /* v2.04: removed, comma is checked above already */
; 1284 :         //if( tokenarray[i].token == T_COMMA )
; 1285 :         //    i++;
; 1286 :         if ( ERROR == ParseParams( proc, i, tokenarray, IsPROC ) )

	movzx	r9d, BYTE PTR IsPROC$[rsp]
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	call	ParseParams
$LN79@ParseProc:
$LN76@ParseProc:

; 1287 :             /* do proceed if the parameter scan returns an error */
; 1288 :             ;//return( ERROR );
; 1289 :     }
; 1290 : 
; 1291 :     /* v2.11: isdefined and isproc now set here */
; 1292 :     proc->sym.isdefined = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 2
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1293 :     proc->sym.isproc = TRUE;

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	or	al, 8
	mov	rcx, QWORD PTR proc$[rsp]
	mov	BYTE PTR [rcx+41], al

; 1294 :     //proc->e.procinfo->init_done = TRUE;
; 1295 :     DebugMsg1(("ParseProc(%s): memtype=%Xh parasize=%u\n", proc->sym.name, proc->sym.mem_type, proc->e.procinfo->parasize));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	r9d, DWORD PTR [rax+32]
	mov	rax, QWORD PTR proc$[rsp]
	mov	r8d, DWORD PTR [rax+36]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11799
	call	DoDebugMsg1

; 1296 : 
; 1297 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@ParseProc:

; 1298 : }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
ParseProc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Buffer$ = 96
_Format$ = 104
sprintf	PROC						; COMDAT

; 1776 : {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 1787 :     return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 1788 : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:sprintf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, -1
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_l

; 1459 :     #pragma warning(pop)
; 1460 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1386 :     int const _Result = __stdio_common_vsprintf(

	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp___stdio_common_vsprintf
	mov	DWORD PTR _Result$[rsp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[rsp]

; 1391 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 950  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 957  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
	push	rdi

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
