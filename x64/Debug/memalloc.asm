; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
_DATA	ENDS
_BSS	SEGMENT
memcalls DD	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG7468	DB	'memory used: %u kB', 0aH, 00H
	ORG $+4
$SG7470	DB	'still allocated memory blocks : %u', 0aH, 00H
	ORG $+4
$SG7486	DB	'LclAlloc: new block needed, req. size=%Xh > currfree=%Xh'
	DB	0aH, 00H
	ORG $+6
$SG7493	DB	'MemAlloc(0x%X)=%p cnt=%u', 0aH, 00H
	ORG $+6
$SG7498	DB	'MemFree(0x%p) cnt=%u', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	MemInit
PUBLIC	MemFini
PUBLIC	MemAlloc
PUBLIC	MemFree
PUBLIC	LclAlloc
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_free:PROC
EXTRN	__imp_malloc:PROC
EXTRN	DoDebugMsg:PROC
EXTRN	DoDebugMsg1:PROC
EXTRN	Fatal:PROC
EXTRN	__imp_VirtualAlloc:PROC
EXTRN	__imp_VirtualFree:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	Options:BYTE
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
_BSS	SEGMENT
	ALIGN	8

pBase	DQ	01H DUP (?)
pCurr	DQ	01H DUP (?)
currfree DD	01H DUP (?)
blocks	DD	01H DUP (?)
memstart DD	01H DUP (?)
_BSS	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$MemInit DD imagerel $LN3
	DD	imagerel $LN3+47
	DD	imagerel $unwind$MemInit
$pdata$MemFini DD imagerel $LN7
	DD	imagerel $LN7+181
	DD	imagerel $unwind$MemFini
$pdata$MemAlloc DD imagerel $LN4
	DD	imagerel $LN4+118
	DD	imagerel $unwind$MemAlloc
$pdata$MemFree DD imagerel $LN3
	DD	imagerel $LN3+85
	DD	imagerel $unwind$MemFree
$pdata$LclAlloc DD imagerel $LN7
	DD	imagerel $LN7+329
	DD	imagerel $unwind$LclAlloc
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
xdata	SEGMENT
$unwind$MemInit DD 010201H
	DD	07002H
$unwind$MemFini DD 021501H
	DD	070025206H
$unwind$MemAlloc DD 021e01H
	DD	07006520aH
$unwind$MemFree DD 021e01H
	DD	07006320aH
$unwind$LclAlloc DD 021e01H
	DD	07006520aH
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\memalloc.c
_TEXT	SEGMENT
ptr$ = 32
tv73 = 40
size$ = 64
LclAlloc PROC

; 183  : {

$LN7:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 184  :     void        *ptr;
; 185  : 
; 186  : #if FASTMEM
; 187  :     size = (size + sizeof(void *)-1) & ~(sizeof(void *)-1);

	mov	rax, QWORD PTR size$[rsp]
	add	rax, 7
	and	rax, -8
	mov	QWORD PTR size$[rsp], rax

; 188  :     if ( currfree < size ) {

	mov	eax, DWORD PTR currfree
	cmp	rax, QWORD PTR size$[rsp]
	jae	$LN2@LclAlloc

; 189  :         DebugMsg(("LclAlloc: new block needed, req. size=%Xh > currfree=%Xh\n", size, currfree ));

	mov	r8d, DWORD PTR currfree
	mov	rdx, QWORD PTR size$[rsp]
	lea	rcx, OFFSET FLAT:$SG7486
	call	DoDebugMsg

; 190  :         currfree = ( size <= ( BLKSIZE - sizeof( struct linked_list ) ) ? BLKSIZE - sizeof( struct linked_list ) : size );

	cmp	QWORD PTR size$[rsp], 524280		; 0007fff8H
	ja	SHORT $LN5@LclAlloc
	mov	QWORD PTR tv73[rsp], 524280		; 0007fff8H
	jmp	SHORT $LN6@LclAlloc
$LN5@LclAlloc:
	mov	rax, QWORD PTR size$[rsp]
	mov	QWORD PTR tv73[rsp], rax
$LN6@LclAlloc:
	mov	eax, DWORD PTR tv73[rsp]
	mov	DWORD PTR currfree, eax

; 191  :         BLKALLOC( pCurr, currfree + sizeof( struct linked_list ) );

	mov	eax, DWORD PTR currfree
	add	rax, 8
	mov	r9d, 4
	mov	r8d, 4096				; 00001000H
	mov	rdx, rax
	xor	ecx, ecx
	call	QWORD PTR __imp_VirtualAlloc
	mov	QWORD PTR pCurr, rax

; 192  :         if ( !pCurr ) {

	cmp	QWORD PTR pCurr, 0
	jne	SHORT $LN3@LclAlloc

; 193  :             currfree = 0;

	mov	DWORD PTR currfree, 0

; 194  :             Fatal( OUT_OF_MEMORY );

	mov	ecx, 105				; 00000069H
	call	Fatal
$LN3@LclAlloc:

; 195  :         }
; 196  :         ((struct linked_list *)pCurr)->next = pBase;

	mov	rax, QWORD PTR pCurr
	mov	rcx, QWORD PTR pBase
	mov	QWORD PTR [rax], rcx

; 197  :         pBase = (struct linked_list *)pCurr;

	mov	rax, QWORD PTR pCurr
	mov	QWORD PTR pBase, rax

; 198  :         pCurr += sizeof( struct linked_list );

	mov	rax, QWORD PTR pCurr
	add	rax, 8
	mov	QWORD PTR pCurr, rax

; 199  :         DebugCmd( blocks++ );

	mov	eax, DWORD PTR blocks
	inc	eax
	mov	DWORD PTR blocks, eax
$LN2@LclAlloc:

; 200  :     }
; 201  :     ptr = pCurr;

	mov	rax, QWORD PTR pCurr
	mov	QWORD PTR ptr$[rsp], rax

; 202  :     pCurr += size;

	mov	rax, QWORD PTR size$[rsp]
	mov	rcx, QWORD PTR pCurr
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR pCurr, rax

; 203  :     currfree -= size;

	mov	eax, DWORD PTR currfree
	sub	rax, QWORD PTR size$[rsp]
	mov	DWORD PTR currfree, eax

; 204  : 
; 205  : #else /* ! FASTMEM */
; 206  : 
; 207  :     ptr = malloc( size );
; 208  : #ifdef TRMEM
; 209  :     DebugMsg1(("LclAlloc(0x%X)=%p cnt=%" I32_SPEC "u\n", size, ptr, ++memcalls ));
; 210  : #endif
; 211  :     if( ptr == NULL ) {
; 212  :         Fatal( OUT_OF_MEMORY );
; 213  :     }
; 214  : #endif
; 215  :     return( ptr );

	mov	rax, QWORD PTR ptr$[rsp]

; 216  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
LclAlloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\memalloc.c
_TEXT	SEGMENT
ptr$ = 48
MemFree	PROC

; 246  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 247  :     DebugMsg1(("MemFree(0x%p) cnt=%" I32_SPEC "u\n", ptr, --memcalls ));

	mov	eax, DWORD PTR memcalls
	dec	eax
	mov	DWORD PTR memcalls, eax
	mov	r8d, DWORD PTR memcalls
	mov	rdx, QWORD PTR ptr$[rsp]
	lea	rcx, OFFSET FLAT:$SG7498
	call	DoDebugMsg1

; 248  :     free( ptr );

	mov	rcx, QWORD PTR ptr$[rsp]
	call	QWORD PTR __imp_free

; 249  :     return;
; 250  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
MemFree	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\memalloc.c
_TEXT	SEGMENT
ptr$ = 32
size$ = 64
MemAlloc PROC

; 233  : {

$LN4:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 234  :     void        *ptr;
; 235  :     ptr = malloc( size );

	mov	rcx, QWORD PTR size$[rsp]
	call	QWORD PTR __imp_malloc
	mov	QWORD PTR ptr$[rsp], rax

; 236  :     DebugMsg1(("MemAlloc(0x%X)=%p cnt=%" I32_SPEC "u\n", size, ptr, ++memcalls ));

	mov	eax, DWORD PTR memcalls
	inc	eax
	mov	DWORD PTR memcalls, eax
	mov	r9d, DWORD PTR memcalls
	mov	r8, QWORD PTR ptr$[rsp]
	mov	rdx, QWORD PTR size$[rsp]
	lea	rcx, OFFSET FLAT:$SG7493
	call	DoDebugMsg1

; 237  :     if( ptr == NULL ) {

	cmp	QWORD PTR ptr$[rsp], 0
	jne	SHORT $LN2@MemAlloc

; 238  :         Fatal( OUT_OF_MEMORY );

	mov	ecx, 105				; 00000069H
	call	Fatal
$LN2@MemAlloc:

; 239  :     }
; 240  :     //memset( ptr, 0xff, size );
; 241  :     return( ptr );

	mov	rax, QWORD PTR ptr$[rsp]

; 242  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
MemAlloc ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\memalloc.c
_TEXT	SEGMENT
pNext$1 = 32
MemFini	PROC

; 162  : {

$LN7:
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 163  : 
; 164  : #if FASTMEM
; 165  : #ifdef DEBUG_OUT
; 166  :     if ( Options.quiet == FALSE )

	movzx	eax, BYTE PTR Options
	test	eax, eax
	jne	SHORT $LN4@MemFini

; 167  :         printf( "memory used: %u kB\n", (blocks * BLKSIZE - currfree) / 1024 );

	imul	eax, DWORD PTR blocks, 524288		; 00080000H
	sub	eax, DWORD PTR currfree
	xor	edx, edx
	mov	ecx, 1024				; 00000400H
	div	ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG7468
	call	printf
$LN4@MemFini:
$LN2@MemFini:

; 168  : #endif
; 169  :     while ( pBase ) {

	cmp	QWORD PTR pBase, 0
	je	SHORT $LN3@MemFini

; 170  :         struct linked_list *pNext = pBase->next;

	mov	rax, QWORD PTR pBase
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR pNext$1[rsp], rax

; 171  :         BLKFREE( pBase );

	mov	r8d, 32768				; 00008000H
	xor	edx, edx
	mov	rcx, QWORD PTR pBase
	call	QWORD PTR __imp_VirtualFree

; 172  :         pBase = pNext;

	mov	rax, QWORD PTR pNext$1[rsp]
	mov	QWORD PTR pBase, rax

; 173  :     }

	jmp	SHORT $LN2@MemFini
$LN3@MemFini:

; 174  : #endif
; 175  : #ifdef DEBUG_OUT
; 176  :     if ( memcalls != memstart )

	mov	eax, DWORD PTR memstart
	cmp	DWORD PTR memcalls, eax
	je	SHORT $LN5@MemFini

; 177  :         printf("still allocated memory blocks : %u\n", memcalls - memstart );

	mov	eax, DWORD PTR memstart
	mov	ecx, DWORD PTR memcalls
	sub	ecx, eax
	mov	eax, ecx
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG7470
	call	printf
$LN5@MemFini:

; 178  : #endif
; 179  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
MemFini	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\memalloc.c
_TEXT	SEGMENT
MemInit	PROC

; 151  : {

$LN3:
	push	rdi

; 152  : #if FASTMEM
; 153  :     pBase = NULL;

	mov	QWORD PTR pBase, 0

; 154  :     currfree = 0;

	mov	DWORD PTR currfree, 0

; 155  :     DebugCmd( blocks = 0 );

	mov	DWORD PTR blocks, 0

; 156  : #endif
; 157  :     DebugCmd( memstart = memcalls );

	mov	eax, DWORD PTR memcalls
	mov	DWORD PTR memstart, eax

; 158  : }

	pop	rdi
	ret	0
MemInit	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 950  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 957  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
	push	rdi

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
