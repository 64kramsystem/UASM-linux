; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_BSS	SEGMENT
$SG11375 DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
_DATA	ENDS
_BSS	SEGMENT
$SG11850 DB	01H DUP (?)
$SG11861 DB	01H DUP (?)
$SG11965 DB	01H DUP (?)
_BSS	ENDS
CONST	SEGMENT
fastcall_tab DQ	FLAT:ms32_fcstart
	DQ	FLAT:ms32_fcend
	DQ	FLAT:ms32_param
	DQ	FLAT:watc_fcstart
	DQ	FLAT:watc_fcend
	DQ	FLAT:watc_param
	DQ	FLAT:ms64_fcstart
	DQ	FLAT:ms64_fcend
	DQ	FLAT:ms64_param
regax	DD	09H
	DD	011H
	DD	073H
	ORG $+4
ms16_regs DD	09H
	DD	0bH
	DD	0cH
	ORG $+4
ms32_regs DD	012H
	DD	013H
ms64_regs DD	02H
	DD	03H
	DD	05bH
	DD	05cH
	DD	0aH
	DD	0bH
	DD	063H
	DD	064H
	DD	012H
	DD	013H
	DD	06bH
	DD	06cH
	DD	074H
	DD	075H
	DD	07bH
	DD	07cH
CONST	ENDS
_DATA	SEGMENT
$SG11270 DB	'ms64_param(%s, param=%u): argument optimized', 0aH, 00H
	ORG $+2
$SG11271 DB	' movq %r, %s', 00H
	ORG $+3
$SG11276 DB	' mov %r, %s', 00H
$SG11320 DB	's', 00H
	ORG $+2
$SG11277 DB	' movd %r, %r', 00H
	ORG $+3
$SG11278 DB	' mov %r, %r ptr %s', 00H
	ORG $+1
$SG11321 DB	'z', 00H
	ORG $+2
$SG11279 DB	' movd %r, %r', 00H
	ORG $+3
$SG11282 DB	' movd %r, %s', 00H
	ORG $+3
$SG11283 DB	' movq %r, %s', 00H
	ORG $+3
$SG11288 DB	' lea %r, %s', 00H
$SG11326 DB	'0', 00H
	ORG $+2
$SG11298 DB	'ms64_param(%s, param=%u): forward ref=%s, assumed size=%'
	DB	'u', 0aH, 00H
	ORG $+1
$SG11491 DB	' ', 00H
	ORG $+2
$SG11301 DB	'ms64_param(%s, param=%u): type error size.p/a=%u/%u flag'
	DB	's=%X', 0aH, 00H
	ORG $+2
$SG11309 DB	'ms64_param(%s, param=%u): argument optimized', 0aH, 00H
	ORG $+2
$SG11318 DB	' movsxd %r, %s', 00H
	ORG $+1
$SG11319 DB	' mov %r, %s', 00H
$SG11693 DB	'z', 00H
	ORG $+2
$SG11322 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11327 DB	'NULL', 00H
	ORG $+3
$SG11328 DB	'FALSE', 00H
	ORG $+2
$SG11330 DB	' xor %r, %r', 00H
$SG11694 DB	's', 00H
	ORG $+2
$SG11331 DB	' mov %r, %s', 00H
$SG11707 DB	'z', 00H
	ORG $+2
$SG11332 DB	'ms64_param(%s, param=%u): size=%u flags=%X', 0aH, 00H
$SG11352 DB	'NULL', 00H
	ORG $+3
$SG11353 DB	'NULL', 00H
	ORG $+3
$SG11354 DB	'NULL', 00H
	ORG $+3
$SG11355 DB	'NULL', 00H
	ORG $+3
$SG11708 DB	's', 00H
	ORG $+2
$SG11356 DB	'GetSegmentPart(%s) enter [override=%s sym=%s segment=%s]'
	DB	0aH, 00H
	ORG $+2
$SG11371 DB	'seg ', 00H
	ORG $+3
$SG11374 DB	'seg ', 00H
	ORG $+3
$SG11796 DB	's', 00H
	ORG $+2
$SG11376 DB	'GetSegmentPart: reg%u, buffer=%s', 0aH, 00H
	ORG $+2
$SG11797 DB	'z', 00H
	ORG $+2
$SG11388 DB	'watc_fcstart(%s, %u, %u)', 0aH, 00H
	ORG $+2
$SG11853 DB	'w', 00H
	ORG $+2
$SG11396 DB	'watc_fcend(%s, %u, %u)', 0aH, 00H
$SG11399 DB	' add %r, %u', 00H
$SG11857 DB	'w', 00H
	ORG $+2
$SG11401 DB	' add %r, %u', 00H
$SG11546 DB	'NULL', 00H
	ORG $+7
$SG11439 DB	'watc_param(%s, param=%u [name=%s, state=%u]),addr=%u: ps'
	DB	'ize=%u', 0aH, 00H
$SG11441 DB	'watc_param(%s): register param=%s', 0aH, 00H
	ORG $+1
$SG11860 DB	'd', 00H
	ORG $+2
$SG11451 DB	'%r %s, %r', 00H
	ORG $+2
$SG11866 DB	'd', 00H
	ORG $+2
$SG11452 DB	'%r %s, %s', 00H
	ORG $+2
$SG11868 DB	'w', 00H
	ORG $+2
$SG11453 DB	'%r %s, %r %s', 00H
	ORG $+3
$SG11463 DB	'mov %s, %r (%s)', 00H
$SG11464 DB	'mov %s, %s', 00H
	ORG $+1
$SG11874 DB	'd', 00H
	ORG $+2
$SG11467 DB	'mov %s, %s', 00H
	ORG $+1
$SG11256 DB	's', 00H
	ORG $+2
$SG11470 DB	'mov %s, %s', 00H
	ORG $+1
$SG11257 DB	'z', 00H
	ORG $+2
$SG11473 DB	'mov %s, %r %r %s[%u]', 00H
	ORG $+3
$SG11547 DB	'PushInvokeParam(%s, param=%s:%u, i=%u ) enter', 0aH, 00H
	ORG $+1
$SG11549 DB	'PushInvokeParam(%s): T_FINAL token, i=%u', 0aH, 00H
	ORG $+2
$SG11991 DB	' call ', 00H
	ORG $+5
$SG11552 DB	'PushInvokeParam(%s,%u): pmtype=%Xh, psize=%u', 0aH, 00H
	ORG $+2
$SG11558 DB	'PushInvokeParm(%u): error, psize=%u, fptrsize=%u', 0aH, 00H
	ORG $+6
$SG11566 DB	'PushInvokeParam: far ptr, %s isfar=%u, psize=%u, fptrsiz'
	DB	'e=%u', 0aH, 00H
	ORG $+2
$SG11571 DB	' push %s', 00H
	ORG $+7
$SG11572 DB	' lea %r, %s', 00H
	ORG $+4
$SG11573 DB	' push %r', 00H
	ORG $+7
$SG11580 DB	' db 66h', 00H
$SG11581 DB	' push %r', 00H
	ORG $+7
$SG11582 DB	' push %s', 00H
	ORG $+7
$SG11585 DB	' mov %r, offset %s', 00H
	ORG $+5
$SG11586 DB	' push %r', 00H
	ORG $+7
$SG11592 DB	' pushd %r %s', 00H
	ORG $+3
$SG11596 DB	' pushw %r %s', 00H
	ORG $+3
$SG11597 DB	' push %r %s', 00H
	ORG $+4
$SG11600 DB	'PushInvokeParm(%u): new value of size_vararg=%u [CurrWor'
	DB	'dSize=%u]', 0aH, 00H
	ORG $+5
$SG11607 DB	' db 66h', 00H
$SG11608 DB	' push %r', 00H
	ORG $+7
$SG11619 DB	'PushInvokeParm(%u): error, psize=0', 0aH, 00H
	ORG $+4
$SG11621 DB	'PushInvokeParm(%u): memtype EMPTY, asize=%u psize=%u', 0aH
	DB	00H
	ORG $+2
$SG11632 DB	'PushInvokeParam(%s, %u): arg name=%s, asize=%u, amtype=%'
	DB	'xh psize=%u', 0aH, 00H
	ORG $+3
$SG11638 DB	'PushInvokeParm(%u): argsize error, arg size=%d, parm siz'
	DB	'e=%d', 0aH, 00H
	ORG $+2
$SG11658 DB	' push word ptr %s+%u', 00H
	ORG $+3
$SG11633 DB	'PushInvokeParam(%s, %u): arg no name, asize=%u, amtype=%'
	DB	'xh psize=%u', 0aH, 00H
	ORG $+3
$SG11648 DB	'PushInvokeParm(%u): asize=%u added to size_vararg, now=%'
	DB	'u', 0aH, 00H
	ORG $+5
$SG11657 DB	' sub %r, 2', 00H
	ORG $+5
$SG11659 DB	' push %r ptr %s+%u', 00H
	ORG $+5
$SG11663 DB	'PushInvokeParm(%u): error, ADDR, psize=%u, is > 4', 0aH, 00H
	ORG $+5
$SG11666 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11667 DB	' push %r', 00H
	ORG $+7
$SG11671 DB	' mov %r, %s', 00H
	ORG $+4
$SG11672 DB	' push %r', 00H
	ORG $+7
$SG11681 DB	' xor %r, %r', 00H
	ORG $+4
$SG11682 DB	' push %r', 00H
	ORG $+7
$SG11683 DB	' push 0', 00H
$SG11684 DB	' mov %r, %s', 00H
	ORG $+4
$SG11686 DB	' mov %r, 0', 00H
	ORG $+5
$SG11687 DB	' mov %r, %s', 00H
$SG11688 DB	' cbw', 00H
	ORG $+3
$SG11690 DB	' cwd', 00H
	ORG $+7
$SG11691 DB	' push %r', 00H
	ORG $+7
$SG11692 DB	' push %r', 00H
	ORG $+7
$SG11695 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11696 DB	' push %r', 00H
	ORG $+7
$SG11704 DB	' pushw 0', 00H
	ORG $+7
$SG11705 DB	' sub %r, 2', 00H
	ORG $+5
$SG11706 DB	' push %s', 00H
	ORG $+7
$SG11709 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11710 DB	' push %r', 00H
	ORG $+7
$SG11712 DB	' push %s', 00H
	ORG $+7
$SG11717 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11718 DB	' push %r', 00H
	ORG $+7
$SG11721 DB	' mov %r, %s', 00H
$SG11722 DB	' cwd', 00H
	ORG $+7
$SG11723 DB	' push %r', 00H
	ORG $+7
$SG11724 DB	' push %r', 00H
	ORG $+7
$SG11725 DB	' push %s', 00H
	ORG $+7
$SG11730 DB	' xor %r, %r', 00H
	ORG $+4
$SG11731 DB	' push %r', 00H
	ORG $+7
$SG11732 DB	' pushw 0', 00H
	ORG $+7
$SG11733 DB	' push %s', 00H
	ORG $+7
$SG11755 DB	' mov %r, %s', 00H
$SG11765 DB	' cbw', 00H
	ORG $+7
$SG11746 DB	'PushInvokeParm(%u): error, REG, asize=%u, psize=%u, push'
	DB	'size=%u', 0aH, 00H
	ORG $+7
$SG11760 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11764 DB	' mov %r, %s', 00H
	ORG $+4
$SG11767 DB	' mov %r, %s', 00H
$SG11768 DB	' cwd', 00H
	ORG $+7
$SG11769 DB	' push %r', 00H
	ORG $+7
$SG11778 DB	' sub %r, 2', 00H
	ORG $+5
$SG11781 DB	' movsx %r, %s', 00H
	ORG $+2
$SG11782 DB	' pushw 0', 00H
	ORG $+7
$SG11783 DB	' pushw 0', 00H
	ORG $+7
$SG11787 DB	' xor %r, %r', 00H
	ORG $+4
$SG11788 DB	' push %r', 00H
	ORG $+7
$SG11798 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11800 DB	' mov %r, %s', 00H
$SG11804 DB	' cbw', 00H
	ORG $+7
$SG11806 DB	' mov %r, 0', 00H
	ORG $+5
$SG11810 DB	' push %r', 00H
	ORG $+7
$SG11834 DB	' mov %r, %s', 00H
	ORG $+4
$SG11836 DB	' xor %r, %r', 00H
	ORG $+4
$SG11840 DB	' xor %r, %r', 00H
	ORG $+4
$SG11841 DB	' mov %r, %r (%s)', 00H
	ORG $+7
$SG11842 DB	' push %r', 00H
	ORG $+7
$SG11846 DB	' mov %r, %r (%s)', 00H
	ORG $+7
$SG11862 DB	' push%s (%s) shr 32t', 00H
	ORG $+3
$SG11848 DB	'PushInvokeParm(%u): error, CONST, asize=%u, psize=%u, pu'
	DB	'shsize=%u', 0aH, 00H
	ORG $+5
$SG11849 DB	' push %r', 00H
	ORG $+7
$SG11867 DB	' pushw %r (%s)', 00H
	ORG $+1
$SG11873 DB	' pushd %r (%s)', 00H
	ORG $+1
$SG11879 DB	' push%s %r (%s)', 00H
$SG11935 DB	'InvokeDir(%s) enter', 0aH, 00H
	ORG $+3
$SG11876 DB	'PushInvokeParm(%u): error, CONST, asize=%u, psize=%u, pu'
	DB	'shsize=%u', 0aH, 00H
	ORG $+5
$SG11880 DB	' push%s %s', 00H
	ORG $+5
$SG11882 DB	'PushInvokeParm(%u): psize=%u added to size_vararg, now=%'
	DB	'u', 0aH, 00H
	ORG $+1
$SG11940 DB	'NULL', 00H
	ORG $+3
$SG11941 DB	'NULL', 00H
	ORG $+3
$SG11942 DB	'NULL', 00H
	ORG $+7
$SG11943 DB	'InvokeDir: target is expression, kind=%u sym=%s mbr=%s t'
	DB	'ype=%s memtype=%X ofssize=%u', 0aH, 00H
	ORG $+2
$SG11945 DB	'InvokeDirective: opnd.type=>%s< mem_type=%Xh', 0aH, 00H
	ORG $+2
$SG11964 DB	'InvokeDir: error proc.name=>%s< .mem_type=%Xh', 0aH, 00H
	ORG $+1
$SG11966 DB	'InvokeDir: error sym.name=%s', 0aH, 00H
	ORG $+2
$SG11967 DB	'NULL', 00H
	ORG $+3
$SG11968 DB	'InvokeDir: proc=%s target_type=>%s<', 0aH, 00H
	ORG $+3
$SG11970 DB	'NULL', 00H
	ORG $+3
$SG11971 DB	'InvokeDir: error, sym=%s state=%u memtype=%Xh [type=%s m'
	DB	'emtype=%Xh]', 0aH, 00H
	ORG $+3
$SG11980 DB	'InvokeDir: superfluous argument, i=%u', 0aH, 00H
	ORG $+1
$SG11974 DB	'InvokeDir: error, target_type=%s [memtype=%X pmemtype=%X'
	DB	' isproc=%u])', 0aH, 00H
	ORG $+2
$SG11975 DB	'InvokeDir: numparams=%u', 0aH, 00H
	ORG $+7
$SG11987 DB	'InvokeDir: PushInvokeParam(curr=%u, i=%u, numParam=%u) f'
	DB	'ailed', 0aH, 00H
	ORG $+1
$SG11996 DB	' externdef %r %s: %r %r', 00H
$SG11981 DB	'InvokeDir: VARARG proc, numparams=%u, actual (max) param'
	DB	's=%u, parasize=%u', 0aH, 00H
	ORG $+5
$SG11989 DB	'InvokeDir: PushInvokeParam(curr=%u, i=%u, numParam=%u) f'
	DB	'ailed', 0aH, 00H
	ORG $+1
$SG11997 DB	' externdef %s: %r %r', 00H
	ORG $+3
$SG12004 DB	'InvokeDir: size of fix args=%u, var args=%u', 0aH, 00H
	ORG $+3
$SG12005 DB	' add %r, %u', 00H
	ORG $+4
$SG12006 DB	' add %r, %u', 00H
	ORG $+4
$SG11053 DB	'ms32_fcstart(proc=%s, ofs=%u)', 0aH, 00H
	ORG $+1
$SG11081 DB	'ms32_param(proc=%s, ofs=%u, index=%u, param=%s) fcscratc'
	DB	'h=%u', 0aH, 00H
	ORG $+2
$SG11087 DB	' lea %r, %s', 00H
$SG11092 DB	'movsx', 00H
	ORG $+2
$SG11093 DB	'movzx', 00H
	ORG $+6
$SG11094 DB	' %s %r, %s', 00H
	ORG $+5
$SG11095 DB	' mov %r, %s', 00H
	ORG $+4
$SG11096 DB	' mov %r, 0', 00H
	ORG $+5
$SG11099 DB	' mov %r, %s', 00H
	ORG $+4
$SG11120 DB	'ms64_fcstart(%s, numparams=%u) vararg=%u', 0aH, 00H
	ORG $+6
$SG11127 DB	' sub %r, %d', 00H
	ORG $+4
$SG11136 DB	' add %r, %d', 00H
	ORG $+4
$SG11169 DB	'ms64_param(%s, index=%u, param.memtype=%Xh, addr=%u) ent'
	DB	'er', 0aH, 00H
	ORG $+4
$SG11201 DB	' lea %r, %s', 00H
	ORG $+4
$SG11202 DB	' mov [%r+%u], %r', 00H
	ORG $+7
$SG11203 DB	'ms64_param(%s, param=%u): ADDR flags=%X', 0aH, 00H
	ORG $+7
$SG11210 DB	' mov %r ptr [%r+%u], %r ( %s )', 00H
	ORG $+1
$SG11211 DB	' mov %r ptr [%r+%u], %r ( %s )', 00H
	ORG $+1
$SG11213 DB	'ms64_param(%s, param=%u): MT_PTR, type error, psize=%u', 0aH
	DB	00H
$SG11218 DB	' mov %r ptr [%r+%u], %s', 00H
$SG11219 DB	'ms64_param(%s, param=%u): MT_EMPTY size.p=%u flags=%X', 0aH
	DB	00H
	ORG $+1
$SG11224 DB	' mov %r ptr [%r+%u+0], %r (%s)', 00H
	ORG $+1
$SG11225 DB	' mov %r ptr [%r+%u+4], %r (%s)', 00H
	ORG $+1
$SG11226 DB	' mov %r ptr [%r+%u], %s', 00H
$SG11233 DB	'ms64_param(%s, param=%u): type error size.p/a=%u/%u flag'
	DB	's=%X', 0aH, 00H
	ORG $+2
$SG11238 DB	'ms64_param(%s, param=%u): REG size.p/a=%u/%u flags=%X', 0aH
	DB	00H
	ORG $+1
$SG11241 DB	'ms64_param(%s, param=%u): MEM size.p/a=%u/%u flags=%X', 0aH
	DB	00H
	ORG $+1
$SG11254 DB	' movsxd %r, %s', 00H
	ORG $+1
$SG11255 DB	' mov %r, %s', 00H
	ORG $+4
$SG11258 DB	' mov%sx %r, %s', 00H
	ORG $+1
$SG11261 DB	' mov %r, %s', 00H
	ORG $+4
$SG11262 DB	' mov [%r+%u], %r', 00H
_DATA	ENDS
PUBLIC	InvokeDirective
EXTRN	__report_rangecheckfailure:PROC
EXTRN	memcpy:PROC
EXTRN	__imp_strchr:PROC
EXTRN	strcat:PROC
EXTRN	strcpy:PROC
EXTRN	__imp__stricmp:PROC
EXTRN	strlen:PROC
EXTRN	DoDebugMsg:PROC
EXTRN	DoDebugMsg1:PROC
EXTRN	EmitErr:PROC
EXTRN	EmitWarn:PROC
EXTRN	SymFind:PROC
EXTRN	SizeFromMemtype:PROC
EXTRN	SizeFromRegister:PROC
EXTRN	GetResWName:PROC
EXTRN	EvalOperand:PROC
EXTRN	AddLineQueue:PROC
EXTRN	AddLineQueueX:PROC
EXTRN	RunLineQueue:PROC
EXTRN	search_assume:PROC
EXTRN	GetStdAssume:PROC
EXTRN	GetSymOfssize:PROC
EXTRN	GetCurrOffset:PROC
EXTRN	GetGroup:PROC
EXTRN	LstWrite:PROC
EXTRN	Mangle:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	_RTC_UninitUse:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	Parse_Pass:DWORD
EXTRN	SpecialTable:BYTE
EXTRN	sym_ReservedStack:QWORD
EXTRN	maxintvalues:BYTE
EXTRN	minintvalues:BYTE
EXTRN	stackreg:BYTE
EXTRN	__security_cookie:QWORD
_BSS	SEGMENT
size_vararg DD	01H DUP (?)
fcscratch DD	01H DUP (?)
_BSS	ENDS
pdata	SEGMENT
$pdata$ms32_fcstart DD imagerel ms32_fcstart
	DD	imagerel ms32_fcstart+182
	DD	imagerel $unwind$ms32_fcstart
$pdata$ms32_fcend DD imagerel ms32_fcend
	DD	imagerel ms32_fcend+17
	DD	imagerel $unwind$ms32_fcend
$pdata$ms32_param DD imagerel ms32_param
	DD	imagerel ms32_param+658
	DD	imagerel $unwind$ms32_param
$pdata$watc_fcstart DD imagerel watc_fcstart
	DD	imagerel watc_fcstart+86
	DD	imagerel $unwind$watc_fcstart
$pdata$watc_fcend DD imagerel watc_fcend
	DD	imagerel watc_fcend+222
	DD	imagerel $unwind$watc_fcend
$pdata$watc_param DD imagerel watc_param
	DD	imagerel watc_param+1427
	DD	imagerel $unwind$watc_param
$pdata$ms64_fcstart DD imagerel ms64_fcstart
	DD	imagerel ms64_fcstart+350
	DD	imagerel $unwind$ms64_fcstart
$pdata$ms64_fcend DD imagerel ms64_fcend
	DD	imagerel ms64_fcend+86
	DD	imagerel $unwind$ms64_fcend
$pdata$ms64_param DD imagerel ms64_param
	DD	imagerel ms64_param+5161
	DD	imagerel $unwind$ms64_param
$pdata$GetSegmentPart DD imagerel GetSegmentPart
	DD	imagerel GetSegmentPart+817
	DD	imagerel $unwind$GetSegmentPart
$pdata$SkipTypecast DD imagerel SkipTypecast
	DD	imagerel SkipTypecast+271
	DD	imagerel $unwind$SkipTypecast
$pdata$PushInvokeParam DD imagerel PushInvokeParam
	DD	imagerel PushInvokeParam+9016
	DD	imagerel $unwind$PushInvokeParam
$pdata$InvokeDirective DD imagerel $LN86
	DD	imagerel $LN86+3663
	DD	imagerel $unwind$InvokeDirective
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
CONST	SEGMENT
watc_param$rtcName$0 DB 072H
	DB	065H
	DB	067H
	DB	073H
	DB	00H
	ORG $+3
watc_param$rtcName$1 DB 072H
	DB	065H
	DB	067H
	DB	00H
watc_param$rtcName$2 DB 062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
watc_param$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:watc_param$rtcVarDesc
ms64_param$rtcName$0 DB 072H
	DB	065H
	DB	067H
	DB	00H
	ORG $+4
watc_param$rtcVarDesc DD 0110H
	DD	080H
	DQ	FLAT:watc_param$rtcName$2
	DD	0b8H
	DD	020H
	DQ	FLAT:watc_param$rtcName$1
	DD	060H
	DD	040H
	DQ	FLAT:watc_param$rtcName$0
	ORG $+144
PushInvokeParam$rtcName$0 DB 06aH
	DB	00H
	ORG $+2
PushInvokeParam$rtcName$1 DB 06fH
	DB	070H
	DB	06eH
	DB	064H
	DB	00H
	ORG $+3
PushInvokeParam$rtcName$3 DB 062H
	DB	075H
	DB	066H
	DB	066H
	DB	065H
	DB	072H
	DB	00H
	ORG $+5
PushInvokeParam$rtcName$2 DB 066H
	DB	075H
	DB	06cH
	DB	06cH
	DB	070H
	DB	061H
	DB	072H
	DB	061H
	DB	06dH
	DB	00H
	ORG $+6
PushInvokeParam$rtcFrameData DD 04H
	DD	00H
	DQ	FLAT:PushInvokeParam$rtcVarDesc
InvokeDirective$rtcName$0 DB 070H
	DB	06fH
	DB	072H
	DB	064H
	DB	065H
	DB	072H
	DB	00H
	ORG $+1
PushInvokeParam$rtcVarDesc DD 0390H
	DD	0258H
	DQ	FLAT:PushInvokeParam$rtcName$3
	DD	0110H
	DD	0258H
	DQ	FLAT:PushInvokeParam$rtcName$2
	DD	080H
	DD	068H
	DQ	FLAT:PushInvokeParam$rtcName$1
	DD	054H
	DD	04H
	DQ	FLAT:PushInvokeParam$rtcName$0
	ORG $+192
InvokeDirective$rtcName$1 DB 076H
	DB	061H
	DB	06cH
	DB	075H
	DB	065H
	DB	00H
	ORG $+2
InvokeDirective$rtcName$2 DB 072H
	DB	030H
	DB	066H
	DB	06cH
	DB	061H
	DB	067H
	DB	073H
	DB	00H
InvokeDirective$rtcName$3 DB 06fH
	DB	070H
	DB	06eH
	DB	064H
	DB	00H
	ORG $+3
InvokeDirective$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:InvokeDirective$rtcVarDesc
	ORG $+8
InvokeDirective$rtcVarDesc DD 0d0H
	DD	068H
	DQ	FLAT:InvokeDirective$rtcName$3
	DD	094H
	DD	01H
	DQ	FLAT:InvokeDirective$rtcName$2
	DD	064H
	DD	04H
	DQ	FLAT:InvokeDirective$rtcName$1
CONST	ENDS
xdata	SEGMENT
$unwind$ms32_fcstart DD 022c01H
	DD	070145218H
$unwind$ms32_fcend DD 010f01H
	DD	0700fH
$unwind$ms32_param DD 022c01H
	DD	070149218H
$unwind$watc_fcstart DD 022c01H
	DD	070143218H
$unwind$watc_fcend DD 022701H
	DD	0700f3213H
$unwind$watc_param DD 034419H
	DD	036011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	01a0H
$unwind$ms64_fcstart DD 022c01H
	DD	070143218H
$unwind$ms64_fcend DD 022701H
	DD	0700f3213H
$unwind$ms64_param DD 033201H
	DD	016011bH
	DD	07014H
$unwind$GetSegmentPart DD 022e01H
	DD	07010f217H
$unwind$SkipTypecast DD 022701H
	DD	0700f5213H
$unwind$PushInvokeParam DD 034319H
	DD	0d4011bH
	DD	07014H
	DD	imagerel __GSHandlerCheck
	DD	0698H
$unwind$InvokeDirective DD 032701H
	DD	0360111H
	DD	0700aH
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
sym$ = 64
proc$ = 72
p$ = 80
numParam$ = 88
value$ = 100
size$ = 116
parmpos$ = 120
namepos$ = 124
porder$ = 128
r0flags$ = 148
info$ = 168
curr$ = 176
opnd$ = 208
j$7 = 324
iatname$8 = 328
$T9 = 336
$T10 = 337
tv135 = 344
tv139 = 352
tv143 = 360
tv176 = 368
tv231 = 376
tv239 = 384
tv251 = 392
tv257 = 400
tv612 = 408
tv571 = 416
tv574 = 424
i$ = 448
tokenarray$ = 456
InvokeDirective PROC

; 1439 : {

$LN86:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 432				; 000001b0H
	mov	rdi, rsp
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+448]
	mov	BYTE PTR $T10[rsp], 0
	mov	BYTE PTR $T9[rsp], 0

; 1440 :     struct asym    *sym;
; 1441 :     struct dsym    *proc;
; 1442 :     char           *p;
; 1443 :     //char         *param;
; 1444 :     int            numParam;
; 1445 :     int            value;
; 1446 :     int            size;
; 1447 :     int            parmpos;
; 1448 :     int            namepos;
; 1449 :     int            porder;
; 1450 :     uint_8         r0flags = 0;

	mov	BYTE PTR r0flags$[rsp], 0

; 1451 :     //bool           uselabel = FALSE;
; 1452 :     struct proc_info *info;
; 1453 :     struct dsym    *curr;
; 1454 :     struct expr    opnd;
; 1455 :     //char           buffer[MAX_LINE_LEN];
; 1456 : 
; 1457 :     DebugMsg1(("InvokeDir(%s) enter\n", tokenarray[i].tokpos ));

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	lea	rcx, OFFSET FLAT:$SG11935
	call	DoDebugMsg1

; 1458 : 
; 1459 :     i++; /* skip INVOKE directive */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1460 :     namepos = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR namepos$[rsp], eax

; 1461 : 
; 1462 :     /* if there is more than just an ID item describing the invoke target,
; 1463 :      use the expression evaluator to get it
; 1464 :      */
; 1465 :     if ( tokenarray[i].token != T_ID || ( tokenarray[i+1].token != T_COMMA && tokenarray[i+1].token != T_FINAL ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	SHORT $LN21@InvokeDire
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	$LN19@InvokeDire
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN19@InvokeDire
$LN21@InvokeDire:

; 1466 :     //if ( tokenarray[i+1].token != T_COMMA && tokenarray[i+1].token != T_FINAL ) {
; 1467 :         if ( ERROR == EvalOperand( &i, tokenarray, Token_Count, &opnd, 0 ) )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opnd$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN22@InvokeDire

; 1468 :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@InvokeDire
$LN22@InvokeDire:

; 1469 :         DebugMsg1(("InvokeDir: target is expression, kind=%u sym=%s mbr=%s type=%s memtype=%X ofssize=%u\n",

	cmp	QWORD PTR opnd$[rsp+96], 0
	je	SHORT $LN68@InvokeDire
	mov	rax, QWORD PTR opnd$[rsp+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv135[rsp], rax
	jmp	SHORT $LN69@InvokeDire
$LN68@InvokeDire:
	lea	rax, OFFSET FLAT:$SG11940
	mov	QWORD PTR tv135[rsp], rax
$LN69@InvokeDire:
	cmp	QWORD PTR opnd$[rsp+88], 0
	je	SHORT $LN70@InvokeDire
	mov	rax, QWORD PTR opnd$[rsp+88]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv139[rsp], rax
	jmp	SHORT $LN71@InvokeDire
$LN70@InvokeDire:
	lea	rax, OFFSET FLAT:$SG11941
	mov	QWORD PTR tv139[rsp], rax
$LN71@InvokeDire:
	cmp	QWORD PTR opnd$[rsp+80], 0
	je	SHORT $LN72@InvokeDire
	mov	rax, QWORD PTR opnd$[rsp+80]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv143[rsp], rax
	jmp	SHORT $LN73@InvokeDire
$LN72@InvokeDire:
	lea	rax, OFFSET FLAT:$SG11942
	mov	QWORD PTR tv143[rsp], rax
$LN73@InvokeDire:
	movzx	eax, BYTE PTR opnd$[rsp+69]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR opnd$[rsp+64]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR tv135[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv139[rsp]
	mov	r8, QWORD PTR tv143[rsp]
	mov	edx, DWORD PTR opnd$[rsp+60]
	lea	rcx, OFFSET FLAT:$SG11943
	call	DoDebugMsg1

; 1470 :                    opnd.kind,
; 1471 :                    opnd.sym ? opnd.sym->name : "NULL",
; 1472 :                    opnd.mbr ? opnd.mbr->name : "NULL",
; 1473 :                    opnd.type ? opnd.type->name : "NULL",
; 1474 :                    opnd.mem_type, opnd.Ofssize ));
; 1475 : #if 1
; 1476 :         /* a typecast with PTR? Since v1.95, this has highest priority */
; 1477 :         //if (opnd.explicit == TRUE && opnd.type != NULL && opnd.type->state == SYM_TYPE ) {
; 1478 :         /* v1.96: removed opnd.explicit!!! */
; 1479 :         /* fixme: if opnd.type is set, opnd.type MUST have state SYM_TYPE */
; 1480 :         if ( opnd.type != NULL && opnd.type->state == SYM_TYPE ) {

	cmp	QWORD PTR opnd$[rsp+96], 0
	je	SHORT $LN23@InvokeDire
	mov	rax, QWORD PTR opnd$[rsp+96]
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN23@InvokeDire

; 1481 :             sym = opnd.type;

	mov	rax, QWORD PTR opnd$[rsp+96]
	mov	QWORD PTR sym$[rsp], rax

; 1482 :             DebugMsg1(("InvokeDirective: opnd.type=>%s< mem_type=%Xh\n", sym->name, sym->mem_type ));

	mov	rax, QWORD PTR sym$[rsp]
	mov	r8d, DWORD PTR [rax+36]
	mov	rax, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11945
	call	DoDebugMsg1

; 1483 :             proc = (struct dsym *)sym;

	mov	rax, QWORD PTR sym$[rsp]
	mov	QWORD PTR proc$[rsp], rax

; 1484 :             //if ( opnd.label_tok != NULL ) /* v2.09: uselabel obsolete */
; 1485 :             //    uselabel = TRUE;
; 1486 :             if ( sym->mem_type == MT_PROC ) /* added for v1.95 */

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	jne	SHORT $LN24@InvokeDire

; 1487 :                 goto isfnproto;

	jmp	$isfnproto$87
$LN24@InvokeDire:

; 1488 :             if ( sym->mem_type == MT_PTR )  /* v2.09: mem_type must be MT_PTR */

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN25@InvokeDire

; 1489 :                 goto isfnptr;

	jmp	$isfnptr$88
$LN25@InvokeDire:
$LN23@InvokeDire:

; 1490 :         }
; 1491 : #endif
; 1492 :         if ( opnd.kind == EXPR_REG ) {

	cmp	DWORD PTR opnd$[rsp+60], 2
	jne	SHORT $LN26@InvokeDire

; 1493 :             if ( GetValueSp( opnd.base_reg->tokval ) & OP_RGT8 )

	mov	rax, QWORD PTR opnd$[rsp+24]
	mov	eax, DWORD PTR [rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 14
	test	eax, eax
	je	SHORT $LN28@InvokeDire

; 1494 :                 sym = GetStdAssume( GetRegNo( opnd.base_reg->tokval ) );

	mov	rax, QWORD PTR opnd$[rsp+24]
	mov	eax, DWORD PTR [rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	ecx, eax
	call	GetStdAssume
	mov	QWORD PTR sym$[rsp], rax
	jmp	SHORT $LN29@InvokeDire
$LN28@InvokeDire:

; 1495 :             else
; 1496 :                 sym = NULL;

	mov	QWORD PTR sym$[rsp], 0
$LN29@InvokeDire:

; 1497 :         } else

	jmp	SHORT $LN27@InvokeDire
$LN26@InvokeDire:

; 1498 :             sym = ( opnd.mbr ? opnd.mbr : opnd.sym );

	cmp	QWORD PTR opnd$[rsp+88], 0
	je	SHORT $LN74@InvokeDire
	mov	rax, QWORD PTR opnd$[rsp+88]
	mov	QWORD PTR tv176[rsp], rax
	jmp	SHORT $LN75@InvokeDire
$LN74@InvokeDire:
	mov	rax, QWORD PTR opnd$[rsp+80]
	mov	QWORD PTR tv176[rsp], rax
$LN75@InvokeDire:
	mov	rax, QWORD PTR tv176[rsp]
	mov	QWORD PTR sym$[rsp], rax
$LN27@InvokeDire:

; 1499 : 
; 1500 :     } else {

	jmp	SHORT $LN20@InvokeDire
$LN19@InvokeDire:

; 1501 :         opnd.base_reg = NULL;

	mov	QWORD PTR opnd$[rsp+24], 0

; 1502 :         sym = SymSearch( tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	SymFind
	mov	QWORD PTR sym$[rsp], rax

; 1503 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN20@InvokeDire:

; 1504 :     }
; 1505 : 
; 1506 :     if( sym == NULL ) {

	cmp	QWORD PTR sym$[rsp], 0
	jne	SHORT $LN30@InvokeDire

; 1507 :         /* v2.04: msg changed */
; 1508 :         return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );

	mov	ecx, 159				; 0000009fH
	call	EmitErr
	jmp	$LN1@InvokeDire
$LN30@InvokeDire:

; 1509 :         //return( EmitErr( SYMBOL_NOT_DEFINED, name ) );
; 1510 :     }
; 1511 :     if( sym->isproc )  /* the most simple case: symbol is a PROC */

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN31@InvokeDire

; 1512 :         ;

	jmp	$LN32@InvokeDire
$LN31@InvokeDire:

; 1513 :     else if ( sym->mem_type == MT_PTR && sym->target_type && sym->target_type->isproc )

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN33@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN33@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+48]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN33@InvokeDire

; 1514 :         sym = sym->target_type;

	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR sym$[rsp], rax
	jmp	$LN34@InvokeDire
$LN33@InvokeDire:

; 1515 :     else if ( sym->mem_type == MT_PTR && sym->target_type && sym->target_type->mem_type == MT_PROC ) {

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN35@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN35@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+48]
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	jne	SHORT $LN35@InvokeDire

; 1516 :         proc = (struct dsym *)sym->target_type;

	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR proc$[rsp], rax

; 1517 :         goto isfnproto;

	jmp	SHORT $isfnproto$87
	jmp	$LN36@InvokeDire
$LN35@InvokeDire:

; 1518 :     } else if ( ( sym->mem_type == MT_TYPE ) && ( sym->type->mem_type == MT_PTR || sym->type->mem_type == MT_PROC ) ) {

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+36], 196			; 000000c4H
	jne	$LN37@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	je	SHORT $LN39@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	jne	$LN37@InvokeDire
$LN39@InvokeDire:

; 1519 :         /* second case: symbol is a (function?) pointer */
; 1520 :         proc = (struct dsym *)sym->type;

	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	QWORD PTR proc$[rsp], rax

; 1521 :         if ( proc->sym.mem_type != MT_PROC )

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	je	SHORT $LN40@InvokeDire

; 1522 :             goto isfnptr;

	jmp	SHORT $isfnptr$88
$LN40@InvokeDire:
$isfnproto$87:

; 1523 :     isfnproto:
; 1524 :         /* pointer target must be a PROTO typedef */
; 1525 :         if ( proc->sym.mem_type != MT_PROC ) {

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	je	SHORT $LN41@InvokeDire

; 1526 :             DebugMsg(("InvokeDir: error proc.name=>%s< .mem_type=%Xh\n", proc->sym.name, proc->sym.mem_type ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	r8d, DWORD PTR [rax+36]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11964
	call	DoDebugMsg

; 1527 :             DebugMsg(("InvokeDir: error sym.name=%s\n", sym ? sym->name : "" ));

	cmp	QWORD PTR sym$[rsp], 0
	je	SHORT $LN76@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv231[rsp], rax
	jmp	SHORT $LN77@InvokeDire
$LN76@InvokeDire:
	lea	rax, OFFSET FLAT:$SG11965
	mov	QWORD PTR tv231[rsp], rax
$LN77@InvokeDire:
	mov	rdx, QWORD PTR tv231[rsp]
	lea	rcx, OFFSET FLAT:$SG11966
	call	DoDebugMsg

; 1528 :             return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );

	mov	ecx, 159				; 0000009fH
	call	EmitErr
	jmp	$LN1@InvokeDire
$LN41@InvokeDire:
$isfnptr$88:

; 1529 :         }
; 1530 :     isfnptr:
; 1531 :         /* get the pointer target */
; 1532 :         sym = proc->sym.target_type;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	QWORD PTR sym$[rsp], rax

; 1533 :         DebugMsg1(("InvokeDir: proc=%s target_type=>%s<\n", proc->sym.name, sym ? sym->name : "NULL" ));

	cmp	QWORD PTR sym$[rsp], 0
	je	SHORT $LN78@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv239[rsp], rax
	jmp	SHORT $LN79@InvokeDire
$LN78@InvokeDire:
	lea	rax, OFFSET FLAT:$SG11967
	mov	QWORD PTR tv239[rsp], rax
$LN79@InvokeDire:
	mov	r8, QWORD PTR tv239[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11968
	call	DoDebugMsg1

; 1534 :         if ( sym == NULL ) {

	cmp	QWORD PTR sym$[rsp], 0
	jne	SHORT $LN42@InvokeDire

; 1535 :             return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );

	mov	ecx, 159				; 0000009fH
	call	EmitErr
	jmp	$LN1@InvokeDire
$LN42@InvokeDire:

; 1536 :         }
; 1537 :     } else {

	jmp	$LN38@InvokeDire
$LN37@InvokeDire:

; 1538 :         DebugMsg(("InvokeDir: error, sym=%s state=%u memtype=%Xh [type=%s memtype=%Xh]\n",

	mov	rax, QWORD PTR sym$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN80@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	eax, DWORD PTR [rax+36]
	mov	DWORD PTR tv251[rsp], eax
	jmp	SHORT $LN81@InvokeDire
$LN80@InvokeDire:
	mov	DWORD PTR tv251[rsp], 0
$LN81@InvokeDire:
	mov	rax, QWORD PTR sym$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN82@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv257[rsp], rax
	jmp	SHORT $LN83@InvokeDire
$LN82@InvokeDire:
	lea	rax, OFFSET FLAT:$SG11970
	mov	QWORD PTR tv257[rsp], rax
$LN83@InvokeDire:
	mov	eax, DWORD PTR tv251[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR tv257[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	rax, QWORD PTR sym$[rsp]
	mov	r9d, DWORD PTR [rax+36]
	mov	rax, QWORD PTR sym$[rsp]
	mov	r8d, DWORD PTR [rax+32]
	mov	rax, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11971
	call	DoDebugMsg

; 1539 :                   sym->name, sym->state, sym->mem_type,
; 1540 :                   sym->type ? sym->type->name : "NULL",
; 1541 :                   sym->type ? sym->type->mem_type : 0));
; 1542 : #ifdef DEBUG_OUT
; 1543 :         if ( sym->mem_type == MT_PTR || sym->mem_type == MT_PROC )

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	je	SHORT $LN44@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+36], 128			; 00000080H
	jne	SHORT $LN43@InvokeDire
$LN44@InvokeDire:

; 1544 :             DebugMsg(("InvokeDir: error, target_type=%s [memtype=%X pmemtype=%X isproc=%u])\n",

	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+48]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rcx+48]
	movzx	ecx, BYTE PTR [rcx+46]
	mov	rdx, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rdx+48]
	mov	r8, QWORD PTR sym$[rsp]
	mov	r8, QWORD PTR [r8+48]
	mov	QWORD PTR tv612[rsp], r8
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, ecx
	mov	r8d, DWORD PTR [rdx+36]
	mov	rax, QWORD PTR tv612[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11974
	call	DoDebugMsg
$LN43@InvokeDire:

; 1545 :                       sym->target_type->name,
; 1546 :                       sym->target_type->mem_type,
; 1547 :                       sym->target_type->ptr_memtype,
; 1548 :                       sym->target_type->isproc ));
; 1549 : #endif
; 1550 :         return( EmitErr( INVOKE_REQUIRES_PROTOTYPE ) );

	mov	ecx, 159				; 0000009fH
	call	EmitErr
	jmp	$LN1@InvokeDire
$LN38@InvokeDire:
$LN36@InvokeDire:
$LN34@InvokeDire:
$LN32@InvokeDire:

; 1551 :     }
; 1552 :     proc = (struct dsym *)sym;

	mov	rax, QWORD PTR sym$[rsp]
	mov	QWORD PTR proc$[rsp], rax

; 1553 :     info = proc->e.procinfo;

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR info$[rsp], rax

; 1554 : 
; 1555 : #if 0 /* v2.05: can't happen anymore */
; 1556 :     /* does FASTCALL variant support INVOKE? */
; 1557 :     if ( proc->sym.langtype == LANG_FASTCALL && fastcall_tab[ModuleInfo.fctype].invokestart == NULL ) {
; 1558 :         return( EmitError( FASTCALL_VARIANT_NOT_SUPPORTED ) );
; 1559 :     }
; 1560 : #endif
; 1561 : 
; 1562 :     /* get the number of parameters */
; 1563 : 
; 1564 :     for ( curr = info->paralist, numParam = 0 ; curr ; curr = curr->nextparam, numParam++ );

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
	mov	DWORD PTR numParam$[rsp], 0
	jmp	SHORT $LN4@InvokeDire
$LN2@InvokeDire:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
	mov	eax, DWORD PTR numParam$[rsp]
	inc	eax
	mov	DWORD PTR numParam$[rsp], eax
$LN4@InvokeDire:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN3@InvokeDire
	jmp	SHORT $LN2@InvokeDire
$LN3@InvokeDire:

; 1565 :     DebugMsg1(("InvokeDir: numparams=%u\n", numParam ));

	mov	edx, DWORD PTR numParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11975
	call	DoDebugMsg1

; 1566 : 
; 1567 :     if ( proc->sym.langtype == LANG_FASTCALL ) {

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN45@InvokeDire

; 1568 :         fcscratch = 0;

	mov	DWORD PTR fcscratch, 0

; 1569 :         porder = fastcall_tab[ModuleInfo.fctype].invokestart( proc, numParam, i, tokenarray, &value );

	mov	BYTE PTR $T10[rsp], 1
	movsxd	rax, DWORD PTR ModuleInfo+376
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:fastcall_tab
	mov	QWORD PTR tv571[rsp], rcx
	lea	rdx, QWORD PTR value$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	mov	r9, QWORD PTR tokenarray$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	mov	edx, DWORD PTR numParam$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	r10, QWORD PTR tv571[rsp]
	call	QWORD PTR [r10+rax]
	mov	BYTE PTR $T9[rsp], 1
	mov	DWORD PTR porder$[rsp], eax
$LN45@InvokeDire:

; 1570 :     }
; 1571 : 
; 1572 :     curr = info->paralist;

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax

; 1573 :     parmpos = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR parmpos$[rsp], eax

; 1574 : 
; 1575 :     if ( !( info->has_vararg ) ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN46@InvokeDire

; 1576 :         /* check if there is a superfluous parameter in the INVOKE call */
; 1577 :         if ( PushInvokeParam( i, tokenarray, proc, NULL, numParam, &r0flags ) != ERROR ) {

	lea	rax, QWORD PTR r0flags$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR numParam$[rsp]
	mov	DWORD PTR [rsp+32], eax
	xor	r9d, r9d
	mov	r8, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	call	PushInvokeParam
	cmp	eax, -1
	je	SHORT $LN48@InvokeDire

; 1578 :             DebugMsg(("InvokeDir: superfluous argument, i=%u\n", i));

	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG11980
	call	DoDebugMsg

; 1579 :             return( EmitErr( TOO_MANY_ARGUMENTS_TO_INVOKE ) );

	mov	ecx, 177				; 000000b1H
	call	EmitErr
	jmp	$LN1@InvokeDire
$LN48@InvokeDire:

; 1580 :         }
; 1581 :     } else {

	jmp	$LN47@InvokeDire
$LN46@InvokeDire:

; 1582 :         int j = (Token_Count - i) / 2;

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, DWORD PTR ModuleInfo+496
	sub	ecx, eax
	mov	eax, ecx
	cdq
	sub	eax, edx
	sar	eax, 1
	mov	DWORD PTR j$7[rsp], eax

; 1583 :         /* for VARARG procs, just push the additional params with
; 1584 :          the VARARG descriptor
; 1585 :         */
; 1586 :         numParam--;

	mov	eax, DWORD PTR numParam$[rsp]
	dec	eax
	mov	DWORD PTR numParam$[rsp], eax

; 1587 :         size_vararg = 0; /* reset the VARARG parameter size count */

	mov	DWORD PTR size_vararg, 0
$LN5@InvokeDire:

; 1588 :         while ( curr && curr->sym.is_vararg == FALSE ) curr = curr->nextparam;

	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN6@InvokeDire
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN6@InvokeDire
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN5@InvokeDire
$LN6@InvokeDire:

; 1589 :         DebugMsg1(("InvokeDir: VARARG proc, numparams=%u, actual (max) params=%u, parasize=%u\n", numParam, j, info->parasize));

	mov	rax, QWORD PTR info$[rsp]
	mov	r9d, DWORD PTR [rax+32]
	mov	r8d, DWORD PTR j$7[rsp]
	mov	edx, DWORD PTR numParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11981
	call	DoDebugMsg1

; 1590 :         for ( ; j >= numParam; j-- )

	jmp	SHORT $LN9@InvokeDire
$LN7@InvokeDire:
	mov	eax, DWORD PTR j$7[rsp]
	dec	eax
	mov	DWORD PTR j$7[rsp], eax
$LN9@InvokeDire:
	mov	eax, DWORD PTR numParam$[rsp]
	cmp	DWORD PTR j$7[rsp], eax
	jl	SHORT $LN8@InvokeDire

; 1591 :             PushInvokeParam( i, tokenarray, proc, curr, j, &r0flags );

	lea	rax, QWORD PTR r0flags$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR j$7[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	call	PushInvokeParam
	jmp	SHORT $LN7@InvokeDire
$LN8@InvokeDire:

; 1592 :         /* move to first non-vararg parameter, if any */
; 1593 :         for ( curr = info->paralist; curr && curr->sym.is_vararg == TRUE; curr = curr->nextparam );

	mov	rax, QWORD PTR info$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN12@InvokeDire
$LN10@InvokeDire:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN12@InvokeDire:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN11@InvokeDire
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN11@InvokeDire
	jmp	SHORT $LN10@InvokeDire
$LN11@InvokeDire:
$LN47@InvokeDire:

; 1594 :     }
; 1595 : 
; 1596 :     /* the parameters are usually stored in "push" order.
; 1597 :      * This if() must match the one in proc.c, ParseParams().
; 1598 :      */
; 1599 : 
; 1600 :     if ( sym->langtype == LANG_STDCALL ||
; 1601 :         sym->langtype == LANG_C ||
; 1602 :         ( sym->langtype == LANG_FASTCALL && porder ) ||

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 3
	je	SHORT $LN51@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 1
	je	SHORT $LN51@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN52@InvokeDire
	cmp	BYTE PTR $T9[rsp], 0
	jne	SHORT $LN84@InvokeDire
	lea	rcx, OFFSET FLAT:InvokeDirective$rtcName$0
	call	_RTC_UninitUse
$LN84@InvokeDire:
	cmp	DWORD PTR porder$[rsp], 0
	jne	SHORT $LN51@InvokeDire
$LN52@InvokeDire:
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 2
	jne	$LN49@InvokeDire
$LN51@InvokeDire:

; 1603 :         sym->langtype == LANG_SYSCALL ) {
; 1604 :         for ( ; curr ; curr = curr->nextparam ) {

	jmp	SHORT $LN15@InvokeDire
$LN13@InvokeDire:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
$LN15@InvokeDire:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN14@InvokeDire

; 1605 :             numParam--;

	mov	eax, DWORD PTR numParam$[rsp]
	dec	eax
	mov	DWORD PTR numParam$[rsp], eax

; 1606 :             if ( PushInvokeParam( i, tokenarray, proc, curr, numParam, &r0flags ) == ERROR ) {

	lea	rax, QWORD PTR r0flags$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR numParam$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	call	PushInvokeParam
	cmp	eax, -1
	jne	SHORT $LN53@InvokeDire

; 1607 :                 DebugMsg(("InvokeDir: PushInvokeParam(curr=%u, i=%u, numParam=%u) failed\n", curr, i, numParam));

	mov	r9d, DWORD PTR numParam$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR curr$[rsp]
	lea	rcx, OFFSET FLAT:$SG11987
	call	DoDebugMsg

; 1608 :                 EmitErr( TOO_FEW_ARGUMENTS_TO_INVOKE, sym->name );

	mov	rax, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 146				; 00000092H
	call	EmitErr
$LN53@InvokeDire:

; 1609 :             }
; 1610 :         }

	jmp	$LN13@InvokeDire
$LN14@InvokeDire:

; 1611 :     } else {

	jmp	$LN50@InvokeDire
$LN49@InvokeDire:

; 1612 :         for ( numParam = 0 ; curr && curr->sym.is_vararg == FALSE; curr = curr->nextparam, numParam++ ) {

	mov	DWORD PTR numParam$[rsp], 0
	jmp	SHORT $LN18@InvokeDire
$LN16@InvokeDire:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR curr$[rsp], rax
	mov	eax, DWORD PTR numParam$[rsp]
	inc	eax
	mov	DWORD PTR numParam$[rsp], eax
$LN18@InvokeDire:
	cmp	QWORD PTR curr$[rsp], 0
	je	$LN17@InvokeDire
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN17@InvokeDire

; 1613 :             if ( PushInvokeParam( i, tokenarray, proc, curr, numParam, &r0flags ) == ERROR ) {

	lea	rax, QWORD PTR r0flags$[rsp]
	mov	QWORD PTR [rsp+40], rax
	mov	eax, DWORD PTR numParam$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	call	PushInvokeParam
	cmp	eax, -1
	jne	SHORT $LN54@InvokeDire

; 1614 :                 DebugMsg(("InvokeDir: PushInvokeParam(curr=%u, i=%u, numParam=%u) failed\n", curr, i, numParam));

	mov	r9d, DWORD PTR numParam$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR curr$[rsp]
	lea	rcx, OFFSET FLAT:$SG11989
	call	DoDebugMsg

; 1615 :                 EmitErr( TOO_FEW_ARGUMENTS_TO_INVOKE, sym->name );

	mov	rax, QWORD PTR sym$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 146				; 00000092H
	call	EmitErr
$LN54@InvokeDire:

; 1616 :             }
; 1617 :         }

	jmp	$LN16@InvokeDire
$LN17@InvokeDire:
$LN50@InvokeDire:

; 1618 :     }
; 1619 : #if 1
; 1620 :     /* v2.05 added. A warning only, because Masm accepts this. */
; 1621 :     if ( opnd.base_reg != NULL &&
; 1622 :         Parse_Pass == PASS_1 &&
; 1623 :         (r0flags & R0_USED ) &&

	cmp	QWORD PTR opnd$[rsp+24], 0
	je	SHORT $LN55@InvokeDire
	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN55@InvokeDire
	movzx	eax, BYTE PTR r0flags$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN55@InvokeDire
	mov	rax, QWORD PTR opnd$[rsp+24]
	movzx	eax, BYTE PTR [rax+1]
	test	eax, eax
	jne	SHORT $LN55@InvokeDire

; 1624 :         opnd.base_reg->bytval == 0 )
; 1625 :         EmitWarn( 2, REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	edx, 165				; 000000a5H
	mov	ecx, 2
	call	EmitWarn
$LN55@InvokeDire:

; 1626 : #endif
; 1627 :     p = StringBufferEnd;

	mov	rax, QWORD PTR ModuleInfo+488
	mov	QWORD PTR p$[rsp], rax

; 1628 :     strcpy( p, " call " );

	lea	rdx, OFFSET FLAT:$SG11991
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy

; 1629 :     p += 6;

	mov	rax, QWORD PTR p$[rsp]
	add	rax, 6
	mov	QWORD PTR p$[rsp], rax

; 1630 :     /* v2.09: 'uselabel' obsolete */
; 1631 :     //if ( uselabel ) {
; 1632 :     //    DebugMsg1(("InvokeDir: opnd.label_tok is used: %s\n", opnd.label_tok->string_ptr ));
; 1633 :     //    strcpy( p, opnd.label_tok->string_ptr );
; 1634 :     //} else {
; 1635 : #if DLLIMPORT
; 1636 :         if ( sym->state == SYM_EXTERNAL && sym->dll ) {

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+32], 2
	jne	$LN56@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	$LN56@InvokeDire

; 1637 :             char *iatname = p;

	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR iatname$8[rsp], rax

; 1638 :             strcpy( p, ModuleInfo.g.imp_prefix );

	mov	rdx, QWORD PTR ModuleInfo+88
	mov	rcx, QWORD PTR p$[rsp]
	call	strcpy

; 1639 :             p += strlen( p );

	mov	rcx, QWORD PTR p$[rsp]
	call	strlen
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax

; 1640 :             p += Mangle( sym, p );

	mov	rdx, QWORD PTR p$[rsp]
	mov	rcx, QWORD PTR sym$[rsp]
	call	Mangle
	cdqe
	mov	rcx, QWORD PTR p$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR p$[rsp], rax

; 1641 :             namepos++;

	mov	eax, DWORD PTR namepos$[rsp]
	inc	eax
	mov	DWORD PTR namepos$[rsp], eax

; 1642 :             if ( sym->iat_used == FALSE ) {

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	$LN57@InvokeDire

; 1643 :                 sym->iat_used = TRUE;

	mov	rax, QWORD PTR sym$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 8
	mov	rcx, QWORD PTR sym$[rsp]
	mov	BYTE PTR [rcx+40], al

; 1644 :                 sym->dll->cnt++;

	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	eax, DWORD PTR [rax+8]
	inc	eax
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rcx+56]
	mov	DWORD PTR [rcx+8], eax

; 1645 :                 if ( sym->langtype != LANG_NONE && sym->langtype != ModuleInfo.langtype )

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 0
	je	SHORT $LN58@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	mov	ecx, DWORD PTR ModuleInfo+364
	cmp	DWORD PTR [rax+76], ecx
	je	SHORT $LN58@InvokeDire

; 1646 :                     AddLineQueueX( " externdef %r %s: %r %r", sym->langtype + T_C - 1, iatname, T_PTR, T_PROC );

	mov	rax, QWORD PTR sym$[rsp]
	mov	eax, DWORD PTR [rax+76]
	add	eax, 263				; 00000107H
	mov	DWORD PTR [rsp+32], 428			; 000001acH
	mov	r9d, 258				; 00000102H
	mov	r8, QWORD PTR iatname$8[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11996
	call	AddLineQueueX
	jmp	SHORT $LN59@InvokeDire
$LN58@InvokeDire:

; 1647 :                 else
; 1648 :                     AddLineQueueX( " externdef %s: %r %r", iatname, T_PTR, T_PROC );

	mov	r9d, 428				; 000001acH
	mov	r8d, 258				; 00000102H
	mov	rdx, QWORD PTR iatname$8[rsp]
	lea	rcx, OFFSET FLAT:$SG11997
	call	AddLineQueueX
$LN59@InvokeDire:
$LN57@InvokeDire:
$LN56@InvokeDire:

; 1649 :             }
; 1650 :         }
; 1651 : #endif
; 1652 :         size = tokenarray[parmpos].tokpos - tokenarray[namepos].tokpos;

	movsxd	rax, DWORD PTR parmpos$[rsp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR namepos$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+24]
	mov	rax, QWORD PTR [rdx+rax+24]
	sub	rax, rcx
	mov	DWORD PTR size$[rsp], eax

; 1653 :         memcpy( p, tokenarray[namepos].tokpos, size );

	movsxd	rax, DWORD PTR size$[rsp]
	movsxd	rcx, DWORD PTR namepos$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	r8, rax
	mov	rax, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rax+rcx+24]
	mov	rcx, QWORD PTR p$[rsp]
	call	memcpy

; 1654 :         *(p+size) = NULLC;

	movsxd	rax, DWORD PTR size$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	BYTE PTR [rcx+rax], 0

; 1655 : #if 0  /* v2.09: uselabel obsolete */
; 1656 :     }
; 1657 : #endif
; 1658 :     AddLineQueue( StringBufferEnd );

	mov	rcx, QWORD PTR ModuleInfo+488
	call	AddLineQueue

; 1659 : 
; 1660 :     if (( sym->langtype == LANG_C || sym->langtype == LANG_SYSCALL ) &&

	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 1
	je	SHORT $LN62@InvokeDire
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 2
	jne	$LN60@InvokeDire
$LN62@InvokeDire:
	mov	rax, QWORD PTR info$[rsp]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN63@InvokeDire
	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	$LN60@InvokeDire
	cmp	DWORD PTR size_vararg, 0
	je	$LN60@InvokeDire
$LN63@InvokeDire:

; 1661 :         ( info->parasize || ( info->has_vararg && size_vararg ) )) {
; 1662 :         if ( info->has_vararg ) {

	mov	rax, QWORD PTR info$[rsp]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN64@InvokeDire

; 1663 :             DebugMsg1(("InvokeDir: size of fix args=%u, var args=%u\n", info->parasize, size_vararg));

	mov	r8d, DWORD PTR size_vararg
	mov	rax, QWORD PTR info$[rsp]
	mov	edx, DWORD PTR [rax+32]
	lea	rcx, OFFSET FLAT:$SG12004
	call	DoDebugMsg1

; 1664 :             AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL info->parasize + size_vararg );

	mov	rax, QWORD PTR info$[rsp]
	mov	eax, DWORD PTR [rax+32]
	add	eax, DWORD PTR size_vararg
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:stackreg
	mov	r8d, eax
	mov	edx, DWORD PTR [rdx+rcx*4]
	lea	rcx, OFFSET FLAT:$SG12005
	call	AddLineQueueX

; 1665 :         } else

	jmp	SHORT $LN65@InvokeDire
$LN64@InvokeDire:

; 1666 :             AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL info->parasize );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	rdx, QWORD PTR info$[rsp]
	mov	r8d, DWORD PTR [rdx+32]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG12006
	call	AddLineQueueX
$LN65@InvokeDire:

; 1667 :     } else if ( sym->langtype == LANG_FASTCALL ) {

	jmp	SHORT $LN61@InvokeDire
$LN60@InvokeDire:
	mov	rax, QWORD PTR sym$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN66@InvokeDire

; 1668 :         fastcall_tab[ModuleInfo.fctype].invokeend( proc, numParam, value );

	cmp	BYTE PTR $T10[rsp], 0
	jne	SHORT $LN85@InvokeDire
	lea	rcx, OFFSET FLAT:InvokeDirective$rtcName$1
	call	_RTC_UninitUse
$LN85@InvokeDire:
	movsxd	rax, DWORD PTR ModuleInfo+376
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:fastcall_tab
	mov	QWORD PTR tv574[rsp], rcx
	mov	r8d, DWORD PTR value$[rsp]
	mov	edx, DWORD PTR numParam$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	r9, QWORD PTR tv574[rsp]
	call	QWORD PTR [r9+rax+8]
$LN66@InvokeDire:
$LN61@InvokeDire:

; 1669 :     }
; 1670 : 
; 1671 :     LstWrite( LSTTYPE_DIRECTIVE, GetCurrOffset(), NULL );

	call	GetCurrOffset
	xor	r8d, r8d
	mov	edx, eax
	mov	ecx, 4
	call	LstWrite

; 1672 : 
; 1673 :     RunLineQueue();

	call	RunLineQueue

; 1674 : 
; 1675 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@InvokeDire:

; 1676 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:InvokeDirective$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	add	rsp, 432				; 000001b0H
	pop	rdi
	ret	0
InvokeDirective ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
currParm$ = 64
psize$ = 68
asize$ = 72
pushsize$ = 76
j$ = 84
fptrsize$ = 100
Ofssize$ = 104
addr$ = 105
opnd$ = 128
fullparam$ = 272
buffer$ = 912
sreg$7 = 1524
asize2$8 = 1528
dw$9 = 1532
reg$10 = 1536
optype$11 = 1540
instr$12 = 1544
suffix$13 = 1552
qual$14 = 1560
$T15 = 1576
tv68 = 1584
tv193 = 1592
tv1369 = 1596
tv1276 = 1600
tv1399 = 1608
tv380 = 1612
tv1280 = 1616
tv664 = 1624
tv668 = 1628
tv725 = 1632
tv784 = 1640
tv845 = 1648
tv1589 = 1656
tv1066 = 1664
tv1071 = 1672
tv1646 = 1676
tv1145 = 1680
tv1192 = 1684
__$ArrayPad$ = 1688
i$ = 1712
tokenarray$ = 1720
proc$ = 1728
curr$ = 1736
reqParam$ = 1744
r0flags$ = 1752
PushInvokeParam PROC

; 723  : {

	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 1696				; 000006a0H
	mov	rdi, rsp
	mov	ecx, 424				; 000001a8H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+1712]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 724  :     int currParm;
; 725  :     int psize;
; 726  :     int asize;
; 727  :     int pushsize;
; 728  :     int j;
; 729  :     int fptrsize;
; 730  :     char Ofssize;
; 731  :     bool addr = FALSE; /* ADDR operator found */

	mov	BYTE PTR addr$[rsp], 0

; 732  :     struct expr opnd;
; 733  :     char fullparam[MAX_LINE_LEN];
; 734  :     char buffer[MAX_LINE_LEN];
; 735  : 
; 736  :     DebugMsg1(("PushInvokeParam(%s, param=%s:%u, i=%u ) enter\n", proc->sym.name, curr ? curr->sym.name : "NULL", reqParam, i ));

	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN243@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv68[rsp], rax
	jmp	SHORT $LN244@PushInvoke
$LN243@PushInvoke:
	lea	rax, OFFSET FLAT:$SG11546
	mov	QWORD PTR tv68[rsp], rax
$LN244@PushInvoke:
	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR reqParam$[rsp]
	mov	r8, QWORD PTR tv68[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11547
	call	DoDebugMsg1

; 737  :     for ( currParm = 0; currParm <= reqParam; ) {

	mov	DWORD PTR currParm$[rsp], 0
$LN2@PushInvoke:
	mov	eax, DWORD PTR reqParam$[rsp]
	cmp	DWORD PTR currParm$[rsp], eax
	jg	$LN3@PushInvoke

; 738  :         if ( tokenarray[i].token == T_FINAL ) { /* this is no real error! */

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN16@PushInvoke

; 739  :             DebugMsg1(("PushInvokeParam(%s): T_FINAL token, i=%u\n", proc->sym.name, i));

	mov	r8d, DWORD PTR i$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11549
	call	DoDebugMsg1

; 740  :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@PushInvoke
$LN16@PushInvoke:

; 741  :         }
; 742  :         if ( tokenarray[i].token == T_COMMA ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN17@PushInvoke

; 743  :             currParm++;

	mov	eax, DWORD PTR currParm$[rsp]
	inc	eax
	mov	DWORD PTR currParm$[rsp], eax
$LN17@PushInvoke:

; 744  :         }
; 745  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 746  :     }

	jmp	$LN2@PushInvoke
$LN3@PushInvoke:

; 747  :     /* if curr is NULL this call is just a parameter check */
; 748  :     if ( !curr ) return( NOT_ERROR );

	cmp	QWORD PTR curr$[rsp], 0
	jne	SHORT $LN18@PushInvoke
	xor	eax, eax
	jmp	$LN1@PushInvoke
$LN18@PushInvoke:

; 749  : 
; 750  : #if 1 /* v2.05 */
; 751  :     psize = curr->sym.total_size;

	mov	rax, QWORD PTR curr$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR psize$[rsp], eax

; 752  :     DebugMsg1(("PushInvokeParam(%s,%u): pmtype=%Xh, psize=%u\n", proc->sym.name, reqParam, curr->sym.mem_type, psize ));

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR curr$[rsp]
	mov	r9d, DWORD PTR [rax+36]
	mov	r8d, DWORD PTR reqParam$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11552
	call	DoDebugMsg1

; 753  : #else
; 754  :     /* set psize (size of parameter) */
; 755  :     if ( curr->is_ptr ) {
; 756  :         psize = 2 << curr->sym.Ofssize;
; 757  :         if ( curr->sym.isfar )
; 758  :             psize += 2;
; 759  :     } else
; 760  :         psize = SizeFromMemtype( curr->sym.mem_type, curr->sym.Ofssize, curr->sym.type );
; 761  :     DebugMsg1(("PushInvokeParam(%s,%u): is_ptr=%u, pmtype=%Xh, psize=%u\n", proc->sym.name, reqParam, curr->is_ptr, curr->sym.mem_type, psize ));
; 762  : #endif
; 763  : 
; 764  :     /* ADDR: the argument's address is to be pushed? */
; 765  :     if ( tokenarray[i].token == T_RES_ID && tokenarray[i].tokval == T_ADDR ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 7
	jne	SHORT $LN19@PushInvoke
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 260		; 00000104H
	jne	SHORT $LN19@PushInvoke

; 766  :         addr = TRUE;

	mov	BYTE PTR addr$[rsp], 1

; 767  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN19@PushInvoke:

; 768  :     }
; 769  : 
; 770  :     /* copy the parameter tokens to fullparam */
; 771  :     for ( j = i; tokenarray[j].token != T_COMMA && tokenarray[j].token != T_FINAL; j++ );

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax
	jmp	SHORT $LN7@PushInvoke
$LN5@PushInvoke:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN7@PushInvoke:
	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN6@PushInvoke
	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN6@PushInvoke
	jmp	SHORT $LN5@PushInvoke
$LN6@PushInvoke:

; 772  :     memcpy( fullparam, tokenarray[i].tokpos, tokenarray[j].tokpos - tokenarray[i].tokpos );

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+24]
	mov	rax, QWORD PTR [rdx+rax+24]
	sub	rax, rcx
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	r8, rax
	mov	rax, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rax+rcx+24]
	lea	rcx, QWORD PTR fullparam$[rsp]
	call	memcpy

; 773  :     fullparam[tokenarray[j].tokpos - tokenarray[i].tokpos] = NULLC;

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [r8+rcx+24]
	mov	rax, QWORD PTR [rdx+rax+24]
	sub	rax, rcx
	mov	QWORD PTR $T15[rsp], rax
	cmp	QWORD PTR $T15[rsp], 600		; 00000258H
	jae	SHORT $LN245@PushInvoke
	jmp	SHORT $LN246@PushInvoke
$LN245@PushInvoke:
	call	__report_rangecheckfailure
$LN246@PushInvoke:
	mov	rax, QWORD PTR $T15[rsp]
	mov	BYTE PTR fullparam$[rsp+rax], 0

; 774  : 
; 775  :     j = i;

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax

; 776  :     /* v2.11: GetSymOfssize() doesn't work for state SYM_TYPE */
; 777  :     //fptrsize = 2 + ( 2 << GetSymOfssize( &proc->sym ) );
; 778  :     Ofssize = ( proc->sym.state == SYM_TYPE ? proc->sym.seg_ofssize : GetSymOfssize( &proc->sym ) );

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+32], 7
	jne	SHORT $LN247@PushInvoke
	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	and	al, 3
	movzx	eax, al
	mov	DWORD PTR tv193[rsp], eax
	jmp	SHORT $LN248@PushInvoke
$LN247@PushInvoke:
	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, rax
	call	GetSymOfssize
	mov	DWORD PTR tv193[rsp], eax
$LN248@PushInvoke:
	movzx	eax, BYTE PTR tv193[rsp]
	mov	BYTE PTR Ofssize$[rsp], al

; 779  :     fptrsize = 2 + ( 2 << Ofssize );

	movsx	eax, BYTE PTR Ofssize$[rsp]
	mov	ecx, 2
	mov	DWORD PTR tv1369[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1369[rsp]
	shl	eax, cl
	add	eax, 2
	mov	DWORD PTR fptrsize$[rsp], eax

; 780  : 
; 781  :     if ( addr ) {

	movzx	eax, BYTE PTR addr$[rsp]
	test	eax, eax
	je	$LN20@PushInvoke

; 782  :         /* v2.06: don't handle forward refs if -Zne is set */
; 783  :         //if ( EvalOperand( &j, Token_Count, &opnd, 0 ) == ERROR )
; 784  :         if ( EvalOperand( &j, tokenarray, Token_Count, &opnd, ModuleInfo.invoke_exprparm ) == ERROR )

	movzx	eax, BYTE PTR ModuleInfo+426
	mov	BYTE PTR [rsp+32], al
	lea	r9, QWORD PTR opnd$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR j$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN22@PushInvoke

; 785  :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@PushInvoke
$LN22@PushInvoke:

; 786  : 
; 787  :         /* DWORD (16bit) and FWORD(32bit) are treated like FAR ptrs
; 788  :          * v2.11: argument may be a FAR32 pointer ( psize == 6 ), while
; 789  :          * fptrsize may be just 4!
; 790  :          */
; 791  :         //if ( psize > fptrsize ) {
; 792  :         if ( psize > fptrsize && fptrsize > 4 ) {

	mov	eax, DWORD PTR fptrsize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	jle	SHORT $LN23@PushInvoke
	cmp	DWORD PTR fptrsize$[rsp], 4
	jle	SHORT $LN23@PushInvoke

; 793  :             /* QWORD is NOT accepted as a FAR ptr */
; 794  :             DebugMsg1(("PushInvokeParm(%u): error, psize=%u, fptrsize=%u\n", reqParam, psize, fptrsize));

	mov	r9d, DWORD PTR fptrsize$[rsp]
	mov	r8d, DWORD PTR psize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11558
	call	DoDebugMsg1

; 795  :             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr

; 796  :             return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@PushInvoke
$LN23@PushInvoke:

; 797  :         }
; 798  : 
; 799  :         if ( proc->sym.langtype == LANG_FASTCALL )

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN24@PushInvoke

; 800  :             if ( fastcall_tab[ModuleInfo.fctype].handleparam( proc, reqParam, curr, addr, &opnd, fullparam, r0flags ) )

	movsxd	rax, DWORD PTR ModuleInfo+376
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:fastcall_tab
	mov	QWORD PTR tv1276[rsp], rcx
	mov	rdx, QWORD PTR r0flags$[rsp]
	mov	QWORD PTR [rsp+48], rdx
	lea	rdx, QWORD PTR fullparam$[rsp]
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, QWORD PTR opnd$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	movzx	r9d, BYTE PTR addr$[rsp]
	mov	r8, QWORD PTR curr$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	r10, QWORD PTR tv1276[rsp]
	call	QWORD PTR [r10+rax+16]
	test	eax, eax
	je	SHORT $LN25@PushInvoke

; 801  :                 return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@PushInvoke
$LN25@PushInvoke:
$LN24@PushInvoke:

; 802  : 
; 803  :         if ( opnd.kind == EXPR_REG || opnd.indirect ) {

	cmp	DWORD PTR opnd$[rsp+60], 2
	je	SHORT $LN28@PushInvoke
	mov	eax, DWORD PTR opnd$[rsp+76]
	and	eax, 1
	test	eax, eax
	je	$LN26@PushInvoke
$LN28@PushInvoke:

; 804  :             if ( curr->sym.isfar || psize == fptrsize ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN30@PushInvoke
	mov	eax, DWORD PTR fptrsize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	jne	$LN29@PushInvoke
$LN30@PushInvoke:

; 805  :                 DebugMsg1(("PushInvokeParam: far ptr, %s isfar=%u, psize=%u, fptrsize=%u\n", curr->sym.name, curr->sym.isfar, psize, fptrsize ));

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	mov	ecx, DWORD PTR fptrsize$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, eax
	mov	rax, QWORD PTR curr$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11566
	call	DoDebugMsg1

; 806  :                 if ( opnd.sym && opnd.sym->state == SYM_STACK )

	cmp	QWORD PTR opnd$[rsp+80], 0
	je	SHORT $LN31@PushInvoke
	mov	rax, QWORD PTR opnd$[rsp+80]
	cmp	DWORD PTR [rax+32], 5
	jne	SHORT $LN31@PushInvoke

; 807  :                     GetResWName( T_SS, buffer );

	lea	rdx, QWORD PTR buffer$[rsp]
	mov	ecx, 27
	call	GetResWName
	jmp	SHORT $LN32@PushInvoke
$LN31@PushInvoke:

; 808  :                 else if ( opnd.override != NULL )

	cmp	QWORD PTR opnd$[rsp+48], 0
	je	SHORT $LN33@PushInvoke

; 809  :                     strcpy( buffer, opnd.override->string_ptr );

	mov	rax, QWORD PTR opnd$[rsp+48]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, QWORD PTR buffer$[rsp]
	call	strcpy
	jmp	SHORT $LN34@PushInvoke
$LN33@PushInvoke:

; 810  :                 else
; 811  :                     GetResWName( T_DS, buffer );

	lea	rdx, QWORD PTR buffer$[rsp]
	mov	ecx, 28
	call	GetResWName
$LN34@PushInvoke:
$LN32@PushInvoke:

; 812  :                 AddLineQueueX( " push %s", buffer );

	lea	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, OFFSET FLAT:$SG11571
	call	AddLineQueueX
$LN29@PushInvoke:

; 813  :             }
; 814  :             AddLineQueueX( " lea %r, %s", regax[ModuleInfo.Ofssize], fullparam );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:regax
	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11572
	call	AddLineQueueX

; 815  :             *r0flags |= R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 816  :             AddLineQueueX( " push %r", regax[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:regax
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11573
	call	AddLineQueueX

; 817  :         } else {

	jmp	$LN27@PushInvoke
$LN26@PushInvoke:
$push_address$263:

; 818  :         push_address:
; 819  : 
; 820  :             /* push segment part of address?
; 821  :              * v2.11: do not assume a far pointer if psize == fptrsize
; 822  :              * ( parameter might be near32 in a 16-bit environment )
; 823  :              */
; 824  :             //if ( curr->sym.isfar || psize == fptrsize ) {
; 825  :             if ( curr->sym.isfar || psize > ( 2 << curr->sym.Ofssize ) ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	mov	ecx, 2
	mov	DWORD PTR tv1399[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1399[rsp]
	shl	eax, cl
	cmp	DWORD PTR psize$[rsp], eax
	jle	$LN35@PushInvoke
$LN36@PushInvoke:

; 826  : 
; 827  :                 short sreg;
; 828  :                 sreg = GetSegmentPart( &opnd, buffer, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	lea	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, QWORD PTR opnd$[rsp]
	call	GetSegmentPart
	mov	WORD PTR sreg$7[rsp], ax

; 829  :                 if ( sreg ) {

	movsx	eax, WORD PTR sreg$7[rsp]
	test	eax, eax
	je	SHORT $LN37@PushInvoke

; 830  :                     /* v2.11: push segment part as WORD or DWORD depending on target's offset size
; 831  :                      * problem: "pushw ds" is not accepted, so just emit a size prefix.
; 832  :                      */
; 833  :                     if ( Ofssize != ModuleInfo.Ofssize || ( curr->sym.Ofssize == USE16 && CurrWordSize > 2 ) )

	movsx	eax, BYTE PTR Ofssize$[rsp]
	movzx	ecx, BYTE PTR ModuleInfo+404
	cmp	eax, ecx
	jne	SHORT $LN40@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	test	eax, eax
	jne	SHORT $LN39@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	eax, 2
	jle	SHORT $LN39@PushInvoke
$LN40@PushInvoke:

; 834  :                         AddLineQueue( " db 66h" );

	lea	rcx, OFFSET FLAT:$SG11580
	call	AddLineQueue
$LN39@PushInvoke:

; 835  :                     AddLineQueueX( " push %r", sreg );

	movsx	eax, WORD PTR sreg$7[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11581
	call	AddLineQueueX

; 836  :                 } else

	jmp	SHORT $LN38@PushInvoke
$LN37@PushInvoke:

; 837  :                     AddLineQueueX( " push %s", buffer );

	lea	rdx, QWORD PTR buffer$[rsp]
	lea	rcx, OFFSET FLAT:$SG11582
	call	AddLineQueueX
$LN38@PushInvoke:
$LN35@PushInvoke:

; 838  :             }
; 839  :             /* push offset part of address */
; 840  :             if ( (ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 16
	jge	SHORT $LN41@PushInvoke

; 841  :                 AddLineQueueX( " mov %r, offset %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11585
	call	AddLineQueueX

; 842  :                 AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11586
	call	AddLineQueueX

; 843  :                 *r0flags |= R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 844  :             } else {

	jmp	$LN42@PushInvoke
$LN41@PushInvoke:

; 845  :                 if ( curr->sym.is_vararg && opnd.Ofssize == USE_EMPTY && opnd.sym )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN43@PushInvoke
	movzx	eax, BYTE PTR opnd$[rsp+69]
	cmp	eax, 254				; 000000feH
	jne	SHORT $LN43@PushInvoke
	cmp	QWORD PTR opnd$[rsp+80], 0
	je	SHORT $LN43@PushInvoke

; 846  :                     opnd.Ofssize = GetSymOfssize( opnd.sym );

	mov	rcx, QWORD PTR opnd$[rsp+80]
	call	GetSymOfssize
	mov	BYTE PTR opnd$[rsp+69], al
$LN43@PushInvoke:

; 847  :                 /* v2.04: expand 16-bit offset to 32
; 848  :                  * v2.11: also expand if there's an explicit near32 ptr requested in 16-bit
; 849  :                  */
; 850  :                 //if ( opnd.Ofssize == USE16 && CurrWordSize > 2 ) {
; 851  :                 if ( ( opnd.Ofssize == USE16 && CurrWordSize > 2 ) ||

	movzx	eax, BYTE PTR opnd$[rsp+69]
	test	eax, eax
	jne	SHORT $LN47@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	eax, 2
	jg	SHORT $LN46@PushInvoke
$LN47@PushInvoke:
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	cmp	eax, 1
	jne	SHORT $LN44@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	eax, 2
	jne	SHORT $LN44@PushInvoke
$LN46@PushInvoke:

; 852  :                     ( curr->sym.Ofssize == USE32 && CurrWordSize == 2 ) ) {
; 853  :                     AddLineQueueX( " pushd %r %s", T_OFFSET, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 241				; 000000f1H
	lea	rcx, OFFSET FLAT:$SG11592
	call	AddLineQueueX
	jmp	$LN45@PushInvoke
$LN44@PushInvoke:

; 854  :                 } else if ( CurrWordSize > 2 && curr->sym.Ofssize == USE16 &&

	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	eax, 2
	jle	SHORT $LN48@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	test	eax, eax
	jne	SHORT $LN48@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN50@PushInvoke
	movsx	eax, BYTE PTR Ofssize$[rsp]
	test	eax, eax
	jne	SHORT $LN48@PushInvoke
$LN50@PushInvoke:

; 855  :                            ( curr->sym.isfar || Ofssize == USE16 ) ) { /* v2.11: added */
; 856  :                     AddLineQueueX( " pushw %r %s", T_OFFSET, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 241				; 000000f1H
	lea	rcx, OFFSET FLAT:$SG11596
	call	AddLineQueueX

; 857  :                 } else {

	jmp	SHORT $LN49@PushInvoke
$LN48@PushInvoke:

; 858  :                     AddLineQueueX( " push %r %s", T_OFFSET, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 241				; 000000f1H
	lea	rcx, OFFSET FLAT:$SG11597
	call	AddLineQueueX

; 859  :                     /* v2.04: a 32bit offset pushed in 16-bit code */
; 860  :                     if ( curr->sym.is_vararg && CurrWordSize == 2 && opnd.Ofssize > USE16 ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN51@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	eax, 2
	jne	SHORT $LN51@PushInvoke
	movzx	eax, BYTE PTR opnd$[rsp+69]
	test	eax, eax
	jle	SHORT $LN51@PushInvoke

; 861  :                         size_vararg += CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR size_vararg
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR size_vararg, eax
$LN51@PushInvoke:
$LN49@PushInvoke:
$LN45@PushInvoke:
$LN42@PushInvoke:
$LN27@PushInvoke:

; 862  :                     }
; 863  :                 }
; 864  :             }
; 865  :         }
; 866  :         if ( curr->sym.is_vararg ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN52@PushInvoke

; 867  :             size_vararg += CurrWordSize + ( curr->sym.isfar ? CurrWordSize : 0 );

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 4
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN249@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR tv380[rsp], eax
	jmp	SHORT $LN250@PushInvoke
$LN249@PushInvoke:
	mov	DWORD PTR tv380[rsp], 0
$LN250@PushInvoke:
	movzx	eax, BYTE PTR ModuleInfo+406
	add	eax, DWORD PTR tv380[rsp]
	mov	ecx, DWORD PTR size_vararg
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR size_vararg, eax

; 868  :             DebugMsg1(("PushInvokeParm(%u): new value of size_vararg=%u [CurrWordSize=%u]\n", reqParam, size_vararg, CurrWordSize ));

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	r9d, eax
	mov	r8d, DWORD PTR size_vararg
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11600
	call	DoDebugMsg1
$LN52@PushInvoke:

; 869  :         }
; 870  :     } else { /* ! ADDR branch */

	jmp	$LN21@PushInvoke
$LN20@PushInvoke:

; 871  : 
; 872  :         /* handle the <reg>::<reg> case here, the evaluator wont handle it */
; 873  :         if ( tokenarray[j].token == T_REG &&
; 874  :             tokenarray[j+1].token == T_DBL_COLON &&

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 2
	jne	$LN53@PushInvoke
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	jne	$LN53@PushInvoke
	mov	eax, DWORD PTR j$[rsp]
	add	eax, 2
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 2
	jne	$LN53@PushInvoke

; 875  :             tokenarray[j+2].token == T_REG ) {
; 876  :             int asize2;
; 877  :             /* for pointers, segreg size is assumed to be always 2 */
; 878  :             if ( GetValueSp( tokenarray[j].tokval ) & OP_SR ) {

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 24576				; 00006000H
	test	eax, eax
	je	SHORT $LN55@PushInvoke

; 879  :                 asize2 = 2;

	mov	DWORD PTR asize2$8[rsp], 2

; 880  :                 /* v2.11: if target and current src have different offset sizes,
; 881  :                  * the push of the segment register must be 66h-prefixed!
; 882  :                  */
; 883  :                 if ( Ofssize != ModuleInfo.Ofssize || ( curr->sym.Ofssize == USE16 && CurrWordSize > 2 ) )

	movsx	eax, BYTE PTR Ofssize$[rsp]
	movzx	ecx, BYTE PTR ModuleInfo+404
	cmp	eax, ecx
	jne	SHORT $LN58@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	test	eax, eax
	jne	SHORT $LN57@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	eax, 2
	jle	SHORT $LN57@PushInvoke
$LN58@PushInvoke:

; 884  :                     AddLineQueue( " db 66h" );

	lea	rcx, OFFSET FLAT:$SG11607
	call	AddLineQueue
$LN57@PushInvoke:

; 885  :             } else

	jmp	SHORT $LN56@PushInvoke
$LN55@PushInvoke:

; 886  :                 asize2 = SizeFromRegister( tokenarray[j].tokval );

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR [rcx+rax+16]
	call	SizeFromRegister
	mov	DWORD PTR asize2$8[rsp], eax
$LN56@PushInvoke:

; 887  :             asize = SizeFromRegister( tokenarray[j+2].tokval );

	mov	eax, DWORD PTR j$[rsp]
	add	eax, 2
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	ecx, DWORD PTR [rcx+rax+16]
	call	SizeFromRegister
	mov	DWORD PTR asize$[rsp], eax

; 888  :             AddLineQueueX( " push %r", tokenarray[j].tokval );

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR [rcx+rax+16]
	lea	rcx, OFFSET FLAT:$SG11608
	call	AddLineQueueX

; 889  :             /* v2.04: changed */
; 890  :             if (( curr->sym.is_vararg ) && (asize + asize2) != CurrWordSize )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN59@PushInvoke
	mov	eax, DWORD PTR asize2$8[rsp]
	mov	ecx, DWORD PTR asize$[rsp]
	add	ecx, eax
	mov	eax, ecx
	movzx	ecx, BYTE PTR ModuleInfo+406
	cmp	eax, ecx
	je	SHORT $LN59@PushInvoke

; 891  :                 size_vararg += asize2;

	mov	eax, DWORD PTR asize2$8[rsp]
	mov	ecx, DWORD PTR size_vararg
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR size_vararg, eax
	jmp	SHORT $LN60@PushInvoke
$LN59@PushInvoke:

; 892  :             else
; 893  :                 asize += asize2;

	mov	eax, DWORD PTR asize2$8[rsp]
	mov	ecx, DWORD PTR asize$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR asize$[rsp], eax
$LN60@PushInvoke:

; 894  :             strcpy( fullparam, tokenarray[j+2].string_ptr );

	mov	eax, DWORD PTR j$[rsp]
	add	eax, 2
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	lea	rcx, QWORD PTR fullparam$[rsp]
	call	strcpy

; 895  : 
; 896  :             opnd.kind = EXPR_REG;

	mov	DWORD PTR opnd$[rsp+60], 2

; 897  :             opnd.indirect = FALSE;

	mov	eax, DWORD PTR opnd$[rsp+76]
	and	eax, -2					; fffffffeH
	mov	DWORD PTR opnd$[rsp+76], eax

; 898  :             opnd.sym = NULL;

	mov	QWORD PTR opnd$[rsp+80], 0

; 899  :             opnd.base_reg = &tokenarray[j+2]; /* for error msg 'eax overwritten...' */

	mov	eax, DWORD PTR j$[rsp]
	add	eax, 2
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR opnd$[rsp+24], rax

; 900  :         } else {

	jmp	$LN54@PushInvoke
$LN53@PushInvoke:

; 901  :             /* v2.06: don't handle forward refs if -Zne is set */
; 902  :             //if ( EvalOperand( &j, Token_Count, &opnd, 0 ) == ERROR ) {
; 903  :             if ( EvalOperand( &j, tokenarray, Token_Count, &opnd, ModuleInfo.invoke_exprparm ) == ERROR ) {

	movzx	eax, BYTE PTR ModuleInfo+426
	mov	BYTE PTR [rsp+32], al
	lea	r9, QWORD PTR opnd$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR j$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN61@PushInvoke

; 904  :                 return( ERROR );

	mov	eax, -1
	jmp	$LN1@PushInvoke
$LN61@PushInvoke:

; 905  :             }
; 906  : 
; 907  :             /* for a simple register, get its size */
; 908  :             if ( opnd.kind == EXPR_REG && opnd.indirect == FALSE ) {

	cmp	DWORD PTR opnd$[rsp+60], 2
	jne	SHORT $LN62@PushInvoke
	mov	eax, DWORD PTR opnd$[rsp+76]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN62@PushInvoke

; 909  :                 asize = SizeFromRegister( opnd.base_reg->tokval );

	mov	rax, QWORD PTR opnd$[rsp+24]
	mov	ecx, DWORD PTR [rax+16]
	call	SizeFromRegister
	mov	DWORD PTR asize$[rsp], eax
	jmp	$LN63@PushInvoke
$LN62@PushInvoke:

; 910  :             //} else if ( opnd.mem_type == MT_EMPTY ) { /* v2.10: a TYPE may return mem_type != MT_EMPTY! */
; 911  :             } else if ( opnd.kind == EXPR_CONST || opnd.mem_type == MT_EMPTY ) {

	cmp	DWORD PTR opnd$[rsp+60], 0
	je	SHORT $LN66@PushInvoke
	cmp	DWORD PTR opnd$[rsp+64], 192		; 000000c0H
	jne	$LN64@PushInvoke
$LN66@PushInvoke:

; 912  :                 asize = psize;

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR asize$[rsp], eax

; 913  :                 /* v2.04: added, to catch 0-size params ( STRUCT without members ) */
; 914  :                 if ( psize == 0 ) {

	cmp	DWORD PTR psize$[rsp], 0
	jne	SHORT $LN67@PushInvoke

; 915  :                     if ( curr->sym.is_vararg == FALSE ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN68@PushInvoke

; 916  :                         DebugMsg1(("PushInvokeParm(%u): error, psize=0\n" ));

	lea	rcx, OFFSET FLAT:$SG11619
	call	DoDebugMsg1

; 917  :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN68@PushInvoke:

; 918  :                     }
; 919  :                     /* v2.07: for VARARG, get the member's size if it is a structured var */
; 920  :                     if ( opnd.mbr && opnd.mbr->mem_type == MT_TYPE )

	cmp	QWORD PTR opnd$[rsp+88], 0
	je	SHORT $LN69@PushInvoke
	mov	rax, QWORD PTR opnd$[rsp+88]
	cmp	DWORD PTR [rax+36], 196			; 000000c4H
	jne	SHORT $LN69@PushInvoke

; 921  :                         asize = SizeFromMemtype( opnd.mbr->mem_type, opnd.Ofssize, opnd.mbr->type );

	movzx	eax, BYTE PTR opnd$[rsp+69]
	mov	rcx, QWORD PTR opnd$[rsp+88]
	mov	r8, QWORD PTR [rcx+80]
	mov	edx, eax
	mov	rax, QWORD PTR opnd$[rsp+88]
	mov	ecx, DWORD PTR [rax+36]
	call	SizeFromMemtype
	mov	DWORD PTR asize$[rsp], eax
$LN69@PushInvoke:
$LN67@PushInvoke:

; 922  :                 }
; 923  :                 DebugMsg1(("PushInvokeParm(%u): memtype EMPTY, asize=%u psize=%u\n", reqParam, asize, psize ));

	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR asize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11621
	call	DoDebugMsg1
	jmp	$LN65@PushInvoke
$LN64@PushInvoke:

; 924  :             } else if ( opnd.mem_type != MT_TYPE ) {

	cmp	DWORD PTR opnd$[rsp+64], 196		; 000000c4H
	je	$LN70@PushInvoke

; 925  :                 if ( opnd.kind == EXPR_ADDR &&
; 926  :                      opnd.indirect == FALSE &&
; 927  :                      opnd.sym &&
; 928  :                      opnd.instr == EMPTY &&

	cmp	DWORD PTR opnd$[rsp+60], 1
	jne	SHORT $LN72@PushInvoke
	mov	eax, DWORD PTR opnd$[rsp+76]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN72@PushInvoke
	cmp	QWORD PTR opnd$[rsp+80], 0
	je	SHORT $LN72@PushInvoke
	cmp	DWORD PTR opnd$[rsp+56], -2
	jne	SHORT $LN72@PushInvoke
	cmp	DWORD PTR opnd$[rsp+64], 129		; 00000081H
	je	SHORT $LN73@PushInvoke
	cmp	DWORD PTR opnd$[rsp+64], 130		; 00000082H
	jne	SHORT $LN72@PushInvoke
$LN73@PushInvoke:

; 929  :                      ( opnd.mem_type == MT_NEAR || opnd.mem_type == MT_FAR ) )
; 930  :                     goto push_address;

	jmp	$push_address$263
$LN72@PushInvoke:

; 931  :                 if ( opnd.Ofssize == USE_EMPTY )

	movzx	eax, BYTE PTR opnd$[rsp+69]
	cmp	eax, 254				; 000000feH
	jne	SHORT $LN74@PushInvoke

; 932  :                     opnd.Ofssize = ModuleInfo.Ofssize;

	movzx	eax, BYTE PTR ModuleInfo+404
	mov	BYTE PTR opnd$[rsp+69], al
$LN74@PushInvoke:

; 933  :                 asize = SizeFromMemtype( opnd.mem_type, opnd.Ofssize, opnd.type );

	movzx	eax, BYTE PTR opnd$[rsp+69]
	mov	r8, QWORD PTR opnd$[rsp+96]
	mov	edx, eax
	mov	ecx, DWORD PTR opnd$[rsp+64]
	call	SizeFromMemtype
	mov	DWORD PTR asize$[rsp], eax

; 934  :             } else {

	jmp	SHORT $LN71@PushInvoke
$LN70@PushInvoke:

; 935  :                 if ( opnd.sym != NULL )

	cmp	QWORD PTR opnd$[rsp+80], 0
	je	SHORT $LN75@PushInvoke

; 936  :                     asize = opnd.sym->type->total_size;

	mov	rax, QWORD PTR opnd$[rsp+80]
	mov	rax, QWORD PTR [rax+80]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR asize$[rsp], eax
	jmp	SHORT $LN76@PushInvoke
$LN75@PushInvoke:

; 937  :                 else
; 938  :                     asize = opnd.mbr->type->total_size;

	mov	rax, QWORD PTR opnd$[rsp+88]
	mov	rax, QWORD PTR [rax+80]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR asize$[rsp], eax
$LN76@PushInvoke:
$LN71@PushInvoke:
$LN65@PushInvoke:
$LN63@PushInvoke:
$LN54@PushInvoke:

; 939  :             }
; 940  :         }
; 941  : 
; 942  :         if ( curr->sym.is_vararg == TRUE )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN77@PushInvoke

; 943  :             psize = asize;

	mov	eax, DWORD PTR asize$[rsp]
	mov	DWORD PTR psize$[rsp], eax
$LN77@PushInvoke:

; 944  : 
; 945  : #ifdef DEBUG_OUT
; 946  :         if ( opnd.sym )

	cmp	QWORD PTR opnd$[rsp+80], 0
	je	SHORT $LN78@PushInvoke

; 947  :             DebugMsg1(("PushInvokeParam(%s, %u): arg name=%s, asize=%u, amtype=%xh psize=%u\n", proc->sym.name, reqParam, opnd.sym->name, asize, opnd.mem_type, psize));

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR [rsp+48], eax
	mov	eax, DWORD PTR opnd$[rsp+64]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR asize$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR opnd$[rsp+80]
	mov	r9, QWORD PTR [rax+8]
	mov	r8d, DWORD PTR reqParam$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11632
	call	DoDebugMsg1
	jmp	SHORT $LN79@PushInvoke
$LN78@PushInvoke:

; 948  :         else
; 949  :             DebugMsg1(("PushInvokeParam(%s, %u): arg no name, asize=%u, amtype=%xh psize=%u\n", proc->sym.name, reqParam, asize, opnd.mem_type, psize));

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR opnd$[rsp+64]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR asize$[rsp]
	mov	r8d, DWORD PTR reqParam$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11633
	call	DoDebugMsg1
$LN79@PushInvoke:

; 950  : #endif
; 951  :         pushsize = CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	DWORD PTR pushsize$[rsp], eax

; 952  : 
; 953  :         if ( proc->sym.langtype == LANG_FASTCALL )

	mov	rax, QWORD PTR proc$[rsp]
	cmp	DWORD PTR [rax+76], 7
	jne	SHORT $LN80@PushInvoke

; 954  :             if ( fastcall_tab[ModuleInfo.fctype].handleparam( proc, reqParam, curr, addr, &opnd, fullparam, r0flags ) )

	movsxd	rax, DWORD PTR ModuleInfo+376
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:fastcall_tab
	mov	QWORD PTR tv1280[rsp], rcx
	mov	rdx, QWORD PTR r0flags$[rsp]
	mov	QWORD PTR [rsp+48], rdx
	lea	rdx, QWORD PTR fullparam$[rsp]
	mov	QWORD PTR [rsp+40], rdx
	lea	rdx, QWORD PTR opnd$[rsp]
	mov	QWORD PTR [rsp+32], rdx
	movzx	r9d, BYTE PTR addr$[rsp]
	mov	r8, QWORD PTR curr$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	mov	rcx, QWORD PTR proc$[rsp]
	mov	r10, QWORD PTR tv1280[rsp]
	call	QWORD PTR [r10+rax+16]
	test	eax, eax
	je	SHORT $LN81@PushInvoke

; 955  :                 return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@PushInvoke
$LN81@PushInvoke:
$LN80@PushInvoke:

; 956  : 
; 957  :         /* v2.04: this check has been moved behind the fastcall_tab() call */
; 958  :         /* v2.11: if target is a pointer, sizes must match */
; 959  :         //if ( asize > psize ) { /* argument's size too big? */
; 960  :         if ( ( asize > psize ) || ( asize < psize && curr->sym.mem_type == MT_PTR ) ) {

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jg	SHORT $LN83@PushInvoke
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jge	SHORT $LN82@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN82@PushInvoke
$LN83@PushInvoke:

; 961  :             DebugMsg(("PushInvokeParm(%u): argsize error, arg size=%d, parm size=%d\n", reqParam, asize, psize));

	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR asize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11638
	call	DoDebugMsg

; 962  :             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr

; 963  :             return( NOT_ERROR );

	xor	eax, eax
	jmp	$LN1@PushInvoke
$LN82@PushInvoke:

; 964  :         }
; 965  : 
; 966  :         if ( ( opnd.kind == EXPR_ADDR && opnd.instr != T_OFFSET ) ||

	cmp	DWORD PTR opnd$[rsp+60], 1
	jne	SHORT $LN87@PushInvoke
	cmp	DWORD PTR opnd$[rsp+56], 241		; 000000f1H
	jne	SHORT $LN86@PushInvoke
$LN87@PushInvoke:
	cmp	DWORD PTR opnd$[rsp+60], 2
	jne	$LN84@PushInvoke
	mov	eax, DWORD PTR opnd$[rsp+76]
	and	eax, 1
	cmp	eax, 1
	jne	$LN84@PushInvoke
$LN86@PushInvoke:

; 967  :             ( opnd.kind == EXPR_REG && opnd.indirect == TRUE ) ) {
; 968  : 
; 969  :             /* catch the case when EAX has been used for ADDR,
; 970  :              * and is later used as addressing register!
; 971  :              *
; 972  :              */
; 973  :             if ( *r0flags &&

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN88@PushInvoke
	cmp	QWORD PTR opnd$[rsp+24], 0
	je	SHORT $LN90@PushInvoke
	mov	rax, QWORD PTR opnd$[rsp+24]
	cmp	DWORD PTR [rax+16], 17
	je	SHORT $LN89@PushInvoke
	mov	rax, QWORD PTR opnd$[rsp+24]
	cmp	DWORD PTR [rax+16], 115			; 00000073H
	je	SHORT $LN89@PushInvoke
$LN90@PushInvoke:
	cmp	QWORD PTR opnd$[rsp+32], 0
	je	SHORT $LN88@PushInvoke
	mov	rax, QWORD PTR opnd$[rsp+32]
	cmp	DWORD PTR [rax+16], 17
	je	SHORT $LN91@PushInvoke
	mov	rax, QWORD PTR opnd$[rsp+32]
	cmp	DWORD PTR [rax+16], 115			; 00000073H
	jne	SHORT $LN88@PushInvoke
$LN91@PushInvoke:
$LN89@PushInvoke:

; 974  :                 (( opnd.base_reg != NULL &&
; 975  :                   ( opnd.base_reg->tokval == T_EAX
; 976  : #if AMD64_SUPPORT
; 977  :                    || opnd.base_reg->tokval == T_RAX
; 978  : #endif
; 979  :                   )) ||
; 980  :                  ( opnd.idx_reg != NULL &&
; 981  :                   ( opnd.idx_reg->tokval == T_EAX
; 982  : #if AMD64_SUPPORT
; 983  :                    || opnd.idx_reg->tokval == T_RAX
; 984  : #endif
; 985  :                  )))) {
; 986  :                 EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr

; 987  :                 *r0flags = 0;

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 0
$LN88@PushInvoke:

; 988  :             }
; 989  : 
; 990  :             if ( curr->sym.is_vararg ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN92@PushInvoke

; 991  :                 size_vararg += ( asize > pushsize ? asize : pushsize );

	mov	eax, DWORD PTR pushsize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jle	SHORT $LN251@PushInvoke
	mov	eax, DWORD PTR asize$[rsp]
	mov	DWORD PTR tv664[rsp], eax
	jmp	SHORT $LN252@PushInvoke
$LN251@PushInvoke:
	mov	eax, DWORD PTR pushsize$[rsp]
	mov	DWORD PTR tv664[rsp], eax
$LN252@PushInvoke:
	mov	eax, DWORD PTR tv664[rsp]
	mov	ecx, DWORD PTR size_vararg
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR size_vararg, eax

; 992  :                 DebugMsg1(("PushInvokeParm(%u): asize=%u added to size_vararg, now=%u\n",

	mov	eax, DWORD PTR pushsize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jle	SHORT $LN253@PushInvoke
	mov	eax, DWORD PTR asize$[rsp]
	mov	DWORD PTR tv668[rsp], eax
	jmp	SHORT $LN254@PushInvoke
$LN253@PushInvoke:
	mov	eax, DWORD PTR pushsize$[rsp]
	mov	DWORD PTR tv668[rsp], eax
$LN254@PushInvoke:
	mov	r9d, DWORD PTR size_vararg
	mov	r8d, DWORD PTR tv668[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11648
	call	DoDebugMsg1
$LN92@PushInvoke:

; 993  :                            reqParam, asize > pushsize ? asize : pushsize, size_vararg ));
; 994  :             }
; 995  :             if ( asize > pushsize ) {

	mov	eax, DWORD PTR pushsize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jle	$LN93@PushInvoke

; 996  : 
; 997  :                 short dw = T_WORD;

	mov	eax, 207				; 000000cfH
	mov	WORD PTR dw$9[rsp], ax

; 998  :                 if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN95@PushInvoke

; 999  :                     pushsize = 4;

	mov	DWORD PTR pushsize$[rsp], 4

; 1000 :                     dw = T_DWORD;

	mov	eax, 209				; 000000d1H
	mov	WORD PTR dw$9[rsp], ax
$LN95@PushInvoke:

; 1001 :                 }
; 1002 : 
; 1003 :                 /* in params like "qword ptr [eax]" the typecast
; 1004 :                  * has to be removed */
; 1005 :                 if ( opnd.explicit ) {

	mov	eax, DWORD PTR opnd$[rsp+76]
	shr	eax, 1
	and	eax, 1
	test	eax, eax
	je	SHORT $LN96@PushInvoke

; 1006 :                     SkipTypecast( fullparam, i, tokenarray );

	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, QWORD PTR fullparam$[rsp]
	call	SkipTypecast

; 1007 :                     opnd.explicit = FALSE;

	mov	eax, DWORD PTR opnd$[rsp+76]
	and	eax, -3					; fffffffdH
	mov	DWORD PTR opnd$[rsp+76], eax
$LN96@PushInvoke:
$LN8@PushInvoke:

; 1008 :                 }
; 1009 : 
; 1010 :                 while ( asize > 0 ) {

	cmp	DWORD PTR asize$[rsp], 0
	jle	$LN9@PushInvoke

; 1011 : 
; 1012 :                     if ( asize & 2 ) {

	mov	eax, DWORD PTR asize$[rsp]
	and	eax, 2
	test	eax, eax
	je	SHORT $LN97@PushInvoke

; 1013 : 
; 1014 :                         /* ensure the stack remains dword-aligned in 32bit */
; 1015 :                         if ( ModuleInfo.Ofssize > USE16 ) {

	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	jle	SHORT $LN99@PushInvoke

; 1016 :                             /* v2.05: better push a 0 word? */
; 1017 :                             //AddLineQueueX( " pushw 0" );
; 1018 :                           /* ASMC v1.12: dword-aligned stack in 32bit */
; 1019 :                           if (pushsize == 4)

	cmp	DWORD PTR pushsize$[rsp], 4
	jne	SHORT $LN100@PushInvoke

; 1020 :                             size_vararg += 2;

	mov	eax, DWORD PTR size_vararg
	add	eax, 2
	mov	DWORD PTR size_vararg, eax
$LN100@PushInvoke:

; 1021 :                           /******/
; 1022 : #if AMD64_SUPPORT
; 1023 :                             AddLineQueueX( " sub %r, 2", stackreg[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11657
	call	AddLineQueueX
$LN99@PushInvoke:

; 1024 : #else
; 1025 :                             AddLineQueueX( " sub %r, 2", T_ESP );
; 1026 : #endif
; 1027 :                         }
; 1028 :                         AddLineQueueX( " push word ptr %s+%u", fullparam, NUMQUAL asize-2 );

	mov	eax, DWORD PTR asize$[rsp]
	sub	eax, 2
	mov	r8d, eax
	lea	rdx, QWORD PTR fullparam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11658
	call	AddLineQueueX

; 1029 :                         asize -= 2;

	mov	eax, DWORD PTR asize$[rsp]
	sub	eax, 2
	mov	DWORD PTR asize$[rsp], eax

; 1030 :                     } else {

	jmp	SHORT $LN98@PushInvoke
$LN97@PushInvoke:

; 1031 :                         AddLineQueueX( " push %r ptr %s+%u", dw, fullparam, NUMQUAL asize-pushsize );

	mov	eax, DWORD PTR pushsize$[rsp]
	mov	ecx, DWORD PTR asize$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsx	ecx, WORD PTR dw$9[rsp]
	mov	r9d, eax
	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG11659
	call	AddLineQueueX

; 1032 :                         asize -= pushsize;

	mov	eax, DWORD PTR pushsize$[rsp]
	mov	ecx, DWORD PTR asize$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR asize$[rsp], eax
$LN98@PushInvoke:

; 1033 :                     }
; 1034 :                 }

	jmp	$LN8@PushInvoke
$LN9@PushInvoke:

; 1035 :                 //return( NOT_ERROR );
; 1036 : 
; 1037 :             } else if ( asize < pushsize ) {

	jmp	$LN94@PushInvoke
$LN93@PushInvoke:
	mov	eax, DWORD PTR pushsize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jge	$LN101@PushInvoke

; 1038 : 
; 1039 :                 if ( psize > 4 ) {

	cmp	DWORD PTR psize$[rsp], 4
	jle	SHORT $LN103@PushInvoke

; 1040 :                     DebugMsg1(("PushInvokeParm(%u): error, ADDR, psize=%u, is > 4\n",

	mov	r8d, DWORD PTR psize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11663
	call	DoDebugMsg1

; 1041 :                               reqParam, psize ));
; 1042 :                     EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN103@PushInvoke:

; 1043 :                 }
; 1044 :                 /* v2.11: added, use MOVSX/MOVZX if cpu >= 80386 */
; 1045 :                 if ( asize < 4 && psize > 2 && IS_SIGNED( opnd.mem_type ) && ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	cmp	DWORD PTR asize$[rsp], 4
	jge	SHORT $LN104@PushInvoke
	cmp	DWORD PTR psize$[rsp], 2
	jle	SHORT $LN104@PushInvoke
	mov	eax, DWORD PTR opnd$[rsp+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN104@PushInvoke
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN104@PushInvoke

; 1046 :                     AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11666
	call	AddLineQueueX

; 1047 :                     AddLineQueueX( " push %r", T_EAX );

	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11667
	call	AddLineQueueX

; 1048 :                     *r0flags = R0_USED; /* reset R0_H_CLEARED  */

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 1

; 1049 :                 } else {

	jmp	$LN105@PushInvoke
$LN104@PushInvoke:

; 1050 :                     //switch (sym->mem_type) {
; 1051 :                     switch ( opnd.mem_type ) {

	mov	eax, DWORD PTR opnd$[rsp+64]
	mov	DWORD PTR tv725[rsp], eax
	cmp	DWORD PTR tv725[rsp], 0
	je	SHORT $LN106@PushInvoke
	cmp	DWORD PTR tv725[rsp], 1
	je	$LN119@PushInvoke
	cmp	DWORD PTR tv725[rsp], 64		; 00000040H
	je	SHORT $LN106@PushInvoke
	cmp	DWORD PTR tv725[rsp], 65		; 00000041H
	je	$LN119@PushInvoke
	jmp	$LN126@PushInvoke
$LN106@PushInvoke:

; 1052 :                     case MT_BYTE:
; 1053 :                     case MT_SBYTE:
; 1054 :                         if ( psize == 1 && curr->sym.is_vararg == FALSE ) {

	cmp	DWORD PTR psize$[rsp], 1
	jne	SHORT $LN107@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN107@PushInvoke

; 1055 :                             AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11671
	call	AddLineQueueX

; 1056 :                             AddLineQueueX( " push %r", regax[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:regax
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11672
	call	AddLineQueueX
	jmp	$LN108@PushInvoke
$LN107@PushInvoke:

; 1057 :                         } else if ( pushsize == 2 ) { /* 16-bit code? */

	cmp	DWORD PTR pushsize$[rsp], 2
	jne	$LN109@PushInvoke

; 1058 :                             if ( opnd.mem_type == MT_BYTE ) {

	cmp	DWORD PTR opnd$[rsp+64], 0
	jne	$LN111@PushInvoke

; 1059 :                                 if ( psize == 4 )

	cmp	DWORD PTR psize$[rsp], 4
	jne	SHORT $LN113@PushInvoke

; 1060 :                                     if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 )  {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 16
	jge	SHORT $LN114@PushInvoke

; 1061 :                                         if ( !(*r0flags & R0_X_CLEARED ) )

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN116@PushInvoke

; 1062 :                                             AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	r8d, 9
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11681
	call	AddLineQueueX
$LN116@PushInvoke:

; 1063 :                                         *r0flags |= ( R0_X_CLEARED | R0_H_CLEARED );

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 6
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 1064 :                                         AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11682
	call	AddLineQueueX

; 1065 :                                     } else

	jmp	SHORT $LN115@PushInvoke
$LN114@PushInvoke:

; 1066 :                                         AddLineQueue( " push 0" );

	lea	rcx, OFFSET FLAT:$SG11683
	call	AddLineQueue
$LN115@PushInvoke:
$LN113@PushInvoke:

; 1067 :                                 AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11684
	call	AddLineQueueX

; 1068 :                                 if ( !( *r0flags & R0_H_CLEARED )) {

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN117@PushInvoke

; 1069 :                                     AddLineQueueX( " mov %r, 0", T_AH );

	mov	edx, 5
	lea	rcx, OFFSET FLAT:$SG11686
	call	AddLineQueueX

; 1070 :                                     *r0flags |= R0_H_CLEARED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 2
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
$LN117@PushInvoke:

; 1071 :                                 }
; 1072 :                             } else {

	jmp	SHORT $LN112@PushInvoke
$LN111@PushInvoke:

; 1073 :                                 AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11687
	call	AddLineQueueX

; 1074 :                                 *r0flags = 0; /* reset AH_CLEARED */

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 0

; 1075 :                                 AddLineQueue( " cbw" );

	lea	rcx, OFFSET FLAT:$SG11688
	call	AddLineQueue

; 1076 :                                 if ( psize == 4 ) {

	cmp	DWORD PTR psize$[rsp], 4
	jne	SHORT $LN118@PushInvoke

; 1077 :                                     AddLineQueue( " cwd" );

	lea	rcx, OFFSET FLAT:$SG11690
	call	AddLineQueue

; 1078 :                                     AddLineQueueX( " push %r", T_DX );

	mov	edx, 11
	lea	rcx, OFFSET FLAT:$SG11691
	call	AddLineQueueX

; 1079 :                                     *r0flags |= R2_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 8
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
$LN118@PushInvoke:
$LN112@PushInvoke:

; 1080 :                                 }
; 1081 :                             }
; 1082 :                             AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11692
	call	AddLineQueueX

; 1083 :                         } else {

	jmp	SHORT $LN110@PushInvoke
$LN109@PushInvoke:

; 1084 :                             AddLineQueueX( " mov%sx %r, %s", opnd.mem_type == MT_BYTE ? "z" : "s", T_EAX, fullparam );

	cmp	DWORD PTR opnd$[rsp+64], 0
	jne	SHORT $LN255@PushInvoke
	lea	rax, OFFSET FLAT:$SG11693
	mov	QWORD PTR tv784[rsp], rax
	jmp	SHORT $LN256@PushInvoke
$LN255@PushInvoke:
	lea	rax, OFFSET FLAT:$SG11694
	mov	QWORD PTR tv784[rsp], rax
$LN256@PushInvoke:
	lea	r9, QWORD PTR fullparam$[rsp]
	mov	r8d, 17
	mov	rdx, QWORD PTR tv784[rsp]
	lea	rcx, OFFSET FLAT:$SG11695
	call	AddLineQueueX

; 1085 :                             AddLineQueueX( " push %r", T_EAX );

	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11696
	call	AddLineQueueX
$LN110@PushInvoke:
$LN108@PushInvoke:

; 1086 :                         }
; 1087 :                         *r0flags |= R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 1088 :                         break;

	jmp	$LN10@PushInvoke
$LN119@PushInvoke:

; 1089 :                     case MT_WORD:
; 1090 :                     case MT_SWORD:
; 1091 :                         /* pushsize is 4 here, hence it's always 32-bit code!
; 1092 :                          * v2.04: use the Masm-compatible, non-destructive
; 1093 :                          * PUSH if psize is 2.
; 1094 :                          */
; 1095 :                         //if ( Options.masm_compat_gencode ) {
; 1096 :                         /* v2.11: don't push 0 if src operand is signed */
; 1097 :                         //if ( Options.masm_compat_gencode || psize == 2 ) {
; 1098 :                         if ( opnd.mem_type == MT_WORD && ( Options.masm_compat_gencode || psize == 2 )) {

	cmp	DWORD PTR opnd$[rsp+64], 1
	jne	SHORT $LN120@PushInvoke
	movzx	eax, BYTE PTR Options+144
	test	eax, eax
	jne	SHORT $LN122@PushInvoke
	cmp	DWORD PTR psize$[rsp], 2
	jne	SHORT $LN120@PushInvoke
$LN122@PushInvoke:

; 1099 :                             /* v2.05: push a 0 word if argument is VARARG
; 1100 :                              * v2.10: push a 0 word if psize != 2
; 1101 :                              */
; 1102 :                             //if ( curr->sym.is_vararg )
; 1103 :                             if ( curr->sym.is_vararg || psize != 2 )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN125@PushInvoke
	cmp	DWORD PTR psize$[rsp], 2
	je	SHORT $LN123@PushInvoke
$LN125@PushInvoke:

; 1104 :                                 AddLineQueueX( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11704
	call	AddLineQueueX
	jmp	SHORT $LN124@PushInvoke
$LN123@PushInvoke:

; 1105 :                             else {
; 1106 : #if AMD64_SUPPORT
; 1107 :                                 AddLineQueueX( " sub %r, 2", stackreg[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11705
	call	AddLineQueueX
$LN124@PushInvoke:

; 1108 : #else
; 1109 :                                 AddLineQueueX( " sub %r, 2", T_ESP );
; 1110 : #endif
; 1111 :                             }
; 1112 :                             AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11706
	call	AddLineQueueX

; 1113 :                         } else {

	jmp	SHORT $LN121@PushInvoke
$LN120@PushInvoke:

; 1114 :                             AddLineQueueX( " mov%sx %r, %s", opnd.mem_type == MT_WORD ? "z" : "s", T_EAX, fullparam );

	cmp	DWORD PTR opnd$[rsp+64], 1
	jne	SHORT $LN257@PushInvoke
	lea	rax, OFFSET FLAT:$SG11707
	mov	QWORD PTR tv845[rsp], rax
	jmp	SHORT $LN258@PushInvoke
$LN257@PushInvoke:
	lea	rax, OFFSET FLAT:$SG11708
	mov	QWORD PTR tv845[rsp], rax
$LN258@PushInvoke:
	lea	r9, QWORD PTR fullparam$[rsp]
	mov	r8d, 17
	mov	rdx, QWORD PTR tv845[rsp]
	lea	rcx, OFFSET FLAT:$SG11709
	call	AddLineQueueX

; 1115 :                             AddLineQueueX( " push %r", T_EAX );

	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11710
	call	AddLineQueueX

; 1116 :                             *r0flags = R0_USED; /* reset R0_H_CLEARED  */

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 1
$LN121@PushInvoke:

; 1117 :                         }
; 1118 :                         break;

	jmp	SHORT $LN10@PushInvoke
$LN126@PushInvoke:

; 1119 :                     default:
; 1120 :                         AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11712
	call	AddLineQueueX
$LN10@PushInvoke:
$LN105@PushInvoke:

; 1121 :                     }
; 1122 :                 }
; 1123 :             } else { /* asize == pushsize */

	jmp	$LN102@PushInvoke
$LN101@PushInvoke:

; 1124 : 
; 1125 :                 /* v2.11: changed */
; 1126 :                 if ( IS_SIGNED( opnd.mem_type ) && psize > asize ) {

	mov	eax, DWORD PTR opnd$[rsp+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	$LN127@PushInvoke
	mov	eax, DWORD PTR asize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	jle	$LN127@PushInvoke

; 1127 :                     if ( psize > 2 && (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) ) {

	cmp	DWORD PTR psize$[rsp], 2
	jle	SHORT $LN129@PushInvoke
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN129@PushInvoke

; 1128 :                         AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11717
	call	AddLineQueueX

; 1129 :                         AddLineQueueX( " push %r", T_EAX );

	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11718
	call	AddLineQueueX

; 1130 :                         *r0flags = R0_USED; /* reset R0_H_CLEARED  */

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 1
	jmp	SHORT $LN130@PushInvoke
$LN129@PushInvoke:

; 1131 :                     } else if ( pushsize == 2 && psize > 2 ) {

	cmp	DWORD PTR pushsize$[rsp], 2
	jne	SHORT $LN131@PushInvoke
	cmp	DWORD PTR psize$[rsp], 2
	jle	SHORT $LN131@PushInvoke

; 1132 :                         AddLineQueueX( " mov %r, %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11721
	call	AddLineQueueX

; 1133 :                         AddLineQueueX( " cwd" );

	lea	rcx, OFFSET FLAT:$SG11722
	call	AddLineQueueX

; 1134 :                         AddLineQueueX( " push %r", T_DX );

	mov	edx, 11
	lea	rcx, OFFSET FLAT:$SG11723
	call	AddLineQueueX

; 1135 :                         AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11724
	call	AddLineQueueX

; 1136 :                         *r0flags = R0_USED | R2_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 9

; 1137 :                     } else

	jmp	SHORT $LN132@PushInvoke
$LN131@PushInvoke:

; 1138 :                         AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11725
	call	AddLineQueueX
$LN132@PushInvoke:
$LN130@PushInvoke:

; 1139 :                 } else {

	jmp	$LN128@PushInvoke
$LN127@PushInvoke:

; 1140 :                     if ( pushsize == 2 && psize > 2 ) {

	cmp	DWORD PTR pushsize$[rsp], 2
	jne	SHORT $LN133@PushInvoke
	cmp	DWORD PTR psize$[rsp], 2
	jle	SHORT $LN133@PushInvoke

; 1141 :                         if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 )  {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 16
	jge	SHORT $LN134@PushInvoke

; 1142 :                             if ( !(*r0flags & R0_X_CLEARED ) )

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN136@PushInvoke

; 1143 :                                 AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	r8d, 9
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11730
	call	AddLineQueueX
$LN136@PushInvoke:

; 1144 :                             AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11731
	call	AddLineQueueX

; 1145 :                             *r0flags |= ( R0_USED | R0_X_CLEARED | R0_H_CLEARED );

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 7
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 1146 :                         } else

	jmp	SHORT $LN135@PushInvoke
$LN134@PushInvoke:

; 1147 :                             AddLineQueueX( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11732
	call	AddLineQueueX
$LN135@PushInvoke:
$LN133@PushInvoke:

; 1148 :                     }
; 1149 :                     AddLineQueueX( " push %s", fullparam );

	lea	rdx, QWORD PTR fullparam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11733
	call	AddLineQueueX
$LN128@PushInvoke:
$LN102@PushInvoke:
$LN94@PushInvoke:

; 1150 :                 }
; 1151 :             }
; 1152 : 
; 1153 :         } else { /* the parameter is a register or constant value! */

	jmp	$LN85@PushInvoke
$LN84@PushInvoke:

; 1154 : 
; 1155 :             //char is_r0 = FALSE;
; 1156 :             if ( opnd.kind == EXPR_REG ) {

	cmp	DWORD PTR opnd$[rsp+60], 2
	jne	$LN137@PushInvoke

; 1157 :                 int reg = opnd.base_reg->tokval;

	mov	rax, QWORD PTR opnd$[rsp+24]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR reg$10[rsp], eax

; 1158 :                 unsigned optype = GetValueSp( reg );

	movsxd	rax, DWORD PTR reg$10[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	mov	DWORD PTR optype$11[rsp], eax

; 1159 : 
; 1160 :                 /* v2.11 */
; 1161 :                 if ( curr->sym.is_vararg == TRUE && psize < pushsize )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN139@PushInvoke
	mov	eax, DWORD PTR pushsize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	jge	SHORT $LN139@PushInvoke

; 1162 :                     psize = pushsize;

	mov	eax, DWORD PTR pushsize$[rsp]
	mov	DWORD PTR psize$[rsp], eax
$LN139@PushInvoke:

; 1163 : 
; 1164 :                 /* v2.06: check if register is valid to be pushed.
; 1165 :                  * ST(n), MMn, XMMn, YMMn and special registers are NOT valid!
; 1166 :                  */
; 1167 :                 if ( optype & ( OP_STI | OP_MMX | OP_XMM

	mov	eax, DWORD PTR optype$11[rsp]
	and	eax, 102576				; 000190b0H
	test	eax, eax
	je	SHORT $LN140@PushInvoke

; 1168 : #if AVXSUPP
; 1169 :                                | OP_YMM
; 1170 : #endif
; 1171 :                                | OP_RSPEC ) ) {
; 1172 : 
; 1173 :                     return( EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 ) );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
	jmp	$LN1@PushInvoke
$LN140@PushInvoke:

; 1174 :                 }
; 1175 : 
; 1176 :                 if ( ( *r0flags & R0_USED ) && ( reg == T_AH || ( optype & OP_A ) ) ) {

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN141@PushInvoke
	cmp	DWORD PTR reg$10[rsp], 5
	je	SHORT $LN143@PushInvoke
	mov	eax, DWORD PTR optype$11[rsp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN141@PushInvoke
$LN143@PushInvoke:

; 1177 :                     EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr

; 1178 :                     *r0flags &= ~R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -2
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN142@PushInvoke
$LN141@PushInvoke:

; 1179 :                 } else if ( ( *r0flags & R2_USED ) && ( reg == T_DH || GetRegNo( reg ) == 2 ) ) {

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 8
	test	eax, eax
	je	SHORT $LN144@PushInvoke
	cmp	DWORD PTR reg$10[rsp], 7
	je	SHORT $LN145@PushInvoke
	movsxd	rax, DWORD PTR reg$10[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	cmp	eax, 2
	jne	SHORT $LN144@PushInvoke
$LN145@PushInvoke:

; 1180 :                     EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr

; 1181 :                     *r0flags &= ~R2_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -9
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
$LN144@PushInvoke:
$LN142@PushInvoke:

; 1182 :                 }
; 1183 :                 /* v2.11: use target's "pushsize", not the current one */
; 1184 :                 //if ( asize != psize || asize < pushsize ) {
; 1185 :                 if ( asize != psize || asize < ( 2 << Ofssize ) ) {

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jne	SHORT $LN147@PushInvoke
	movsx	eax, BYTE PTR Ofssize$[rsp]
	mov	ecx, 2
	mov	DWORD PTR tv1589[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1589[rsp]
	shl	eax, cl
	cmp	DWORD PTR asize$[rsp], eax
	jge	$LN146@PushInvoke
$LN147@PushInvoke:

; 1186 :                     /* register size doesn't match the needed parameter size.
; 1187 :                      */
; 1188 :                     if ( psize > 4 ) {

	cmp	DWORD PTR psize$[rsp], 4
	jle	SHORT $LN148@PushInvoke

; 1189 :                         DebugMsg1(("PushInvokeParm(%u): error, REG, asize=%u, psize=%u, pushsize=%u\n",

	mov	eax, DWORD PTR pushsize$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR asize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11746
	call	DoDebugMsg1

; 1190 :                                   reqParam, asize, psize, pushsize ));
; 1191 :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN148@PushInvoke:

; 1192 :                     }
; 1193 : 
; 1194 :                     if ( asize <= 2 && ( psize == 4 || pushsize == 4 ) ) {

	cmp	DWORD PTR asize$[rsp], 2
	jg	$LN149@PushInvoke
	cmp	DWORD PTR psize$[rsp], 4
	je	SHORT $LN150@PushInvoke
	cmp	DWORD PTR pushsize$[rsp], 4
	jne	$LN149@PushInvoke
$LN150@PushInvoke:

; 1195 :                         if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 && asize == psize ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	$LN151@PushInvoke
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR asize$[rsp], eax
	jne	$LN151@PushInvoke

; 1196 :                             if ( asize == 2 )

	cmp	DWORD PTR asize$[rsp], 2
	jne	SHORT $LN153@PushInvoke

; 1197 :                                 reg = reg - T_AX + T_EAX;

	mov	eax, DWORD PTR reg$10[rsp]
	add	eax, 8
	mov	DWORD PTR reg$10[rsp], eax
	jmp	SHORT $LN154@PushInvoke
$LN153@PushInvoke:

; 1198 :                             else {
; 1199 :                                 /* v2.11: hibyte registers AH, BH, CH, DH ( no 4-7 ) needs special handling */
; 1200 :                                 if ( reg < T_AH )

	cmp	DWORD PTR reg$10[rsp], 5
	jge	SHORT $LN155@PushInvoke

; 1201 :                                     reg = reg - T_AL + T_EAX;

	mov	eax, DWORD PTR reg$10[rsp]
	add	eax, 16
	mov	DWORD PTR reg$10[rsp], eax
	jmp	SHORT $LN156@PushInvoke
$LN155@PushInvoke:

; 1202 :                                 else {
; 1203 :                                     AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11755
	call	AddLineQueueX

; 1204 :                                     *r0flags |= R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 1205 :                                     reg = T_EAX;

	mov	DWORD PTR reg$10[rsp], 17
$LN156@PushInvoke:

; 1206 :                                 }
; 1207 :                                 asize = 2; /* done */

	mov	DWORD PTR asize$[rsp], 2
$LN154@PushInvoke:

; 1208 :                             }

	jmp	$LN152@PushInvoke
$LN151@PushInvoke:

; 1209 :                         } else if ( IS_SIGNED( opnd.mem_type ) && pushsize < 4 ) {

	mov	eax, DWORD PTR opnd$[rsp+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	$LN157@PushInvoke
	cmp	DWORD PTR pushsize$[rsp], 4
	jge	$LN157@PushInvoke

; 1210 : 
; 1211 :                             /* psize is 4 in this branch */
; 1212 :                             if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN159@PushInvoke

; 1213 :                                 AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11760
	call	AddLineQueueX

; 1214 :                                 *r0flags = R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 1

; 1215 :                                 reg = T_EAX;

	mov	DWORD PTR reg$10[rsp], 17

; 1216 :                             } else {

	jmp	$LN160@PushInvoke
$LN159@PushInvoke:

; 1217 :                                 *r0flags = R0_USED | R2_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 9

; 1218 :                                 if ( asize == 1 ) {

	cmp	DWORD PTR asize$[rsp], 1
	jne	SHORT $LN161@PushInvoke

; 1219 :                                     if ( reg != T_AL )

	cmp	DWORD PTR reg$10[rsp], 1
	je	SHORT $LN163@PushInvoke

; 1220 :                                         AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11764
	call	AddLineQueueX
$LN163@PushInvoke:

; 1221 :                                     AddLineQueue( " cbw" );

	lea	rcx, OFFSET FLAT:$SG11765
	call	AddLineQueue
	jmp	SHORT $LN162@PushInvoke
$LN161@PushInvoke:

; 1222 :                                 } else if ( reg != T_AX )

	cmp	DWORD PTR reg$10[rsp], 9
	je	SHORT $LN164@PushInvoke

; 1223 :                                     AddLineQueueX( " mov %r, %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11767
	call	AddLineQueueX
$LN164@PushInvoke:
$LN162@PushInvoke:

; 1224 :                                 AddLineQueue( " cwd" );

	lea	rcx, OFFSET FLAT:$SG11768
	call	AddLineQueue

; 1225 :                                 AddLineQueueX( " push %r", T_DX );

	mov	edx, 11
	lea	rcx, OFFSET FLAT:$SG11769
	call	AddLineQueueX

; 1226 :                                 reg = T_AX;

	mov	DWORD PTR reg$10[rsp], 9
$LN160@PushInvoke:

; 1227 :                             }
; 1228 :                             asize = 2; /* done */

	mov	DWORD PTR asize$[rsp], 2
	jmp	$LN158@PushInvoke
$LN157@PushInvoke:

; 1229 : 
; 1230 :                         } else if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_186 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 16
	jl	$LN165@PushInvoke

; 1231 : 
; 1232 :                             if ( pushsize == 4 ) {

	cmp	DWORD PTR pushsize$[rsp], 4
	jne	SHORT $LN167@PushInvoke

; 1233 :                                 if ( asize == 1 ) {

	cmp	DWORD PTR asize$[rsp], 1
	jne	SHORT $LN169@PushInvoke
	jmp	SHORT $LN170@PushInvoke
$LN169@PushInvoke:

; 1234 :                                     /* handled below */
; 1235 :                                 } else if ( psize <= 2 ) {

	cmp	DWORD PTR psize$[rsp], 2
	jg	SHORT $LN171@PushInvoke

; 1236 : #if AMD64_SUPPORT
; 1237 :                                     AddLineQueueX( " sub %r, 2", stackreg[ModuleInfo.Ofssize] );

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:stackreg
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11778
	call	AddLineQueueX
	jmp	SHORT $LN172@PushInvoke
$LN171@PushInvoke:

; 1238 : #else
; 1239 :                                     AddLineQueueX( " sub %r, 2", T_ESP );
; 1240 : #endif
; 1241 :                                 } else if ( IS_SIGNED( opnd.mem_type ) ) {

	mov	eax, DWORD PTR opnd$[rsp+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN173@PushInvoke

; 1242 :                                     AddLineQueueX( " movsx %r, %s", T_EAX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11781
	call	AddLineQueueX

; 1243 :                                     *r0flags = R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 1

; 1244 :                                     reg = T_EAX;

	mov	DWORD PTR reg$10[rsp], 17

; 1245 :                                 } else {

	jmp	SHORT $LN174@PushInvoke
$LN173@PushInvoke:

; 1246 :                                     AddLineQueue( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11782
	call	AddLineQueue
$LN174@PushInvoke:
$LN172@PushInvoke:
$LN170@PushInvoke:

; 1247 :                                 }
; 1248 :                             } else

	jmp	SHORT $LN168@PushInvoke
$LN167@PushInvoke:

; 1249 :                                 AddLineQueue( " pushw 0" );

	lea	rcx, OFFSET FLAT:$SG11783
	call	AddLineQueue
$LN168@PushInvoke:

; 1250 : 
; 1251 :                         } else {

	jmp	SHORT $LN166@PushInvoke
$LN165@PushInvoke:

; 1252 : 
; 1253 :                             if ( !(*r0flags & R0_X_CLEARED) ) {

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN175@PushInvoke

; 1254 :                                 /* v2.11: extra check needed */
; 1255 :                                 if ( reg == T_AH || ( optype & OP_A ) )

	cmp	DWORD PTR reg$10[rsp], 5
	je	SHORT $LN177@PushInvoke
	mov	eax, DWORD PTR optype$11[rsp]
	and	eax, 512				; 00000200H
	test	eax, eax
	je	SHORT $LN176@PushInvoke
$LN177@PushInvoke:

; 1256 :                                     EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr
$LN176@PushInvoke:

; 1257 :                                 AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	r8d, 9
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11787
	call	AddLineQueueX
$LN175@PushInvoke:

; 1258 :                             }
; 1259 :                             AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11788
	call	AddLineQueueX

; 1260 :                             *r0flags = R0_USED | R0_H_CLEARED | R0_X_CLEARED;

	mov	rax, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rax], 7
$LN166@PushInvoke:
$LN158@PushInvoke:
$LN152@PushInvoke:
$LN149@PushInvoke:

; 1261 :                         }
; 1262 :                     }
; 1263 : 
; 1264 :                     if ( asize == 1 ) {

	cmp	DWORD PTR asize$[rsp], 1
	jne	$LN178@PushInvoke

; 1265 :                         if ( ( reg >= T_AH && reg <= T_BH ) || psize != 1 ) {

	cmp	DWORD PTR reg$10[rsp], 5
	jl	SHORT $LN182@PushInvoke
	cmp	DWORD PTR reg$10[rsp], 8
	jle	SHORT $LN181@PushInvoke
$LN182@PushInvoke:
	cmp	DWORD PTR psize$[rsp], 1
	je	$LN179@PushInvoke
$LN181@PushInvoke:

; 1266 :                             if ( psize != 1 && ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	cmp	DWORD PTR psize$[rsp], 1
	je	$LN183@PushInvoke
	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	$LN183@PushInvoke

; 1267 :                                 /* v2.10: consider signed type coercion! */
; 1268 :                                 AddLineQueueX( " mov%sx %r, %s", IS_SIGNED( opnd.mem_type ) ? "s" : "z",

	mov	eax, DWORD PTR opnd$[rsp+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN259@PushInvoke
	lea	rax, OFFSET FLAT:$SG11796
	mov	QWORD PTR tv1066[rsp], rax
	jmp	SHORT $LN260@PushInvoke
$LN259@PushInvoke:
	lea	rax, OFFSET FLAT:$SG11797
	mov	QWORD PTR tv1066[rsp], rax
$LN260@PushInvoke:
	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:regax
	lea	r9, QWORD PTR fullparam$[rsp]
	mov	r8d, DWORD PTR [rcx+rax*4]
	mov	rdx, QWORD PTR tv1066[rsp]
	lea	rcx, OFFSET FLAT:$SG11798
	call	AddLineQueueX

; 1269 :                                               regax[ModuleInfo.Ofssize], fullparam );
; 1270 :                                 *r0flags =  ( IS_SIGNED( opnd.mem_type ) ? R0_USED : R0_USED | R0_H_CLEARED );

	mov	eax, DWORD PTR opnd$[rsp+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN261@PushInvoke
	mov	DWORD PTR tv1071[rsp], 1
	jmp	SHORT $LN262@PushInvoke
$LN261@PushInvoke:
	mov	DWORD PTR tv1071[rsp], 3
$LN262@PushInvoke:
	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	ecx, BYTE PTR tv1071[rsp]
	mov	BYTE PTR [rax], cl

; 1271 :                             } else {

	jmp	$LN184@PushInvoke
$LN183@PushInvoke:

; 1272 :                                 if ( reg != T_AL ) {

	cmp	DWORD PTR reg$10[rsp], 1
	je	SHORT $LN185@PushInvoke

; 1273 :                                     AddLineQueueX( " mov %r, %s", T_AL, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 1
	lea	rcx, OFFSET FLAT:$SG11800
	call	AddLineQueueX

; 1274 :                                     *r0flags |= R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 1275 :                                     *r0flags &= ~R0_X_CLEARED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -5
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
$LN185@PushInvoke:

; 1276 :                                 }
; 1277 :                                 if ( psize != 1 ) /* v2.11: don't modify AH if paramsize is 1 */

	cmp	DWORD PTR psize$[rsp], 1
	je	SHORT $LN186@PushInvoke

; 1278 :                                     if ( IS_SIGNED( opnd.mem_type ) ) {

	mov	eax, DWORD PTR opnd$[rsp+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN187@PushInvoke

; 1279 :                                         AddLineQueue( " cbw" );

	lea	rcx, OFFSET FLAT:$SG11804
	call	AddLineQueue

; 1280 :                                         *r0flags &= ~( R0_H_CLEARED | R0_X_CLEARED );

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, -7
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
	jmp	SHORT $LN188@PushInvoke
$LN187@PushInvoke:

; 1281 :                                     } else if (!( *r0flags & R0_H_CLEARED )) {

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN189@PushInvoke

; 1282 :                                         AddLineQueueX( " mov %r, 0", T_AH );

	mov	edx, 5
	lea	rcx, OFFSET FLAT:$SG11806
	call	AddLineQueueX

; 1283 :                                         *r0flags |= R0_H_CLEARED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 2
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
$LN189@PushInvoke:
$LN188@PushInvoke:
$LN186@PushInvoke:
$LN184@PushInvoke:

; 1284 :                                     }
; 1285 :                             }
; 1286 :                             reg = regax[ModuleInfo.Ofssize];

	movzx	eax, BYTE PTR ModuleInfo+404
	lea	rcx, OFFSET FLAT:regax
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR reg$10[rsp], eax

; 1287 :                         } else {

	jmp	SHORT $LN180@PushInvoke
$LN179@PushInvoke:

; 1288 :                             /* convert 8-bit to 16/32-bit register name */
; 1289 :                             if ( (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386) &&

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN190@PushInvoke
	cmp	DWORD PTR psize$[rsp], 4
	je	SHORT $LN192@PushInvoke
	cmp	DWORD PTR pushsize$[rsp], 4
	jne	SHORT $LN190@PushInvoke
$LN192@PushInvoke:

; 1290 :                                 ( psize == 4 || pushsize == 4 ) ) {
; 1291 :                                 reg = reg - T_AL + T_EAX;

	mov	eax, DWORD PTR reg$10[rsp]
	add	eax, 16
	mov	DWORD PTR reg$10[rsp], eax

; 1292 :                             } else

	jmp	SHORT $LN191@PushInvoke
$LN190@PushInvoke:

; 1293 :                                 reg = reg - T_AL + T_AX;

	mov	eax, DWORD PTR reg$10[rsp]
	add	eax, 8
	mov	DWORD PTR reg$10[rsp], eax
$LN191@PushInvoke:
$LN180@PushInvoke:
$LN178@PushInvoke:
$LN146@PushInvoke:

; 1294 :                         }
; 1295 :                     }
; 1296 : #if 0
; 1297 :                     if ( is_r0 && ( *r0flags & R0_USED ) ) {
; 1298 :                         EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );
; 1299 :                         *r0flags = 0;
; 1300 :                     }
; 1301 : #endif
; 1302 :                 }
; 1303 :                 AddLineQueueX( " push %r", reg );

	mov	edx, DWORD PTR reg$10[rsp]
	lea	rcx, OFFSET FLAT:$SG11810
	call	AddLineQueueX

; 1304 :                 /* v2.05: don't change psize if > pushsize */
; 1305 :                 if ( psize < pushsize )

	mov	eax, DWORD PTR pushsize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	jge	SHORT $LN193@PushInvoke

; 1306 :                     /* v2.04: adjust psize ( for siz_vararg update ) */
; 1307 :                     psize = pushsize;

	mov	eax, DWORD PTR pushsize$[rsp]
	mov	DWORD PTR psize$[rsp], eax
$LN193@PushInvoke:

; 1308 : 
; 1309 :             } else { /* constant value */

	jmp	$LN138@PushInvoke
$LN137@PushInvoke:

; 1310 : 
; 1311 :                 /* v2.06: size check */
; 1312 :                 if ( psize ) {

	cmp	DWORD PTR psize$[rsp], 0
	je	$LN194@PushInvoke

; 1313 :                     if ( opnd.kind == EXPR_FLOAT )

	cmp	DWORD PTR opnd$[rsp+60], 3
	jne	SHORT $LN195@PushInvoke

; 1314 :                         asize = 4;

	mov	DWORD PTR asize$[rsp], 4
	jmp	$LN196@PushInvoke
$LN195@PushInvoke:

; 1315 :                     else if ( opnd.value64 <= 255 && opnd.value64 >= -255 )

	cmp	QWORD PTR opnd$[rsp], 255		; 000000ffH
	jg	SHORT $LN197@PushInvoke
	cmp	QWORD PTR opnd$[rsp], -255		; ffffffffffffff01H
	jl	SHORT $LN197@PushInvoke

; 1316 :                         asize = 1;

	mov	DWORD PTR asize$[rsp], 1
	jmp	SHORT $LN198@PushInvoke
$LN197@PushInvoke:

; 1317 :                     else if ( opnd.value64 <= 65535 && opnd.value64 >= -65535 )

	cmp	QWORD PTR opnd$[rsp], 65535		; 0000ffffH
	jg	SHORT $LN199@PushInvoke
	cmp	QWORD PTR opnd$[rsp], -65535		; ffffffffffff0001H
	jl	SHORT $LN199@PushInvoke

; 1318 :                         asize = 2;

	mov	DWORD PTR asize$[rsp], 2
	jmp	SHORT $LN200@PushInvoke
$LN199@PushInvoke:

; 1319 :                     else if ( opnd.value64 <= maxintvalues[0] && opnd.value64 >= minintvalues[0] )

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:maxintvalues
	mov	rax, QWORD PTR [rcx+rax]
	cmp	QWORD PTR opnd$[rsp], rax
	jg	SHORT $LN201@PushInvoke
	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:minintvalues
	mov	rax, QWORD PTR [rcx+rax]
	cmp	QWORD PTR opnd$[rsp], rax
	jl	SHORT $LN201@PushInvoke

; 1320 :                         asize = 4;

	mov	DWORD PTR asize$[rsp], 4
	jmp	SHORT $LN202@PushInvoke
$LN201@PushInvoke:

; 1321 :                     else
; 1322 :                         asize = 8;

	mov	DWORD PTR asize$[rsp], 8
$LN202@PushInvoke:
$LN200@PushInvoke:
$LN198@PushInvoke:
$LN196@PushInvoke:

; 1323 :                     if ( psize < asize )

	mov	eax, DWORD PTR asize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	jge	SHORT $LN203@PushInvoke

; 1324 :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN203@PushInvoke:
$LN194@PushInvoke:

; 1325 :                 }
; 1326 : 
; 1327 :                 /* v2.11: don't use CurrWordSize */
; 1328 :                 //asize = CurrWordSize;
; 1329 :                 asize = 2 << Ofssize;

	movsx	eax, BYTE PTR Ofssize$[rsp]
	mov	ecx, 2
	mov	DWORD PTR tv1646[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1646[rsp]
	shl	eax, cl
	mov	DWORD PTR asize$[rsp], eax

; 1330 : 
; 1331 :                 if ( psize < asize )  /* ensure that the default argsize (2,4,8) is met */

	mov	eax, DWORD PTR asize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	jge	SHORT $LN204@PushInvoke

; 1332 :                     if ( psize == 0 && curr->sym.is_vararg ) {

	cmp	DWORD PTR psize$[rsp], 0
	jne	SHORT $LN205@PushInvoke
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN205@PushInvoke

; 1333 :                         /* v2.04: push a dword constant in 16-bit */
; 1334 :                         if ( asize == 2 &&

	cmp	DWORD PTR asize$[rsp], 2
	jne	SHORT $LN207@PushInvoke
	cmp	DWORD PTR opnd$[rsp], 65535		; 0000ffffH
	jg	SHORT $LN209@PushInvoke
	cmp	DWORD PTR opnd$[rsp], -65535		; ffffffffffff0001H
	jge	SHORT $LN207@PushInvoke
$LN209@PushInvoke:

; 1335 :                             ( opnd.value > 0xFFFFL || opnd.value < -65535L ) )
; 1336 :                             psize = 4;

	mov	DWORD PTR psize$[rsp], 4
	jmp	SHORT $LN208@PushInvoke
$LN207@PushInvoke:

; 1337 :                         else
; 1338 :                             psize = asize;

	mov	eax, DWORD PTR asize$[rsp]
	mov	DWORD PTR psize$[rsp], eax
$LN208@PushInvoke:

; 1339 :                     } else

	jmp	SHORT $LN206@PushInvoke
$LN205@PushInvoke:

; 1340 :                         psize = asize;

	mov	eax, DWORD PTR asize$[rsp]
	mov	DWORD PTR psize$[rsp], eax
$LN206@PushInvoke:
$LN204@PushInvoke:

; 1341 : 
; 1342 :                 if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) < P_186 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 16
	jge	$LN210@PushInvoke

; 1343 :                     *r0flags |= R0_USED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al

; 1344 :                     switch ( psize ) {

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR tv1145[rsp], eax
	cmp	DWORD PTR tv1145[rsp], 2
	je	SHORT $LN212@PushInvoke
	cmp	DWORD PTR tv1145[rsp], 4
	je	SHORT $LN217@PushInvoke
	jmp	$LN223@PushInvoke
$LN212@PushInvoke:

; 1345 :                     case 2:
; 1346 :                         if ( opnd.value != 0 || opnd.kind == EXPR_ADDR ) {

	cmp	DWORD PTR opnd$[rsp], 0
	jne	SHORT $LN215@PushInvoke
	cmp	DWORD PTR opnd$[rsp+60], 1
	jne	SHORT $LN213@PushInvoke
$LN215@PushInvoke:

; 1347 :                             AddLineQueueX( " mov %r, %s", T_AX, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11834
	call	AddLineQueueX

; 1348 :                         } else {

	jmp	SHORT $LN214@PushInvoke
$LN213@PushInvoke:

; 1349 :                             if ( !(*r0flags & R0_X_CLEARED ) ) {

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 4
	test	eax, eax
	jne	SHORT $LN216@PushInvoke

; 1350 :                                 AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	r8d, 9
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11836
	call	AddLineQueueX
$LN216@PushInvoke:

; 1351 :                             }
; 1352 :                             *r0flags |= R0_H_CLEARED | R0_X_CLEARED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 6
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
$LN214@PushInvoke:

; 1353 :                         }
; 1354 :                         break;

	jmp	$LN12@PushInvoke
$LN217@PushInvoke:

; 1355 :                     case 4:
; 1356 :                         if ( opnd.uvalue <= 0xFFFF )

	cmp	DWORD PTR opnd$[rsp], 65535		; 0000ffffH
	ja	SHORT $LN218@PushInvoke

; 1357 :                             AddLineQueueX( " xor %r, %r", T_AX, T_AX );

	mov	r8d, 9
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11840
	call	AddLineQueueX
	jmp	SHORT $LN219@PushInvoke
$LN218@PushInvoke:

; 1358 :                         else
; 1359 :                             AddLineQueueX( " mov %r, %r (%s)", T_AX, T_HIGHWORD, fullparam );

	lea	r9, QWORD PTR fullparam$[rsp]
	mov	r8d, 232				; 000000e8H
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11841
	call	AddLineQueueX
$LN219@PushInvoke:

; 1360 :                         AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11842
	call	AddLineQueueX

; 1361 :                         if ( opnd.uvalue != 0 || opnd.kind == EXPR_ADDR ) {

	cmp	DWORD PTR opnd$[rsp], 0
	jne	SHORT $LN222@PushInvoke
	cmp	DWORD PTR opnd$[rsp+60], 1
	jne	SHORT $LN220@PushInvoke
$LN222@PushInvoke:

; 1362 :                             AddLineQueueX( " mov %r, %r (%s)", T_AX, T_LOWWORD, fullparam );

	lea	r9, QWORD PTR fullparam$[rsp]
	mov	r8d, 238				; 000000eeH
	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11846
	call	AddLineQueueX

; 1363 :                         } else {

	jmp	SHORT $LN221@PushInvoke
$LN220@PushInvoke:

; 1364 :                             *r0flags |= R0_H_CLEARED | R0_X_CLEARED;

	mov	rax, QWORD PTR r0flags$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 6
	mov	rcx, QWORD PTR r0flags$[rsp]
	mov	BYTE PTR [rcx], al
$LN221@PushInvoke:

; 1365 :                         }
; 1366 :                         break;

	jmp	SHORT $LN12@PushInvoke
$LN223@PushInvoke:

; 1367 :                     default:
; 1368 :                         DebugMsg1(("PushInvokeParm(%u): error, CONST, asize=%u, psize=%u, pushsize=%u\n",

	mov	eax, DWORD PTR pushsize$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR asize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11848
	call	DoDebugMsg1

; 1369 :                                   reqParam, asize, psize, pushsize ));
; 1370 :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN12@PushInvoke:

; 1371 :                     }
; 1372 :                     AddLineQueueX( " push %r", T_AX );

	mov	edx, 9
	lea	rcx, OFFSET FLAT:$SG11849
	call	AddLineQueueX

; 1373 :                 } else { /* cpu >= 80186 */

	jmp	$LN211@PushInvoke
$LN210@PushInvoke:

; 1374 :                     char *instr = "";

	lea	rax, OFFSET FLAT:$SG11850
	mov	QWORD PTR instr$12[rsp], rax

; 1375 :                     char *suffix;
; 1376 :                     int qual = EMPTY;

	mov	DWORD PTR qual$14[rsp], -2

; 1377 :                     //if ( asize != psize ) {
; 1378 :                     if ( psize != pushsize ) {

	mov	eax, DWORD PTR pushsize$[rsp]
	cmp	DWORD PTR psize$[rsp], eax
	je	$LN224@PushInvoke

; 1379 :                         switch ( psize ) {

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR tv1192[rsp], eax
	cmp	DWORD PTR tv1192[rsp], 2
	je	SHORT $LN225@PushInvoke
	cmp	DWORD PTR tv1192[rsp], 4
	je	$LN231@PushInvoke
	cmp	DWORD PTR tv1192[rsp], 6
	je	SHORT $LN226@PushInvoke
	cmp	DWORD PTR tv1192[rsp], 8
	je	$LN234@PushInvoke
	jmp	$LN238@PushInvoke
$LN225@PushInvoke:

; 1380 :                         case 2:
; 1381 :                             instr = "w";

	lea	rax, OFFSET FLAT:$SG11853
	mov	QWORD PTR instr$12[rsp], rax

; 1382 :                             break;

	jmp	$LN14@PushInvoke
$LN226@PushInvoke:

; 1383 :                         case 6: /* v2.04: added */
; 1384 :                             /* v2.11: use pushw only for 16-bit target */
; 1385 :                             if ( Ofssize == USE16 )

	movsx	eax, BYTE PTR Ofssize$[rsp]
	test	eax, eax
	jne	SHORT $LN227@PushInvoke

; 1386 :                                 suffix = "w";

	lea	rax, OFFSET FLAT:$SG11857
	mov	QWORD PTR suffix$13[rsp], rax
	jmp	SHORT $LN228@PushInvoke
$LN227@PushInvoke:

; 1387 :                             else if ( Ofssize == USE32 && CurrWordSize == 2 )

	movsx	eax, BYTE PTR Ofssize$[rsp]
	cmp	eax, 1
	jne	SHORT $LN229@PushInvoke
	movzx	eax, BYTE PTR ModuleInfo+406
	cmp	eax, 2
	jne	SHORT $LN229@PushInvoke

; 1388 :                                 suffix = "d";

	lea	rax, OFFSET FLAT:$SG11860
	mov	QWORD PTR suffix$13[rsp], rax
	jmp	SHORT $LN230@PushInvoke
$LN229@PushInvoke:

; 1389 :                             else
; 1390 :                                 suffix = "";

	lea	rax, OFFSET FLAT:$SG11861
	mov	QWORD PTR suffix$13[rsp], rax
$LN230@PushInvoke:
$LN228@PushInvoke:

; 1391 :                             AddLineQueueX( " push%s (%s) shr 32t", suffix, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	rdx, QWORD PTR suffix$13[rsp]
	lea	rcx, OFFSET FLAT:$SG11862
	call	AddLineQueueX
$LN231@PushInvoke:

; 1392 :                             /* no break */
; 1393 :                         case 4:
; 1394 :                             if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 )

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN232@PushInvoke

; 1395 :                                 instr = "d";

	lea	rax, OFFSET FLAT:$SG11866
	mov	QWORD PTR instr$12[rsp], rax
	jmp	SHORT $LN233@PushInvoke
$LN232@PushInvoke:

; 1396 :                             else {
; 1397 :                                 AddLineQueueX( " pushw %r (%s)", T_HIGHWORD, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 232				; 000000e8H
	lea	rcx, OFFSET FLAT:$SG11867
	call	AddLineQueueX

; 1398 :                                 instr = "w";

	lea	rax, OFFSET FLAT:$SG11868
	mov	QWORD PTR instr$12[rsp], rax

; 1399 :                                 qual = T_LOWWORD;

	mov	DWORD PTR qual$14[rsp], 238		; 000000eeH
$LN233@PushInvoke:

; 1400 :                             }
; 1401 :                             break;

	jmp	$LN14@PushInvoke
$LN234@PushInvoke:

; 1402 :                         case 8:
; 1403 : #if AMD64_SUPPORT
; 1404 :                             if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_64 )

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 112				; 00000070H
	jl	SHORT $LN235@PushInvoke

; 1405 :                                 break;

	jmp	$LN14@PushInvoke
$LN235@PushInvoke:

; 1406 : #endif
; 1407 :                             /* v2.06: added support for double constants */
; 1408 :                             if ( opnd.kind == EXPR_CONST || opnd.kind == EXPR_FLOAT ) {

	cmp	DWORD PTR opnd$[rsp+60], 0
	je	SHORT $LN237@PushInvoke
	cmp	DWORD PTR opnd$[rsp+60], 3
	jne	SHORT $LN236@PushInvoke
$LN237@PushInvoke:

; 1409 :                                 AddLineQueueX( " pushd %r (%s)", T_HIGH32, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	edx, 231				; 000000e7H
	lea	rcx, OFFSET FLAT:$SG11873
	call	AddLineQueueX

; 1410 :                                 qual = T_LOW32;

	mov	DWORD PTR qual$14[rsp], 237		; 000000edH

; 1411 :                                 instr = "d";

	lea	rax, OFFSET FLAT:$SG11874
	mov	QWORD PTR instr$12[rsp], rax

; 1412 :                                 break;

	jmp	SHORT $LN14@PushInvoke
$LN236@PushInvoke:
$LN238@PushInvoke:

; 1413 :                             }
; 1414 :                         default:
; 1415 :                             DebugMsg1(("PushInvokeParm(%u): error, CONST, asize=%u, psize=%u, pushsize=%u\n",

	mov	eax, DWORD PTR pushsize$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR asize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11876
	call	DoDebugMsg1

; 1416 :                                       reqParam, asize, psize, pushsize ));
; 1417 :                             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, reqParam+1 );

	mov	eax, DWORD PTR reqParam$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN14@PushInvoke:
$LN224@PushInvoke:

; 1418 :                         }
; 1419 :                     }
; 1420 :                     if ( qual != EMPTY )

	cmp	DWORD PTR qual$14[rsp], -2
	je	SHORT $LN239@PushInvoke

; 1421 :                         AddLineQueueX( " push%s %r (%s)", instr, qual, fullparam );

	lea	r9, QWORD PTR fullparam$[rsp]
	mov	r8d, DWORD PTR qual$14[rsp]
	mov	rdx, QWORD PTR instr$12[rsp]
	lea	rcx, OFFSET FLAT:$SG11879
	call	AddLineQueueX
	jmp	SHORT $LN240@PushInvoke
$LN239@PushInvoke:

; 1422 :                     else
; 1423 :                         AddLineQueueX( " push%s %s", instr, fullparam );

	lea	r8, QWORD PTR fullparam$[rsp]
	mov	rdx, QWORD PTR instr$12[rsp]
	lea	rcx, OFFSET FLAT:$SG11880
	call	AddLineQueueX
$LN240@PushInvoke:
$LN211@PushInvoke:
$LN138@PushInvoke:

; 1424 :                 }
; 1425 :             }
; 1426 :             if ( curr->sym.is_vararg ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN241@PushInvoke

; 1427 :                 size_vararg += psize;

	mov	eax, DWORD PTR psize$[rsp]
	mov	ecx, DWORD PTR size_vararg
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR size_vararg, eax

; 1428 :                 DebugMsg1(("PushInvokeParm(%u): psize=%u added to size_vararg, now=%u\n", reqParam, psize, size_vararg ));

	mov	r9d, DWORD PTR size_vararg
	mov	r8d, DWORD PTR psize$[rsp]
	mov	edx, DWORD PTR reqParam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11882
	call	DoDebugMsg1
$LN241@PushInvoke:
$LN85@PushInvoke:
$LN21@PushInvoke:

; 1429 :             }
; 1430 :         }
; 1431 :     }
; 1432 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@PushInvoke:
$LN242@PushInvoke:

; 1433 : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:PushInvokeParam$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 1696				; 000006a0H
	pop	rdi
	ret	0
PushInvokeParam ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
j$ = 32
fullparam$ = 64
i$ = 72
tokenarray$ = 80
SkipTypecast PROC

; 693  : {

	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 694  :     int j;
; 695  :     fullparam[0] = NULLC;

	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fullparam$[rsp]
	mov	BYTE PTR [rcx+rax], 0

; 696  :     for ( j = i; ; j++ ) {

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR j$[rsp], eax
	jmp	SHORT $LN4@SkipTypeca
$LN2@SkipTypeca:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@SkipTypeca:

; 697  :         if (( tokenarray[j].token == T_COMMA ) || ( tokenarray[j].token == T_FINAL ) )

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN6@SkipTypeca
	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN5@SkipTypeca
$LN6@SkipTypeca:

; 698  :             break;

	jmp	$LN3@SkipTypeca
$LN5@SkipTypeca:

; 699  :         if (( tokenarray[j+1].token == T_BINARY_OPERATOR ) && ( tokenarray[j+1].tokval == T_PTR ) )

	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 5
	jne	SHORT $LN7@SkipTypeca
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 258		; 00000102H
	jne	SHORT $LN7@SkipTypeca

; 700  :             j = j + 1;

	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
	jmp	SHORT $LN8@SkipTypeca
$LN7@SkipTypeca:

; 701  :         else {
; 702  :             if ( fullparam[0] != NULLC )

	mov	eax, 1
	imul	rax, rax, 0
	mov	rcx, QWORD PTR fullparam$[rsp]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN9@SkipTypeca

; 703  :                 strcat( fullparam," " );

	lea	rdx, OFFSET FLAT:$SG11491
	mov	rcx, QWORD PTR fullparam$[rsp]
	call	strcat
$LN9@SkipTypeca:

; 704  :             strcat( fullparam, tokenarray[j].string_ptr );

	movsxd	rax, DWORD PTR j$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR fullparam$[rsp]
	call	strcat
$LN8@SkipTypeca:

; 705  :         }
; 706  :     }

	jmp	$LN2@SkipTypeca
$LN3@SkipTypeca:

; 707  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
SkipTypecast ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
reg$ = 48
dir$1 = 56
as$2 = 64
seg$3 = 72
tv71 = 80
tv73 = 88
tv79 = 96
tv85 = 104
tv181 = 112
opnd$ = 144
buffer$ = 152
fullparam$ = 160
GetSegmentPart PROC

; 521  : {

	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	rdi, rsp
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 522  :     short reg = T_NULL;

	xor	eax, eax
	mov	WORD PTR reg$[rsp], ax

; 523  :     DebugMsg1(("GetSegmentPart(%s) enter [override=%s sym=%s segment=%s]\n",

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN21@GetSegment
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN19@GetSegment
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rax, QWORD PTR [rax+24]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv71[rsp], rax
	jmp	SHORT $LN20@GetSegment
$LN19@GetSegment:
	lea	rax, OFFSET FLAT:$SG11352
	mov	QWORD PTR tv71[rsp], rax
$LN20@GetSegment:
	mov	rax, QWORD PTR tv71[rsp]
	mov	QWORD PTR tv73[rsp], rax
	jmp	SHORT $LN22@GetSegment
$LN21@GetSegment:
	lea	rax, OFFSET FLAT:$SG11353
	mov	QWORD PTR tv73[rsp], rax
$LN22@GetSegment:
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN23@GetSegment
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv79[rsp], rax
	jmp	SHORT $LN24@GetSegment
$LN23@GetSegment:
	lea	rax, OFFSET FLAT:$SG11354
	mov	QWORD PTR tv79[rsp], rax
$LN24@GetSegment:
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN25@GetSegment
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv85[rsp], rax
	jmp	SHORT $LN26@GetSegment
$LN25@GetSegment:
	lea	rax, OFFSET FLAT:$SG11355
	mov	QWORD PTR tv85[rsp], rax
$LN26@GetSegment:
	mov	rax, QWORD PTR tv73[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR tv79[rsp]
	mov	r8, QWORD PTR tv85[rsp]
	mov	rdx, QWORD PTR fullparam$[rsp]
	lea	rcx, OFFSET FLAT:$SG11356
	call	DoDebugMsg1

; 524  :                fullparam, opnd->override ? opnd->override->string_ptr : "NULL",
; 525  :                opnd->sym ? opnd->sym->name : "NULL",
; 526  :                opnd->sym ? opnd->sym->segment ? opnd->sym->segment->name : "NULL" : "NULL" ));
; 527  :     if ( opnd->override != NULL ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+48], 0
	je	SHORT $LN2@GetSegment

; 528  :         if ( opnd->override->token == T_REG )

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	movzx	eax, BYTE PTR [rax]
	cmp	eax, 2
	jne	SHORT $LN4@GetSegment

; 529  :             reg = opnd->override->tokval;

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	movzx	eax, WORD PTR [rax+16]
	mov	WORD PTR reg$[rsp], ax
	jmp	SHORT $LN5@GetSegment
$LN4@GetSegment:

; 530  :         else
; 531  :             strcpy( buffer, opnd->override->string_ptr );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+48]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcpy
$LN5@GetSegment:

; 532  :     } else if ( opnd->sym != NULL && opnd->sym->segment != NULL ) {

	jmp	$LN3@GetSegment
$LN2@GetSegment:
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	$LN6@GetSegment
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	QWORD PTR [rax+24], 0
	je	$LN6@GetSegment

; 533  :         struct dsym *dir = GetSegm( opnd->sym );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	rax, QWORD PTR [rax+24]
	mov	QWORD PTR dir$1[rsp], rax

; 534  :         enum assume_segreg as;
; 535  :         if ( dir->e.seginfo->segtype == SEGTYPE_DATA ||

	mov	rax, QWORD PTR dir$1[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	DWORD PTR [rax+72], 2
	je	SHORT $LN10@GetSegment
	mov	rax, QWORD PTR dir$1[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	DWORD PTR [rax+72], 3
	jne	SHORT $LN8@GetSegment
$LN10@GetSegment:

; 536  :             dir->e.seginfo->segtype == SEGTYPE_BSS )
; 537  :             as = search_assume( (struct asym *)dir, ASSUME_DS, TRUE );

	mov	r8b, 1
	mov	edx, 3
	mov	rcx, QWORD PTR dir$1[rsp]
	call	search_assume
	mov	DWORD PTR as$2[rsp], eax
	jmp	SHORT $LN9@GetSegment
$LN8@GetSegment:

; 538  :         else
; 539  :             as = search_assume( (struct asym *)dir, ASSUME_CS, TRUE );

	mov	r8b, 1
	mov	edx, 1
	mov	rcx, QWORD PTR dir$1[rsp]
	call	search_assume
	mov	DWORD PTR as$2[rsp], eax
$LN9@GetSegment:

; 540  :         if ( as != ASSUME_NOTHING ) {

	cmp	DWORD PTR as$2[rsp], -2
	je	SHORT $LN11@GetSegment

; 541  :             //GetResWName( segreg_tab[as], buffer );
; 542  :             reg = T_ES + as; /* v2.08: T_ES is first seg reg in special.h */

	mov	eax, DWORD PTR as$2[rsp]
	add	eax, 25
	mov	WORD PTR reg$[rsp], ax

; 543  :         } else {

	jmp	SHORT $LN12@GetSegment
$LN11@GetSegment:

; 544  :             struct asym *seg;
; 545  :             seg = GetGroup( opnd->sym );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rcx, QWORD PTR [rax+80]
	call	GetGroup
	mov	QWORD PTR seg$3[rsp], rax

; 546  :             if ( seg == NULL )

	cmp	QWORD PTR seg$3[rsp], 0
	jne	SHORT $LN13@GetSegment

; 547  :                 seg = &dir->sym;

	mov	rax, QWORD PTR dir$1[rsp]
	mov	QWORD PTR seg$3[rsp], rax
$LN13@GetSegment:

; 548  :             if ( seg )

	cmp	QWORD PTR seg$3[rsp], 0
	je	SHORT $LN14@GetSegment

; 549  :                 strcpy( buffer, seg->name );

	mov	rax, QWORD PTR seg$3[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcpy
	jmp	SHORT $LN15@GetSegment
$LN14@GetSegment:

; 550  :             else {
; 551  :                 strcpy( buffer, "seg " );

	lea	rdx, OFFSET FLAT:$SG11371
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcpy

; 552  :                 strcat( buffer, fullparam );

	mov	rdx, QWORD PTR fullparam$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcat
$LN15@GetSegment:
$LN12@GetSegment:

; 553  :             }
; 554  :         }

	jmp	SHORT $LN7@GetSegment
$LN6@GetSegment:

; 555  :     } else if ( opnd->sym && opnd->sym->state == SYM_STACK ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+80], 0
	je	SHORT $LN16@GetSegment
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	DWORD PTR [rax+32], 5
	jne	SHORT $LN16@GetSegment

; 556  :         reg = T_SS;

	mov	eax, 27
	mov	WORD PTR reg$[rsp], ax

; 557  :     } else {

	jmp	SHORT $LN17@GetSegment
$LN16@GetSegment:

; 558  :         strcpy( buffer,"seg " );

	lea	rdx, OFFSET FLAT:$SG11374
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcpy

; 559  :         strcat( buffer, fullparam );

	mov	rdx, QWORD PTR fullparam$[rsp]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcat
$LN17@GetSegment:
$LN7@GetSegment:
$LN3@GetSegment:

; 560  :     }
; 561  :     DebugMsg1(("GetSegmentPart: reg%u, buffer=%s\n", reg, reg ? "" : buffer ));

	movsx	eax, WORD PTR reg$[rsp]
	test	eax, eax
	je	SHORT $LN27@GetSegment
	lea	rax, OFFSET FLAT:$SG11375
	mov	QWORD PTR tv181[rsp], rax
	jmp	SHORT $LN28@GetSegment
$LN27@GetSegment:
	mov	rax, QWORD PTR buffer$[rsp]
	mov	QWORD PTR tv181[rsp], rax
$LN28@GetSegment:
	movsx	eax, WORD PTR reg$[rsp]
	mov	r8, QWORD PTR tv181[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11376
	call	DoDebugMsg1

; 562  :     return( reg );

	movzx	eax, WORD PTR reg$[rsp]

; 563  : }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
GetSegmentPart ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
size$ = 48
psize$ = 52
reg$ = 56
reg2$ = 60
i$ = 64
base$ = 68
destroyed$ = 72
$T2 = 73
tv818 = 76
tv158 = 80
tv838 = 84
tv195 = 88
tv283 = 92
tv347 = 96
tv369 = 100
tv384 = 104
tv414 = 112
tv494 = 120
tv962 = 124
tv577 = 128
tv590 = 132
tv1003 = 136
tv628 = 140
tv663 = 144
tv754 = 152
tv1038 = 160
proc$ = 192
index$ = 200
param$ = 208
addr$ = 216
opnd$ = 224
paramvalue$ = 232
regs_used$ = 240
ms64_param PROC

; 246  : {

	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 176				; 000000b0H
	mov	rdi, rsp
	mov	ecx, 44					; 0000002cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+192]
	mov	BYTE PTR $T2[rsp], 0

; 247  :     uint_32 size;
; 248  :     uint_32 psize;
; 249  :     int reg;
; 250  :     int reg2;
; 251  :     int i;
; 252  :     int base;
; 253  :     bool destroyed = FALSE;

	mov	BYTE PTR destroyed$[rsp], 0

; 254  :     DebugMsg1(("ms64_param(%s, index=%u, param.memtype=%Xh, addr=%u) enter\n", proc->sym.name, index, param->sym.mem_type, addr ));

	movzx	eax, BYTE PTR addr$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR param$[rsp]
	mov	r9d, DWORD PTR [rax+36]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11169
	call	DoDebugMsg1

; 255  :     /* v2.11: default size is 32-bit, not 64-bit */
; 256  :     if ( param->sym.is_vararg ) {

	mov	rax, QWORD PTR param$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 5
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	$LN10@ms64_param

; 257  :         psize = 0;

	mov	DWORD PTR psize$[rsp], 0

; 258  :         if ( addr || opnd->instr == T_OFFSET )

	movzx	eax, BYTE PTR addr$[rsp]
	test	eax, eax
	jne	SHORT $LN14@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+56], 241			; 000000f1H
	jne	SHORT $LN12@ms64_param
$LN14@ms64_param:

; 259  :             psize = 8;

	mov	DWORD PTR psize$[rsp], 8
	jmp	SHORT $LN13@ms64_param
$LN12@ms64_param:

; 260  :         else if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE )

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	SHORT $LN15@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN15@ms64_param

; 261  :             psize = SizeFromRegister( opnd->base_reg->tokval );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	ecx, DWORD PTR [rax+16]
	call	SizeFromRegister
	mov	DWORD PTR psize$[rsp], eax
	jmp	SHORT $LN16@ms64_param
$LN15@ms64_param:

; 262  :         else if ( opnd->mem_type != MT_EMPTY )

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+64], 192			; 000000c0H
	je	SHORT $LN17@ms64_param

; 263  :             psize = SizeFromMemtype( opnd->mem_type, USE64, opnd->type );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	r8, QWORD PTR [rax+96]
	mov	edx, 2
	mov	rax, QWORD PTR opnd$[rsp]
	mov	ecx, DWORD PTR [rax+64]
	call	SizeFromMemtype
	mov	DWORD PTR psize$[rsp], eax
$LN17@ms64_param:
$LN16@ms64_param:
$LN13@ms64_param:

; 264  :         if ( psize < 4 )

	cmp	DWORD PTR psize$[rsp], 4
	jae	SHORT $LN18@ms64_param

; 265  :             psize = 4;

	mov	DWORD PTR psize$[rsp], 4
$LN18@ms64_param:

; 266  :     } else

	jmp	SHORT $LN11@ms64_param
$LN10@ms64_param:

; 267  :         psize = SizeFromMemtype( param->sym.mem_type, USE64, param->sym.type );

	mov	rax, QWORD PTR param$[rsp]
	mov	r8, QWORD PTR [rax+80]
	mov	edx, 2
	mov	rax, QWORD PTR param$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	SizeFromMemtype
	mov	DWORD PTR psize$[rsp], eax
$LN11@ms64_param:

; 268  : 
; 269  :     /* check for register overwrites; v2.11: moved out the if( index >= 4 ) block */
; 270  :     if ( opnd->base_reg != NULL ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	$LN19@ms64_param

; 271  :         reg = opnd->base_reg->tokval;

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	BYTE PTR $T2[rsp], 1
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR reg$[rsp], eax

; 272  :         if ( GetValueSp( reg ) & OP_R ) {

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN146@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN146@ms64_param:
	movsxd	rax, DWORD PTR reg$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 15
	test	eax, eax
	je	$LN20@ms64_param

; 273  :             i = GetRegNo( reg );

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN147@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN147@ms64_param:
	movsxd	rax, DWORD PTR reg$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	DWORD PTR i$[rsp], eax

; 274  :             if ( REGPAR_WIN64 & ( 1 << i ) ) {

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv818[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv818[rsp]
	shl	eax, cl
	and	eax, 774				; 00000306H
	test	eax, eax
	je	SHORT $LN21@ms64_param

; 275  :                 base = GetParmIndex( i );

	cmp	DWORD PTR i$[rsp], 8
	jl	SHORT $LN130@ms64_param
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 6
	mov	DWORD PTR tv158[rsp], eax
	jmp	SHORT $LN131@ms64_param
$LN130@ms64_param:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR tv158[rsp], eax
$LN131@ms64_param:
	mov	eax, DWORD PTR tv158[rsp]
	mov	DWORD PTR base$[rsp], eax

; 276  :                 if ( *regs_used & ( 1 << ( base + RPAR_START ) ) )

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR base$[rsp]
	add	ecx, 3
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN23@ms64_param

; 277  :                     destroyed = TRUE;

	mov	BYTE PTR destroyed$[rsp], 1
$LN23@ms64_param:

; 278  :             } else if ( (*regs_used & R0_USED ) && ( ( GetValueSp( reg ) & OP_A ) || reg == T_AH ) ) {

	jmp	SHORT $LN22@ms64_param
$LN21@ms64_param:
	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN24@ms64_param
	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN148@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN148@ms64_param:
	movsxd	rax, DWORD PTR reg$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	SHORT $LN25@ms64_param
	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN149@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN149@ms64_param:
	cmp	DWORD PTR reg$[rsp], 5
	jne	SHORT $LN24@ms64_param
$LN25@ms64_param:

; 279  :                 destroyed = TRUE;

	mov	BYTE PTR destroyed$[rsp], 1
$LN24@ms64_param:
$LN22@ms64_param:
$LN20@ms64_param:
$LN19@ms64_param:

; 280  :             }
; 281  :         }
; 282  :     }
; 283  :     if ( opnd->idx_reg != NULL ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+32], 0
	je	$LN26@ms64_param

; 284  :         reg2 = opnd->idx_reg->tokval;

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+32]
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR reg2$[rsp], eax

; 285  :         if ( GetValueSp( reg2 ) & OP_R ) {

	movsxd	rax, DWORD PTR reg2$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 15
	test	eax, eax
	je	$LN27@ms64_param

; 286  :             i = GetRegNo( reg2 );

	movsxd	rax, DWORD PTR reg2$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	DWORD PTR i$[rsp], eax

; 287  :             if ( REGPAR_WIN64 & ( 1 << i ) ) {

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv838[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv838[rsp]
	shl	eax, cl
	and	eax, 774				; 00000306H
	test	eax, eax
	je	SHORT $LN28@ms64_param

; 288  :                 base = GetParmIndex( i );

	cmp	DWORD PTR i$[rsp], 8
	jl	SHORT $LN132@ms64_param
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 6
	mov	DWORD PTR tv195[rsp], eax
	jmp	SHORT $LN133@ms64_param
$LN132@ms64_param:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR tv195[rsp], eax
$LN133@ms64_param:
	mov	eax, DWORD PTR tv195[rsp]
	mov	DWORD PTR base$[rsp], eax

; 289  :                 if ( *regs_used & ( 1 << ( base + RPAR_START ) ) )

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR base$[rsp]
	add	ecx, 3
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN30@ms64_param

; 290  :                     destroyed = TRUE;

	mov	BYTE PTR destroyed$[rsp], 1
$LN30@ms64_param:

; 291  :             } else if ( (*regs_used & R0_USED ) && ( ( GetValueSp( reg2 ) & OP_A ) || reg2 == T_AH ) ) {

	jmp	SHORT $LN29@ms64_param
$LN28@ms64_param:
	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN31@ms64_param
	movsxd	rax, DWORD PTR reg2$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 512				; 00000200H
	test	eax, eax
	jne	SHORT $LN32@ms64_param
	cmp	DWORD PTR reg2$[rsp], 5
	jne	SHORT $LN31@ms64_param
$LN32@ms64_param:

; 292  :                 destroyed = TRUE;

	mov	BYTE PTR destroyed$[rsp], 1
$LN31@ms64_param:
$LN29@ms64_param:
$LN27@ms64_param:
$LN26@ms64_param:

; 293  :             }
; 294  :         }
; 295  :     }
; 296  :     if ( destroyed ) {

	movzx	eax, BYTE PTR destroyed$[rsp]
	test	eax, eax
	je	SHORT $LN33@ms64_param

; 297  :         EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr

; 298  :         *regs_used = 0;

	mov	rax, QWORD PTR regs_used$[rsp]
	mov	BYTE PTR [rax], 0
$LN33@ms64_param:

; 299  :     }
; 300  : 
; 301  :     if ( index >= 4 ) {

	cmp	DWORD PTR index$[rsp], 4
	jl	$LN34@ms64_param

; 302  : 
; 303  :         if ( addr || psize > 8 ) {

	movzx	eax, BYTE PTR addr$[rsp]
	test	eax, eax
	jne	SHORT $LN37@ms64_param
	cmp	DWORD PTR psize$[rsp], 8
	jbe	$LN36@ms64_param
$LN37@ms64_param:

; 304  :             if ( psize == 4 )

	cmp	DWORD PTR psize$[rsp], 4
	jne	SHORT $LN38@ms64_param

; 305  :                 i = T_EAX;

	mov	DWORD PTR i$[rsp], 17
	jmp	SHORT $LN39@ms64_param
$LN38@ms64_param:

; 306  :             else {
; 307  :                 i = T_RAX;

	mov	DWORD PTR i$[rsp], 115			; 00000073H

; 308  :                 if ( psize < 8 )

	cmp	DWORD PTR psize$[rsp], 8
	jae	SHORT $LN40@ms64_param

; 309  :                     EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN40@ms64_param:
$LN39@ms64_param:

; 310  :             }
; 311  :             *regs_used |= R0_USED;

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR regs_used$[rsp]
	mov	BYTE PTR [rcx], al

; 312  :             AddLineQueueX( " lea %r, %s", i, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG11201
	call	AddLineQueueX

; 313  :             AddLineQueueX( " mov [%r+%u], %r", T_RSP, NUMQUAL index*8, i );

	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 3
	mov	r9d, DWORD PTR i$[rsp]
	mov	r8d, eax
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG11202
	call	AddLineQueueX

; 314  :             DebugMsg(("ms64_param(%s, param=%u): ADDR flags=%X\n", proc->sym.name, index, *regs_used ));

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	r9d, eax
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11203
	call	DoDebugMsg

; 315  :             return( 1 );

	mov	eax, 1
	jmp	$LN1@ms64_param
$LN36@ms64_param:

; 316  :         }
; 317  : 
; 318  :         if ( opnd->kind == EXPR_CONST ||

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 0
	je	SHORT $LN43@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 1
	jne	$LN41@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	test	eax, eax
	jne	$LN41@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+64], 192			; 000000c0H
	jne	$LN41@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+56], 241			; 000000f1H
	je	$LN41@ms64_param
$LN43@ms64_param:

; 319  :            ( opnd->kind == EXPR_ADDR && opnd->indirect == FALSE && opnd->mem_type == MT_EMPTY && opnd->instr != T_OFFSET ) ) {
; 320  : 
; 321  :             /* v2.06: support 64-bit constants for params > 4 */
; 322  :             if ( psize == 8 &&

	cmp	DWORD PTR psize$[rsp], 8
	jne	$LN44@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax], 2147483647		; 7fffffffH
	jg	SHORT $LN46@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax], -2147483648		; ffffffff80000000H
	jge	SHORT $LN44@ms64_param
$LN46@ms64_param:

; 323  :                 ( opnd->value64 > LONG_MAX || opnd->value64 < LONG_MIN ) ) {
; 324  :                 AddLineQueueX( " mov %r ptr [%r+%u], %r ( %s )", T_DWORD, T_RSP, NUMQUAL index*8, T_LOW32, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 237			; 000000edH
	mov	r9d, eax
	mov	r8d, 119				; 00000077H
	mov	edx, 209				; 000000d1H
	lea	rcx, OFFSET FLAT:$SG11210
	call	AddLineQueueX

; 325  :                 AddLineQueueX( " mov %r ptr [%r+%u], %r ( %s )", T_DWORD, T_RSP, NUMQUAL index*8+4, T_HIGH32, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	lea	eax, DWORD PTR [rax*8+4]
	mov	rcx, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 231			; 000000e7H
	mov	r9d, eax
	mov	r8d, 119				; 00000077H
	mov	edx, 209				; 000000d1H
	lea	rcx, OFFSET FLAT:$SG11211
	call	AddLineQueueX

; 326  : 
; 327  :             } else {

	jmp	$LN45@ms64_param
$LN44@ms64_param:

; 328  :                 /* v2.11: no expansion if target type is a pointer and argument is an address part */
; 329  :                 if ( param->sym.mem_type == MT_PTR && opnd->kind == EXPR_ADDR && opnd->sym->state != SYM_UNDEFINED ) {

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN47@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 1
	jne	SHORT $LN47@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	DWORD PTR [rax+32], 0
	je	SHORT $LN47@ms64_param

; 330  :                     DebugMsg(("ms64_param(%s, param=%u): MT_PTR, type error, psize=%u\n", proc->sym.name, index, psize ));

	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11213
	call	DoDebugMsg

; 331  :                     EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN47@ms64_param:

; 332  :                 }
; 333  :                 switch ( psize ) {

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR tv283[rsp], eax
	cmp	DWORD PTR tv283[rsp], 1
	je	SHORT $LN48@ms64_param
	cmp	DWORD PTR tv283[rsp], 2
	je	SHORT $LN49@ms64_param
	cmp	DWORD PTR tv283[rsp], 4
	je	SHORT $LN50@ms64_param
	jmp	SHORT $LN51@ms64_param
$LN48@ms64_param:

; 334  :                 case 1:   i = T_BYTE; break;

	mov	DWORD PTR i$[rsp], 205			; 000000cdH
	jmp	SHORT $LN2@ms64_param
$LN49@ms64_param:

; 335  :                 case 2:   i = T_WORD; break;

	mov	DWORD PTR i$[rsp], 207			; 000000cfH
	jmp	SHORT $LN2@ms64_param
$LN50@ms64_param:

; 336  :                 case 4:   i = T_DWORD; break;

	mov	DWORD PTR i$[rsp], 209			; 000000d1H
	jmp	SHORT $LN2@ms64_param
$LN51@ms64_param:

; 337  :                 default:  i = T_QWORD; break;

	mov	DWORD PTR i$[rsp], 213			; 000000d5H
$LN2@ms64_param:

; 338  :                 }
; 339  :                 AddLineQueueX( " mov %r ptr [%r+%u], %s", i, T_RSP, NUMQUAL index*8, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, eax
	mov	r8d, 119				; 00000077H
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG11218
	call	AddLineQueueX
$LN45@ms64_param:

; 340  :             }
; 341  :             DebugMsg(("ms64_param(%s, param=%u): MT_EMPTY size.p=%u flags=%X\n", proc->sym.name, index, psize, *regs_used ));

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11219
	call	DoDebugMsg
	jmp	$LN42@ms64_param
$LN41@ms64_param:

; 342  : 
; 343  :         } else if ( opnd->kind == EXPR_FLOAT  ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 3
	jne	$LN52@ms64_param

; 344  : 
; 345  :             if ( param->sym.mem_type == MT_REAL8 ) {

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 39			; 00000027H
	jne	SHORT $LN54@ms64_param

; 346  :                 AddLineQueueX( " mov %r ptr [%r+%u+0], %r (%s)", T_DWORD, T_RSP, NUMQUAL index*8, T_LOW32, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 237			; 000000edH
	mov	r9d, eax
	mov	r8d, 119				; 00000077H
	mov	edx, 209				; 000000d1H
	lea	rcx, OFFSET FLAT:$SG11224
	call	AddLineQueueX

; 347  :                 AddLineQueueX( " mov %r ptr [%r+%u+4], %r (%s)", T_DWORD, T_RSP, NUMQUAL index*8, T_HIGH32, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	DWORD PTR [rsp+32], 231			; 000000e7H
	mov	r9d, eax
	mov	r8d, 119				; 00000077H
	mov	edx, 209				; 000000d1H
	lea	rcx, OFFSET FLAT:$SG11225
	call	AddLineQueueX

; 348  :             } else

	jmp	SHORT $LN55@ms64_param
$LN54@ms64_param:

; 349  :                 AddLineQueueX( " mov %r ptr [%r+%u], %s", T_DWORD, T_RSP, NUMQUAL index*8, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 3
	mov	rcx, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, eax
	mov	r8d, 119				; 00000077H
	mov	edx, 209				; 000000d1H
	lea	rcx, OFFSET FLAT:$SG11226
	call	AddLineQueueX
$LN55@ms64_param:

; 350  : 
; 351  :         } else { /* it's a register or variable */

	jmp	$LN53@ms64_param
$LN52@ms64_param:

; 352  : 
; 353  :             if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	$LN56@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	test	eax, eax
	jne	$LN56@ms64_param

; 354  :                 size = SizeFromRegister( reg );

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN150@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN150@ms64_param:
	mov	ecx, DWORD PTR reg$[rsp]
	call	SizeFromRegister
	mov	DWORD PTR size$[rsp], eax

; 355  :                 if ( size == psize )

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	jne	SHORT $LN58@ms64_param

; 356  :                     i = reg;

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN151@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN151@ms64_param:
	mov	eax, DWORD PTR reg$[rsp]
	mov	DWORD PTR i$[rsp], eax
	jmp	$LN59@ms64_param
$LN58@ms64_param:

; 357  :                 else {
; 358  :                     if ( size > psize || ( size < psize && param->sym.mem_type == MT_PTR ) ) {

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	ja	SHORT $LN61@ms64_param
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	jae	SHORT $LN60@ms64_param
	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN60@ms64_param
$LN61@ms64_param:

; 359  :                         DebugMsg(("ms64_param(%s, param=%u): type error size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11233
	call	DoDebugMsg

; 360  :                         EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr

; 361  :                         psize = size;

	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR psize$[rsp], eax
$LN60@ms64_param:

; 362  :                     }
; 363  :                     switch ( psize ) {

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR tv347[rsp], eax
	cmp	DWORD PTR tv347[rsp], 1
	je	SHORT $LN62@ms64_param
	cmp	DWORD PTR tv347[rsp], 2
	je	SHORT $LN63@ms64_param
	cmp	DWORD PTR tv347[rsp], 4
	je	SHORT $LN64@ms64_param
	jmp	SHORT $LN65@ms64_param
$LN62@ms64_param:

; 364  :                     case 1:  i = T_AL;  break;

	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@ms64_param
$LN63@ms64_param:

; 365  :                     case 2:  i = T_AX;  break;

	mov	DWORD PTR i$[rsp], 9
	jmp	SHORT $LN4@ms64_param
$LN64@ms64_param:

; 366  :                     case 4:  i = T_EAX; break;

	mov	DWORD PTR i$[rsp], 17
	jmp	SHORT $LN4@ms64_param
$LN65@ms64_param:

; 367  :                     default: i = T_RAX; break;

	mov	DWORD PTR i$[rsp], 115			; 00000073H
$LN4@ms64_param:

; 368  :                     }
; 369  :                     *regs_used |= R0_USED;

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR regs_used$[rsp]
	mov	BYTE PTR [rcx], al
$LN59@ms64_param:

; 370  :                 }
; 371  :                 DebugMsg(("ms64_param(%s, param=%u): REG size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11238
	call	DoDebugMsg

; 372  :             } else {

	jmp	$LN57@ms64_param
$LN56@ms64_param:

; 373  :                 if ( opnd->mem_type == MT_EMPTY )

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+64], 192			; 000000c0H
	jne	SHORT $LN66@ms64_param

; 374  :                     size = ( opnd->instr == T_OFFSET ? 8 : 4 );

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+56], 241			; 000000f1H
	jne	SHORT $LN134@ms64_param
	mov	DWORD PTR tv369[rsp], 8
	jmp	SHORT $LN135@ms64_param
$LN134@ms64_param:
	mov	DWORD PTR tv369[rsp], 4
$LN135@ms64_param:
	mov	eax, DWORD PTR tv369[rsp]
	mov	DWORD PTR size$[rsp], eax
	jmp	SHORT $LN67@ms64_param
$LN66@ms64_param:

; 375  :                 else
; 376  :                     size = SizeFromMemtype( opnd->mem_type, USE64, opnd->type );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	r8, QWORD PTR [rax+96]
	mov	edx, 2
	mov	rax, QWORD PTR opnd$[rsp]
	mov	ecx, DWORD PTR [rax+64]
	call	SizeFromMemtype
	mov	DWORD PTR size$[rsp], eax
$LN67@ms64_param:

; 377  :                 DebugMsg(("ms64_param(%s, param=%u): MEM size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11241
	call	DoDebugMsg

; 378  :                 switch ( psize ) {

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR tv384[rsp], eax
	cmp	DWORD PTR tv384[rsp], 1
	je	SHORT $LN68@ms64_param
	cmp	DWORD PTR tv384[rsp], 2
	je	SHORT $LN69@ms64_param
	cmp	DWORD PTR tv384[rsp], 4
	je	SHORT $LN70@ms64_param
	jmp	SHORT $LN71@ms64_param
$LN68@ms64_param:

; 379  :                 case 1:  i = T_AL;  break;

	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN6@ms64_param
$LN69@ms64_param:

; 380  :                 case 2:  i = T_AX;  break;

	mov	DWORD PTR i$[rsp], 9
	jmp	SHORT $LN6@ms64_param
$LN70@ms64_param:

; 381  :                 case 4:  i = T_EAX; break;

	mov	DWORD PTR i$[rsp], 17
	jmp	SHORT $LN6@ms64_param
$LN71@ms64_param:

; 382  :                 default: i = T_RAX; break;

	mov	DWORD PTR i$[rsp], 115			; 00000073H
$LN6@ms64_param:

; 383  :                 }
; 384  :                 *regs_used |= R0_USED;

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR regs_used$[rsp]
	mov	BYTE PTR [rcx], al
$LN57@ms64_param:

; 385  :             }
; 386  : 
; 387  :             /* v2.11: no expansion if target type is a pointer */
; 388  :             if ( size > psize || ( size < psize && param->sym.mem_type == MT_PTR ) ) {

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	ja	SHORT $LN73@ms64_param
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	jae	SHORT $LN72@ms64_param
	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN72@ms64_param
$LN73@ms64_param:

; 389  :                 EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN72@ms64_param:

; 390  :             }
; 391  :             if ( size != psize ) {

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	je	$LN74@ms64_param

; 392  :                 if ( size == 4 ) {

	cmp	DWORD PTR size$[rsp], 4
	jne	SHORT $LN76@ms64_param

; 393  :                     if ( IS_SIGNED( opnd->mem_type ) )

	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN78@ms64_param

; 394  :                         AddLineQueueX( " movsxd %r, %s", i, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG11254
	call	AddLineQueueX
	jmp	SHORT $LN79@ms64_param
$LN78@ms64_param:

; 395  :                     else
; 396  :                         AddLineQueueX( " mov %r, %s", i, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG11255
	call	AddLineQueueX
$LN79@ms64_param:

; 397  :                 } else

	jmp	SHORT $LN77@ms64_param
$LN76@ms64_param:

; 398  :                     AddLineQueueX( " mov%sx %r, %s", IS_SIGNED( opnd->mem_type ) ? "s" : "z", i, paramvalue );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN136@ms64_param
	lea	rax, OFFSET FLAT:$SG11256
	mov	QWORD PTR tv414[rsp], rax
	jmp	SHORT $LN137@ms64_param
$LN136@ms64_param:
	lea	rax, OFFSET FLAT:$SG11257
	mov	QWORD PTR tv414[rsp], rax
$LN137@ms64_param:
	mov	r9, QWORD PTR paramvalue$[rsp]
	mov	r8d, DWORD PTR i$[rsp]
	mov	rdx, QWORD PTR tv414[rsp]
	lea	rcx, OFFSET FLAT:$SG11258
	call	AddLineQueueX
$LN77@ms64_param:

; 399  :             } else if ( opnd->kind != EXPR_REG || opnd->indirect == TRUE )

	jmp	SHORT $LN75@ms64_param
$LN74@ms64_param:
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	SHORT $LN81@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	cmp	eax, 1
	jne	SHORT $LN80@ms64_param
$LN81@ms64_param:

; 400  :                 AddLineQueueX( " mov %r, %s", i, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG11261
	call	AddLineQueueX
$LN80@ms64_param:
$LN75@ms64_param:

; 401  : 
; 402  :             AddLineQueueX( " mov [%r+%u], %r", T_RSP, NUMQUAL index*8, i );

	mov	eax, DWORD PTR index$[rsp]
	shl	eax, 3
	mov	r9d, DWORD PTR i$[rsp]
	mov	r8d, eax
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG11262
	call	AddLineQueueX
$LN53@ms64_param:
$LN42@ms64_param:

; 403  :         }

	jmp	$LN35@ms64_param
$LN34@ms64_param:

; 404  : 
; 405  :     } else if ( param->sym.mem_type == MT_REAL4 ||

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 35			; 00000023H
	je	SHORT $LN84@ms64_param
	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 39			; 00000027H
	jne	$LN82@ms64_param
$LN84@ms64_param:

; 406  :                param->sym.mem_type == MT_REAL8 ) {
; 407  : 
; 408  :         /* v2.04: check if argument is the correct XMM register already */
; 409  :         if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	$LN85@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	test	eax, eax
	jne	$LN85@ms64_param

; 410  : 
; 411  :             if ( GetValueSp( reg ) & OP_XMM ) {

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN152@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN152@ms64_param:
	movsxd	rax, DWORD PTR reg$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 32					; 00000020H
	test	eax, eax
	je	SHORT $LN86@ms64_param

; 412  :                 if ( reg == T_XMM0 + index )

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN153@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN153@ms64_param:
	mov	eax, DWORD PTR index$[rsp]
	add	eax, 40					; 00000028H
	cmp	DWORD PTR reg$[rsp], eax
	jne	SHORT $LN87@ms64_param

; 413  :                     DebugMsg(("ms64_param(%s, param=%u): argument optimized\n", proc->sym.name, index ));

	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11270
	call	DoDebugMsg
	jmp	SHORT $LN88@ms64_param
$LN87@ms64_param:

; 414  :                 else
; 415  :                     AddLineQueueX( " movq %r, %s", T_XMM0 + index, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 40					; 00000028H
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11271
	call	AddLineQueueX
$LN88@ms64_param:

; 416  :                 return( 1 );

	mov	eax, 1
	jmp	$LN1@ms64_param
$LN86@ms64_param:
$LN85@ms64_param:

; 417  :             }
; 418  :         }
; 419  :         if ( opnd->kind == EXPR_FLOAT ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 3
	jne	$LN89@ms64_param

; 420  :             *regs_used |= R0_USED;

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR regs_used$[rsp]
	mov	BYTE PTR [rcx], al

; 421  :             if ( param->sym.mem_type == MT_REAL4 ) {

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 35			; 00000023H
	jne	SHORT $LN91@ms64_param

; 422  :                 AddLineQueueX( " mov %r, %s", T_EAX, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, 17
	lea	rcx, OFFSET FLAT:$SG11276
	call	AddLineQueueX

; 423  :                 AddLineQueueX( " movd %r, %r", T_XMM0 + index, T_EAX );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 40					; 00000028H
	mov	r8d, 17
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11277
	call	AddLineQueueX

; 424  :             } else {

	jmp	SHORT $LN92@ms64_param
$LN91@ms64_param:

; 425  :                 AddLineQueueX( " mov %r, %r ptr %s", T_RAX, T_REAL8, paramvalue );

	mov	r9, QWORD PTR paramvalue$[rsp]
	mov	r8d, 215				; 000000d7H
	mov	edx, 115				; 00000073H
	lea	rcx, OFFSET FLAT:$SG11278
	call	AddLineQueueX

; 426  :                 AddLineQueueX( " movd %r, %r", T_XMM0 + index, T_RAX );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 40					; 00000028H
	mov	r8d, 115				; 00000073H
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11279
	call	AddLineQueueX
$LN92@ms64_param:

; 427  :             }
; 428  :         } else {

	jmp	SHORT $LN90@ms64_param
$LN89@ms64_param:

; 429  :             if ( param->sym.mem_type == MT_REAL4 )

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 35			; 00000023H
	jne	SHORT $LN93@ms64_param

; 430  :                 AddLineQueueX( " movd %r, %s", T_XMM0 + index, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 40					; 00000028H
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11282
	call	AddLineQueueX
	jmp	SHORT $LN94@ms64_param
$LN93@ms64_param:

; 431  :             else
; 432  :                 AddLineQueueX( " movq %r, %s", T_XMM0 + index, paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 40					; 00000028H
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11283
	call	AddLineQueueX
$LN94@ms64_param:
$LN90@ms64_param:

; 433  :         }
; 434  :     } else {

	jmp	$LN83@ms64_param
$LN82@ms64_param:

; 435  : 
; 436  :         if ( addr || psize > 8 ) { /* psize > 8 shouldn't happen! */

	movzx	eax, BYTE PTR addr$[rsp]
	test	eax, eax
	jne	SHORT $LN96@ms64_param
	cmp	DWORD PTR psize$[rsp], 8
	jbe	$LN95@ms64_param
$LN96@ms64_param:

; 437  :             if ( psize >= 4 )

	cmp	DWORD PTR psize$[rsp], 4
	jb	SHORT $LN97@ms64_param

; 438  :                 AddLineQueueX( " lea %r, %s", ms64_regs[index+2*4+(psize > 4 ? 4 : 0)], paramvalue );

	cmp	DWORD PTR psize$[rsp], 4
	jbe	SHORT $LN138@ms64_param
	mov	DWORD PTR tv494[rsp], 4
	jmp	SHORT $LN139@ms64_param
$LN138@ms64_param:
	mov	DWORD PTR tv494[rsp], 0
$LN139@ms64_param:
	mov	eax, DWORD PTR index$[rsp]
	mov	ecx, DWORD PTR tv494[rsp]
	lea	eax, DWORD PTR [rax+rcx+8]
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11288
	call	AddLineQueueX
	jmp	SHORT $LN98@ms64_param
$LN97@ms64_param:

; 439  :             else
; 440  :                 EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN98@ms64_param:

; 441  :             *regs_used |= ( 1 << ( index + RPAR_START ) );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 3
	mov	ecx, 1
	mov	DWORD PTR tv962[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv962[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR regs_used$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR regs_used$[rsp]
	mov	BYTE PTR [rcx], al

; 442  :             return( 1 );

	mov	eax, 1
	jmp	$LN1@ms64_param
$LN95@ms64_param:

; 443  :         }
; 444  :         /* register argument? */
; 445  :         if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	SHORT $LN99@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN99@ms64_param

; 446  :             reg = opnd->base_reg->tokval;

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	BYTE PTR $T2[rsp], 1
	mov	eax, DWORD PTR [rax+16]
	mov	DWORD PTR reg$[rsp], eax

; 447  :             size = SizeFromRegister( reg );

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN154@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN154@ms64_param:
	mov	ecx, DWORD PTR reg$[rsp]
	call	SizeFromRegister
	mov	DWORD PTR size$[rsp], eax
	jmp	$LN100@ms64_param
$LN99@ms64_param:

; 448  :         } else if ( opnd->kind == EXPR_CONST || opnd->kind == EXPR_FLOAT ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 0
	je	SHORT $LN103@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 3
	jne	SHORT $LN101@ms64_param
$LN103@ms64_param:

; 449  :             size = psize;

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR size$[rsp], eax
	jmp	$LN102@ms64_param
$LN101@ms64_param:

; 450  :         } else if ( opnd->mem_type != MT_EMPTY ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+64], 192			; 000000c0H
	je	SHORT $LN104@ms64_param

; 451  :             size = SizeFromMemtype( opnd->mem_type, USE64, opnd->type );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	r8, QWORD PTR [rax+96]
	mov	edx, 2
	mov	rax, QWORD PTR opnd$[rsp]
	mov	ecx, DWORD PTR [rax+64]
	call	SizeFromMemtype
	mov	DWORD PTR size$[rsp], eax
	jmp	$LN105@ms64_param
$LN104@ms64_param:

; 452  :         } else if ( opnd->kind == EXPR_ADDR && opnd->sym->state == SYM_UNDEFINED ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 1
	jne	SHORT $LN106@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	DWORD PTR [rax+32], 0
	jne	SHORT $LN106@ms64_param

; 453  :             DebugMsg1(("ms64_param(%s, param=%u): forward ref=%s, assumed size=%u\n", proc->sym.name, index, opnd->sym->name, psize ));

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	mov	ecx, DWORD PTR psize$[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	r9, QWORD PTR [rax+8]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11298
	call	DoDebugMsg1

; 454  :             size = psize;

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR size$[rsp], eax

; 455  :         } else

	jmp	SHORT $LN107@ms64_param
$LN106@ms64_param:

; 456  :             size = ( opnd->instr == T_OFFSET ? 8 : 4 );

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+56], 241			; 000000f1H
	jne	SHORT $LN140@ms64_param
	mov	DWORD PTR tv577[rsp], 8
	jmp	SHORT $LN141@ms64_param
$LN140@ms64_param:
	mov	DWORD PTR tv577[rsp], 4
$LN141@ms64_param:
	mov	eax, DWORD PTR tv577[rsp]
	mov	DWORD PTR size$[rsp], eax
$LN107@ms64_param:
$LN105@ms64_param:
$LN102@ms64_param:
$LN100@ms64_param:

; 457  : 
; 458  :         /* v2.11: allow argument extension, so long as the target isn't a pointer */
; 459  :         //if ( size != psize && param->sym.is_vararg == FALSE ) {
; 460  :         if ( size > psize || ( size < psize && param->sym.mem_type == MT_PTR ) ) {

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	ja	SHORT $LN109@ms64_param
	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	jae	SHORT $LN108@ms64_param
	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+36], 195			; 000000c3H
	jne	SHORT $LN108@ms64_param
$LN109@ms64_param:

; 461  :             DebugMsg(("ms64_param(%s, param=%u): type error size.p/a=%u/%u flags=%X\n", proc->sym.name, index, psize, size, *regs_used ));

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR [rsp+40], eax
	mov	eax, DWORD PTR size$[rsp]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR psize$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11301
	call	DoDebugMsg

; 462  :             EmitErr( INVOKE_ARGUMENT_TYPE_MISMATCH, index+1 );

	mov	eax, DWORD PTR index$[rsp]
	inc	eax
	mov	edx, eax
	mov	ecx, 145				; 00000091H
	call	EmitErr
$LN108@ms64_param:

; 463  :         }
; 464  :         /* v2.11: use parameter size to allow argument extension */
; 465  :         //switch ( size ) {
; 466  :         switch ( psize ) {

	mov	eax, DWORD PTR psize$[rsp]
	mov	DWORD PTR tv590[rsp], eax
	cmp	DWORD PTR tv590[rsp], 1
	je	SHORT $LN110@ms64_param
	cmp	DWORD PTR tv590[rsp], 2
	je	SHORT $LN111@ms64_param
	cmp	DWORD PTR tv590[rsp], 4
	je	SHORT $LN112@ms64_param
	jmp	SHORT $LN113@ms64_param
$LN110@ms64_param:

; 467  :         case 1: base =  0*4; break;

	mov	DWORD PTR base$[rsp], 0
	jmp	SHORT $LN8@ms64_param
$LN111@ms64_param:

; 468  :         case 2: base =  1*4; break;

	mov	DWORD PTR base$[rsp], 4
	jmp	SHORT $LN8@ms64_param
$LN112@ms64_param:

; 469  :         case 4: base =  2*4; break;

	mov	DWORD PTR base$[rsp], 8
	jmp	SHORT $LN8@ms64_param
$LN113@ms64_param:

; 470  :         default:base =  3*4; break;

	mov	DWORD PTR base$[rsp], 12
$LN8@ms64_param:

; 471  :         }
; 472  :         /* optimization if the register holds the value already */
; 473  :         if ( opnd->kind == EXPR_REG && opnd->indirect == FALSE ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	$LN114@ms64_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	test	eax, eax
	jne	$LN114@ms64_param

; 474  :             if ( GetValueSp( reg ) & OP_R ) {

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN155@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN155@ms64_param:
	movsxd	rax, DWORD PTR reg$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax]
	and	eax, 15
	test	eax, eax
	je	$LN115@ms64_param

; 475  :                 if ( ms64_regs[index+base] == reg ) {

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN156@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN156@ms64_param:
	mov	eax, DWORD PTR base$[rsp]
	mov	ecx, DWORD PTR index$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	edx, DWORD PTR reg$[rsp]
	cmp	DWORD PTR [rcx+rax*4], edx
	jne	SHORT $LN116@ms64_param

; 476  :                     DebugMsg(("ms64_param(%s, param=%u): argument optimized\n", proc->sym.name, index ));

	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11309
	call	DoDebugMsg

; 477  :                     return( 1 );

	mov	eax, 1
	jmp	$LN1@ms64_param
$LN116@ms64_param:

; 478  :                 }
; 479  :                 i = GetRegNo( reg );

	cmp	BYTE PTR $T2[rsp], 0
	jne	SHORT $LN157@ms64_param
	lea	rcx, OFFSET FLAT:ms64_param$rtcName$0
	call	_RTC_UninitUse
$LN157@ms64_param:
	movsxd	rax, DWORD PTR reg$[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	mov	DWORD PTR i$[rsp], eax

; 480  :                 if ( REGPAR_WIN64 & ( 1 << i ) ) {

	mov	eax, DWORD PTR i$[rsp]
	mov	ecx, 1
	mov	DWORD PTR tv1003[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1003[rsp]
	shl	eax, cl
	and	eax, 774				; 00000306H
	test	eax, eax
	je	SHORT $LN117@ms64_param

; 481  :                     i = GetParmIndex( i );

	cmp	DWORD PTR i$[rsp], 8
	jl	SHORT $LN142@ms64_param
	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 6
	mov	DWORD PTR tv628[rsp], eax
	jmp	SHORT $LN143@ms64_param
$LN142@ms64_param:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR tv628[rsp], eax
$LN143@ms64_param:
	mov	eax, DWORD PTR tv628[rsp]
	mov	DWORD PTR i$[rsp], eax

; 482  :                     if ( *regs_used & ( 1 << ( i + RPAR_START ) ) )

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	ecx, DWORD PTR i$[rsp]
	add	ecx, 3
	mov	edx, 1
	shl	edx, cl
	mov	ecx, edx
	and	eax, ecx
	test	eax, eax
	je	SHORT $LN118@ms64_param

; 483  :                         EmitErr( REGISTER_VALUE_OVERWRITTEN_BY_INVOKE );

	mov	ecx, 165				; 000000a5H
	call	EmitErr
$LN118@ms64_param:
$LN117@ms64_param:
$LN115@ms64_param:
$LN114@ms64_param:

; 484  :                 }
; 485  :             }
; 486  :         }
; 487  :         /* v2.11: allow argument extension */
; 488  :         if ( size < psize )

	mov	eax, DWORD PTR psize$[rsp]
	cmp	DWORD PTR size$[rsp], eax
	jae	$LN119@ms64_param

; 489  :             if ( size == 4 ) {

	cmp	DWORD PTR size$[rsp], 4
	jne	SHORT $LN121@ms64_param

; 490  :                 if ( IS_SIGNED( opnd->mem_type ) )

	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN123@ms64_param

; 491  :                     AddLineQueueX( " movsxd %r, %s", ms64_regs[index+base], paramvalue );

	mov	eax, DWORD PTR base$[rsp]
	mov	ecx, DWORD PTR index$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11318
	call	AddLineQueueX
	jmp	SHORT $LN124@ms64_param
$LN123@ms64_param:

; 492  :                 else
; 493  :                     AddLineQueueX( " mov %r, %s", ms64_regs[index+2*4], paramvalue );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 8
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11319
	call	AddLineQueueX
$LN124@ms64_param:

; 494  :             } else

	jmp	SHORT $LN122@ms64_param
$LN121@ms64_param:

; 495  :                 AddLineQueueX( " mov%sx %r, %s", IS_SIGNED( opnd->mem_type ) ? "s" : "z", ms64_regs[index+base], paramvalue );

	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+64]
	and	eax, 192				; 000000c0H
	cmp	eax, 64					; 00000040H
	jne	SHORT $LN144@ms64_param
	lea	rax, OFFSET FLAT:$SG11320
	mov	QWORD PTR tv663[rsp], rax
	jmp	SHORT $LN145@ms64_param
$LN144@ms64_param:
	lea	rax, OFFSET FLAT:$SG11321
	mov	QWORD PTR tv663[rsp], rax
$LN145@ms64_param:
	mov	eax, DWORD PTR base$[rsp]
	mov	ecx, DWORD PTR index$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	r9, QWORD PTR paramvalue$[rsp]
	mov	r8d, DWORD PTR [rcx+rax*4]
	mov	rdx, QWORD PTR tv663[rsp]
	lea	rcx, OFFSET FLAT:$SG11322
	call	AddLineQueueX
$LN122@ms64_param:
	jmp	$LN120@ms64_param
$LN119@ms64_param:

; 496  :         else{
; 497  :           /* v2.12 added by habran : if parametar  is zero use 'xor reg,reg' instead of 'mov reg,0' */
; 498  :           if ((!strcasecmp(paramvalue, "0") || (!strcasecmp(paramvalue, "NULL")) || (!strcasecmp(paramvalue, "FALSE"))))  {

	lea	rdx, OFFSET FLAT:$SG11326
	mov	rcx, QWORD PTR paramvalue$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	je	SHORT $LN127@ms64_param
	lea	rdx, OFFSET FLAT:$SG11327
	mov	rcx, QWORD PTR paramvalue$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	je	SHORT $LN127@ms64_param
	lea	rdx, OFFSET FLAT:$SG11328
	mov	rcx, QWORD PTR paramvalue$[rsp]
	call	QWORD PTR __imp__stricmp
	test	eax, eax
	jne	$LN125@ms64_param
$LN127@ms64_param:

; 499  :             if (ms64_regs[index + base] > T_R9D) index -= 4;

	mov	eax, DWORD PTR base$[rsp]
	mov	ecx, DWORD PTR index$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	cmp	DWORD PTR [rcx+rax*4], 108		; 0000006cH
	jle	SHORT $LN128@ms64_param
	mov	eax, DWORD PTR index$[rsp]
	sub	eax, 4
	mov	DWORD PTR index$[rsp], eax
$LN128@ms64_param:

; 500  :             AddLineQueueX(" xor %r, %r", ms64_regs[index + base], ms64_regs[index + base]);

	mov	eax, DWORD PTR base$[rsp]
	mov	ecx, DWORD PTR index$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	edx, DWORD PTR base$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	add	r8d, edx
	mov	edx, r8d
	movsxd	rdx, edx
	lea	r8, OFFSET FLAT:ms64_regs
	mov	QWORD PTR tv754[rsp], r8
	mov	r8d, DWORD PTR [rcx+rax*4]
	mov	rax, QWORD PTR tv754[rsp]
	mov	edx, DWORD PTR [rax+rdx*4]
	lea	rcx, OFFSET FLAT:$SG11330
	call	AddLineQueueX

; 501  :             return(1);

	mov	eax, 1
	jmp	$LN1@ms64_param

; 502  :           }

	jmp	SHORT $LN126@ms64_param
$LN125@ms64_param:

; 503  :           else 
; 504  :             AddLineQueueX(" mov %r, %s", ms64_regs[index + base], paramvalue);

	mov	eax, DWORD PTR base$[rsp]
	mov	ecx, DWORD PTR index$[rsp]
	add	ecx, eax
	mov	eax, ecx
	cdqe
	lea	rcx, OFFSET FLAT:ms64_regs
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR [rcx+rax*4]
	lea	rcx, OFFSET FLAT:$SG11331
	call	AddLineQueueX
$LN126@ms64_param:
$LN120@ms64_param:

; 505  :         }
; 506  :         *regs_used |= ( 1 << ( index + RPAR_START ) );

	mov	eax, DWORD PTR index$[rsp]
	add	eax, 3
	mov	ecx, 1
	mov	DWORD PTR tv1038[rsp], ecx
	movzx	ecx, al
	mov	eax, DWORD PTR tv1038[rsp]
	shl	eax, cl
	mov	rcx, QWORD PTR regs_used$[rsp]
	movzx	ecx, BYTE PTR [rcx]
	or	ecx, eax
	mov	eax, ecx
	mov	rcx, QWORD PTR regs_used$[rsp]
	mov	BYTE PTR [rcx], al

; 507  :         DebugMsg1(("ms64_param(%s, param=%u): size=%u flags=%X\n", proc->sym.name, index, size, *regs_used ));

	mov	rax, QWORD PTR regs_used$[rsp]
	movzx	eax, BYTE PTR [rax]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR size$[rsp]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11332
	call	DoDebugMsg1
$LN83@ms64_param:
$LN35@ms64_param:

; 508  :     }
; 509  :     return( 1 );

	mov	eax, 1
$LN1@ms64_param:

; 510  : }

	add	rsp, 176				; 000000b0H
	pop	rdi
	ret	0
ms64_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 48
numparams$ = 56
value$ = 64
ms64_fcend PROC

; 222  : {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 223  :     /* use <value>, which has been set by ms64_fcstart() */
; 224  :     if ( !( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) )

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	jne	SHORT $LN2@ms64_fcend

; 225  :         AddLineQueueX( " add %r, %d", T_RSP, value * 8 );

	mov	eax, DWORD PTR value$[rsp]
	shl	eax, 3
	mov	r8d, eax
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG11136
	call	AddLineQueueX
$LN2@ms64_fcend:

; 226  :     return;
; 227  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ms64_fcend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 48
numparams$ = 56
start$ = 64
tokenarray$ = 72
value$ = 80
ms64_fcstart PROC

; 193  : {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 194  :     /* v2.04: VARARG didn't work */
; 195  :     if ( proc->e.procinfo->has_vararg ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN5@ms64_fcsta

; 196  :         //numparams = ( tokenarray[start].token != T_FINAL ? 1 : 0 );
; 197  :         for ( numparams = 0; tokenarray[start].token != T_FINAL; start++ )

	mov	DWORD PTR numparams$[rsp], 0
	jmp	SHORT $LN4@ms64_fcsta
$LN2@ms64_fcsta:
	mov	eax, DWORD PTR start$[rsp]
	inc	eax
	mov	DWORD PTR start$[rsp], eax
$LN4@ms64_fcsta:
	movsxd	rax, DWORD PTR start$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@ms64_fcsta

; 198  :         if (tokenarray[start].token == T_COMMA) {

	movsxd	rax, DWORD PTR start$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN6@ms64_fcsta

; 199  :           numparams++;

	mov	eax, DWORD PTR numparams$[rsp]
	inc	eax
	mov	DWORD PTR numparams$[rsp], eax

; 200  :           sym_ReservedStack->hasinvoke = 1;  //added by habran

	mov	rax, QWORD PTR sym_ReservedStack
	mov	DWORD PTR [rax+16], 1
$LN6@ms64_fcsta:

; 201  :         }

	jmp	SHORT $LN2@ms64_fcsta
$LN3@ms64_fcsta:
$LN5@ms64_fcsta:

; 202  :     }
; 203  :     DebugMsg1(("ms64_fcstart(%s, numparams=%u) vararg=%u\n", proc->sym.name, numparams, proc->e.procinfo->has_vararg ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	mov	r9d, eax
	mov	r8d, DWORD PTR numparams$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11120
	call	DoDebugMsg1

; 204  :     if ( numparams < 4 )

	cmp	DWORD PTR numparams$[rsp], 4
	jge	SHORT $LN7@ms64_fcsta

; 205  :         numparams = 4;

	mov	DWORD PTR numparams$[rsp], 4
	jmp	SHORT $LN8@ms64_fcsta
$LN7@ms64_fcsta:

; 206  :     else if ( numparams & 1 )

	mov	eax, DWORD PTR numparams$[rsp]
	and	eax, 1
	test	eax, eax
	je	SHORT $LN9@ms64_fcsta

; 207  :         numparams++;

	mov	eax, DWORD PTR numparams$[rsp]
	inc	eax
	mov	DWORD PTR numparams$[rsp], eax
$LN9@ms64_fcsta:
$LN8@ms64_fcsta:

; 208  :     *value = numparams;

	mov	rax, QWORD PTR value$[rsp]
	mov	ecx, DWORD PTR numparams$[rsp]
	mov	DWORD PTR [rax], ecx

; 209  :     if ( ModuleInfo.win64_flags & W64F_AUTOSTACKSP ) {

	movzx	eax, BYTE PTR ModuleInfo+413
	and	eax, 2
	test	eax, eax
	je	SHORT $LN10@ms64_fcsta

; 210  :         if ( ( numparams * sizeof( uint_64 ) ) > sym_ReservedStack->value )

	movsxd	rax, DWORD PTR numparams$[rsp]
	shl	rax, 3
	mov	rcx, QWORD PTR sym_ReservedStack
	movsxd	rcx, DWORD PTR [rcx+16]
	cmp	rax, rcx
	jbe	SHORT $LN12@ms64_fcsta

; 211  :             sym_ReservedStack->value = numparams * sizeof( uint_64 );

	movsxd	rax, DWORD PTR numparams$[rsp]
	shl	rax, 3
	mov	rcx, QWORD PTR sym_ReservedStack
	mov	DWORD PTR [rcx+16], eax
$LN12@ms64_fcsta:

; 212  :     } else

	jmp	SHORT $LN11@ms64_fcsta
$LN10@ms64_fcsta:

; 213  :         AddLineQueueX( " sub %r, %d", T_RSP, numparams * sizeof( uint_64 ) );

	movsxd	rax, DWORD PTR numparams$[rsp]
	shl	rax, 3
	mov	r8, rax
	mov	edx, 119				; 00000077H
	lea	rcx, OFFSET FLAT:$SG11127
	call	AddLineQueueX
$LN11@ms64_fcsta:

; 214  :     /* since Win64 fastcall doesn't push, it's a better/faster strategy to
; 215  :      * handle the arguments from left to right.
; 216  :      */
; 217  :     return( 0 );

	xor	eax, eax

; 218  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ms64_fcstart ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
opc$ = 64
qual$ = 68
i$ = 72
regs$ = 96
reg$ = 184
p$ = 232
psize$ = 240
buffer$6 = 272
sreg$7 = 404
__$ArrayPad$ = 416
proc$ = 448
index$ = 456
param$ = 464
addr$ = 472
opnd$ = 480
paramvalue$ = 488
r0used$ = 496
watc_param PROC

; 601  : {

	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 432				; 000001b0H
	mov	rdi, rsp
	mov	ecx, 108				; 0000006cH
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+448]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 602  :     int opc;
; 603  :     int qual;
; 604  :     int i;
; 605  :     char regs[64];
; 606  :     char *reg[4];
; 607  :     char *p;
; 608  :     int psize = SizeFromMemtype( param->sym.mem_type, USE_EMPTY, param->sym.type );

	mov	rax, QWORD PTR param$[rsp]
	mov	r8, QWORD PTR [rax+80]
	mov	edx, 254				; 000000feH
	mov	rax, QWORD PTR param$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	SizeFromMemtype
	mov	DWORD PTR psize$[rsp], eax

; 609  : 
; 610  :     DebugMsg1(("watc_param(%s, param=%u [name=%s, state=%u]),addr=%u: psize=%u\n", proc->sym.name, index, param->sym.name, param->sym.state, addr, psize ));

	movzx	eax, BYTE PTR addr$[rsp]
	mov	ecx, DWORD PTR psize$[rsp]
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR param$[rsp]
	mov	eax, DWORD PTR [rax+32]
	mov	DWORD PTR [rsp+32], eax
	mov	rax, QWORD PTR param$[rsp]
	mov	r9, QWORD PTR [rax+8]
	mov	r8d, DWORD PTR index$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11439
	call	DoDebugMsg1

; 611  :     if ( param->sym.state != SYM_TMACRO )

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+32], 10
	je	SHORT $LN8@watc_param

; 612  :         return( 0 );

	xor	eax, eax
	jmp	$LN1@watc_param
$LN8@watc_param:

; 613  :     DebugMsg1(("watc_param(%s): register param=%s\n", proc->sym.name, param->sym.string_ptr ));

	mov	rax, QWORD PTR param$[rsp]
	mov	r8, QWORD PTR [rax+16]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11441
	call	DoDebugMsg1

; 614  : 
; 615  :     fcscratch += CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR fcscratch
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fcscratch, eax

; 616  : 
; 617  :     /* the "name" might be a register pair */
; 618  : 
; 619  :     reg[0] = param->sym.string_ptr;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR param$[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	mov	QWORD PTR reg$[rsp+rax], rcx

; 620  :     reg[1] = NULL;

	mov	eax, 8
	imul	rax, rax, 1
	mov	QWORD PTR reg$[rsp+rax], 0

; 621  :     reg[2] = NULL;

	mov	eax, 8
	imul	rax, rax, 2
	mov	QWORD PTR reg$[rsp+rax], 0

; 622  :     reg[3] = NULL;

	mov	eax, 8
	imul	rax, rax, 3
	mov	QWORD PTR reg$[rsp+rax], 0

; 623  :     if ( strchr( reg[0], ':' ) ) {

	mov	eax, 8
	imul	rax, rax, 0
	mov	edx, 58					; 0000003aH
	mov	rcx, QWORD PTR reg$[rsp+rax]
	call	QWORD PTR __imp_strchr
	test	rax, rax
	je	$LN9@watc_param

; 624  :         strcpy( regs, reg[0] );

	mov	eax, 8
	imul	rax, rax, 0
	mov	rdx, QWORD PTR reg$[rsp+rax]
	lea	rcx, QWORD PTR regs$[rsp]
	call	strcpy

; 625  :         fcscratch += CurrWordSize;

	movzx	eax, BYTE PTR ModuleInfo+406
	mov	ecx, DWORD PTR fcscratch
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR fcscratch, eax

; 626  :         for ( p = regs, i = 0; i < 4; i++ ) {

	lea	rax, QWORD PTR regs$[rsp]
	mov	QWORD PTR p$[rsp], rax
	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@watc_param
$LN2@watc_param:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@watc_param:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@watc_param

; 627  :             reg[i] = p;

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	mov	QWORD PTR reg$[rsp+rax*8], rcx

; 628  :             p = strchr( p, ':' );

	mov	edx, 58					; 0000003aH
	mov	rcx, QWORD PTR p$[rsp]
	call	QWORD PTR __imp_strchr
	mov	QWORD PTR p$[rsp], rax

; 629  :             if ( p == NULL )

	cmp	QWORD PTR p$[rsp], 0
	jne	SHORT $LN10@watc_param

; 630  :                 break;

	jmp	SHORT $LN3@watc_param
$LN10@watc_param:

; 631  :             *p++ = NULLC;

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 0
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax

; 632  :             p++;

	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax

; 633  :         }

	jmp	$LN2@watc_param
$LN3@watc_param:
$LN9@watc_param:

; 634  :     }
; 635  : 
; 636  :     if ( addr ) {

	movzx	eax, BYTE PTR addr$[rsp]
	test	eax, eax
	je	$LN11@watc_param

; 637  :         if ( opnd->kind == T_REG || opnd->sym->state == SYM_STACK ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	je	SHORT $LN14@watc_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+80]
	cmp	DWORD PTR [rax+32], 5
	jne	SHORT $LN12@watc_param
$LN14@watc_param:

; 638  :             opc = T_LEA;

	mov	DWORD PTR opc$[rsp], 629		; 00000275H

; 639  :             qual = T_NULL;

	mov	DWORD PTR qual$[rsp], 0

; 640  :         } else {

	jmp	SHORT $LN13@watc_param
$LN12@watc_param:

; 641  :             opc = T_MOV;

	mov	DWORD PTR opc$[rsp], 601		; 00000259H

; 642  :             qual = T_OFFSET;

	mov	DWORD PTR qual$[rsp], 241		; 000000f1H
$LN13@watc_param:

; 643  :         }
; 644  :         /* v2.05: filling of segment part added */
; 645  :         i = 0;

	mov	DWORD PTR i$[rsp], 0

; 646  :         if ( reg[1] != NULL ) {

	mov	eax, 8
	imul	rax, rax, 1
	cmp	QWORD PTR reg$[rsp+rax], 0
	je	$LN15@watc_param

; 647  :             char buffer[128];
; 648  :             short sreg;
; 649  :             if ( sreg = GetSegmentPart( opnd, buffer, paramvalue ) )

	mov	r8, QWORD PTR paramvalue$[rsp]
	lea	rdx, QWORD PTR buffer$6[rsp]
	mov	rcx, QWORD PTR opnd$[rsp]
	call	GetSegmentPart
	mov	WORD PTR sreg$7[rsp], ax
	movsx	eax, WORD PTR sreg$7[rsp]
	test	eax, eax
	je	SHORT $LN16@watc_param

; 650  :                 AddLineQueueX( "%r %s, %r", T_MOV, reg[0],  sreg );

	movsx	eax, WORD PTR sreg$7[rsp]
	mov	ecx, 8
	imul	rcx, rcx, 0
	mov	r9d, eax
	mov	r8, QWORD PTR reg$[rsp+rcx]
	mov	edx, 601				; 00000259H
	lea	rcx, OFFSET FLAT:$SG11451
	call	AddLineQueueX
	jmp	SHORT $LN17@watc_param
$LN16@watc_param:

; 651  :             else
; 652  :                 AddLineQueueX( "%r %s, %s", T_MOV, reg[0],  buffer );

	mov	eax, 8
	imul	rax, rax, 0
	lea	r9, QWORD PTR buffer$6[rsp]
	mov	r8, QWORD PTR reg$[rsp+rax]
	mov	edx, 601				; 00000259H
	lea	rcx, OFFSET FLAT:$SG11452
	call	AddLineQueueX
$LN17@watc_param:

; 653  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN15@watc_param:

; 654  :         }
; 655  :         AddLineQueueX( "%r %s, %r %s", opc, reg[i], qual, paramvalue );

	movsxd	rax, DWORD PTR i$[rsp]
	mov	rcx, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR qual$[rsp]
	mov	r8, QWORD PTR reg$[rsp+rax*8]
	mov	edx, DWORD PTR opc$[rsp]
	lea	rcx, OFFSET FLAT:$SG11453
	call	AddLineQueueX

; 656  :         return( 1 );

	mov	eax, 1
	jmp	$LN1@watc_param
$LN11@watc_param:

; 657  :     }
; 658  :     for ( i = 3; i >= 0; i-- ) {

	mov	DWORD PTR i$[rsp], 3
	jmp	SHORT $LN7@watc_param
$LN5@watc_param:
	mov	eax, DWORD PTR i$[rsp]
	dec	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@watc_param:
	cmp	DWORD PTR i$[rsp], 0
	jl	$LN6@watc_param

; 659  :         if ( reg[i] ) {

	movsxd	rax, DWORD PTR i$[rsp]
	cmp	QWORD PTR reg$[rsp+rax*8], 0
	je	$LN18@watc_param

; 660  :             if ( opnd->kind == EXPR_CONST ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 0
	jne	$LN19@watc_param

; 661  :                 if ( i > 0 )

	cmp	DWORD PTR i$[rsp], 0
	jle	SHORT $LN21@watc_param

; 662  :                     qual = T_LOWWORD;

	mov	DWORD PTR qual$[rsp], 238		; 000000eeH
	jmp	SHORT $LN22@watc_param
$LN21@watc_param:

; 663  :                 else if ( i == 0 && reg[1] != NULL )

	cmp	DWORD PTR i$[rsp], 0
	jne	SHORT $LN23@watc_param
	mov	eax, 8
	imul	rax, rax, 1
	cmp	QWORD PTR reg$[rsp+rax], 0
	je	SHORT $LN23@watc_param

; 664  :                     qual = T_HIGHWORD;

	mov	DWORD PTR qual$[rsp], 232		; 000000e8H
	jmp	SHORT $LN24@watc_param
$LN23@watc_param:

; 665  :                 else
; 666  :                     qual = T_NULL;

	mov	DWORD PTR qual$[rsp], 0
$LN24@watc_param:
$LN22@watc_param:

; 667  :                 if ( qual != T_NULL )

	cmp	DWORD PTR qual$[rsp], 0
	je	SHORT $LN25@watc_param

; 668  :                     AddLineQueueX( "mov %s, %r (%s)", reg[i], qual, paramvalue );

	movsxd	rax, DWORD PTR i$[rsp]
	mov	r9, QWORD PTR paramvalue$[rsp]
	mov	r8d, DWORD PTR qual$[rsp]
	mov	rdx, QWORD PTR reg$[rsp+rax*8]
	lea	rcx, OFFSET FLAT:$SG11463
	call	AddLineQueueX
	jmp	SHORT $LN26@watc_param
$LN25@watc_param:

; 669  :                 else
; 670  :                     AddLineQueueX( "mov %s, %s", reg[i], paramvalue );

	movsxd	rax, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	rdx, QWORD PTR reg$[rsp+rax*8]
	lea	rcx, OFFSET FLAT:$SG11464
	call	AddLineQueueX
$LN26@watc_param:

; 671  :             } else if ( opnd->kind == EXPR_REG ) {

	jmp	$LN20@watc_param
$LN19@watc_param:
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	SHORT $LN27@watc_param

; 672  :                 AddLineQueueX( "mov %s, %s", reg[i], paramvalue );

	movsxd	rax, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	rdx, QWORD PTR reg$[rsp+rax*8]
	lea	rcx, OFFSET FLAT:$SG11467
	call	AddLineQueueX

; 673  :             } else {

	jmp	$LN28@watc_param
$LN27@watc_param:

; 674  :                 if ( i == 0 && reg[1] == NULL )

	cmp	DWORD PTR i$[rsp], 0
	jne	SHORT $LN29@watc_param
	mov	eax, 8
	imul	rax, rax, 1
	cmp	QWORD PTR reg$[rsp+rax], 0
	jne	SHORT $LN29@watc_param

; 675  :                     AddLineQueueX( "mov %s, %s", reg[i], paramvalue );

	movsxd	rax, DWORD PTR i$[rsp]
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	rdx, QWORD PTR reg$[rsp+rax*8]
	lea	rcx, OFFSET FLAT:$SG11470
	call	AddLineQueueX
	jmp	SHORT $LN30@watc_param
$LN29@watc_param:

; 676  :                 else {
; 677  :                     if ( ModuleInfo.Ofssize )

	movzx	eax, BYTE PTR ModuleInfo+404
	test	eax, eax
	je	SHORT $LN31@watc_param

; 678  :                         qual = T_DWORD;

	mov	DWORD PTR qual$[rsp], 209		; 000000d1H
	jmp	SHORT $LN32@watc_param
$LN31@watc_param:

; 679  :                     else
; 680  :                         qual = T_WORD;

	mov	DWORD PTR qual$[rsp], 207		; 000000cfH
$LN32@watc_param:

; 681  :                     AddLineQueueX( "mov %s, %r %r %s[%u]", reg[i], qual, T_PTR, paramvalue, psize - ( (i+1) * ( 2 << ModuleInfo.Ofssize ) ) );

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	movzx	ecx, BYTE PTR ModuleInfo+404
	mov	edx, 2
	shl	edx, cl
	mov	ecx, edx
	imul	eax, ecx
	mov	ecx, DWORD PTR psize$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	movsxd	rcx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR paramvalue$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9d, 258				; 00000102H
	mov	r8d, DWORD PTR qual$[rsp]
	mov	rdx, QWORD PTR reg$[rsp+rcx*8]
	lea	rcx, OFFSET FLAT:$SG11473
	call	AddLineQueueX
$LN30@watc_param:
$LN28@watc_param:
$LN20@watc_param:
$LN18@watc_param:

; 682  :                 }
; 683  :             }
; 684  :         }
; 685  :     }

	jmp	$LN5@watc_param
$LN6@watc_param:

; 686  :     return( 1 );

	mov	eax, 1
$LN1@watc_param:

; 687  : }

	mov	rdi, rax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:watc_param$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rax, rdi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 432				; 000001b0H
	pop	rdi
	ret	0
watc_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 48
numparams$ = 56
value$ = 64
watc_fcend PROC

; 586  : {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 587  :     DebugMsg1(("watc_fcend(%s, %u, %u)\n", proc->sym.name, numparams, value ));

	mov	r9d, DWORD PTR value$[rsp]
	mov	r8d, DWORD PTR numparams$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11396
	call	DoDebugMsg1

; 588  :     if ( proc->e.procinfo->has_vararg ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+84]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN2@watc_fcend

; 589  :         AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL proc->e.procinfo->parasize + size_vararg );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+32]
	add	eax, DWORD PTR size_vararg
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:stackreg
	mov	r8d, eax
	mov	edx, DWORD PTR [rdx+rcx*4]
	lea	rcx, OFFSET FLAT:$SG11399
	call	AddLineQueueX
	jmp	SHORT $LN3@watc_fcend
$LN2@watc_fcend:

; 590  :     } else if ( fcscratch < proc->e.procinfo->parasize ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+32]
	cmp	DWORD PTR fcscratch, eax
	jae	SHORT $LN4@watc_fcend

; 591  :         AddLineQueueX( " add %r, %u", stackreg[ModuleInfo.Ofssize], NUMQUAL ( proc->e.procinfo->parasize - fcscratch ) );

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR fcscratch
	mov	eax, DWORD PTR [rax+32]
	sub	eax, ecx
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:stackreg
	mov	r8d, eax
	mov	edx, DWORD PTR [rdx+rcx*4]
	lea	rcx, OFFSET FLAT:$SG11401
	call	AddLineQueueX
$LN4@watc_fcend:
$LN3@watc_fcend:

; 592  :     }
; 593  :     return;
; 594  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
watc_fcend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 48
numparams$ = 56
start$ = 64
tokenarray$ = 72
value$ = 80
watc_fcstart PROC

; 579  : {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 580  :     DebugMsg1(("watc_fcstart(%s, %u, %u)\n", proc->sym.name, numparams, start ));

	mov	r9d, DWORD PTR start$[rsp]
	mov	r8d, DWORD PTR numparams$[rsp]
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11388
	call	DoDebugMsg1

; 581  :     return( 1 );

	mov	eax, 1

; 582  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
watc_fcstart ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
pst$ = 48
reg$1 = 56
size$2 = 60
tv143 = 64
proc$ = 96
index$ = 104
param$ = 112
addr$ = 120
opnd$ = 128
paramvalue$ = 136
r0used$ = 144
ms32_param PROC

; 148  : {

	mov	BYTE PTR [rsp+32], r9b
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 149  :     enum special_token const *pst;
; 150  : 
; 151  :     DebugMsg1(("ms32_param(proc=%s, ofs=%u, index=%u, param=%s) fcscratch=%u\n", proc->sym.name, proc->sym.Ofssize, index, param->sym.name, fcscratch ));

	mov	rax, QWORD PTR proc$[rsp]
	movzx	eax, BYTE PTR [rax+44]
	mov	ecx, DWORD PTR fcscratch
	mov	DWORD PTR [rsp+40], ecx
	mov	rcx, QWORD PTR param$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9d, DWORD PTR index$[rsp]
	mov	r8d, eax
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11081
	call	DoDebugMsg1

; 152  :     if ( param->sym.state != SYM_TMACRO )

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+32], 10
	je	SHORT $LN2@ms32_param

; 153  :         return( 0 );

	xor	eax, eax
	jmp	$LN1@ms32_param
$LN2@ms32_param:

; 154  :     if ( GetSymOfssize( &proc->sym ) == USE16 ) {

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, rax
	call	GetSymOfssize
	test	eax, eax
	jne	SHORT $LN3@ms32_param

; 155  :         pst = ms16_regs + fcscratch;

	movsxd	rax, DWORD PTR fcscratch
	lea	rcx, OFFSET FLAT:ms16_regs
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR pst$[rsp], rax

; 156  :         fcscratch++;

	mov	eax, DWORD PTR fcscratch
	inc	eax
	mov	DWORD PTR fcscratch, eax

; 157  :     } else {

	jmp	SHORT $LN4@ms32_param
$LN3@ms32_param:

; 158  :         fcscratch--;

	mov	eax, DWORD PTR fcscratch
	dec	eax
	mov	DWORD PTR fcscratch, eax

; 159  :         pst = ms32_regs + fcscratch;

	movsxd	rax, DWORD PTR fcscratch
	lea	rcx, OFFSET FLAT:ms32_regs
	lea	rax, QWORD PTR [rcx+rax*4]
	mov	QWORD PTR pst$[rsp], rax
$LN4@ms32_param:

; 160  :     }
; 161  :     if ( addr )

	movzx	eax, BYTE PTR addr$[rsp]
	test	eax, eax
	je	SHORT $LN5@ms32_param

; 162  :         AddLineQueueX( " lea %r, %s", *pst, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	rax, QWORD PTR pst$[rsp]
	mov	edx, DWORD PTR [rax]
	lea	rcx, OFFSET FLAT:$SG11087
	call	AddLineQueueX
	jmp	$LN6@ms32_param
$LN5@ms32_param:

; 163  :     else {
; 164  :         enum special_token reg = *pst;

	mov	rax, QWORD PTR pst$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR reg$1[rsp], eax

; 165  :         int size;
; 166  :         /* v2.08: adjust register if size of operand won't require the full register */
; 167  :         if ( ( opnd->kind != EXPR_CONST ) &&

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 0
	je	$LN7@ms32_param
	mov	rax, QWORD PTR param$[rsp]
	mov	r8, QWORD PTR [rax+80]
	mov	edx, 254				; 000000feH
	mov	rax, QWORD PTR param$[rsp]
	mov	ecx, DWORD PTR [rax+36]
	call	SizeFromMemtype
	mov	DWORD PTR size$2[rsp], eax
	mov	rax, QWORD PTR pst$[rsp]
	mov	ecx, DWORD PTR [rax]
	call	SizeFromRegister
	cmp	DWORD PTR size$2[rsp], eax
	jge	$LN7@ms32_param

; 168  :             ( size = SizeFromMemtype( param->sym.mem_type, USE_EMPTY, param->sym.type ) ) < SizeFromRegister( *pst ) ) {
; 169  :             if (( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jl	SHORT $LN9@ms32_param

; 170  :                 AddLineQueueX( " %s %r, %s", ( param->sym.mem_type & MT_SIGNED ) ? "movsx" : "movzx", reg, paramvalue );

	mov	rax, QWORD PTR param$[rsp]
	mov	eax, DWORD PTR [rax+36]
	and	eax, 64					; 00000040H
	test	eax, eax
	je	SHORT $LN15@ms32_param
	lea	rax, OFFSET FLAT:$SG11092
	mov	QWORD PTR tv143[rsp], rax
	jmp	SHORT $LN16@ms32_param
$LN15@ms32_param:
	lea	rax, OFFSET FLAT:$SG11093
	mov	QWORD PTR tv143[rsp], rax
$LN16@ms32_param:
	mov	r9, QWORD PTR paramvalue$[rsp]
	mov	r8d, DWORD PTR reg$1[rsp]
	mov	rdx, QWORD PTR tv143[rsp]
	lea	rcx, OFFSET FLAT:$SG11094
	call	AddLineQueueX

; 171  :             } else {

	jmp	SHORT $LN10@ms32_param
$LN9@ms32_param:

; 172  :                 /* this is currently always UNSIGNED */
; 173  :                 AddLineQueueX( " mov %r, %s", T_AL + GetRegNo( reg ), paramvalue );

	movsxd	rax, DWORD PTR reg$1[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	inc	eax
	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11095
	call	AddLineQueueX

; 174  :                 AddLineQueueX( " mov %r, 0", T_AH + GetRegNo( reg ) );

	movsxd	rax, DWORD PTR reg$1[rsp]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	movzx	eax, BYTE PTR [rcx+rax+10]
	add	eax, 5
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG11096
	call	AddLineQueueX
$LN10@ms32_param:

; 175  :             }
; 176  :         } else {

	jmp	SHORT $LN8@ms32_param
$LN7@ms32_param:

; 177  :             /* v2.08: optimization */
; 178  :             if ( opnd->kind == EXPR_REG && opnd->indirect == 0 && opnd->base_reg ) {

	mov	rax, QWORD PTR opnd$[rsp]
	cmp	DWORD PTR [rax+60], 2
	jne	SHORT $LN11@ms32_param
	mov	rax, QWORD PTR opnd$[rsp]
	mov	eax, DWORD PTR [rax+76]
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN11@ms32_param
	mov	rax, QWORD PTR opnd$[rsp]
	cmp	QWORD PTR [rax+24], 0
	je	SHORT $LN11@ms32_param

; 179  :                 if ( opnd->base_reg->tokval == reg )

	mov	rax, QWORD PTR opnd$[rsp]
	mov	rax, QWORD PTR [rax+24]
	mov	ecx, DWORD PTR reg$1[rsp]
	cmp	DWORD PTR [rax+16], ecx
	jne	SHORT $LN12@ms32_param

; 180  :                     return( 1 );

	mov	eax, 1
	jmp	SHORT $LN1@ms32_param
$LN12@ms32_param:
$LN11@ms32_param:

; 181  :             }
; 182  :             AddLineQueueX( " mov %r, %s", reg, paramvalue );

	mov	r8, QWORD PTR paramvalue$[rsp]
	mov	edx, DWORD PTR reg$1[rsp]
	lea	rcx, OFFSET FLAT:$SG11099
	call	AddLineQueueX
$LN8@ms32_param:
$LN6@ms32_param:

; 183  :         }
; 184  :     }
; 185  :     if ( *pst == T_AX )

	mov	rax, QWORD PTR pst$[rsp]
	cmp	DWORD PTR [rax], 9
	jne	SHORT $LN13@ms32_param

; 186  :         *r0used |= R0_USED;

	mov	rax, QWORD PTR r0used$[rsp]
	movzx	eax, BYTE PTR [rax]
	or	eax, 1
	mov	rcx, QWORD PTR r0used$[rsp]
	mov	BYTE PTR [rcx], al
$LN13@ms32_param:

; 187  :     return( 1 );

	mov	eax, 1
$LN1@ms32_param:

; 188  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
ms32_param ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
proc$ = 16
numparams$ = 24
value$ = 32
ms32_fcend PROC

; 141  : {

	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi

; 142  :     /* nothing to do */
; 143  :     return;
; 144  : }

	pop	rdi
	ret	0
ms32_fcend ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\invoke.c
_TEXT	SEGMENT
param$ = 32
proc$ = 64
numparams$ = 72
start$ = 80
tokenarray$ = 88
value$ = 96
ms32_fcstart PROC

; 127  : {

	mov	QWORD PTR [rsp+32], r9
	mov	DWORD PTR [rsp+24], r8d
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 128  :     struct dsym *param;
; 129  :     DebugMsg1(("ms32_fcstart(proc=%s, ofs=%u)\n", proc->sym.name, GetSymOfssize( &proc->sym ) ));

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, rax
	call	GetSymOfssize
	mov	r8d, eax
	mov	rax, QWORD PTR proc$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11053
	call	DoDebugMsg1

; 130  :     if ( GetSymOfssize( &proc->sym ) == USE16 )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rcx, rax
	call	GetSymOfssize
	test	eax, eax
	jne	SHORT $LN5@ms32_fcsta

; 131  :         return( 0 );

	xor	eax, eax
	jmp	SHORT $LN1@ms32_fcsta
$LN5@ms32_fcsta:

; 132  :     /* v2.07: count number of register params */
; 133  :     for ( param = proc->e.procinfo->paralist ; param ; param = param->nextparam )

	mov	rax, QWORD PTR proc$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR param$[rsp], rax
	jmp	SHORT $LN4@ms32_fcsta
$LN2@ms32_fcsta:
	mov	rax, QWORD PTR param$[rsp]
	mov	rax, QWORD PTR [rax+112]
	mov	QWORD PTR param$[rsp], rax
$LN4@ms32_fcsta:
	cmp	QWORD PTR param$[rsp], 0
	je	SHORT $LN3@ms32_fcsta

; 134  :         if ( param->sym.state == SYM_TMACRO )

	mov	rax, QWORD PTR param$[rsp]
	cmp	DWORD PTR [rax+32], 10
	jne	SHORT $LN6@ms32_fcsta

; 135  :             fcscratch++;

	mov	eax, DWORD PTR fcscratch
	inc	eax
	mov	DWORD PTR fcscratch, eax
$LN6@ms32_fcsta:
	jmp	SHORT $LN2@ms32_fcsta
$LN3@ms32_fcsta:

; 136  :     return( 1 );

	mov	eax, 1
$LN1@ms32_fcsta:

; 137  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ms32_fcstart ENDP
_TEXT	ENDS
END
