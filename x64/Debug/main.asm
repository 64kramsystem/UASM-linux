; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
_DATA	ENDS
_BSS	SEGMENT
$SG8046	DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
$SG8044	DB	'HJWASM', 00H
	ORG $+1
$SG8048	DB	'main: _findfirst(%s) failed', 0aH, 00H
	ORG $+3
$SG8049	DB	'main: fname=%s', 0aH, 00H
$SG8052	DB	'%s', 00H
	ORG $+5
$SG8054	DB	'main: exit, return code=%u', 0aH, 00H
_DATA	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	main
EXTRN	__imp_signal:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp_exit:PROC
EXTRN	__imp_getenv:PROC
EXTRN	memcpy:PROC
EXTRN	strcpy:PROC
EXTRN	DoDebugMsg:PROC
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	ErrnoStr:PROC
EXTRN	write_logo:PROC
EXTRN	AssembleModule:PROC
EXTRN	close_files:PROC
EXTRN	MsgGetEx:PROC
EXTRN	ParseCmdline:PROC
EXTRN	CmdlineFini:PROC
EXTRN	GetFNamePart:PROC
EXTRN	__imp__findclose:PROC
EXTRN	__imp__findfirst64i32:PROC
EXTRN	__imp__findnext64i32:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	Options:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$printf
pdata	ENDS
pdata	SEGMENT
$pdata$genfailure DD imagerel genfailure
	DD	imagerel genfailure+67
	DD	imagerel $unwind$genfailure
$pdata$main DD	imagerel $LN13
	DD	imagerel $LN13+673
	DD	imagerel $unwind$main
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
CONST	SEGMENT
main$rtcName$0 DB 06eH
	DB	075H
	DB	06dH
	DB	041H
	DB	072H
	DB	067H
	DB	073H
	DB	00H
main$rtcName$1 DB 066H
	DB	069H
	DB	06eH
	DB	066H
	DB	06fH
	DB	00H
	ORG $+2
main$rtcName$2 DB 066H
	DB	06eH
	DB	061H
	DB	06dH
	DB	065H
	DB	00H
	ORG $+10
main$rtcVarDesc DD 01d0H
	DD	0104H
	DQ	FLAT:main$rtcName$2
	DD	080H
	DD	0128H
	DQ	FLAT:main$rtcName$1
	DD	034H
	DD	04H
	DQ	FLAT:main$rtcName$0
	ORG $+144
main$rtcFrameData DD 03H
	DD	00H
	DQ	FLAT:main$rtcVarDesc
CONST	ENDS
xdata	SEGMENT
$unwind$genfailure DD 021c01H
	DD	070053209H
$unwind$main DD	033919H
	DD	0600111H
	DD	0700aH
	DD	imagerel __GSHandlerCheck
	DD	02f0H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\main.c
_TEXT	SEGMENT
pEnv$ = 32
numArgs$ = 52
numFiles$ = 68
rc$ = 72
fh$ = 80
pfn$ = 88
dirsize$ = 96
finfo$ = 128
fname$ = 464
__$ArrayPad$ = 752
argc$ = 784
argv$ = 792
main	PROC

; 62   : {

$LN13:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 768				; 00000300H
	mov	rdi, rsp
	mov	ecx, 192				; 000000c0H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+784]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 63   : 	char    *pEnv;
; 64   : 	int     numArgs = 0;

	mov	DWORD PTR numArgs$[rsp], 0

; 65   : 	int     numFiles = 0;

	mov	DWORD PTR numFiles$[rsp], 0

; 66   : 	int     rc = 0;

	mov	DWORD PTR rc$[rsp], 0

; 67   : 
; 68   : #if WILDCARDS
; 69   : 	/* v2.11: _findfirst/next/close() handle, should be of type intptr_t.
; 70   : 	* since this type isn't necessarily defined, type long is used as substitute.
; 71   : 	*/
; 72   : 
; 73   : #ifdef __UNIX__
; 74   : #if defined( intptr_t )
; 75   : 	intptr_t    fh; //fixed by ToutEnMasm intptr_t instead of long
; 76   : #else
; 77   : 	long        fh; // more compatible type (linux builds etc) when intptr_t isn't valid.
; 78   : #endif
; 79   : #else
; 80   : 	intptr_t    fh;
; 81   : #endif
; 82   : 
; 83   : 	const char *pfn;
; 84   : 	int     dirsize;
; 85   : 	struct  _finddata_t finfo;
; 86   : 	char    fname[FILENAME_MAX];
; 87   : #endif
; 88   : 
; 89   : #if 0 //def DEBUG_OUT    /* DebugMsg() cannot be used that early */
; 90   : 	int i;
; 91   : 	for ( i = 1; i < argc; i++ ) {
; 92   : 		printf("argv[%u]=>%s<\n", i, argv[i] );
; 93   : 	}
; 94   : #endif
; 95   : 
; 96   : #ifdef TRMEM
; 97   : 	tm_Init();
; 98   : #endif
; 99   : 
; 100  : 	pEnv = getenv("HJWASM");

	lea	rcx, OFFSET FLAT:$SG8044
	call	QWORD PTR __imp_getenv
	mov	QWORD PTR pEnv$[rsp], rax

; 101  : 	if (pEnv == NULL)

	cmp	QWORD PTR pEnv$[rsp], 0
	jne	SHORT $LN7@main

; 102  : 		pEnv = "";

	lea	rax, OFFSET FLAT:$SG8046
	mov	QWORD PTR pEnv$[rsp], rax
$LN7@main:

; 103  : 	argv[0] = pEnv;

	mov	eax, 8
	imul	rax, rax, 0
	mov	rcx, QWORD PTR argv$[rsp]
	mov	rdx, QWORD PTR pEnv$[rsp]
	mov	QWORD PTR [rcx+rax], rdx

; 104  : 
; 105  : #ifndef DEBUG_OUT
; 106  : 	signal(SIGSEGV, genfailure);
; 107  : #endif
; 108  : 
; 109  : #if CATCHBREAK
; 110  : 	signal(SIGBREAK, genfailure);

	lea	rdx, OFFSET FLAT:genfailure
	mov	ecx, 21
	call	QWORD PTR __imp_signal
$LN2@main:

; 111  : #else
; 112  : 	signal(SIGTERM, genfailure);
; 113  : #endif
; 114  : 	/* ParseCmdLine() returns NULL if no source file name has been found (anymore) */
; 115  : 	while (ParseCmdline((const char **)argv, &numArgs)) {

	lea	rdx, QWORD PTR numArgs$[rsp]
	mov	rcx, QWORD PTR argv$[rsp]
	call	ParseCmdline
	test	rax, rax
	je	$LN3@main

; 116  : 		numFiles++;

	mov	eax, DWORD PTR numFiles$[rsp]
	inc	eax
	mov	DWORD PTR numFiles$[rsp], eax

; 117  : 		write_logo();

	call	write_logo

; 118  : #if WILDCARDS
; 119  : 		if ((fh = _findfirst(Options.names[ASM], &finfo)) == -1) {

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:Options+32
	lea	rdx, QWORD PTR finfo$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp__findfirst64i32
	mov	QWORD PTR fh$[rsp], rax
	cmp	QWORD PTR fh$[rsp], -1
	jne	SHORT $LN8@main

; 120  : 			DebugMsg(("main: _findfirst(%s) failed\n", Options.names[ASM]));

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:Options+32
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, OFFSET FLAT:$SG8048
	call	DoDebugMsg

; 121  : 			EmitErr(CANNOT_OPEN_FILE, Options.names[ASM], ErrnoStr());

	call	ErrnoStr
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:Options+32
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	ecx, 106				; 0000006aH
	call	EmitErr

; 122  : 			break;

	jmp	$LN3@main
$LN8@main:

; 123  : 		}
; 124  : 		/* v2.12: _splitpath()/_makepath() removed */
; 125  : 		//_splitpath( Options.names[ASM], drv, dir, NULL, NULL );
; 126  : 		//DebugMsg(("main: _splitpath(%s): drv=\"%s\" dir=\"%s\"\n", Options.names[ASM], drv, dir ));
; 127  : 		pfn = GetFNamePart(Options.names[ASM]);

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:Options+32
	mov	rcx, QWORD PTR [rcx+rax]
	call	GetFNamePart
	mov	QWORD PTR pfn$[rsp], rax

; 128  : 		dirsize = pfn - Options.names[ASM];

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:Options+32
	mov	rax, QWORD PTR [rcx+rax]
	mov	rcx, QWORD PTR pfn$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR dirsize$[rsp], eax

; 129  : 		memcpy(fname, Options.names[ASM], dirsize);

	movsxd	rax, DWORD PTR dirsize$[rsp]
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:Options+32
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+rcx]
	lea	rcx, QWORD PTR fname$[rsp]
	call	memcpy
$LN6@main:

; 130  : 			do {
; 131  : 				/* v2.12: _splitpath()/_makepath() removed */
; 132  : 				//_makepath( fname, drv, dir, finfo.name, NULL );
; 133  : 				//DebugMsg(("main: _makepath(\"%s\", \"%s\", \"%s\")=\"%s\"\n", drv, dir, finfo.name, fname ));
; 134  : 				strcpy(&fname[dirsize], finfo.name);

	movsxd	rax, DWORD PTR dirsize$[rsp]
	lea	rax, QWORD PTR fname$[rsp+rax]
	lea	rdx, QWORD PTR finfo$[rsp+36]
	mov	rcx, rax
	call	strcpy

; 135  : 				DebugMsg(("main: fname=%s\n", fname));

	lea	rdx, QWORD PTR fname$[rsp]
	lea	rcx, OFFSET FLAT:$SG8049
	call	DoDebugMsg

; 136  : 				rc = AssembleModule(fname);  /* assemble 1 module */

	lea	rcx, QWORD PTR fname$[rsp]
	call	AssembleModule
	mov	DWORD PTR rc$[rsp], eax

; 137  : 			} while ((_findnext(fh, &finfo) != -1));

	lea	rdx, QWORD PTR finfo$[rsp]
	mov	rcx, QWORD PTR fh$[rsp]
	call	QWORD PTR __imp__findnext64i32
	cmp	eax, -1
	jne	SHORT $LN6@main

; 138  : 		    _findclose(fh);

	mov	rcx, QWORD PTR fh$[rsp]
	call	QWORD PTR __imp__findclose

; 139  : #else
; 140  : 		rc = AssembleModule( Options.names[ASM] );
; 141  : #endif
; 142  : 	};

	jmp	$LN2@main
$LN3@main:

; 143  : 	CmdlineFini();

	call	CmdlineFini

; 144  : 	if (numArgs == 0) {

	cmp	DWORD PTR numArgs$[rsp], 0
	jne	SHORT $LN9@main

; 145  : 		write_logo();

	call	write_logo

; 146  : 		printf("%s", MsgGetEx(MSG_USAGE));

	xor	ecx, ecx
	call	MsgGetEx
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG8052
	call	printf

; 147  : 	}

	jmp	SHORT $LN10@main
$LN9@main:

; 148  : 	else if (numFiles == 0)

	cmp	DWORD PTR numFiles$[rsp], 0
	jne	SHORT $LN11@main

; 149  : 		EmitError(NO_FILENAME_SPECIFIED);

	mov	ecx, 104				; 00000068H
	call	EmitError
$LN11@main:
$LN10@main:

; 150  : 
; 151  : #ifdef TRMEM
; 152  : 	tm_Fini();
; 153  : #endif
; 154  : 
; 155  : 	DebugMsg(("main: exit, return code=%u\n", 1 - rc));

	mov	eax, 1
	sub	eax, DWORD PTR rc$[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG8054
	call	DoDebugMsg

; 156  : 	return(1 - rc); /* zero if no errors */

	mov	eax, 1
	sub	eax, DWORD PTR rc$[rsp]

; 157  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:main$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 768				; 00000300H
	pop	rdi
	ret	0
main	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\main.c
_TEXT	SEGMENT
signo$ = 48
genfailure PROC

; 50   : {

	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+48]

; 51   : #if CATCHBREAK
; 52   :     if (signo != SIGBREAK)

	cmp	DWORD PTR signo$[rsp], 21
	je	SHORT $LN2@genfailure

; 53   : #else
; 54   :     if (signo != SIGTERM)
; 55   : #endif
; 56   :         EmitError( GENERAL_FAILURE );

	mov	ecx, 168				; 000000a8H
	call	EmitError
$LN2@genfailure:

; 57   :     close_files();

	call	close_files

; 58   :     exit( EXIT_FAILURE );

	mov	ecx, 1
	call	QWORD PTR __imp_exit
$LN3@genfailure:

; 59   : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
genfailure ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 950  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 957  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
	push	rdi

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
