; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	jmpenv
EXTRN	omf_init:PROC
EXTRN	coff_init:PROC
EXTRN	elf_init:PROC
EXTRN	bin_init:PROC
_BSS	SEGMENT
jmpenv	DB	0100H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	LinnumQueue:BYTE:010H
COMM	decoflags:BYTE
COMM	broadflags:BYTE
COMM	ModuleInfo:BYTE:0308H
COMM	Parse_Pass:DWORD
COMM	write_to_file:BYTE
_DATA	ENDS
_DATA	SEGMENT
$SG11729 DB	'_TEXT', 00H
?PrintEmptyLine@?1??WritePreprocessedLine@@9@9 DB 01H	; `WritePreprocessedLine'::`2'::PrintEmptyLine
	ORG $+1
$SG11730 DB	'.text', 00H
	ORG $+2
$SG11731 DB	'_DATA', 00H
	ORG $+2
$SG11732 DB	'.data', 00H
	ORG $+2
$SG11733 DB	'CONST', 00H
	ORG $+2
$SG11734 DB	'.rdata', 00H
	ORG $+1
$SG11735 DB	'_BSS', 00H
	ORG $+3
$SG11736 DB	'.bss', 00H
	ORG $+3
$SG11766 DB	'assemble.c', 00H
	ORG $+1
$SG11859 DB	'w', 00H
	ORG $+2
$SG11769 DB	'OutputByte: segment start loc changed from %Xh to %Xh', 0aH
	DB	00H
	ORG $+1
$SG11786 DB	'assemble.c', 00H
	ORG $+1
$SG11931 DB	'%s', 0aH, 00H
$SG11789 DB	'OutputByte: segment start loc changed from %Xh to %Xh', 0aH
	DB	00H
	ORG $+1
$SG11812 DB	'assemble.c', 00H
	ORG $+1
$SG11933 DB	0aH, 00H
	ORG $+2
$SG11816 DB	'OutputBytes: segment start loc changed from %Xh to %Xh', 0aH
	DB	00H
$SG11854 DB	'WriteModule enter', 0aH, 00H
	ORG $+1
$SG12095 DB	'rb', 00H
	ORG $+1
$SG11861 DB	'WriteModule: ext=%s, isproc=%u, weak=%u', 0aH, 00H
	ORG $+3
$SG11957 DB	'%r %s', 00H
	ORG $+2
$SG12099 DB	'wb', 00H
	ORG $+1
$SG11864 DB	'import ''%s''  %s.%s', 0aH, 00H
$SG12104 DB	'wb', 00H
	ORG $+1
$SG11866 DB	'WriteModule exit', 0aH, 00H
	ORG $+2
$SG12137 DB	'EXE', 00H
$SG11891 DB	'add_cmdline_tmacros enter', 0aH, 00H
	ORG $+1
$SG12138 DB	'BIN', 00H
$SG11892 DB	'add_cmdline_tmacros: found >%s<', 0aH, 00H
	ORG $+3
$SG12139 DB	'obj', 00H
$SG11897 DB	'add_cmdline_tmacros: name >%s< invalid', 0aH, 00H
$SG11908 DB	'add_incpaths: enter', 0aH, 00H
	ORG $+3
$SG11914 DB	'CmdlParamsInit(%u) enter', 0aH, 00H
	ORG $+2
$SG12141 DB	'lst', 00H
$SG11918 DB	'INCLUDE', 00H
$SG11919 DB	'CmdlParamsInit exit', 0aH, 00H
	ORG $+3
$SG11949 DB	'ModulePassInit() enter', 0aH, 00H
$SG12006 DB	'PassOneChecks: undefined symbol %s', 0aH, 00H
$SG12143 DB	'err', 00H
$SG12011 DB	'PassOneChecks: public for weak external skipped: %s', 0aH
	DB	00H
	ORG $+3
$SG12015 DB	'PassOneChecks: undefined segment %s', 0aH, 00H
	ORG $+3
$SG12012 DB	'PassOneChecks: invalid public attribute for %s [state=%u'
	DB	' weak=%u]', 0aH, 00H
	ORG $+1
$SG12227 DB	'%s', 0aH, 00H
$SG12033 DB	'PassOneChecks: removed unused externals: %u', 0aH, 00H
	ORG $+3
$SG12034 DB	'PassOneChecks: forward references:', 0aH, 00H
	ORG $+4
$SG12035 DB	'PassOneChecks: segm=%s, labels=%u forward refs=%u', 0aH, 00H
	ORG $+1
$SG12055 DB	'NULL', 00H
	ORG $+7
$SG12056 DB	'OnePass(%u) segments (current=%s):', 0aH, 00H
	ORG $+4
$SG12057 DB	'OnePass(%u): segm=%-8s typ=%X start=%8X max_ofs=%8X', 0aH
	DB	00H
	ORG $+3
$SG12061 DB	'OnePass(%u) cur/nxt=%X/%X src=%X.%u mlvl=%u: >%s<', 0aH, 00H
	ORG $+5
$SG12063 DB	'OnePass: force include of file: %s', 0aH, 00H
	ORG $+4
$SG12087 DB	'ReswTableInit: disable INCBIN + FASTCALL keywords', 0aH, 00H
	ORG $+5
$SG12094 DB	'open_files() enter', 0aH, 00H
	ORG $+4
$SG12097 DB	'open_files(): cannot open source file, fopen("%s") faile'
	DB	'd', 0aH, 00H
	ORG $+5
$SG12101 DB	'open_files(): cannot open object file, fopen("%s") faile'
	DB	'd', 0aH, 00H
	ORG $+5
$SG12102 DB	'open_files(): output, fopen("%s") ok', 0aH, 00H
	ORG $+2
$SG12159 DB	'SetFilenames("%s") enter', 0aH, 00H
	ORG $+6
$SG12165 DB	'SetFilenames: i=%u >%s<', 0aH, 00H
	ORG $+7
$SG12171 DB	'AssembleInit("%s") enter', 0aH, 00H
	ORG $+6
$SG12172 DB	'AssembleInit() exit', 0aH, 00H
	ORG $+3
$SG12203 DB	'AssembleModule("%s") enter', 0aH, 00H
	ORG $+4
$SG12206 DB	'*************', 0aH, 'pass %u', 0aH, '*************', 0aH
	DB	00H
	ORG $+3
$SG12208 DB	'AssembleModule(%u): errorcnt=%u', 0aH, 00H
	ORG $+7
$SG12209 DB	'AssembleModule(%u): segm=%-8s start=%8X max_ofs=%8X writ'
	DB	'ten=%X', 0aH, 00H
$SG12210 DB	'AssembleModule(%u): PhaseError=%u, prev_written=%X, curr'
	DB	'_written=%X', 0aH, 00H
	ORG $+3
$SG12213 DB	'size shrank from %X to %X in pass %u', 0aH, 00H
	ORG $+2
$SG12214 DB	'AssembleModule(%u): prepare for next pass', 0aH, 00H
	ORG $+5
$SG12225 DB	'AssembleModule: finished, cleanup', 0aH, 00H
	ORG $+5
$SG12229 DB	'AssembleModule exit', 0aH, 00H
_DATA	ENDS
CONST	SEGMENT
formatoptions DQ FLAT:bin_init
	DW	00H
	DB	'BIN', 00H
	ORG $+2
	DQ	FLAT:omf_init
	DW	00H
	DB	'OMF', 00H
	ORG $+2
	DQ	FLAT:coff_init
	DW	0e12H
	DB	'COFF', 00H
	ORG $+1
	DQ	FLAT:elf_init
	DW	0f00H
	DB	'ELF', 00H
	ORG $+2
cst	DB	05H
	DB	01H
	ORG $+6
	DQ	FLAT:$SG11729
	DQ	FLAT:$SG11730
	DB	05H
	DB	01H
	ORG $+6
	DQ	FLAT:$SG11731
	DQ	FLAT:$SG11732
	DB	05H
	DB	01H
	ORG $+6
	DQ	FLAT:$SG11733
	DQ	FLAT:$SG11734
	DB	04H
	DB	00H
	ORG $+6
	DQ	FLAT:$SG11735
	DQ	FLAT:$SG11736
stt	DD	01H
	DD	02H
	DD	02H
	DD	03H
CONST	ENDS
PUBLIC	__local_stdio_printf_options
PUBLIC	_vfprintf_l
PUBLIC	printf
PUBLIC	_vsnprintf_l
PUBLIC	_vsprintf_l
PUBLIC	sprintf
PUBLIC	OutputByte
PUBLIC	FillDataBytes
PUBLIC	OutputBytes
PUBLIC	AssembleModule
PUBLIC	SetMasm510
PUBLIC	close_files
PUBLIC	ConvertSectionName
PUBLIC	WritePreprocessedLine
PUBLIC	SetCurrOffset
PUBLIC	OutputBinBytes
EXTRN	__report_rangecheckfailure:PROC
EXTRN	__imp_isalpha:PROC
EXTRN	__imp_isdigit:PROC
EXTRN	__imp_isspace:PROC
EXTRN	__imp_isalnum:PROC
EXTRN	__imp_clock:PROC
EXTRN	__imp___acrt_iob_func:PROC
EXTRN	__imp_fclose:PROC
EXTRN	__imp_fopen:PROC
EXTRN	__imp_fwrite:PROC
EXTRN	__imp_remove:PROC
EXTRN	__imp_rewind:PROC
EXTRN	__imp___stdio_common_vfprintf:PROC
EXTRN	__imp___stdio_common_vsprintf:PROC
EXTRN	__imp__errno:PROC
EXTRN	__imp_getenv:PROC
EXTRN	memcmp:PROC
EXTRN	memcpy:PROC
EXTRN	memset:PROC
EXTRN	__imp_strchr:PROC
EXTRN	strcat:PROC
EXTRN	strcpy:PROC
EXTRN	strlen:PROC
EXTRN	__imp_strncpy:PROC
EXTRN	__imp__strupr:PROC
EXTRN	DoDebugMsg:PROC
EXTRN	DoDebugMsg1:PROC
EXTRN	Fatal:PROC
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	EmitWarn:PROC
EXTRN	ErrnoStr:PROC
EXTRN	WriteError:PROC
EXTRN	MemInit:PROC
EXTRN	MemFini:PROC
EXTRN	LclAlloc:PROC
EXTRN	GetLineNumber:PROC
EXTRN	GetFNamePart:PROC
EXTRN	GetExtPart:PROC
EXTRN	SearchFile:PROC
EXTRN	AddStringToIncludePath:PROC
EXTRN	InputInit:PROC
EXTRN	InputPassInit:PROC
EXTRN	InputFini:PROC
EXTRN	ClearSrcStack:PROC
EXTRN	set_curr_srcfile:PROC
EXTRN	GetFName:PROC
EXTRN	SymCreate:PROC
EXTRN	SymFind:PROC
EXTRN	SymInit:PROC
EXTRN	SymFini:PROC
EXTRN	SymPassInit:PROC
EXTRN	SymMakeAllSymbolsPublic:PROC
EXTRN	SymSetCmpFunc:PROC
EXTRN	sym_remove_table:PROC
EXTRN	ParseLine:PROC
EXTRN	ProcessFile:PROC
EXTRN	DisableKeyword:PROC
EXTRN	ResWordsInit:PROC
EXTRN	ResWordsFini:PROC
EXTRN	Tokenize:PROC
EXTRN	CondCheckOpen:PROC
EXTRN	CondInit:PROC
EXTRN	SegmentInit:PROC
EXTRN	SegmentFini:PROC
EXTRN	AssumeInit:PROC
EXTRN	ProcInit:PROC
EXTRN	ExprEvalInit:PROC
EXTRN	HllInit:PROC
EXTRN	HllCheckOpen:PROC
EXTRN	ContextInit:PROC
EXTRN	TypesInit:PROC
EXTRN	LabelInit:PROC
EXTRN	MacroInit:PROC
EXTRN	MacroFini:PROC
EXTRN	FreePubQueue:PROC
EXTRN	store_fixup:PROC
EXTRN	omf_set_filepos:PROC
EXTRN	omf_OutSelect:PROC
EXTRN	omf_FlushCurrSeg:PROC
EXTRN	FastpassInit:PROC
EXTRN	SkipSavedState:PROC
EXTRN	RestoreState:PROC
EXTRN	LstInit:PROC
EXTRN	LstWriteCRef:PROC
EXTRN	LstPrintf:PROC
EXTRN	LstNL:PROC
EXTRN	MsgGetEx:PROC
EXTRN	InternalError:PROC
EXTRN	LinnumInit:PROC
EXTRN	LinnumFini:PROC
EXTRN	QueueDeleteLinnum:PROC
EXTRN	SetCPU:PROC
EXTRN	AddLineQueueX:PROC
EXTRN	RunLineQueue:PROC
EXTRN	Mangle:PROC
EXTRN	DumpInstrStats:PROC
EXTRN	_RTC_AllocaHelper:PROC
EXTRN	_RTC_CheckStackVars:PROC
EXTRN	_RTC_CheckStackVars2:PROC
EXTRN	_RTC_InitBase:PROC
EXTRN	_RTC_Shutdown:PROC
EXTRN	__GSHandlerCheck:PROC
EXTRN	__chkstk:PROC
EXTRN	__security_check_cookie:PROC
EXTRN	_setjmp:PROC
EXTRN	Options:BYTE
EXTRN	MacroLevel:BYTE
EXTRN	SymTables:BYTE
EXTRN	LineStoreCurr:QWORD
EXTRN	StoreState:BYTE
EXTRN	UseSavedState:BYTE
EXTRN	LastCodeBufSize:DWORD
EXTRN	DefaultDir:BYTE
EXTRN	ModelToken:BYTE
EXTRN	__security_cookie:QWORD
_DATA	SEGMENT
COMM	?_OptionsStorage@?1??__local_stdio_printf_options@@9@9:QWORD							; `__local_stdio_printf_options'::`2'::_OptionsStorage
_DATA	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$__local_stdio_printf_options DD imagerel $LN3
	DD	imagerel $LN3+11
	DD	imagerel $unwind$__local_stdio_printf_options
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vfprintf_l DD imagerel $LN3
	DD	imagerel $LN3+90
	DD	imagerel $unwind$_vfprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$printf DD imagerel $LN3
	DD	imagerel $LN3+129
	DD	imagerel $unwind$printf
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsnprintf_l DD imagerel $LN5
	DD	imagerel $LN5+140
	DD	imagerel $unwind$_vsnprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$_vsprintf_l DD imagerel $LN3
	DD	imagerel $LN3+88
	DD	imagerel $unwind$_vsprintf_l
pdata	ENDS
;	COMDAT pdata
pdata	SEGMENT
$pdata$sprintf DD imagerel $LN3
	DD	imagerel $LN3+120
	DD	imagerel $unwind$sprintf
pdata	ENDS
pdata	SEGMENT
$pdata$OutputByte DD imagerel $LN11
	DD	imagerel $LN11+498
	DD	imagerel $unwind$OutputByte
$pdata$FillDataBytes DD imagerel $LN7
	DD	imagerel $LN7+88
	DD	imagerel $unwind$FillDataBytes
$pdata$OutputBytes DD imagerel $LN11
	DD	imagerel $LN11+539
	DD	imagerel $unwind$OutputBytes
$pdata$AssembleModule DD imagerel $LN31
	DD	imagerel $LN31+1227
	DD	imagerel $unwind$AssembleModule
$pdata$SetMasm510 DD imagerel $LN6
	DD	imagerel $LN6+197
	DD	imagerel $unwind$SetMasm510
$pdata$close_files DD imagerel $LN12
	DD	imagerel $LN12+502
	DD	imagerel $unwind$close_files
$pdata$ConvertSectionName DD imagerel $LN13
	DD	imagerel $LN13+466
	DD	imagerel $unwind$ConvertSectionName
$pdata$WritePreprocessedLine DD imagerel $LN11
	DD	imagerel $LN11+186
	DD	imagerel $unwind$WritePreprocessedLine
$pdata$SetCurrOffset DD imagerel $LN15
	DD	imagerel $LN15+318
	DD	imagerel $unwind$SetCurrOffset
$pdata$OutputBinBytes DD imagerel $LN14
	DD	imagerel $LN14+565
	DD	imagerel $unwind$OutputBinBytes
$pdata$WriteModule DD imagerel WriteModule
	DD	imagerel WriteModule+701
	DD	imagerel $unwind$WriteModule
$pdata$is_valid_identifier DD imagerel is_valid_identifier
	DD	imagerel is_valid_identifier+328
	DD	imagerel $unwind$is_valid_identifier
$pdata$add_cmdline_tmacros DD imagerel add_cmdline_tmacros
	DD	imagerel add_cmdline_tmacros+564
	DD	imagerel $unwind$add_cmdline_tmacros
$pdata$add_incpaths DD imagerel add_incpaths
	DD	imagerel add_incpaths+106
	DD	imagerel $unwind$add_incpaths
$pdata$CmdlParamsInit DD imagerel CmdlParamsInit
	DD	imagerel CmdlParamsInit+126
	DD	imagerel $unwind$CmdlParamsInit
$pdata$ModulePassInit DD imagerel ModulePassInit
	DD	imagerel ModulePassInit+647
	DD	imagerel $unwind$ModulePassInit
$pdata$PassOneChecks DD imagerel PassOneChecks
	DD	imagerel PassOneChecks+1382
	DD	imagerel $unwind$PassOneChecks
$pdata$OnePass DD imagerel OnePass
	DD	imagerel OnePass+927
	DD	imagerel $unwind$OnePass
$pdata$get_module_name DD imagerel get_module_name
	DD	imagerel get_module_name+408
	DD	imagerel $unwind$get_module_name
$pdata$ModuleInit DD imagerel ModuleInit
	DD	imagerel ModuleInit+257
	DD	imagerel $unwind$ModuleInit
$pdata$ReswTableInit DD imagerel ReswTableInit
	DD	imagerel ReswTableInit+105
	DD	imagerel $unwind$ReswTableInit
$pdata$open_files DD imagerel open_files
	DD	imagerel open_files+503
	DD	imagerel $unwind$open_files
$pdata$GetExt DD imagerel GetExt
	DD	imagerel GetExt+137
	DD	imagerel $unwind$GetExt
$pdata$SetFilenames DD imagerel SetFilenames
	DD	imagerel SetFilenames+676
	DD	imagerel $unwind$SetFilenames
$pdata$AssembleInit DD imagerel AssembleInit
	DD	imagerel AssembleInit+143
	DD	imagerel $unwind$AssembleInit
$pdata$AssembleFini DD imagerel AssembleFini
	DD	imagerel AssembleFini+121
	DD	imagerel $unwind$AssembleFini
pdata	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
_RTC_Shutdown.rtc$TMZ DQ FLAT:_RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
_RTC_InitBase.rtc$IMZ DQ FLAT:_RTC_InitBase
rtc$IMZ	ENDS
CONST	SEGMENT
add_cmdline_tmacros$rtcName$0 DB 05fH
	DB	05fH
	DB	024H
	DB	041H
	DB	06cH
	DB	06cH
	DB	06fH
	DB	063H
	DB	061H
	DB	050H
	DB	061H
	DB	064H
	DB	024H
	DB	00H
	ORG $+2
add_cmdline_tmacros$rtcVarDesc DD 058H
	DD	08H
	DQ	FLAT:add_cmdline_tmacros$rtcName$0
	ORG $+48
add_cmdline_tmacros$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:add_cmdline_tmacros$rtcVarDesc
SetFilenames$rtcName$0 DB 070H
	DB	061H
	DB	074H
	DB	068H
	DB	00H
	ORG $+3
SetFilenames$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:SetFilenames$rtcVarDesc
	ORG $+8
SetFilenames$rtcVarDesc DD 050H
	DD	0104H
	DQ	FLAT:SetFilenames$rtcName$0
CONST	ENDS
xdata	SEGMENT
$unwind$OutputByte DD 021d01H
	DD	070055209H
$unwind$FillDataBytes DD 022101H
	DD	07009320dH
$unwind$OutputBytes DD 022701H
	DD	0700f5213H
$unwind$AssembleModule DD 022401H
	DD	07006f20dH
$unwind$SetMasm510 DD 010501H
	DD	07005H
$unwind$close_files DD 021501H
	DD	070023206H
$unwind$ConvertSectionName DD 022801H
	DD	070105214H
$unwind$WritePreprocessedLine DD 021e01H
	DD	07006520aH
$unwind$SetCurrOffset DD 022c01H
	DD	070143218H
$unwind$OutputBinBytes DD 022201H
	DD	0700a520eH
$unwind$WriteModule DD 021e01H
	DD	07006920aH
$unwind$is_valid_identifier DD 021e01H
	DD	07006520aH
$unwind$add_cmdline_tmacros DD 025052c19H
	DD	010a230fH
	DD	070030011H
	DD	05002H
	DD	imagerel __GSHandlerCheck
	DD	078H
$unwind$add_incpaths DD 021501H
	DD	070025206H
$unwind$CmdlParamsInit DD 021c01H
	DD	070055209H
$unwind$ModulePassInit DD 021501H
	DD	070025206H
$unwind$PassOneChecks DD 021501H
	DD	07002d206H
$unwind$OnePass DD 021501H
	DD	07002b206H
$unwind$get_module_name DD 021501H
	DD	070027206H
$unwind$ModuleInit DD 021501H
	DD	070025206H
$unwind$ReswTableInit DD 021501H
	DD	070023206H
$unwind$open_files DD 021501H
	DD	070023206H
$unwind$GetExt DD 021c01H
	DD	070051209H
$unwind$SetFilenames DD 033619H
	DD	032010dH
	DD	07006H
	DD	imagerel __GSHandlerCheck
	DD	0180H
$unwind$AssembleInit DD 021e01H
	DD	07006320aH
$unwind$AssembleFini DD 021501H
	DD	070025206H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$sprintf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
sprintf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
sprintf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:sprintf$rtcName$0
	ORG $+48
sprintf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:sprintf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vsnprintf_l DD 022d01H
	DD	070157219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$printf DD 022d01H
	DD	070159219H
xdata	ENDS
;	COMDAT CONST
CONST	SEGMENT
printf$rtcName$0 DB 05fH
	DB	041H
	DB	072H
	DB	067H
	DB	04cH
	DB	069H
	DB	073H
	DB	074H
	DB	00H
	ORG $+7
printf$rtcVarDesc DD 038H
	DD	08H
	DQ	FLAT:printf$rtcName$0
	ORG $+48
printf$rtcFrameData DD 01H
	DD	00H
	DQ	FLAT:printf$rtcVarDesc
CONST	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$_vfprintf_l DD 022d01H
	DD	070155219H
xdata	ENDS
;	COMDAT xdata
xdata	SEGMENT
$unwind$__local_stdio_printf_options DD 010201H
	DD	07002H
xdata	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
i$ = 32
AssembleFini PROC

; 1388 : {

	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1389 :     int i;
; 1390 :     SegmentFini();

	call	SegmentFini

; 1391 :     SymFini();

	call	SymFini

; 1392 :     ResWordsFini();

	call	ResWordsFini

; 1393 : #ifdef DEBUG_OUT
; 1394 :     DumpInstrStats();

	call	DumpInstrStats

; 1395 :     MacroFini();

	call	MacroFini

; 1396 : #endif
; 1397 :     FreePubQueue();

	call	FreePubQueue

; 1398 : #if FASTMEM==0
; 1399 :     FreeLibQueue();
; 1400 :     ContextFini();
; 1401 :     HllFini();
; 1402 : #endif
; 1403 :     InputFini();

	call	InputFini

; 1404 :     close_files();

	call	close_files

; 1405 : 
; 1406 : #if FASTPASS
; 1407 : #if FASTMEM==0
; 1408 :     FreeLineStore();
; 1409 : #endif
; 1410 : #endif
; 1411 : 
; 1412 :     for ( i = 0; i < NUM_FILE_TYPES; i++ ) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@AssembleFi
$LN2@AssembleFi:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@AssembleFi:
	cmp	DWORD PTR i$[rsp], 4
	jge	SHORT $LN3@AssembleFi

; 1413 :         LclFree( CurrFName[i] );
; 1414 :         /* v2.05: make sure the pointer for ERR is cleared */
; 1415 :         CurrFName[i] = NULL;

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	QWORD PTR [rcx+rax*8], 0

; 1416 :     }

	jmp	SHORT $LN2@AssembleFi
$LN3@AssembleFi:

; 1417 :     MemFini();

	call	MemFini

; 1418 :     return;
; 1419 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
AssembleFini ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
source$ = 48
AssembleInit PROC

; 1348 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 1349 :     DebugMsg(("AssembleInit(\"%s\") enter\n", source ));

	mov	rdx, QWORD PTR source$[rsp]
	lea	rcx, OFFSET FLAT:$SG12171
	call	DoDebugMsg

; 1350 : 
; 1351 :     MemInit();

	call	MemInit

; 1352 :     //start_label   = NULL;
; 1353 :     //start_displ   = 0;
; 1354 :     write_to_file = FALSE;

	mov	BYTE PTR write_to_file, 0

; 1355 :     //GeneratedCode = 0;
; 1356 :     LinnumQueue.head = NULL;

	mov	QWORD PTR LinnumQueue, 0

; 1357 : 
; 1358 :     SetFilenames( source );

	mov	rcx, QWORD PTR source$[rsp]
	call	SetFilenames

; 1359 : 
; 1360 : #if FASTPASS
; 1361 :     FastpassInit();

	call	FastpassInit

; 1362 : #endif
; 1363 :     open_files();

	call	open_files

; 1364 : #if BUILD_TARGET
; 1365 :     get_os_include();
; 1366 : #endif
; 1367 :     ReswTableInit();

	call	ReswTableInit

; 1368 :     SymInit();

	call	SymInit

; 1369 :     InputInit();

	call	InputInit

; 1370 : 
; 1371 :     ModuleInit();

	call	ModuleInit

; 1372 :     CondInit();

	call	CondInit

; 1373 :     ExprEvalInit();

	call	ExprEvalInit

; 1374 :     LstInit();

	call	LstInit

; 1375 : 
; 1376 :     DebugMsg(("AssembleInit() exit\n"));

	lea	rcx, OFFSET FLAT:$SG12172
	call	DoDebugMsg

; 1377 :     return;
; 1378 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
AssembleInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
i$ = 32
fn$ = 40
ext$ = 48
path$ = 80
fn2$4 = 360
$T5 = 376
__$ArrayPad$ = 384
name$ = 416
SetFilenames PROC

; 1300 : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 400				; 00000190H
	mov	rdi, rsp
	mov	ecx, 100				; 00000064H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+416]
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rsp
	mov	QWORD PTR __$ArrayPad$[rsp], rax

; 1301 :     int i;
; 1302 :     const char *fn;
; 1303 :     char *ext;
; 1304 :     char path[ FILENAME_MAX ];
; 1305 : 
; 1306 :     DebugMsg(("SetFilenames(\"%s\") enter\n", name ));

	mov	rdx, QWORD PTR name$[rsp]
	lea	rcx, OFFSET FLAT:$SG12159
	call	DoDebugMsg

; 1307 : 
; 1308 :     /* set CurrFName[ASM] */
; 1309 :     CurrFName[ASM] = LclAlloc( strlen( name ) + 1 );

	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	inc	rax
	mov	rcx, rax
	call	LclAlloc
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:ModuleInfo+128
	mov	QWORD PTR [rdx+rcx], rax

; 1310 :     strcpy( CurrFName[ASM], name );

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, QWORD PTR [rcx+rax]
	call	strcpy

; 1311 : 
; 1312 :     /* set [OBJ], [ERR], [LST] */
; 1313 :     fn = GetFNamePart( name );

	mov	rcx, QWORD PTR name$[rsp]
	call	GetFNamePart
	mov	QWORD PTR fn$[rsp], rax

; 1314 :     for ( i = ASM+1; i < NUM_FILE_TYPES; i++ ) {

	mov	DWORD PTR i$[rsp], 1
	jmp	SHORT $LN4@SetFilenam
$LN2@SetFilenam:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@SetFilenam:
	cmp	DWORD PTR i$[rsp], 4
	jge	$LN3@SetFilenam

; 1315 :         if( Options.names[i] == NULL ) {

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:Options+32
	cmp	QWORD PTR [rcx+rax*8], 0
	jne	$LN5@SetFilenam

; 1316 :             path[0] = NULLC;

	mov	eax, 1
	imul	rax, rax, 0
	mov	QWORD PTR $T5[rsp], rax
	cmp	QWORD PTR $T5[rsp], 260			; 00000104H
	jae	SHORT $LN11@SetFilenam
	jmp	SHORT $LN12@SetFilenam
$LN11@SetFilenam:
	call	__report_rangecheckfailure
$LN12@SetFilenam:
	mov	rax, QWORD PTR $T5[rsp]
	mov	BYTE PTR path$[rsp+rax], 0

; 1317 :             if ( DefaultDir[i])

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:DefaultDir
	cmp	QWORD PTR [rcx+rax*8], 0
	je	SHORT $LN7@SetFilenam

; 1318 :                 strcpy( path, DefaultDir[i] );

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:DefaultDir
	mov	rdx, QWORD PTR [rcx+rax*8]
	lea	rcx, QWORD PTR path$[rsp]
	call	strcpy
$LN7@SetFilenam:

; 1319 :             strcat( path, fn );

	mov	rdx, QWORD PTR fn$[rsp]
	lea	rcx, QWORD PTR path$[rsp]
	call	strcat

; 1320 :             ext = GetExtPart( path );

	lea	rcx, QWORD PTR path$[rsp]
	call	GetExtPart
	mov	QWORD PTR ext$[rsp], rax

; 1321 :             *ext++  = '.';

	mov	rax, QWORD PTR ext$[rsp]
	mov	BYTE PTR [rax], 46			; 0000002eH
	mov	rax, QWORD PTR ext$[rsp]
	inc	rax
	mov	QWORD PTR ext$[rsp], rax

; 1322 :             strcpy( ext, GetExt( i ) );

	mov	ecx, DWORD PTR i$[rsp]
	call	GetExt
	mov	rdx, rax
	mov	rcx, QWORD PTR ext$[rsp]
	call	strcpy

; 1323 : 
; 1324 :         } else {

	jmp	$LN6@SetFilenam
$LN5@SetFilenam:

; 1325 :             /* filename has been set by cmdline option -Fo, -Fl or -Fr */
; 1326 :             const char *fn2;
; 1327 :             strcpy( path, Options.names[i] );

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:Options+32
	mov	rdx, QWORD PTR [rcx+rax*8]
	lea	rcx, QWORD PTR path$[rsp]
	call	strcpy

; 1328 :             fn2 = GetFNamePart( path );

	lea	rcx, QWORD PTR path$[rsp]
	call	GetFNamePart
	mov	QWORD PTR fn2$4[rsp], rax

; 1329 :             if( *fn2 == NULLC )

	mov	rax, QWORD PTR fn2$4[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN8@SetFilenam

; 1330 :                 strcpy( (char *)fn2, fn );

	mov	rdx, QWORD PTR fn$[rsp]
	mov	rcx, QWORD PTR fn2$4[rsp]
	call	strcpy
$LN8@SetFilenam:

; 1331 :             ext = GetExtPart( fn2 );

	mov	rcx, QWORD PTR fn2$4[rsp]
	call	GetExtPart
	mov	QWORD PTR ext$[rsp], rax

; 1332 :             if( *ext == NULLC ) {

	mov	rax, QWORD PTR ext$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN9@SetFilenam

; 1333 :                 *ext++  = '.';

	mov	rax, QWORD PTR ext$[rsp]
	mov	BYTE PTR [rax], 46			; 0000002eH
	mov	rax, QWORD PTR ext$[rsp]
	inc	rax
	mov	QWORD PTR ext$[rsp], rax

; 1334 :                 strcpy( ext, GetExt( i ) );

	mov	ecx, DWORD PTR i$[rsp]
	call	GetExt
	mov	rdx, rax
	mov	rcx, QWORD PTR ext$[rsp]
	call	strcpy
$LN9@SetFilenam:
$LN6@SetFilenam:

; 1335 :             }
; 1336 :         }
; 1337 :         DebugMsg(("SetFilenames: i=%u >%s<\n", i, path ));

	lea	r8, QWORD PTR path$[rsp]
	mov	edx, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:$SG12165
	call	DoDebugMsg

; 1338 :         CurrFName[i] = LclAlloc( strlen( path ) + 1 );

	lea	rcx, QWORD PTR path$[rsp]
	call	strlen
	inc	rax
	mov	rcx, rax
	call	LclAlloc
	movsxd	rcx, DWORD PTR i$[rsp]
	lea	rdx, OFFSET FLAT:ModuleInfo+128
	mov	QWORD PTR [rdx+rcx*8], rax

; 1339 :         strcpy( CurrFName[i], path );

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	lea	rdx, QWORD PTR path$[rsp]
	mov	rcx, QWORD PTR [rcx+rax*8]
	call	strcpy

; 1340 :     }

	jmp	$LN2@SetFilenam
$LN3@SetFilenam:
$LN10@SetFilenam:

; 1341 :     return;
; 1342 : }

	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:SetFilenames$rtcFrameData
	call	_RTC_CheckStackVars
	mov	rcx, QWORD PTR __$ArrayPad$[rsp]
	xor	rcx, rsp
	call	__security_check_cookie
	add	rsp, 400				; 00000190H
	pop	rdi
	ret	0
SetFilenames ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
tv64 = 0
type$ = 32
GetExt	PROC

; 1264 : {

	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 16
	mov	rdi, rsp
	mov	ecx, 4
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+32]

; 1265 :     switch ( type ) {

	mov	eax, DWORD PTR type$[rsp]
	mov	DWORD PTR tv64[rsp], eax
	cmp	DWORD PTR tv64[rsp], 1
	je	SHORT $LN4@GetExt
	cmp	DWORD PTR tv64[rsp], 2
	je	SHORT $LN9@GetExt
	cmp	DWORD PTR tv64[rsp], 3
	je	SHORT $LN10@GetExt
	jmp	SHORT $LN2@GetExt
$LN4@GetExt:

; 1266 :     case OBJ:
; 1267 : #if BIN_SUPPORT
; 1268 :         if ( Options.output_format == OFORMAT_BIN )

	cmp	DWORD PTR Options+160, 0
	jne	SHORT $LN5@GetExt

; 1269 : #if MZ_SUPPORT || PE_SUPPORT
; 1270 :             if ( Options.sub_format == SFORMAT_MZ
; 1271 : #if PE_SUPPORT
; 1272 :                 || Options.sub_format == SFORMAT_PE

	cmp	DWORD PTR Options+164, 1
	je	SHORT $LN8@GetExt
	cmp	DWORD PTR Options+164, 2
	jne	SHORT $LN6@GetExt
$LN8@GetExt:

; 1273 : #endif
; 1274 :                )
; 1275 :                 return( EXE_EXT );

	lea	rax, OFFSET FLAT:$SG12137
	jmp	SHORT $LN1@GetExt
	jmp	SHORT $LN7@GetExt
$LN6@GetExt:

; 1276 :             else
; 1277 : #endif
; 1278 :                 return( BIN_EXT );

	lea	rax, OFFSET FLAT:$SG12138
	jmp	SHORT $LN1@GetExt
$LN7@GetExt:
$LN5@GetExt:

; 1279 : #endif
; 1280 :         return( OBJ_EXT );

	lea	rax, OFFSET FLAT:$SG12139
	jmp	SHORT $LN1@GetExt
$LN9@GetExt:

; 1281 :     case LST:
; 1282 :         return( LST_EXT );

	lea	rax, OFFSET FLAT:$SG12141
	jmp	SHORT $LN1@GetExt
$LN10@GetExt:

; 1283 :     case ERR:
; 1284 :         return( ERR_EXT );

	lea	rax, OFFSET FLAT:$SG12143
	jmp	SHORT $LN1@GetExt
$LN2@GetExt:

; 1285 :     }
; 1286 :     return( NULL );

	xor	eax, eax
$LN1@GetExt:

; 1287 : }

	add	rsp, 16
	pop	rdi
	ret	0
GetExt	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
open_files PROC

; 1188 : {

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1189 :     /* open ASM file */
; 1190 :     DebugMsg(("open_files() enter\n" ));

	lea	rcx, OFFSET FLAT:$SG12094
	call	DoDebugMsg

; 1191 : 
; 1192 :     //memset( CurrFile, 0, sizeof( CurrFile ) );
; 1193 :     /* CurrFile[ASM] = fopen( CurrFName[ASM], "r" ); */
; 1194 :     CurrFile[ASM] = fopen( CurrFName[ASM], "rb" );

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	lea	rdx, OFFSET FLAT:$SG12095
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fopen
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:ModuleInfo+96
	mov	QWORD PTR [rdx+rcx], rax

; 1195 :     if( CurrFile[ASM] == NULL ) {

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN2@open_files

; 1196 :         DebugMsg(("open_files(): cannot open source file, fopen(\"%s\") failed\n", CurrFName[ASM] ));

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, OFFSET FLAT:$SG12097
	call	DoDebugMsg

; 1197 :         Fatal( CANNOT_OPEN_FILE, CurrFName[ASM], ErrnoStr() );

	call	ErrnoStr
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:ModuleInfo+128
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	ecx, 106				; 0000006aH
	call	Fatal
$LN2@open_files:

; 1198 :     }
; 1199 : 
; 1200 :     /* open OBJ file */
; 1201 :     if ( Options.syntax_check_only == FALSE ) {

	movzx	eax, BYTE PTR Options+188
	test	eax, eax
	jne	$LN3@open_files

; 1202 :         CurrFile[OBJ] = fopen( CurrFName[OBJ], "wb" );

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	lea	rdx, OFFSET FLAT:$SG12099
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fopen
	mov	ecx, 8
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:ModuleInfo+96
	mov	QWORD PTR [rdx+rcx], rax

; 1203 :         if( CurrFile[OBJ] == NULL ) {

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN4@open_files

; 1204 :             DebugMsg(("open_files(): cannot open object file, fopen(\"%s\") failed\n", CurrFName[OBJ] ));

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, OFFSET FLAT:$SG12101
	call	DoDebugMsg

; 1205 :             Fatal( CANNOT_OPEN_FILE, CurrFName[OBJ], ErrnoStr() );

	call	ErrnoStr
	mov	ecx, 8
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:ModuleInfo+128
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	ecx, 106				; 0000006aH
	call	Fatal
$LN4@open_files:

; 1206 :         }
; 1207 :         DebugMsg(("open_files(): output, fopen(\"%s\") ok\n", CurrFName[OBJ] ));

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, OFFSET FLAT:$SG12102
	call	DoDebugMsg
$LN3@open_files:

; 1208 :     }
; 1209 : 
; 1210 :     if( Options.write_listing ) {

	movzx	eax, BYTE PTR Options+137
	test	eax, eax
	je	SHORT $LN5@open_files

; 1211 :         CurrFile[LST] = fopen( CurrFName[LST], "wb" );

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	lea	rdx, OFFSET FLAT:$SG12104
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fopen
	mov	ecx, 8
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:ModuleInfo+96
	mov	QWORD PTR [rdx+rcx], rax

; 1212 :         if ( CurrFile[LST] == NULL )

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	jne	SHORT $LN6@open_files

; 1213 :             Fatal( CANNOT_OPEN_FILE, CurrFName[LST], ErrnoStr() );

	call	ErrnoStr
	mov	ecx, 8
	imul	rcx, rcx, 2
	lea	rdx, OFFSET FLAT:ModuleInfo+128
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	ecx, 106				; 0000006aH
	call	Fatal
$LN6@open_files:
$LN5@open_files:

; 1214 :     }
; 1215 :     return;
; 1216 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
open_files ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
ReswTableInit PROC

; 1164 : {

	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1165 :     ResWordsInit();

	call	ResWordsInit

; 1166 :     if ( Options.output_format == OFORMAT_OMF ) {

	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN2@ReswTableI

; 1167 :         /* DebugMsg(("InitAsm: disable IMAGEREL+SECTIONREL\n")); */
; 1168 :         /* for OMF, IMAGEREL and SECTIONREL are disabled */
; 1169 : #if IMAGERELSUPP
; 1170 :         DisableKeyword( T_IMAGEREL );

	mov	ecx, 233				; 000000e9H
	call	DisableKeyword

; 1171 : #endif
; 1172 : #if SECTIONRELSUPP
; 1173 :         DisableKeyword( T_SECTIONREL );

	mov	ecx, 243				; 000000f3H
	call	DisableKeyword
$LN2@ReswTableI:

; 1174 : #endif
; 1175 :     }
; 1176 : 
; 1177 :     if ( Options.strict_masm_compat == TRUE ) {

	movzx	eax, BYTE PTR Options+143
	cmp	eax, 1
	jne	SHORT $LN3@ReswTableI

; 1178 :         DebugMsg(("ReswTableInit: disable INCBIN + FASTCALL keywords\n"));

	lea	rcx, OFFSET FLAT:$SG12087
	call	DoDebugMsg

; 1179 :         DisableKeyword( T_INCBIN );

	mov	ecx, 444				; 000001bcH
	call	DisableKeyword

; 1180 :         DisableKeyword( T_FASTCALL );

	mov	ecx, 270				; 0000010eH
	call	DisableKeyword
$LN3@ReswTableI:

; 1181 :     }
; 1182 : 
; 1183 :     return;
; 1184 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
ReswTableInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
tv70 = 32
tv73 = 36
ModuleInit PROC

; 1138 : {

	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1139 :     ModuleInfo.sub_format = Options.sub_format;

	mov	eax, DWORD PTR Options+164
	mov	DWORD PTR ModuleInfo+372, eax

; 1140 :     ModuleInfo.fmtopt = &formatoptions[Options.output_format];

	movsxd	rax, DWORD PTR Options+160
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:formatoptions
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR ModuleInfo+344, rax

; 1141 :     ModuleInfo.CommentDataInCode = (Options.output_format == OFORMAT_OMF &&

	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN3@ModuleInit
	movzx	eax, BYTE PTR Options+128
	test	eax, eax
	jne	SHORT $LN3@ModuleInit
	mov	DWORD PTR tv70[rsp], 1
	jmp	SHORT $LN4@ModuleInit
$LN3@ModuleInit:
	mov	DWORD PTR tv70[rsp], 0
$LN4@ModuleInit:
	movzx	eax, BYTE PTR tv70[rsp]
	mov	BYTE PTR ModuleInfo+423, al

; 1142 :                          Options.no_comment_data_in_code_records == FALSE);
; 1143 :     ModuleInfo.g.error_count = 0;

	mov	DWORD PTR ModuleInfo, 0

; 1144 :     ModuleInfo.g.warning_count = 0;

	mov	DWORD PTR ModuleInfo+4, 0

; 1145 :     ModuleInfo.model = MODEL_NONE;

	mov	DWORD PTR ModuleInfo+360, 0

; 1146 :     /* ModuleInfo.distance = STACK_NONE; */
; 1147 :     ModuleInfo.ostype = OPSYS_DOS;

	mov	DWORD PTR ModuleInfo+368, 0

; 1148 :     ModuleInfo.emulator = (Options.floating_point == FPO_EMULATION);

	cmp	DWORD PTR Options+4, 1
	jne	SHORT $LN5@ModuleInit
	mov	DWORD PTR tv73[rsp], 1
	jmp	SHORT $LN6@ModuleInit
$LN5@ModuleInit:
	mov	DWORD PTR tv73[rsp], 0
$LN6@ModuleInit:
	mov	eax, DWORD PTR tv73[rsp]
	and	eax, 1
	shl	eax, 9
	mov	ecx, DWORD PTR ModuleInfo+408
	btr	ecx, 9
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 1149 :     //ModuleInfo.flatgrp_idx = 0;
; 1150 : 
; 1151 :     get_module_name(); /* set ModuleInfo.name */

	call	get_module_name

; 1152 : 
; 1153 :     /* v2.06: ST_PROC has been removed */
; 1154 :     //SimpleType[ST_PROC].mem_type = MT_NEAR;
; 1155 : 
; 1156 :     memset( SymTables, 0, sizeof( SymTables[0] ) * TAB_LAST );

	mov	r8d, 96					; 00000060H
	xor	edx, edx
	lea	rcx, OFFSET FLAT:SymTables
	call	memset

; 1157 :     ModuleInfo.fmtopt->init( &ModuleInfo );

	lea	rcx, OFFSET FLAT:ModuleInfo
	mov	rax, QWORD PTR ModuleInfo+344
	call	QWORD PTR [rax]

; 1158 : 
; 1159 :     return;
; 1160 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ModuleInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
p$ = 32
fn$1 = 40
ext$2 = 48
get_module_name PROC

; 1099 : {

	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1100 :     //char dummy[_MAX_EXT];
; 1101 :     char        *p;
; 1102 : 
; 1103 :     /* v2.08: prefer name given by -nm option */
; 1104 :     if ( Options.names[OPTN_MODULE_NAME] ) {

	mov	eax, 8
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:Options+32
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN5@get_module

; 1105 :         strncpy( ModuleInfo.name, Options.names[OPTN_MODULE_NAME], sizeof( ModuleInfo.name ) );

	mov	eax, 8
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:Options+32
	mov	r8d, 260				; 00000104H
	mov	rdx, QWORD PTR [rcx+rax]
	lea	rcx, OFFSET FLAT:ModuleInfo+512
	call	QWORD PTR __imp_strncpy

; 1106 :         ModuleInfo.name[ sizeof( ModuleInfo.name ) - 1] = NULLC;

	mov	eax, 1
	imul	rax, rax, 259				; 00000103H
	lea	rcx, OFFSET FLAT:ModuleInfo+512
	mov	BYTE PTR [rcx+rax], 0

; 1107 :     } else {

	jmp	SHORT $LN6@get_module
$LN5@get_module:

; 1108 :         /* v2.12: _splitpath()/_makepath() removed */
; 1109 :         const char *fn = GetFNamePart( CurrFName[ASM] );

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	rcx, QWORD PTR [rcx+rax]
	call	GetFNamePart
	mov	QWORD PTR fn$1[rsp], rax

; 1110 :         char *ext = GetExtPart( fn );

	mov	rcx, QWORD PTR fn$1[rsp]
	call	GetExtPart
	mov	QWORD PTR ext$2[rsp], rax

; 1111 :         memcpy( ModuleInfo.name, fn, ext - fn );

	mov	rax, QWORD PTR fn$1[rsp]
	mov	rcx, QWORD PTR ext$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	r8, rax
	mov	rdx, QWORD PTR fn$1[rsp]
	lea	rcx, OFFSET FLAT:ModuleInfo+512
	call	memcpy

; 1112 :         ModuleInfo.name[ ext - fn ] = NULLC;

	mov	rax, QWORD PTR fn$1[rsp]
	mov	rcx, QWORD PTR ext$2[rsp]
	sub	rcx, rax
	mov	rax, rcx
	lea	rcx, OFFSET FLAT:ModuleInfo+512
	mov	BYTE PTR [rcx+rax], 0
$LN6@get_module:

; 1113 :         //_splitpath( CurrFName[ASM], NULL, NULL, ModuleInfo.name, dummy );
; 1114 :     }
; 1115 : 
; 1116 :     _strupr( ModuleInfo.name );

	lea	rcx, OFFSET FLAT:ModuleInfo+512
	call	QWORD PTR __imp__strupr

; 1117 :     /* the module name must be a valid identifier, because it's used
; 1118 :      * as part of a segment name in certain memory models.
; 1119 :      */
; 1120 :     for( p = ModuleInfo.name; *p; ++p ) {

	lea	rax, OFFSET FLAT:ModuleInfo+512
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN4@get_module
$LN2@get_module:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN4@get_module:
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@get_module

; 1121 :         if( !( isalnum( *p ) || ( *p == '_' ) || ( *p == '$' )

	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isalnum
	test	eax, eax
	jne	SHORT $LN7@get_module
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN7@get_module
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN7@get_module
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 64					; 00000040H
	je	SHORT $LN7@get_module
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	je	SHORT $LN7@get_module

; 1122 :             || ( *p == '@' ) || ( *p == '?') ) ) {
; 1123 :             /* it's not a legal character for a symbol name */
; 1124 :             *p = '_';

	mov	rax, QWORD PTR p$[rsp]
	mov	BYTE PTR [rax], 95			; 0000005fH
$LN7@get_module:

; 1125 :         }
; 1126 :     }

	jmp	SHORT $LN2@get_module
$LN3@get_module:

; 1127 :     /* first character can't be a digit either */
; 1128 :     if( isdigit( ModuleInfo.name[0] ) ) {

	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+512
	movsx	eax, BYTE PTR [rcx+rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isdigit
	test	eax, eax
	je	SHORT $LN8@get_module

; 1129 :         ModuleInfo.name[0] = '_';

	mov	eax, 1
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+512
	mov	BYTE PTR [rcx+rax], 95			; 0000005fH
$LN8@get_module:

; 1130 :     }
; 1131 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
get_module_name ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
dir$1 = 64
pq$2 = 72
tv75 = 80
tv150 = 88
tv166 = 92
OnePass	PROC

; 989  : {

	push	rdi
	sub	rsp, 96					; 00000060H
	mov	rdi, rsp
	mov	ecx, 24
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 990  : 
; 991  :     InputPassInit();

	call	InputPassInit

; 992  :     ModulePassInit();

	call	ModulePassInit

; 993  :     SymPassInit( Parse_Pass );

	mov	ecx, DWORD PTR Parse_Pass
	call	SymPassInit

; 994  :     LabelInit();

	call	LabelInit

; 995  :     SegmentInit( Parse_Pass );

	mov	ecx, DWORD PTR Parse_Pass
	call	SegmentInit

; 996  :     ContextInit( Parse_Pass );

	mov	ecx, DWORD PTR Parse_Pass
	call	ContextInit

; 997  :     ProcInit();

	call	ProcInit

; 998  :     TypesInit();

	call	TypesInit

; 999  :     HllInit( Parse_Pass );

	mov	ecx, DWORD PTR Parse_Pass
	call	HllInit

; 1000 :     MacroInit( Parse_Pass ); /* insert predefined macros */

	mov	ecx, DWORD PTR Parse_Pass
	call	MacroInit

; 1001 :     AssumeInit( Parse_Pass );

	mov	ecx, DWORD PTR Parse_Pass
	call	AssumeInit

; 1002 :     CmdlParamsInit( Parse_Pass );

	mov	ecx, DWORD PTR Parse_Pass
	call	CmdlParamsInit

; 1003 : 
; 1004 :     ModuleInfo.EndDirFound = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 16
	mov	DWORD PTR ModuleInfo+408, eax

; 1005 :     ModuleInfo.PhaseError = FALSE;

	mov	BYTE PTR ModuleInfo+422, 0

; 1006 :     //Modend = FALSE;
; 1007 :     /* LineNumber = 0; */
; 1008 :     LinnumInit();

	call	LinnumInit

; 1009 : 
; 1010 : #ifdef DEBUG_OUT
; 1011 :     if ( Parse_Pass > PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, 0
	jbe	$LN10@OnePass

; 1012 :         DebugMsg(("OnePass(%u) segments (current=%s):\n", Parse_Pass + 1, CurrSeg ? CurrSeg->sym.name : "NULL" ));

	cmp	QWORD PTR ModuleInfo+432, 0
	je	SHORT $LN18@OnePass
	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+8]
	mov	QWORD PTR tv75[rsp], rax
	jmp	SHORT $LN19@OnePass
$LN18@OnePass:
	lea	rax, OFFSET FLAT:$SG12055
	mov	QWORD PTR tv75[rsp], rax
$LN19@OnePass:
	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	r8, QWORD PTR tv75[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12056
	call	DoDebugMsg

; 1013 :         {
; 1014 :             struct dsym *dir;
; 1015 :             for( dir = SymTables[TAB_SEG].head; dir; dir = dir->next ) {

	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR dir$1[rsp], rax
	jmp	SHORT $LN4@OnePass
$LN2@OnePass:
	mov	rax, QWORD PTR dir$1[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR dir$1[rsp], rax
$LN4@OnePass:
	cmp	QWORD PTR dir$1[rsp], 0
	je	SHORT $LN3@OnePass

; 1016 :                 DebugMsg(("OnePass(%u): segm=%-8s typ=%X start=%8X max_ofs=%8X\n", Parse_Pass + 1,

	mov	rax, QWORD PTR dir$1[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR dir$1[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	edx, DWORD PTR Parse_Pass
	inc	edx
	mov	r8, QWORD PTR dir$1[rsp]
	mov	r8d, DWORD PTR [r8+56]
	mov	DWORD PTR [rsp+40], r8d
	mov	eax, DWORD PTR [rax+8]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx+72]
	mov	rax, QWORD PTR dir$1[rsp]
	mov	r8, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12057
	call	DoDebugMsg

; 1017 :                           dir->sym.name, dir->e.seginfo->segtype, dir->e.seginfo->start_loc, dir->sym.max_offset ));
; 1018 :             }

	jmp	SHORT $LN2@OnePass
$LN3@OnePass:
$LN10@OnePass:

; 1019 :         }
; 1020 :     }
; 1021 : #endif
; 1022 :     /* the functions above might have written something to the line queue */
; 1023 :     if ( is_linequeue_populated() )

	cmp	QWORD PTR ModuleInfo+184, 0
	je	SHORT $LN11@OnePass

; 1024 :         RunLineQueue();

	call	RunLineQueue
$LN11@OnePass:

; 1025 : #if FASTPASS
; 1026 :     StoreState = FALSE;

	mov	BYTE PTR StoreState, 0

; 1027 :     if ( Parse_Pass > PASS_1 && UseSavedState == TRUE ) {

	cmp	DWORD PTR Parse_Pass, 0
	jbe	$LN12@OnePass
	movzx	eax, BYTE PTR UseSavedState
	cmp	eax, 1
	jne	$LN12@OnePass

; 1028 :         LineStoreCurr = RestoreState();

	call	RestoreState
	mov	QWORD PTR LineStoreCurr, rax
$LN5@OnePass:

; 1029 :         while ( LineStoreCurr && ModuleInfo.EndDirFound == FALSE ) {

	cmp	QWORD PTR LineStoreCurr, 0
	je	$LN6@OnePass
	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 16
	and	eax, 1
	test	eax, eax
	jne	$LN6@OnePass

; 1030 :             /* the source line is modified in Tokenize() if it contains a comment! */
; 1031 : #if USELSLINE==0
; 1032 :             strcpy( CurrSource, LineStoreCurr->line );
; 1033 : #endif
; 1034 :             set_curr_srcfile( LineStoreCurr->srcfile, LineStoreCurr->lineno );

	mov	rax, QWORD PTR LineStoreCurr
	mov	eax, DWORD PTR [rax+8]
	and	eax, 1048575				; 000fffffH
	mov	rcx, QWORD PTR LineStoreCurr
	mov	ecx, DWORD PTR [rcx+8]
	shr	ecx, 20
	and	ecx, 4095				; 00000fffH
	mov	edx, eax
	call	set_curr_srcfile

; 1035 :             /* v2.06: list flags now initialized on the top level */
; 1036 :             ModuleInfo.line_flags = 0;

	mov	BYTE PTR ModuleInfo+398, 0

; 1037 :             MacroLevel = ( LineStoreCurr->srcfile == 0xFFF ? 1 : 0 );

	mov	rax, QWORD PTR LineStoreCurr
	mov	eax, DWORD PTR [rax+8]
	shr	eax, 20
	and	eax, 4095				; 00000fffH
	cmp	eax, 4095				; 00000fffH
	jne	SHORT $LN20@OnePass
	mov	DWORD PTR tv150[rsp], 1
	jmp	SHORT $LN21@OnePass
$LN20@OnePass:
	mov	DWORD PTR tv150[rsp], 0
$LN21@OnePass:
	movzx	eax, BYTE PTR tv150[rsp]
	mov	BYTE PTR MacroLevel, al

; 1038 :             DebugMsg1(("OnePass(%u) cur/nxt=%X/%X src=%X.%u mlvl=%u: >%s<\n", Parse_Pass+1, LineStoreCurr, LineStoreCurr->next, LineStoreCurr->srcfile, LineStoreCurr->lineno, MacroLevel, LineStoreCurr->line ));

	mov	rax, QWORD PTR LineStoreCurr
	add	rax, 16
	movzx	ecx, BYTE PTR MacroLevel
	mov	rdx, QWORD PTR LineStoreCurr
	mov	edx, DWORD PTR [rdx+8]
	and	edx, 1048575				; 000fffffH
	mov	r8, QWORD PTR LineStoreCurr
	mov	r8d, DWORD PTR [r8+8]
	shr	r8d, 20
	and	r8d, 4095				; 00000fffH
	mov	r9d, DWORD PTR Parse_Pass
	inc	r9d
	mov	DWORD PTR tv166[rsp], r9d
	mov	QWORD PTR [rsp+56], rax
	mov	DWORD PTR [rsp+48], ecx
	mov	DWORD PTR [rsp+40], edx
	mov	DWORD PTR [rsp+32], r8d
	mov	rax, QWORD PTR LineStoreCurr
	mov	r9, QWORD PTR [rax]
	mov	r8, QWORD PTR LineStoreCurr
	mov	eax, DWORD PTR tv166[rsp]
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12061
	call	DoDebugMsg1

; 1039 :             ModuleInfo.CurrComment = NULL; /* v2.08: added (var is never reset because GetTextLine() isn't called) */

	mov	QWORD PTR ModuleInfo+472, 0

; 1040 : #if USELSLINE
; 1041 :             if ( Token_Count = Tokenize( LineStoreCurr->line, 0, ModuleInfo.tokenarray, TOK_DEFAULT ) )

	mov	rax, QWORD PTR LineStoreCurr
	add	rax, 16
	xor	r9d, r9d
	mov	r8, QWORD PTR ModuleInfo+480
	xor	edx, edx
	mov	rcx, rax
	call	Tokenize
	mov	DWORD PTR ModuleInfo+496, eax
	cmp	DWORD PTR ModuleInfo+496, 0
	je	SHORT $LN14@OnePass

; 1042 : #else
; 1043 :             if ( Token_Count = Tokenize( CurrSource, 0, ModuleInfo.tokenarray, TOK_DEFAULT ) )
; 1044 : #endif
; 1045 :                 ParseLine( ModuleInfo.tokenarray );

	mov	rcx, QWORD PTR ModuleInfo+480
	call	ParseLine
$LN14@OnePass:

; 1046 :             LineStoreCurr = LineStoreCurr->next;

	mov	rax, QWORD PTR LineStoreCurr
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR LineStoreCurr, rax

; 1047 :         }

	jmp	$LN5@OnePass
$LN6@OnePass:

; 1048 :     } else

	jmp	SHORT $LN13@OnePass
$LN12@OnePass:

; 1049 : #endif
; 1050 :     {
; 1051 :         struct qitem *pq;
; 1052 :         /* v2.11: handle -Fi files here ( previously in CmdlParamsInit ) */
; 1053 :         for ( pq = Options.queues[OPTQ_FINCLUDE]; pq; pq = pq->next ) {

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:Options+104
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR pq$2[rsp], rax
	jmp	SHORT $LN9@OnePass
$LN7@OnePass:
	mov	rax, QWORD PTR pq$2[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR pq$2[rsp], rax
$LN9@OnePass:
	cmp	QWORD PTR pq$2[rsp], 0
	je	SHORT $LN8@OnePass

; 1054 :             DebugMsg(("OnePass: force include of file: %s\n", pq->value ));

	mov	rax, QWORD PTR pq$2[rsp]
	add	rax, 8
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG12063
	call	DoDebugMsg

; 1055 :             if ( SearchFile( pq->value, TRUE ) )

	mov	rax, QWORD PTR pq$2[rsp]
	add	rax, 8
	mov	dl, 1
	mov	rcx, rax
	call	SearchFile
	test	rax, rax
	je	SHORT $LN15@OnePass

; 1056 :                 ProcessFile( ModuleInfo.tokenarray );

	mov	rcx, QWORD PTR ModuleInfo+480
	call	ProcessFile
$LN15@OnePass:

; 1057 :         }

	jmp	SHORT $LN7@OnePass
$LN8@OnePass:

; 1058 :         ProcessFile( ModuleInfo.tokenarray ); /* process the main source file */

	mov	rcx, QWORD PTR ModuleInfo+480
	call	ProcessFile
$LN13@OnePass:

; 1059 :     }
; 1060 : 
; 1061 :     LinnumFini();

	call	LinnumFini

; 1062 : 
; 1063 :     if ( Parse_Pass == PASS_1 )

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN16@OnePass

; 1064 :         PassOneChecks();

	call	PassOneChecks
$LN16@OnePass:

; 1065 : 
; 1066 :     ClearSrcStack();

	call	ClearSrcStack

; 1067 : 
; 1068 :     return( 1 );

	mov	eax, 1

; 1069 : }

	add	rsp, 96					; 00000060H
	pop	rdi
	ret	0
OnePass	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
curr$ = 32
next$ = 40
q$ = 48
qn$ = 56
cntUnusedExt$ = 64
sym$1 = 72
i$2 = 80
j$3 = 84
sym$4 = 88
fix$5 = 96
PassOneChecks PROC

; 763  : {

	push	rdi
	sub	rsp, 112				; 00000070H
	mov	rdi, rsp
	mov	ecx, 28
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 764  :     struct dsym *curr;
; 765  :     struct dsym *next;
; 766  :     struct qnode *q;
; 767  :     struct qnode *qn;
; 768  : #ifdef DEBUG_OUT
; 769  :     int cntUnusedExt = 0;

	mov	DWORD PTR cntUnusedExt$[rsp], 0

; 770  : #endif
; 771  : 
; 772  :     /* check for open structures and segments has been done inside the
; 773  :      * END directive handling already
; 774  :      * v2.10: now done for PROCs as well, since procedures
; 775  :      * must be closed BEFORE segments are to be closed.
; 776  :      */
; 777  :     //ProcCheckOpen();
; 778  :     HllCheckOpen();

	call	HllCheckOpen

; 779  :     CondCheckOpen();

	call	CondCheckOpen

; 780  : 
; 781  :     if( ModuleInfo.EndDirFound == FALSE )

	mov	eax, DWORD PTR ModuleInfo+408
	shr	eax, 16
	and	eax, 1
	test	eax, eax
	jne	SHORT $LN29@PassOneChe

; 782  :         EmitError( END_DIRECTIVE_REQUIRED );

	mov	ecx, 99					; 00000063H
	call	EmitError
$LN29@PassOneChe:

; 783  : 
; 784  : #ifdef DEBUG_OUT
; 785  :     for ( curr = SymTables[TAB_UNDEF].head; curr; curr = curr->next ) {

	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN4@PassOneChe
$LN2@PassOneChe:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR curr$[rsp], rax
$LN4@PassOneChe:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN3@PassOneChe

; 786  :         DebugMsg(("PassOneChecks: undefined symbol %s\n", curr->sym.name ));

	mov	rax, QWORD PTR curr$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12006
	call	DoDebugMsg

; 787  :     }

	jmp	SHORT $LN2@PassOneChe
$LN3@PassOneChe:

; 788  : #endif
; 789  :     /* v2.04: check the publics queue.
; 790  :      * - only internal symbols can be public.
; 791  :      * - weak external symbols are filtered ( since v2.11 )
; 792  :      * - anything else is an error
; 793  :      * v2.11: moved here ( from inside the "#if FASTPASS"-block )
; 794  :      * because the loop will now filter weak externals [ this
; 795  :      * was previously done in GetPublicSymbols() ]
; 796  :      */
; 797  :     for( q = ModuleInfo.g.PubQueue.head, qn = (struct qnode *)&ModuleInfo.g.PubQueue ; q; q = q->next ) {

	mov	rax, QWORD PTR ModuleInfo+16
	mov	QWORD PTR q$[rsp], rax
	lea	rax, OFFSET FLAT:ModuleInfo+16
	mov	QWORD PTR qn$[rsp], rax
	jmp	SHORT $LN7@PassOneChe
$LN5@PassOneChe:
	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR q$[rsp], rax
$LN7@PassOneChe:
	cmp	QWORD PTR q$[rsp], 0
	je	$LN6@PassOneChe

; 798  : 
; 799  :         if ( q->sym->state == SYM_INTERNAL )

	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax+32], 1
	jne	SHORT $LN30@PassOneChe

; 800  :             qn = q;

	mov	rax, QWORD PTR q$[rsp]
	mov	QWORD PTR qn$[rsp], rax
	jmp	$LN31@PassOneChe
$LN30@PassOneChe:

; 801  :         else if ( q->sym->state == SYM_EXTERNAL && q->sym->weak == TRUE ) {

	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax+32], 2
	jne	SHORT $LN32@PassOneChe
	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN32@PassOneChe

; 802  :             DebugMsg(("PassOneChecks: public for weak external skipped: %s\n", q->sym->name ));

	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax+8]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12011
	call	DoDebugMsg

; 803  :             qn->next = q->next;

	mov	rax, QWORD PTR qn$[rsp]
	mov	rcx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR [rcx]
	mov	QWORD PTR [rax], rcx

; 804  :             LclFree( q );
; 805  :             q = qn;

	mov	rax, QWORD PTR qn$[rsp]
	mov	QWORD PTR q$[rsp], rax

; 806  :         } else {

	jmp	SHORT $LN33@PassOneChe
$LN32@PassOneChe:

; 807  :             DebugMsg(("PassOneChecks: invalid public attribute for %s [state=%u weak=%u]\n", q->sym->name, q->sym->state, q->sym->weak ));

	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	mov	rcx, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	rdx, QWORD PTR q$[rsp]
	mov	rdx, QWORD PTR [rdx+8]
	mov	r9d, eax
	mov	r8d, DWORD PTR [rcx+32]
	mov	rdx, QWORD PTR [rdx+8]
	lea	rcx, OFFSET FLAT:$SG12012
	call	DoDebugMsg

; 808  : #if FASTPASS
; 809  :             SkipSavedState();

	call	SkipSavedState

; 810  : #endif
; 811  :             break;

	jmp	SHORT $LN6@PassOneChe
$LN33@PassOneChe:
$LN31@PassOneChe:

; 812  :         }
; 813  :     }

	jmp	$LN5@PassOneChe
$LN6@PassOneChe:

; 814  : #if FASTPASS
; 815  :     if ( SymTables[TAB_UNDEF].head ) {

	mov	eax, 16
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:SymTables

; 816  :         /* to force a full second pass in case of missing symbols,
; 817  :          * activate the next line. It was implemented to have proper
; 818  :          * error displays if a forward reference wasn't found.
; 819  :          * However, v1.95 final won't need this anymore, because both
; 820  :          * filename + lineno for every line is known now in pass 2.
; 821  :          */
; 822  :         /* SkipSavedState(); */
; 823  :     }
; 824  : 
; 825  :     /* check if there's an undefined segment reference.
; 826  :      * This segment was an argument to a group definition then.
; 827  :      * Just do a full second pass, the GROUP directive will report
; 828  :      * the error.
; 829  :      */
; 830  :     for( curr = SymTables[TAB_SEG].head; curr; curr = curr->next ) {

	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN10@PassOneChe
$LN8@PassOneChe:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR curr$[rsp], rax
$LN10@PassOneChe:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN9@PassOneChe

; 831  :         if( curr->sym.segment == NULL ) {

	mov	rax, QWORD PTR curr$[rsp]
	cmp	QWORD PTR [rax+24], 0
	jne	SHORT $LN35@PassOneChe

; 832  :             DebugMsg(("PassOneChecks: undefined segment %s\n", curr->sym.name ));

	mov	rax, QWORD PTR curr$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12015
	call	DoDebugMsg

; 833  :             SkipSavedState();

	call	SkipSavedState

; 834  :             break;

	jmp	SHORT $LN9@PassOneChe
$LN35@PassOneChe:

; 835  :         }
; 836  :     }

	jmp	SHORT $LN8@PassOneChe
$LN9@PassOneChe:

; 837  : #if COFF_SUPPORT
; 838  :     /* if there's an item in the safeseh list which is not an
; 839  :      * internal proc, make a full second pass to emit a proper
; 840  :      * error msg at the .SAFESEH directive
; 841  :      */
; 842  :     for ( q = ModuleInfo.g.SafeSEHQueue.head; q; q = q->next ) {

	mov	rax, QWORD PTR ModuleInfo+48
	mov	QWORD PTR q$[rsp], rax
	jmp	SHORT $LN13@PassOneChe
$LN11@PassOneChe:
	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR q$[rsp], rax
$LN13@PassOneChe:
	cmp	QWORD PTR q$[rsp], 0
	je	SHORT $LN12@PassOneChe

; 843  :         if ( q->sym->state != SYM_INTERNAL || q->sym->isproc == FALSE ) {

	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax+8]
	cmp	DWORD PTR [rax+32], 1
	jne	SHORT $LN37@PassOneChe
	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax+8]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN36@PassOneChe
$LN37@PassOneChe:

; 844  :             SkipSavedState();

	call	SkipSavedState

; 845  :             break;

	jmp	SHORT $LN12@PassOneChe
$LN36@PassOneChe:

; 846  :         }
; 847  :     }

	jmp	SHORT $LN11@PassOneChe
$LN12@PassOneChe:

; 848  : #endif
; 849  : 
; 850  :     /* scan ALIASes for COFF/ELF */
; 851  : 
; 852  : #if COFF_SUPPORT || ELF_SUPPORT
; 853  :     if ( Options.output_format == OFORMAT_COFF
; 854  : #if ELF_SUPPORT
; 855  :         || Options.output_format == OFORMAT_ELF

	cmp	DWORD PTR Options+160, 2
	je	SHORT $LN39@PassOneChe
	cmp	DWORD PTR Options+160, 3
	jne	$LN38@PassOneChe
$LN39@PassOneChe:

; 856  : #endif
; 857  :        ) {
; 858  :         for( curr = SymTables[TAB_ALIAS].head ; curr != NULL ;curr = curr->next ) {

	mov	eax, 16
	imul	rax, rax, 5
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN16@PassOneChe
$LN14@PassOneChe:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR curr$[rsp], rax
$LN16@PassOneChe:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN15@PassOneChe

; 859  :             struct asym *sym;
; 860  :             sym = curr->sym.substitute;

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	QWORD PTR sym$1[rsp], rax

; 861  :             /* check if symbol is external or public */
; 862  :             if ( sym == NULL ||

	cmp	QWORD PTR sym$1[rsp], 0
	je	SHORT $LN41@PassOneChe
	mov	rax, QWORD PTR sym$1[rsp]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN40@PassOneChe
	mov	rax, QWORD PTR sym$1[rsp]
	cmp	DWORD PTR [rax+32], 1
	jne	SHORT $LN42@PassOneChe
	mov	rax, QWORD PTR sym$1[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN40@PassOneChe
$LN42@PassOneChe:
$LN41@PassOneChe:

; 863  :                 ( sym->state != SYM_EXTERNAL &&
; 864  :                  ( sym->state != SYM_INTERNAL || sym->ispublic == FALSE ))) {
; 865  :                 SkipSavedState();

	call	SkipSavedState

; 866  :                 break;

	jmp	SHORT $LN15@PassOneChe
$LN40@PassOneChe:

; 867  :             }
; 868  :             /* make sure it becomes a strong external */
; 869  :             if ( sym->state == SYM_EXTERNAL )

	mov	rax, QWORD PTR sym$1[rsp]
	cmp	DWORD PTR [rax+32], 2
	jne	SHORT $LN43@PassOneChe

; 870  :                 sym->used = TRUE;

	mov	rax, QWORD PTR sym$1[rsp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 1
	mov	rcx, QWORD PTR sym$1[rsp]
	mov	BYTE PTR [rcx+40], al
$LN43@PassOneChe:

; 871  :         }

	jmp	SHORT $LN14@PassOneChe
$LN15@PassOneChe:
$LN38@PassOneChe:

; 872  :     }
; 873  : #endif
; 874  : 
; 875  : #endif /* FASTPASS */
; 876  : 
; 877  :     /* scan the EXTERN/EXTERNDEF items */
; 878  : 
; 879  :     for( curr = SymTables[TAB_EXT].head ; curr; curr = next ) {

	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN19@PassOneChe
$LN17@PassOneChe:
	mov	rax, QWORD PTR next$[rsp]
	mov	QWORD PTR curr$[rsp], rax
$LN19@PassOneChe:
	cmp	QWORD PTR curr$[rsp], 0
	je	$LN18@PassOneChe

; 880  :         next = curr->next;

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR next$[rsp], rax

; 881  :         /* v2.01: externdefs which have been "used" become "strong" */
; 882  :         if ( curr->sym.used )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN44@PassOneChe

; 883  :             curr->sym.weak = FALSE;

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	and	al, 247					; 000000f7H
	mov	rcx, QWORD PTR curr$[rsp]
	mov	BYTE PTR [rcx+47], al
$LN44@PassOneChe:

; 884  :         /* remove unused EXTERNDEF/PROTO items from queue. */
; 885  :         if ( curr->sym.weak == TRUE
; 886  : #if DLLIMPORT
; 887  :             && curr->sym.iat_used == FALSE

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN45@PassOneChe
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN45@PassOneChe

; 888  : #endif
; 889  :            ) {
; 890  :             sym_remove_table( &SymTables[TAB_EXT], curr );

	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:SymTables
	add	rcx, rax
	mov	rax, rcx
	mov	rdx, QWORD PTR curr$[rsp]
	mov	rcx, rax
	call	sym_remove_table

; 891  : #ifdef DEBUG_OUT
; 892  :             cntUnusedExt++;

	mov	eax, DWORD PTR cntUnusedExt$[rsp]
	inc	eax
	mov	DWORD PTR cntUnusedExt$[rsp], eax

; 893  : #endif
; 894  :             continue;

	jmp	$LN17@PassOneChe
$LN45@PassOneChe:

; 895  :         }
; 896  : 
; 897  : #if FASTMEM==0
; 898  :         /* v2.05: clear fixup list (used for backpatching in pass one) */
; 899  :         if ( curr->sym.bp_fixup ) {
; 900  :             struct fixup *c;
; 901  :             struct fixup *n;
; 902  :             for( c = curr->sym.bp_fixup ; c; ) {
; 903  :                 n = c->nextbp;
; 904  :                 LclFree( c );
; 905  :                 c = n;
; 906  :             }
; 907  :             curr->sym.bp_fixup = NULL;
; 908  :         }
; 909  : #endif
; 910  : 
; 911  :         if ( curr->sym.iscomm == TRUE )

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 2
	and	al, 1
	movzx	eax, al
	cmp	eax, 1
	jne	SHORT $LN46@PassOneChe

; 912  :             continue;

	jmp	$LN17@PassOneChe
$LN46@PassOneChe:

; 913  :         /* optional alternate symbol must be INTERNAL or EXTERNAL.
; 914  :          * COFF ( and ELF? ) also wants internal symbols to be public
; 915  :          * ( which is reasonable, since the linker won't know private
; 916  :          * symbols and hence will search for a symbol of that name
; 917  :          * "elsewhere" ).
; 918  :          */
; 919  : #if FASTPASS
; 920  :         if ( curr->sym.altname ) {

	mov	rax, QWORD PTR curr$[rsp]
	cmp	QWORD PTR [rax+64], 0
	je	SHORT $LN47@PassOneChe

; 921  :             if ( curr->sym.altname->state == SYM_INTERNAL ) {

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+64]
	cmp	DWORD PTR [rax+32], 1
	jne	SHORT $LN48@PassOneChe

; 922  : #if COFF_SUPPORT || ELF_SUPPORT
; 923  :                 /* for COFF/ELF, the altname must be public or external */
; 924  :                 if ( curr->sym.altname->ispublic == FALSE &&

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+64]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 7
	and	al, 1
	movzx	eax, al
	test	eax, eax
	jne	SHORT $LN50@PassOneChe
	cmp	DWORD PTR Options+160, 2
	je	SHORT $LN51@PassOneChe
	cmp	DWORD PTR Options+160, 3
	jne	SHORT $LN50@PassOneChe
$LN51@PassOneChe:

; 925  :                     ( Options.output_format == OFORMAT_COFF
; 926  : #if ELF_SUPPORT
; 927  :                      || Options.output_format == OFORMAT_ELF
; 928  : #endif
; 929  :                     ) ) {
; 930  :                     SkipSavedState();

	call	SkipSavedState
$LN50@PassOneChe:

; 931  :                 }

	jmp	SHORT $LN49@PassOneChe
$LN48@PassOneChe:

; 932  : #endif
; 933  :             } else if ( curr->sym.altname->state != SYM_EXTERNAL ) {

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+64]
	cmp	DWORD PTR [rax+32], 2
	je	SHORT $LN52@PassOneChe

; 934  :                 /* do not use saved state, scan full source in second pass */
; 935  :                 SkipSavedState();

	call	SkipSavedState
$LN52@PassOneChe:
$LN49@PassOneChe:
$LN47@PassOneChe:

; 936  :             }
; 937  :         }
; 938  : #endif
; 939  :     }

	jmp	$LN17@PassOneChe
$LN18@PassOneChe:

; 940  : 
; 941  : #ifdef DEBUG_OUT
; 942  :     DebugMsg(("PassOneChecks: removed unused externals: %u\n", cntUnusedExt ));

	mov	edx, DWORD PTR cntUnusedExt$[rsp]
	lea	rcx, OFFSET FLAT:$SG12033
	call	DoDebugMsg

; 943  :     DebugMsg(("PassOneChecks: forward references:\n"));

	lea	rcx, OFFSET FLAT:$SG12034
	call	DoDebugMsg

; 944  :     for( curr = SymTables[TAB_SEG].head; curr; curr = curr->next ) {

	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN22@PassOneChe
$LN20@PassOneChe:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR curr$[rsp], rax
$LN22@PassOneChe:
	cmp	QWORD PTR curr$[rsp], 0
	je	$LN21@PassOneChe

; 945  :         int i;
; 946  :         int j;
; 947  :         struct asym * sym;
; 948  :         struct fixup * fix;
; 949  :         for ( i = 0, j = 0, sym = curr->e.seginfo->label_list; sym; sym = (struct asym *)((struct dsym *)sym)->next ) {

	mov	DWORD PTR i$2[rsp], 0
	mov	DWORD PTR j$3[rsp], 0
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rax, QWORD PTR [rax+32]
	mov	QWORD PTR sym$4[rsp], rax
	jmp	SHORT $LN25@PassOneChe
$LN23@PassOneChe:
	mov	rax, QWORD PTR sym$4[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR sym$4[rsp], rax
$LN25@PassOneChe:
	cmp	QWORD PTR sym$4[rsp], 0
	je	SHORT $LN24@PassOneChe

; 950  :             i++;

	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax

; 951  :             for ( fix = sym->bp_fixup; fix ; fix = fix->nextbp, j++ );

	mov	rax, QWORD PTR sym$4[rsp]
	mov	rax, QWORD PTR [rax+88]
	mov	QWORD PTR fix$5[rsp], rax
	jmp	SHORT $LN28@PassOneChe
$LN26@PassOneChe:
	mov	rax, QWORD PTR fix$5[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR fix$5[rsp], rax
	mov	eax, DWORD PTR j$3[rsp]
	inc	eax
	mov	DWORD PTR j$3[rsp], eax
$LN28@PassOneChe:
	cmp	QWORD PTR fix$5[rsp], 0
	je	SHORT $LN27@PassOneChe
	jmp	SHORT $LN26@PassOneChe
$LN27@PassOneChe:

; 952  :         }

	jmp	SHORT $LN23@PassOneChe
$LN24@PassOneChe:

; 953  :         DebugMsg(("PassOneChecks: segm=%s, labels=%u forward refs=%u\n", curr->sym.name, i, j));

	mov	r9d, DWORD PTR j$3[rsp]
	mov	r8d, DWORD PTR i$2[rsp]
	mov	rax, QWORD PTR curr$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12035
	call	DoDebugMsg

; 954  :     }

	jmp	$LN20@PassOneChe
$LN21@PassOneChe:

; 955  : #endif
; 956  : 
; 957  :     if ( ModuleInfo.g.error_count == 0 ) {

	cmp	DWORD PTR ModuleInfo, 0
	jne	SHORT $LN53@PassOneChe

; 958  : 
; 959  :         /* make all symbols of type SYM_INTERNAL, which aren't
; 960  :          a constant, public.  */
; 961  :         if ( Options.all_symbols_public )

	movzx	eax, BYTE PTR Options+154
	test	eax, eax
	je	SHORT $LN54@PassOneChe

; 962  :             SymMakeAllSymbolsPublic();

	call	SymMakeAllSymbolsPublic
$LN54@PassOneChe:

; 963  : 
; 964  :         if ( Options.syntax_check_only == FALSE )

	movzx	eax, BYTE PTR Options+188
	test	eax, eax
	jne	SHORT $LN55@PassOneChe

; 965  :             write_to_file = TRUE;

	mov	BYTE PTR write_to_file, 1
$LN55@PassOneChe:

; 966  : 
; 967  :         if ( ModuleInfo.g.Pass1Checks )

	cmp	QWORD PTR ModuleInfo+304, 0
	je	SHORT $LN56@PassOneChe

; 968  :             ModuleInfo.g.Pass1Checks( &ModuleInfo );

	lea	rcx, OFFSET FLAT:ModuleInfo
	call	QWORD PTR ModuleInfo+304
$LN56@PassOneChe:
$LN53@PassOneChe:

; 969  :     }
; 970  : 
; 971  : 
; 972  :     return;
; 973  : }

	add	rsp, 112				; 00000070H
	pop	rdi
	ret	0
PassOneChecks ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
cpu$ = 32
model$ = 36
curr$ = 40
ModulePassInit PROC

; 639  : {

	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 640  :     enum cpu_info cpu = Options.cpu;

	mov	eax, DWORD PTR Options+180
	mov	DWORD PTR cpu$[rsp], eax

; 641  :     enum model_type model = Options.model;

	mov	eax, DWORD PTR Options+176
	mov	DWORD PTR model$[rsp], eax

; 642  : #if DLLIMPORT
; 643  :     struct dsym *curr;
; 644  : #endif
; 645  : 
; 646  :     DebugMsg(( "ModulePassInit() enter\n" ));

	lea	rcx, OFFSET FLAT:$SG11949
	call	DoDebugMsg

; 647  :     /* set default values not affected by the masm 5.1 compat switch */
; 648  :     ModuleInfo.procs_private = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -5					; fffffffbH
	mov	DWORD PTR ModuleInfo+408, eax

; 649  :     ModuleInfo.procs_export = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -9					; fffffff7H
	mov	DWORD PTR ModuleInfo+408, eax

; 650  :     ModuleInfo.offsettype = OT_GROUP;

	mov	DWORD PTR ModuleInfo+384, 0

; 651  :     ModuleInfo.scoped = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 7
	mov	DWORD PTR ModuleInfo+408, eax

; 652  : 
; 653  : 
; 654  : #if FASTPASS
; 655  :     /* v2.03: don't generate the code if fastpass is active */
; 656  :     /* v2.08: query UseSavedState instead of StoreState */
; 657  :     //if ( StoreState == FALSE ) {
; 658  :     if ( UseSavedState == FALSE ) {

	movzx	eax, BYTE PTR UseSavedState
	test	eax, eax
	jne	$LN5@ModulePass

; 659  : #endif
; 660  :         ModuleInfo.langtype = Options.langtype;

	mov	eax, DWORD PTR Options+172
	mov	DWORD PTR ModuleInfo+364, eax

; 661  :         ModuleInfo.fctype = Options.fctype;

	mov	eax, DWORD PTR Options+184
	mov	DWORD PTR ModuleInfo+376, eax

; 662  : #if AMD64_SUPPORT
; 663  :         if ( ModuleInfo.sub_format == SFORMAT_64BIT ) {

	cmp	DWORD PTR ModuleInfo+372, 3
	jne	SHORT $LN6@ModulePass

; 664  :             /* v2.06: force cpu to be at least P_64, without side effect to Options.cpu */
; 665  :             if ( ( cpu &  P_CPU_MASK ) < P_64 ) /* enforce cpu to be 64-bit */

	mov	eax, DWORD PTR cpu$[rsp]
	and	eax, 240				; 000000f0H
	cmp	eax, 112				; 00000070H
	jge	SHORT $LN8@ModulePass

; 666  :                 cpu = P_64;

	mov	DWORD PTR cpu$[rsp], 112		; 00000070H
$LN8@ModulePass:

; 667  :             /* ignore -m switch for 64-bit formats.
; 668  :              * there's no other model than FLAT possible.
; 669  :              */
; 670  :             model = MODEL_FLAT;

	mov	DWORD PTR model$[rsp], 7

; 671  :             if ( ModuleInfo.langtype == LANG_NONE && Options.output_format == OFORMAT_COFF )

	cmp	DWORD PTR ModuleInfo+364, 0
	jne	SHORT $LN9@ModulePass
	cmp	DWORD PTR Options+160, 2
	jne	SHORT $LN9@ModulePass

; 672  :                 ModuleInfo.langtype = LANG_FASTCALL;

	mov	DWORD PTR ModuleInfo+364, 7
$LN9@ModulePass:

; 673  :         } else

	jmp	SHORT $LN7@ModulePass
$LN6@ModulePass:

; 674  : #endif
; 675  :             /* if model FLAT is to be set, ensure that cpu is compat. */
; 676  :             if ( model == MODEL_FLAT && ( cpu & P_CPU_MASK ) < P_386 ) /* cpu < 386? */

	cmp	DWORD PTR model$[rsp], 7
	jne	SHORT $LN10@ModulePass
	mov	eax, DWORD PTR cpu$[rsp]
	and	eax, 240				; 000000f0H
	cmp	eax, 48					; 00000030H
	jge	SHORT $LN10@ModulePass

; 677  :                 cpu = P_386;

	mov	DWORD PTR cpu$[rsp], 48			; 00000030H
$LN10@ModulePass:
$LN7@ModulePass:

; 678  : 
; 679  :         SetCPU( cpu );

	mov	ecx, DWORD PTR cpu$[rsp]
	call	SetCPU

; 680  :         /* table ModelToken starts with MODEL_TINY, which is index 1" */
; 681  :         if ( model != MODEL_NONE )

	cmp	DWORD PTR model$[rsp], 0
	je	SHORT $LN11@ModulePass

; 682  :             AddLineQueueX( "%r %s", T_DOT_MODEL, ModelToken[model - 1] );

	mov	eax, DWORD PTR model$[rsp]
	dec	eax
	cdqe
	lea	rcx, OFFSET FLAT:ModelToken
	mov	r8, QWORD PTR [rcx+rax*8]
	mov	edx, 342				; 00000156H
	lea	rcx, OFFSET FLAT:$SG11957
	call	AddLineQueueX
$LN11@ModulePass:
$LN5@ModulePass:

; 683  : 
; 684  : #if FASTPASS
; 685  :     }
; 686  : #endif
; 687  : 
; 688  :     SetMasm510( Options.masm51_compat );

	movzx	ecx, BYTE PTR Options+142
	call	SetMasm510

; 689  :     ModuleInfo.defOfssize = USE16;

	mov	BYTE PTR ModuleInfo+405, 0

; 690  :     ModuleInfo.ljmp     = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 32					; 00000020H
	mov	DWORD PTR ModuleInfo+408, eax

; 691  : 
; 692  :     ModuleInfo.list   = Options.write_listing;

	movzx	eax, BYTE PTR Options+137
	and	eax, 1
	shl	eax, 11
	mov	ecx, DWORD PTR ModuleInfo+408
	btr	ecx, 11
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 693  :     ModuleInfo.cref   = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 12
	mov	DWORD PTR ModuleInfo+408, eax

; 694  :     ModuleInfo.listif = Options.listif;

	movzx	eax, BYTE PTR Options+146
	and	eax, 1
	shl	eax, 13
	mov	ecx, DWORD PTR ModuleInfo+408
	btr	ecx, 13
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 695  :     ModuleInfo.list_generated_code = Options.list_generated_code;

	movzx	eax, BYTE PTR Options+147
	and	eax, 1
	shl	eax, 14
	mov	ecx, DWORD PTR ModuleInfo+408
	btr	ecx, 14
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 696  :     ModuleInfo.list_macro = Options.list_macro;

	mov	eax, DWORD PTR Options+148
	mov	DWORD PTR ModuleInfo+400, eax

; 697  : 
; 698  :     ModuleInfo.case_sensitive = Options.case_sensitive;

	movzx	eax, BYTE PTR Options+139
	and	eax, 1
	mov	ecx, DWORD PTR ModuleInfo+408
	and	ecx, -2					; fffffffeH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 699  :     ModuleInfo.convert_uppercase = Options.convert_uppercase;

	movzx	eax, BYTE PTR Options+140
	and	eax, 1
	shl	eax, 1
	mov	ecx, DWORD PTR ModuleInfo+408
	and	ecx, -3					; fffffffdH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 700  :     SymSetCmpFunc();

	call	SymSetCmpFunc

; 701  : 
; 702  :     ModuleInfo.segorder = SEGORDER_SEQ;

	mov	DWORD PTR ModuleInfo+380, 0

; 703  :     ModuleInfo.radix = 10;

	mov	BYTE PTR ModuleInfo+396, 10

; 704  :     ModuleInfo.fieldalign = Options.fieldalign;

	movzx	eax, BYTE PTR Options+168
	mov	BYTE PTR ModuleInfo+397, al

; 705  : #if PROCALIGN
; 706  :     ModuleInfo.procalign = 0;

	mov	BYTE PTR ModuleInfo+399, 0

; 707  : #endif
; 708  : #if DLLIMPORT
; 709  :     /* if OPTION DLLIMPORT was used, reset all iat_used flags */
; 710  :     if ( ModuleInfo.g.DllQueue )

	cmp	QWORD PTR ModuleInfo+80, 0
	je	SHORT $LN12@ModulePass

; 711  :         for ( curr = SymTables[TAB_EXT].head; curr; curr = curr->next )

	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN4@ModulePass
$LN2@ModulePass:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR curr$[rsp], rax
$LN4@ModulePass:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN3@ModulePass

; 712  :             curr->sym.iat_used = FALSE;

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	and	al, 247					; 000000f7H
	mov	rcx, QWORD PTR curr$[rsp]
	mov	BYTE PTR [rcx+40], al
	jmp	SHORT $LN2@ModulePass
$LN3@ModulePass:
$LN12@ModulePass:

; 713  : #endif
; 714  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ModulePassInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
env$1 = 32
pass$ = 64
CmdlParamsInit PROC

; 519  : {

	mov	DWORD PTR [rsp+8], ecx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	ecx, DWORD PTR [rsp+64]

; 520  :     DebugMsg(("CmdlParamsInit(%u) enter\n", pass));

	mov	edx, DWORD PTR pass$[rsp]
	lea	rcx, OFFSET FLAT:$SG11914
	call	DoDebugMsg

; 521  : 
; 522  : #if BUILD_TARGET
; 523  :     if ( pass == PASS_1 ) {
; 524  :         struct asym *sym;
; 525  :         char *tmp;
; 526  :         char *p;
; 527  : 
; 528  :         _strupr( Options.build_target );
; 529  :         tmp = myalloca( strlen( Options.build_target ) + 5 ); /* null + 4 uscores */
; 530  :         strcpy( tmp, uscores );
; 531  :         strcat( tmp, Options.build_target );
; 532  :         strcat( tmp, uscores );
; 533  : 
; 534  :         /* define target */
; 535  :         sym = CreateVariable( tmp, 0 );
; 536  :         sym->predefined = TRUE;
; 537  : 
; 538  :         p = NULL;
; 539  :         if( _stricmp( Options.build_target, "DOS" ) == 0 ) {
; 540  :             p = "__MSDOS__";
; 541  :         } else if( _stricmp( Options.build_target, "NETWARE" ) == 0 ) {
; 542  :             if( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {
; 543  :                 p = "__NETWARE_386__";
; 544  :             } else {
; 545  :                 /* do nothing ... __NETWARE__ already defined */
; 546  :             }
; 547  :         } else if( _stricmp( Options.build_target, "WINDOWS" ) == 0 ) {
; 548  :             if( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_386 ) {
; 549  :                 p = "__WINDOWS_386__";
; 550  :             } else {
; 551  :                 /* do nothing ... __WINDOWS__ already defined */
; 552  :             }
; 553  :         } else if( _stricmp( Options.build_target, "QNX" ) == 0 ) {
; 554  :             p = "__UNIX__";
; 555  :         } else if( _stricmp( Options.build_target, "LINUX" ) == 0 ) {
; 556  :             p = "__UNIX__";
; 557  :         }
; 558  :         if ( p ) {
; 559  :             sym = CreateVariable( p, 0 );
; 560  :             sym->predefined = TRUE;
; 561  :         }
; 562  :     }
; 563  : #endif
; 564  : 
; 565  :     if ( pass == PASS_1 ) {

	cmp	DWORD PTR pass$[rsp], 0
	jne	SHORT $LN2@CmdlParams

; 566  :         char *env;
; 567  :         /* v2.06: this is done in ModulePassInit now */
; 568  :         //SetCPU( Options.cpu );
; 569  :         add_cmdline_tmacros();

	call	add_cmdline_tmacros

; 570  :         add_incpaths();

	call	add_incpaths

; 571  :         if ( Options.ignore_include == FALSE )

	movzx	eax, BYTE PTR Options+156
	test	eax, eax
	jne	SHORT $LN3@CmdlParams

; 572  :             if ( env = getenv( "INCLUDE" ) )

	lea	rcx, OFFSET FLAT:$SG11918
	call	QWORD PTR __imp_getenv
	mov	QWORD PTR env$1[rsp], rax
	cmp	QWORD PTR env$1[rsp], 0
	je	SHORT $LN4@CmdlParams

; 573  :                 AddStringToIncludePath( env );

	mov	rcx, QWORD PTR env$1[rsp]
	call	AddStringToIncludePath
$LN4@CmdlParams:
$LN3@CmdlParams:
$LN2@CmdlParams:

; 574  :     }
; 575  :     DebugMsg(("CmdlParamsInit exit\n"));

	lea	rcx, OFFSET FLAT:$SG11919
	call	DoDebugMsg

; 576  :     return;
; 577  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
CmdlParamsInit ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
p$ = 32
add_incpaths PROC

; 506  : {

	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 507  :     struct qitem *p;
; 508  :     DebugMsg(("add_incpaths: enter\n"));

	lea	rcx, OFFSET FLAT:$SG11908
	call	DoDebugMsg

; 509  :     for ( p = Options.queues[OPTQ_INCPATH]; p; p = p->next ) {

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:Options+104
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN4@add_incpat
$LN2@add_incpat:
	mov	rax, QWORD PTR p$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rsp], rax
$LN4@add_incpat:
	cmp	QWORD PTR p$[rsp], 0
	je	SHORT $LN3@add_incpat

; 510  :         AddStringToIncludePath( p->value );

	mov	rax, QWORD PTR p$[rsp]
	add	rax, 8
	mov	rcx, rax
	call	AddStringToIncludePath

; 511  :     }

	jmp	SHORT $LN2@add_incpat
$LN3@add_incpat:

; 512  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
add_incpaths ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
p$ = 0
name$ = 8
value$ = 16
len$ = 24
sym$ = 32
__$AllocaPad$$ = 56
tv148 = 72
tv82 = 80
__$ArrayPad$ = 88
add_cmdline_tmacros PROC

; 456  : {

	push	rbp
	push	rdi
	sub	rsp, 136				; 00000088H
	lea	rbp, QWORD PTR [rsp+32]
	mov	rdi, rsp
	mov	ecx, 34					; 00000022H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rax, QWORD PTR __security_cookie
	xor	rax, rbp
	mov	QWORD PTR __$ArrayPad$[rbp], rax
	mov	QWORD PTR __$AllocaPad$$[rbp], 0

; 457  :     struct qitem *p;
; 458  :     char *name;
; 459  :     char *value;
; 460  :     int len;
; 461  :     struct asym *sym;
; 462  : 
; 463  :     DebugMsg(("add_cmdline_tmacros enter\n"));

	lea	rcx, OFFSET FLAT:$SG11891
	call	DoDebugMsg

; 464  :     for ( p = Options.queues[OPTQ_MACRO]; p; p = p->next ) {

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:Options+104
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR p$[rbp], rax
	jmp	SHORT $LN4@add_cmdlin
$LN2@add_cmdlin:
	mov	rax, QWORD PTR p$[rbp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR p$[rbp], rax
$LN4@add_cmdlin:
	cmp	QWORD PTR p$[rbp], 0
	je	$LN3@add_cmdlin

; 465  :         DebugMsg(("add_cmdline_tmacros: found >%s<\n", p->value));

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 8
	mov	rdx, rax
	lea	rcx, OFFSET FLAT:$SG11892
	call	DoDebugMsg

; 466  :         name = p->value;

	mov	rax, QWORD PTR p$[rbp]
	add	rax, 8
	mov	QWORD PTR name$[rbp], rax

; 467  :         value = strchr( name, '=' );

	mov	edx, 61					; 0000003dH
	mov	rcx, QWORD PTR name$[rbp]
	call	QWORD PTR __imp_strchr
	mov	QWORD PTR value$[rbp], rax

; 468  :         if( value == NULL ) {

	cmp	QWORD PTR value$[rbp], 0
	jne	SHORT $LN5@add_cmdlin

; 469  :             /* v2.06: ensure that 'value' doesn't point to r/o space */
; 470  :             //value = "";
; 471  :             value = name + strlen( name ); /* use the terminating NULL */

	mov	rcx, QWORD PTR name$[rbp]
	call	strlen
	mov	rcx, QWORD PTR name$[rbp]
	add	rcx, rax
	mov	rax, rcx
	mov	QWORD PTR value$[rbp], rax

; 472  :         } else {

	jmp	$LN6@add_cmdlin
$LN5@add_cmdlin:

; 473  :             len = value - name;

	mov	rax, QWORD PTR name$[rbp]
	mov	rcx, QWORD PTR value$[rbp]
	sub	rcx, rax
	mov	rax, rcx
	mov	DWORD PTR len$[rbp], eax

; 474  :             name = (char *)myalloca( len + 1 );

	mov	eax, DWORD PTR len$[rbp]
	inc	eax
	cdqe
	add	rax, 36					; 00000024H
	mov	QWORD PTR tv148[rbp], rax
	mov	rax, QWORD PTR tv148[rbp]
	add	rax, 15
	cmp	rax, QWORD PTR tv148[rbp]
	ja	SHORT $LN13@add_cmdlin
	mov	rax, 1152921504606846960		; 0ffffffffffffff0H
$LN13@add_cmdlin:
	and	rax, -16
	call	__chkstk
	sub	rsp, rax
	lea	rax, QWORD PTR [rsp+32]
	mov	QWORD PTR tv82[rbp], rax
	lea	r8, QWORD PTR __$AllocaPad$$[rbp]
	mov	rdx, QWORD PTR tv148[rbp]
	mov	rcx, QWORD PTR tv82[rbp]
	call	_RTC_AllocaHelper
	add	QWORD PTR tv82[rbp], 32			; 00000020H
	mov	rax, QWORD PTR tv82[rbp]
	mov	QWORD PTR name$[rbp], rax

; 475  :             memcpy( name, p->value, len );

	movsxd	rax, DWORD PTR len$[rbp]
	mov	rcx, QWORD PTR p$[rbp]
	add	rcx, 8
	mov	r8, rax
	mov	rdx, rcx
	mov	rcx, QWORD PTR name$[rbp]
	call	memcpy

; 476  :             *(name + len) = NULLC;

	movsxd	rax, DWORD PTR len$[rbp]
	mov	rcx, QWORD PTR name$[rbp]
	mov	BYTE PTR [rcx+rax], 0

; 477  :             value++;

	mov	rax, QWORD PTR value$[rbp]
	inc	rax
	mov	QWORD PTR value$[rbp], rax
$LN6@add_cmdlin:

; 478  :         }
; 479  : 
; 480  :         /* there's no check whether the name is a reserved word!
; 481  :          */
; 482  :         if( is_valid_identifier( name ) == ERROR ) {

	mov	rcx, QWORD PTR name$[rbp]
	call	is_valid_identifier
	cmp	eax, -1
	jne	SHORT $LN7@add_cmdlin

; 483  :             DebugMsg(("add_cmdline_tmacros: name >%s< invalid\n", name ));

	mov	rdx, QWORD PTR name$[rbp]
	lea	rcx, OFFSET FLAT:$SG11897
	call	DoDebugMsg

; 484  :             EmitErr( SYNTAX_ERROR_EX, name );

	mov	rdx, QWORD PTR name$[rbp]
	mov	ecx, 209				; 000000d1H
	call	EmitErr

; 485  :         } else {

	jmp	SHORT $LN8@add_cmdlin
$LN7@add_cmdlin:

; 486  :             sym = SymSearch( name );

	mov	rcx, QWORD PTR name$[rbp]
	call	SymFind
	mov	QWORD PTR sym$[rbp], rax

; 487  :             if ( sym == NULL ) {

	cmp	QWORD PTR sym$[rbp], 0
	jne	SHORT $LN9@add_cmdlin

; 488  :                 sym = SymCreate( name );

	mov	rcx, QWORD PTR name$[rbp]
	call	SymCreate
	mov	QWORD PTR sym$[rbp], rax

; 489  :                 sym->state = SYM_TMACRO;

	mov	rax, QWORD PTR sym$[rbp]
	mov	DWORD PTR [rax+32], 10
$LN9@add_cmdlin:

; 490  :             }
; 491  :             if ( sym->state == SYM_TMACRO ) {

	mov	rax, QWORD PTR sym$[rbp]
	cmp	DWORD PTR [rax+32], 10
	jne	SHORT $LN10@add_cmdlin

; 492  :                 sym->isdefined = TRUE;

	mov	rax, QWORD PTR sym$[rbp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 2
	mov	rcx, QWORD PTR sym$[rbp]
	mov	BYTE PTR [rcx+40], al

; 493  :                 sym->predefined = TRUE;

	mov	rax, QWORD PTR sym$[rbp]
	movzx	eax, BYTE PTR [rax+40]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR sym$[rbp]
	mov	BYTE PTR [rcx+40], al

; 494  :                 sym->string_ptr = value;

	mov	rax, QWORD PTR sym$[rbp]
	mov	rcx, QWORD PTR value$[rbp]
	mov	QWORD PTR [rax+16], rcx

; 495  :             } else

	jmp	SHORT $LN11@add_cmdlin
$LN10@add_cmdlin:

; 496  :                 EmitErr( SYMBOL_ALREADY_DEFINED, name );

	mov	rdx, QWORD PTR name$[rbp]
	mov	ecx, 56					; 00000038H
	call	EmitErr
$LN11@add_cmdlin:
$LN8@add_cmdlin:

; 497  :         }
; 498  :     }

	jmp	$LN2@add_cmdlin
$LN3@add_cmdlin:

; 499  :     return;
; 500  : }

	lea	rcx, QWORD PTR [rbp-32]
	lea	rdx, OFFSET FLAT:add_cmdline_tmacros$rtcFrameData
	mov	r8, QWORD PTR __$AllocaPad$$[rbp]
	call	_RTC_CheckStackVars2
	mov	rcx, QWORD PTR __$ArrayPad$[rbp]
	xor	rcx, rbp
	call	__security_check_cookie
	lea	rsp, QWORD PTR [rbp+104]
	pop	rdi
	pop	rbp
	ret	0
add_cmdline_tmacros ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
tv78 = 32
tv128 = 36
id$ = 64
is_valid_identifier PROC

; 434  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 435  :     /* special handling of first char of an id: it can't be a digit,
; 436  :      but can be a dot (don't care about ModuleInfo.dotname!). */
; 437  : 
; 438  :     if( is_valid_first_char( *id ) == 0 )

	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isalpha
	test	eax, eax
	jne	SHORT $LN9@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN9@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 64					; 00000040H
	je	SHORT $LN9@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN9@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	je	SHORT $LN9@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 46					; 0000002eH
	je	SHORT $LN9@is_valid_i
	mov	DWORD PTR tv78[rsp], 0
	jmp	SHORT $LN10@is_valid_i
$LN9@is_valid_i:
	mov	DWORD PTR tv78[rsp], 1
$LN10@is_valid_i:
	cmp	DWORD PTR tv78[rsp], 0
	jne	SHORT $LN5@is_valid_i

; 439  :         return( ERROR );

	mov	eax, -1
	jmp	$LN1@is_valid_i
$LN5@is_valid_i:

; 440  :     id++;

	mov	rax, QWORD PTR id$[rsp]
	inc	rax
	mov	QWORD PTR id$[rsp], rax

; 441  :     for( ; *id != NULLC; id++ ) {

	jmp	SHORT $LN4@is_valid_i
$LN2@is_valid_i:
	mov	rax, QWORD PTR id$[rsp]
	inc	rax
	mov	QWORD PTR id$[rsp], rax
$LN4@is_valid_i:
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN3@is_valid_i

; 442  :         if ( is_valid_id_char( *id ) == FALSE )

	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isalnum
	test	eax, eax
	jne	SHORT $LN11@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 95					; 0000005fH
	je	SHORT $LN11@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 64					; 00000040H
	je	SHORT $LN11@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 36					; 00000024H
	je	SHORT $LN11@is_valid_i
	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 63					; 0000003fH
	je	SHORT $LN11@is_valid_i
	mov	DWORD PTR tv128[rsp], 0
	jmp	SHORT $LN12@is_valid_i
$LN11@is_valid_i:
	mov	DWORD PTR tv128[rsp], 1
$LN12@is_valid_i:
	cmp	DWORD PTR tv128[rsp], 0
	jne	SHORT $LN6@is_valid_i

; 443  :             return( ERROR );

	mov	eax, -1
	jmp	SHORT $LN1@is_valid_i
$LN6@is_valid_i:

; 444  :     }

	jmp	$LN2@is_valid_i
$LN3@is_valid_i:

; 445  :     /* don't allow a single dot! */
; 446  :     if ( *(id-1) == '.' )

	mov	rax, QWORD PTR id$[rsp]
	movsx	eax, BYTE PTR [rax-1]
	cmp	eax, 46					; 0000002eH
	jne	SHORT $LN7@is_valid_i

; 447  :         return( ERROR );

	mov	eax, -1
	jmp	SHORT $LN1@is_valid_i
$LN7@is_valid_i:

; 448  : 
; 449  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@is_valid_i:

; 450  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
is_valid_identifier ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
curr$ = 48
ld$1 = 56
size$2 = 64
modinfo$ = 96
WriteModule PROC

; 384  : {

	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 385  :     struct dsym *curr;
; 386  : 
; 387  :     DebugMsg(("WriteModule enter\n"));

	lea	rcx, OFFSET FLAT:$SG11854
	call	DoDebugMsg

; 388  : 
; 389  :     /* final checks */
; 390  :     /* check limit of segments */
; 391  :     for( curr = SymTables[TAB_SEG].head; curr; curr = curr->next ) {

	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN4@WriteModul
$LN2@WriteModul:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR curr$[rsp], rax
$LN4@WriteModul:
	cmp	QWORD PTR curr$[rsp], 0
	je	SHORT $LN3@WriteModul

; 392  :         if ( curr->e.seginfo->Ofssize == USE16 && curr->sym.max_offset > 0x10000 ) {

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+104]
	test	eax, eax
	jne	SHORT $LN8@WriteModul
	mov	rax, QWORD PTR curr$[rsp]
	cmp	DWORD PTR [rax+56], 65536		; 00010000H
	jle	SHORT $LN8@WriteModul

; 393  :             if ( Options.output_format == OFORMAT_OMF )

	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN9@WriteModul

; 394  :                 EmitErr( SEGMENT_EXCEEDS_64K_LIMIT, curr->sym.name );

	mov	rax, QWORD PTR curr$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	mov	ecx, 222				; 000000deH
	call	EmitErr
	jmp	SHORT $LN10@WriteModul
$LN9@WriteModul:

; 395  :             else
; 396  :                 EmitWarn( 2, SEGMENT_EXCEEDS_64K_LIMIT, curr->sym.name );

	mov	rax, QWORD PTR curr$[rsp]
	mov	r8, QWORD PTR [rax+8]
	mov	edx, 222				; 000000deH
	mov	ecx, 2
	call	EmitWarn
$LN10@WriteModul:
$LN8@WriteModul:

; 397  :         }
; 398  :     }

	jmp	SHORT $LN2@WriteModul
$LN3@WriteModul:

; 399  : 
; 400  :     modinfo->g.WriteModule( modinfo );

	mov	rcx, QWORD PTR modinfo$[rsp]
	mov	rax, QWORD PTR modinfo$[rsp]
	call	QWORD PTR [rax+288]

; 401  : 
; 402  : #if DLLIMPORT
; 403  :     /* is the -Fd option given with a file name? */
; 404  :     if ( Options.names[OPTN_LNKDEF_FN] ) {

	mov	eax, 8
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:Options+32
	cmp	QWORD PTR [rcx+rax], 0
	je	$LN11@WriteModul

; 405  :         FILE *ld;
; 406  :         ld = fopen( Options.names[OPTN_LNKDEF_FN], "w" );

	mov	eax, 8
	imul	rax, rax, 4
	lea	rcx, OFFSET FLAT:Options+32
	lea	rdx, OFFSET FLAT:$SG11859
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fopen
	mov	QWORD PTR ld$1[rsp], rax

; 407  :         if ( ld == NULL ) {

	cmp	QWORD PTR ld$1[rsp], 0
	jne	SHORT $LN12@WriteModul

; 408  :             return( EmitErr( CANNOT_OPEN_FILE, Options.names[OPTN_LNKDEF_FN], ErrnoStr() ) );

	call	ErrnoStr
	mov	ecx, 8
	imul	rcx, rcx, 4
	lea	rdx, OFFSET FLAT:Options+32
	mov	r8, rax
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	ecx, 106				; 0000006aH
	call	EmitErr
	jmp	$LN1@WriteModul
$LN12@WriteModul:

; 409  :         }
; 410  :         for ( curr = SymTables[TAB_EXT].head; curr != NULL ; curr = curr->next ) {

	mov	eax, 16
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR curr$[rsp], rax
	jmp	SHORT $LN7@WriteModul
$LN5@WriteModul:
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR curr$[rsp], rax
$LN7@WriteModul:
	cmp	QWORD PTR curr$[rsp], 0
	je	$LN6@WriteModul

; 411  :             DebugMsg(("WriteModule: ext=%s, isproc=%u, weak=%u\n", curr->sym.name, curr->sym.isproc, curr->sym.weak ));

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	mov	rcx, QWORD PTR curr$[rsp]
	movzx	ecx, BYTE PTR [rcx+41]
	shr	cl, 3
	and	cl, 1
	movzx	ecx, cl
	mov	r9d, eax
	mov	r8d, ecx
	mov	rax, QWORD PTR curr$[rsp]
	mov	rdx, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG11861
	call	DoDebugMsg

; 412  :             if ( curr->sym.isproc && ( curr->sym.weak == FALSE || curr->sym.iat_used ) &&
; 413  :                 curr->sym.dll && *(curr->sym.dll->name) != NULLC ) {

	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+41]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	$LN13@WriteModul
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+47]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN14@WriteModul
	mov	rax, QWORD PTR curr$[rsp]
	movzx	eax, BYTE PTR [rax+40]
	shr	al, 3
	and	al, 1
	movzx	eax, al
	test	eax, eax
	je	$LN13@WriteModul
$LN14@WriteModul:
	mov	rax, QWORD PTR curr$[rsp]
	cmp	QWORD PTR [rax+56], 0
	je	$LN13@WriteModul
	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+56]
	mov	ecx, 1
	imul	rcx, rcx, 0
	movsx	eax, BYTE PTR [rax+rcx+12]
	test	eax, eax
	je	SHORT $LN13@WriteModul

; 414  :                 int size;
; 415  :                 Mangle( &curr->sym, StringBufferEnd );

	mov	rax, QWORD PTR curr$[rsp]
	mov	rdx, QWORD PTR ModuleInfo+488
	mov	rcx, rax
	call	Mangle

; 416  :                 size = sprintf( CurrSource, "import '%s'  %s.%s\n", StringBufferEnd, curr->sym.dll->name, curr->sym.name );

	mov	rax, QWORD PTR curr$[rsp]
	mov	rax, QWORD PTR [rax+56]
	add	rax, 12
	mov	rcx, QWORD PTR curr$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, rax
	mov	r8, QWORD PTR ModuleInfo+488
	lea	rdx, OFFSET FLAT:$SG11864
	mov	rcx, QWORD PTR ModuleInfo+464
	call	sprintf
	mov	DWORD PTR size$2[rsp], eax

; 417  :                 if ( fwrite( CurrSource, 1, size, ld ) != size )

	movsxd	rax, DWORD PTR size$2[rsp]
	mov	r9, QWORD PTR ld$1[rsp]
	mov	r8, rax
	mov	edx, 1
	mov	rcx, QWORD PTR ModuleInfo+464
	call	QWORD PTR __imp_fwrite
	movsxd	rcx, DWORD PTR size$2[rsp]
	cmp	rax, rcx
	je	SHORT $LN15@WriteModul

; 418  :                     WriteError();

	call	WriteError
$LN15@WriteModul:
$LN13@WriteModul:

; 419  :             }
; 420  :         }

	jmp	$LN5@WriteModul
$LN6@WriteModul:

; 421  :         fclose( ld );

	mov	rcx, QWORD PTR ld$1[rsp]
	call	QWORD PTR __imp_fclose
$LN11@WriteModul:

; 422  :     }
; 423  : #endif
; 424  :     DebugMsg(("WriteModule exit\n"));

	lea	rcx, OFFSET FLAT:$SG11866
	call	DoDebugMsg

; 425  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@WriteModul:

; 426  : }

	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
WriteModule ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
idx$1 = 32
i$2 = 36
tv84 = 40
pBytes$ = 64
len$ = 72
OutputBinBytes PROC

; 238  : {

$LN14:
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 239  : 
; 240  : 	if (write_to_file == TRUE) {

	movzx	eax, BYTE PTR write_to_file
	cmp	eax, 1
	jne	$LN5@OutputBinB

; 241  : 		uint_32 idx = CurrSeg->e.seginfo->current_loc - CurrSeg->e.seginfo->start_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	DWORD PTR idx$1[rsp], eax

; 242  : #ifdef DEBUG_OUT
; 243  : 		if (CurrSeg->e.seginfo->current_loc < CurrSeg->e.seginfo->start_loc) {

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]

; 244  : 			;//_asm int 3;
; 245  : 		}
; 246  : #endif
; 247  : 		/**/myassert(CurrSeg->e.seginfo->current_loc >= CurrSeg->e.seginfo->start_loc);

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+12], ecx
	jb	SHORT $LN12@OutputBinB
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN13@OutputBinB
$LN12@OutputBinB:
	mov	edx, 247				; 000000f7H
	lea	rcx, OFFSET FLAT:$SG11786
	call	InternalError
	mov	DWORD PTR tv84[rsp], eax
$LN13@OutputBinB:

; 248  : 		if (Options.output_format == OFORMAT_OMF && idx >= MAX_LEDATA_THRESHOLD) {

	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN8@OutputBinB
	cmp	DWORD PTR idx$1[rsp], 1014		; 000003f6H
	jb	SHORT $LN8@OutputBinB

; 249  : 			omf_FlushCurrSeg();

	call	omf_FlushCurrSeg

; 250  : 			idx = CurrSeg->e.seginfo->current_loc - CurrSeg->e.seginfo->start_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	DWORD PTR idx$1[rsp], eax
$LN8@OutputBinB:

; 251  : 		}
; 252  : 		//DebugMsg(("OutputByte: buff=%p, idx=%" I32_SPEC "X, byte=%X, codebuff[0]=%X\n", CurrSeg->e.seginfo->CodeBuffer, idx, byte, *CurrSeg->e.seginfo->CodeBuffer ));
; 253  : 		for (int i = 0; i < len; i++)

	mov	DWORD PTR i$2[rsp], 0
	jmp	SHORT $LN4@OutputBinB
$LN2@OutputBinB:
	mov	eax, DWORD PTR i$2[rsp]
	inc	eax
	mov	DWORD PTR i$2[rsp], eax
$LN4@OutputBinB:
	mov	eax, DWORD PTR len$[rsp]
	cmp	DWORD PTR i$2[rsp], eax
	jae	SHORT $LN3@OutputBinB

; 254  : 			CurrSeg->e.seginfo->CodeBuffer[idx++] = *(pBytes++);

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR idx$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	mov	rdx, QWORD PTR pBytes$[rsp]
	movzx	edx, BYTE PTR [rdx]
	mov	BYTE PTR [rax+rcx], dl
	mov	eax, DWORD PTR idx$1[rsp]
	inc	eax
	mov	DWORD PTR idx$1[rsp], eax
	mov	rax, QWORD PTR pBytes$[rsp]
	inc	rax
	mov	QWORD PTR pBytes$[rsp], rax
	jmp	SHORT $LN2@OutputBinB
$LN3@OutputBinB:

; 255  : 
; 256  : 	}

	jmp	SHORT $LN6@OutputBinB
$LN5@OutputBinB:

; 257  : #if 1
; 258  : 	/* check this in pass 1 only */
; 259  : 	else if (CurrSeg->e.seginfo->current_loc < CurrSeg->e.seginfo->start_loc) {

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+12], ecx
	jae	SHORT $LN9@OutputBinB

; 260  : 		DebugMsg(("OutputByte: segment start loc changed from %" I32_SPEC "Xh to %" I32_SPEC "Xh\n",

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	r8d, DWORD PTR [rax+12]
	mov	edx, DWORD PTR [rcx+8]
	lea	rcx, OFFSET FLAT:$SG11789
	call	DoDebugMsg

; 261  : 			CurrSeg->e.seginfo->start_loc,
; 262  : 			CurrSeg->e.seginfo->current_loc));
; 263  : 		CurrSeg->e.seginfo->start_loc = CurrSeg->e.seginfo->current_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx+8], eax
$LN9@OutputBinB:
$LN6@OutputBinB:

; 264  : 	}
; 265  : #endif
; 266  : 	CurrSeg->e.seginfo->current_loc+=len;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+12], eax

; 267  : 	CurrSeg->e.seginfo->bytes_written+=len;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+24]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+24], eax

; 268  : 	CurrSeg->e.seginfo->written = TRUE;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+107]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+107], al

; 269  : 	if (CurrSeg->e.seginfo->current_loc > CurrSeg->sym.max_offset)

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	ecx, DWORD PTR [rcx+56]
	cmp	DWORD PTR [rax+12], ecx
	jbe	SHORT $LN10@OutputBinB

; 270  : 		CurrSeg->sym.max_offset = CurrSeg->e.seginfo->current_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx+56], eax
$LN10@OutputBinB:

; 271  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
OutputBinBytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
seg$ = 48
value$ = 56
relative$ = 64
select_data$ = 72
SetCurrOffset PROC

; 336  : {

$LN15:
	mov	BYTE PTR [rsp+32], r9b
	mov	BYTE PTR [rsp+24], r8b
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+48]

; 337  :     if( relative )

	movzx	eax, BYTE PTR relative$[rsp]
	test	eax, eax
	je	SHORT $LN2@SetCurrOff

; 338  :         value += seg->e.seginfo->current_loc;

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+12]
	mov	ecx, DWORD PTR value$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR value$[rsp], eax
$LN2@SetCurrOff:

; 339  : 
; 340  :     if ( Options.output_format == OFORMAT_OMF ) {

	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN3@SetCurrOff

; 341  :         if ( seg == CurrSeg ) {

	mov	rax, QWORD PTR ModuleInfo+432
	cmp	QWORD PTR seg$[rsp], rax
	jne	SHORT $LN5@SetCurrOff

; 342  :             if ( write_to_file == TRUE )

	movzx	eax, BYTE PTR write_to_file
	cmp	eax, 1
	jne	SHORT $LN6@SetCurrOff

; 343  :                 omf_FlushCurrSeg();

	call	omf_FlushCurrSeg
$LN6@SetCurrOff:

; 344  : 
; 345  :         /* for debugging, tell if data is located in code sections*/
; 346  :             if( select_data )

	movzx	eax, BYTE PTR select_data$[rsp]
	test	eax, eax
	je	SHORT $LN7@SetCurrOff

; 347  :                 if ( ModuleInfo.CommentDataInCode )

	movzx	eax, BYTE PTR ModuleInfo+423
	test	eax, eax
	je	SHORT $LN8@SetCurrOff

; 348  :                     omf_OutSelect( TRUE );

	mov	cl, 1
	call	omf_OutSelect
$LN8@SetCurrOff:
$LN7@SetCurrOff:

; 349  :             LastCodeBufSize = value;

	mov	eax, DWORD PTR value$[rsp]
	mov	DWORD PTR LastCodeBufSize, eax
$LN5@SetCurrOff:

; 350  :         }
; 351  :         seg->e.seginfo->start_loc = value;

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax+8], ecx

; 352  :     /* for -bin, if there's an ORG (relative==false) and no initialized data
; 353  :      * has been set yet, set start_loc!
; 354  :      * v1.96: this is now also done for COFF and ELF
; 355  :      */
; 356  :     /* else if ( Options.output_format == OFORMAT_BIN && relative == FALSE ) { */
; 357  :     } else {

	jmp	SHORT $LN4@SetCurrOff
$LN3@SetCurrOff:

; 358  :         if ( write_to_file == FALSE ) {

	movzx	eax, BYTE PTR write_to_file
	test	eax, eax
	jne	SHORT $LN9@SetCurrOff

; 359  :             if ( relative ) {

	movzx	eax, BYTE PTR relative$[rsp]
	test	eax, eax
	je	SHORT $LN10@SetCurrOff

; 360  : #if 0 /* don't include "preceding" uninitialized data */
; 361  :                 if( seg->e.seginfo->current_loc < seg->e.seginfo->start_loc )
; 362  :                     seg->e.seginfo->start_loc = seg->e.seginfo->current_loc;
; 363  : #endif
; 364  :             } else {

	jmp	SHORT $LN11@SetCurrOff
$LN10@SetCurrOff:

; 365  :                 if ( seg->e.seginfo->bytes_written == 0 )

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	DWORD PTR [rax+24], 0
	jne	SHORT $LN12@SetCurrOff

; 366  :                     seg->e.seginfo->start_loc = value;

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax+8], ecx
$LN12@SetCurrOff:
$LN11@SetCurrOff:
$LN9@SetCurrOff:
$LN4@SetCurrOff:

; 367  :             }
; 368  :         }
; 369  :     }
; 370  : 
; 371  :     seg->e.seginfo->current_loc = value;

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR value$[rsp]
	mov	DWORD PTR [rax+12], ecx

; 372  :     seg->e.seginfo->written = FALSE;

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+107]
	and	al, 223					; 000000dfH
	mov	rcx, QWORD PTR seg$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+107], al

; 373  : 
; 374  :     if( seg->e.seginfo->current_loc > seg->sym.max_offset )

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR seg$[rsp]
	mov	ecx, DWORD PTR [rcx+56]
	cmp	DWORD PTR [rax+12], ecx
	jbe	SHORT $LN13@SetCurrOff

; 375  :         seg->sym.max_offset = seg->e.seginfo->current_loc;

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR seg$[rsp]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx+56], eax
$LN13@SetCurrOff:

; 376  : 
; 377  :     return( NOT_ERROR );

	xor	eax, eax

; 378  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
SetCurrOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
p$ = 32
tv74 = 40
string$ = 64
WritePreprocessedLine PROC

; 583  : {

$LN11:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 584  :     static bool PrintEmptyLine = TRUE;
; 585  :     const char *p;
; 586  : 
; 587  : #if 0 /* v2.08: removed, obsolete */
; 588  :     /* filter some macro specific directives */
; 589  :     if ( tokenarray[0].token == T_DIRECTIVE &&
; 590  :          ( tokenarray[0].tokval == T_ENDM ||
; 591  :            tokenarray[0].tokval == T_EXITM))
; 592  :         return;
; 593  :     /* don't print generated code - with one exception:
; 594  :      if the code was generated as a result of structure initialization,
; 595  :      then do!
; 596  :      */
; 597  :     if ( GeneratedCode )
; 598  :         return;
; 599  : #endif
; 600  :     if ( Token_Count > 0 ) {

	cmp	DWORD PTR ModuleInfo+496, 0
	jle	SHORT $LN5@WritePrepr

; 601  :         /* v2.08: don't print a leading % (this char is no longer filtered) */
; 602  :         for ( p = string; isspace( *p ); p++ );

	mov	rax, QWORD PTR string$[rsp]
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN4@WritePrepr
$LN2@WritePrepr:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN4@WritePrepr:
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	QWORD PTR __imp_isspace
	test	eax, eax
	je	SHORT $LN3@WritePrepr
	jmp	SHORT $LN2@WritePrepr
$LN3@WritePrepr:

; 603  :         printf("%s\n", *p == '%' ? p+1 : string );

	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 37					; 00000025H
	jne	SHORT $LN9@WritePrepr
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR tv74[rsp], rax
	jmp	SHORT $LN10@WritePrepr
$LN9@WritePrepr:
	mov	rax, QWORD PTR string$[rsp]
	mov	QWORD PTR tv74[rsp], rax
$LN10@WritePrepr:
	mov	rdx, QWORD PTR tv74[rsp]
	lea	rcx, OFFSET FLAT:$SG11931
	call	printf

; 604  :         PrintEmptyLine = TRUE;

	mov	BYTE PTR ?PrintEmptyLine@?1??WritePreprocessedLine@@9@9, 1
	jmp	SHORT $LN6@WritePrepr
$LN5@WritePrepr:

; 605  :     } else if ( PrintEmptyLine ) {

	movzx	eax, BYTE PTR ?PrintEmptyLine@?1??WritePreprocessedLine@@9@9
	test	eax, eax
	je	SHORT $LN7@WritePrepr

; 606  :         PrintEmptyLine = FALSE;

	mov	BYTE PTR ?PrintEmptyLine@?1??WritePreprocessedLine@@9@9, 0

; 607  :         printf("\n");

	lea	rcx, OFFSET FLAT:$SG11933
	call	printf
$LN7@WritePrepr:
$LN6@WritePrepr:

; 608  :     }
; 609  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
WritePreprocessedLine ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
i$ = 32
sym$ = 64
pst$ = 72
buffer$ = 80
ConvertSectionName PROC

; 166  : {

$LN13:
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 167  :     int i;
; 168  : 
; 169  :     for ( i = 0; i < sizeof( cst ) / sizeof( cst[0] ); i++ ) {

	mov	DWORD PTR i$[rsp], 0
	jmp	SHORT $LN4@ConvertSec
$LN2@ConvertSec:
	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@ConvertSec:
	movsxd	rax, DWORD PTR i$[rsp]
	cmp	rax, 4
	jae	$LN3@ConvertSec

; 170  :         if ( memcmp( sym->name, cst[i].src, cst[i].len ) == 0 ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	movzx	eax, BYTE PTR [rcx+rax]
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 24
	lea	rdx, OFFSET FLAT:cst
	mov	r8d, eax
	mov	rdx, QWORD PTR [rdx+rcx+8]
	mov	rax, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rax+8]
	call	memcmp
	test	eax, eax
	jne	$LN5@ConvertSec

; 171  :             if ( sym->name[cst[i].len] == NULLC || ( sym->name[cst[i].len] == '$' && ( cst[i].flags & CSF_GRPCHK ) ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN7@ConvertSec
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 36					; 00000024H
	jne	$LN6@ConvertSec
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	movzx	eax, BYTE PTR [rcx+rax+1]
	and	eax, 1
	test	eax, eax
	je	$LN6@ConvertSec
$LN7@ConvertSec:

; 172  : 
; 173  :                 if ( pst ) {

	cmp	QWORD PTR pst$[rsp], 0
	je	SHORT $LN8@ConvertSec

; 174  :                     if ( i == CSI_BSS && ( (struct dsym *)sym)->e.seginfo->bytes_written != 0 )

	cmp	DWORD PTR i$[rsp], 3
	jne	SHORT $LN9@ConvertSec
	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	DWORD PTR [rax+24], 0
	je	SHORT $LN9@ConvertSec

; 175  :                         ; /* don't set segment type to BSS if the segment contains initialized data */

	jmp	SHORT $LN10@ConvertSec
$LN9@ConvertSec:

; 176  :                     else
; 177  :                         *pst = stt[i];

	movsxd	rax, DWORD PTR i$[rsp]
	lea	rcx, OFFSET FLAT:stt
	mov	rdx, QWORD PTR pst$[rsp]
	mov	eax, DWORD PTR [rcx+rax*4]
	mov	DWORD PTR [rdx], eax
$LN10@ConvertSec:
$LN8@ConvertSec:

; 178  :                 }
; 179  : 
; 180  :                 if ( sym->name[cst[i].len] == NULLC ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR sym$[rsp]
	mov	rcx, QWORD PTR [rcx+8]
	movsx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN11@ConvertSec

; 181  : #if DJGPP_SUPPORT
; 182  :                     /* DJGPP won't be happy with .rdata segment name */
; 183  :                     if( ModuleInfo.sub_format == SFORMAT_DJGPP && i == CSI_CONST )
; 184  :                         return( ".const" );
; 185  : #endif
; 186  :                     return( (char *)cst[i].dst );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	mov	rax, QWORD PTR [rcx+rax+16]
	jmp	SHORT $LN1@ConvertSec
$LN11@ConvertSec:

; 187  :                 }
; 188  : 
; 189  :                 strcpy( buffer, cst[i].dst );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	mov	rdx, QWORD PTR [rcx+rax+16]
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcpy

; 190  :                 strcat( buffer, sym->name+cst[i].len );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 24
	lea	rcx, OFFSET FLAT:cst
	movzx	eax, BYTE PTR [rcx+rax]
	mov	rcx, QWORD PTR sym$[rsp]
	add	rax, QWORD PTR [rcx+8]
	mov	rdx, rax
	mov	rcx, QWORD PTR buffer$[rsp]
	call	strcat

; 191  :                 return( buffer );

	mov	rax, QWORD PTR buffer$[rsp]
	jmp	SHORT $LN1@ConvertSec
$LN6@ConvertSec:
$LN5@ConvertSec:

; 192  :             }
; 193  :         }
; 194  :     }

	jmp	$LN2@ConvertSec
$LN3@ConvertSec:

; 195  :     return( sym->name );

	mov	rax, QWORD PTR sym$[rsp]
	mov	rax, QWORD PTR [rax+8]
$LN1@ConvertSec:

; 196  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
ConvertSectionName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
close_files PROC

; 1220 : {

$LN12:
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd

; 1221 :     /* v2.11: no fatal errors anymore if fclose() fails.
; 1222 :      * That's because Fatal() may cause close_files() to be
; 1223 :      * reentered and thus cause an endless loop.
; 1224 :      */
; 1225 : 
; 1226 :     /* close ASM file */
; 1227 :     if( CurrFile[ASM] != NULL ) {

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN2@close_file

; 1228 :         if( fclose( CurrFile[ASM] ) != 0 )

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fclose
	test	eax, eax
	je	SHORT $LN3@close_file

; 1229 :             EmitErr( CANNOT_CLOSE_FILE, CurrFName[ASM], errno );

	call	QWORD PTR __imp__errno
	mov	ecx, 8
	imul	rcx, rcx, 0
	lea	rdx, OFFSET FLAT:ModuleInfo+128
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	ecx, 107				; 0000006bH
	call	EmitErr
$LN3@close_file:

; 1230 :         CurrFile[ASM] = NULL;

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	QWORD PTR [rcx+rax], 0
$LN2@close_file:

; 1231 :     }
; 1232 : 
; 1233 :     /* close OBJ file */
; 1234 :     if ( CurrFile[OBJ] != NULL ) {

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN4@close_file

; 1235 :         if ( fclose( CurrFile[OBJ] ) != 0 )

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fclose
	test	eax, eax
	je	SHORT $LN5@close_file

; 1236 :             EmitErr( CANNOT_CLOSE_FILE, CurrFName[OBJ], errno );

	call	QWORD PTR __imp__errno
	mov	ecx, 8
	imul	rcx, rcx, 1
	lea	rdx, OFFSET FLAT:ModuleInfo+128
	mov	r8d, DWORD PTR [rax]
	mov	rdx, QWORD PTR [rdx+rcx]
	mov	ecx, 107				; 0000006bH
	call	EmitErr
$LN5@close_file:

; 1237 :         CurrFile[OBJ] = NULL;

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	QWORD PTR [rcx+rax], 0
$LN4@close_file:

; 1238 :     }
; 1239 :     /* delete the object module if errors occured */
; 1240 :     if ( Options.syntax_check_only == FALSE &&

	movzx	eax, BYTE PTR Options+188
	test	eax, eax
	jne	SHORT $LN6@close_file
	cmp	DWORD PTR ModuleInfo, 0
	jbe	SHORT $LN6@close_file

; 1241 :         ModuleInfo.g.error_count > 0 ) {
; 1242 :         remove( CurrFName[OBJ] );

	mov	eax, 8
	imul	rax, rax, 1
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_remove
$LN6@close_file:

; 1243 :     }
; 1244 : 
; 1245 :     if( CurrFile[LST] != NULL ) {

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN7@close_file

; 1246 :         fclose( CurrFile[LST] );

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fclose

; 1247 :         CurrFile[LST] = NULL;

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	QWORD PTR [rcx+rax], 0
$LN7@close_file:

; 1248 :     }
; 1249 : 
; 1250 :     /* close ERR file */
; 1251 :     if ( CurrFile[ERR] != NULL ) {

	mov	eax, 8
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN8@close_file

; 1252 :         fclose( CurrFile[ERR] );

	mov	eax, 8
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_fclose

; 1253 :         CurrFile[ERR] = NULL;

	mov	eax, 8
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	QWORD PTR [rcx+rax], 0
	jmp	SHORT $LN9@close_file
$LN8@close_file:

; 1254 :     } else if ( CurrFName[ERR] )

	mov	eax, 8
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN10@close_file

; 1255 :         /* nothing written, delete any existing ERR file */
; 1256 :         remove( CurrFName[ERR] );

	mov	eax, 8
	imul	rax, rax, 3
	lea	rcx, OFFSET FLAT:ModuleInfo+128
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_remove
$LN10@close_file:
$LN9@close_file:

; 1257 :     return;
; 1258 : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
close_files ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
value$ = 16
SetMasm510 PROC

; 615  : {

$LN6:
	mov	BYTE PTR [rsp+8], cl
	push	rdi

; 616  :     ModuleInfo.m510 = value;

	movzx	eax, BYTE PTR value$[rsp]
	and	eax, 1
	shl	eax, 6
	mov	ecx, DWORD PTR ModuleInfo+408
	and	ecx, -65				; ffffffbfH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 617  :     ModuleInfo.oldstructs = value;

	movzx	eax, BYTE PTR value$[rsp]
	and	eax, 1
	shl	eax, 8
	mov	ecx, DWORD PTR ModuleInfo+408
	btr	ecx, 8
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 618  :     /* ModuleInfo.oldmacros = value; not implemented yet */
; 619  :     ModuleInfo.dotname = value;

	movzx	eax, BYTE PTR value$[rsp]
	and	eax, 1
	shl	eax, 4
	mov	ecx, DWORD PTR ModuleInfo+408
	and	ecx, -17				; ffffffefH
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 620  :     ModuleInfo.setif2 = value;

	movzx	eax, BYTE PTR value$[rsp]
	and	eax, 1
	shl	eax, 10
	mov	ecx, DWORD PTR ModuleInfo+408
	btr	ecx, 10
	or	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR ModuleInfo+408, eax

; 621  : 
; 622  :     if ( value ) {

	movzx	eax, BYTE PTR value$[rsp]
	test	eax, eax
	je	SHORT $LN2@SetMasm510

; 623  :         if ( ModuleInfo.model == MODEL_NONE ) {

	cmp	DWORD PTR ModuleInfo+360, 0
	jne	SHORT $LN3@SetMasm510

; 624  :             /* if no model is specified, set OFFSET:SEGMENT */
; 625  :             ModuleInfo.offsettype = OT_SEGMENT;

	mov	DWORD PTR ModuleInfo+384, 2

; 626  :             if ( ModuleInfo.langtype == LANG_NONE ) {

	cmp	DWORD PTR ModuleInfo+364, 0
	jne	SHORT $LN4@SetMasm510

; 627  :                 ModuleInfo.scoped = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 7
	mov	DWORD PTR ModuleInfo+408, eax

; 628  :                 ModuleInfo.procs_private = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 4
	mov	DWORD PTR ModuleInfo+408, eax
$LN4@SetMasm510:
$LN3@SetMasm510:
$LN2@SetMasm510:

; 629  :             }
; 630  :         }
; 631  :     }
; 632  :     return;
; 633  : }

	pop	rdi
	ret	0
SetMasm510 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
prev_written$ = 64
curr_written$ = 68
starttime$ = 72
endtime$ = 76
seg$ = 80
tv209 = 88
tv211 = 92
tv213 = 96
tv215 = 104
tv264 = 112
source$ = 144
AssembleModule PROC

; 1425 : {

$LN31:
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 128				; 00000080H
	mov	rdi, rsp
	mov	ecx, 32					; 00000020H
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+144]

; 1426 :     uint_32       prev_written = -1;

	mov	DWORD PTR prev_written$[rsp], -1	; ffffffffH

; 1427 :     uint_32       curr_written;
; 1428 :     int           starttime;
; 1429 :     int           endtime;
; 1430 :     struct dsym   *seg;
; 1431 : 
; 1432 :     DebugMsg(("AssembleModule(\"%s\") enter\n", source ));

	mov	rdx, QWORD PTR source$[rsp]
	lea	rcx, OFFSET FLAT:$SG12203
	call	DoDebugMsg

; 1433 : 
; 1434 :     memset( &ModuleInfo, 0, sizeof(ModuleInfo) );

	mov	r8d, 776				; 00000308H
	xor	edx, edx
	lea	rcx, OFFSET FLAT:ModuleInfo
	call	memset

; 1435 :     DebugCmd( ModuleInfo.cref = TRUE ); /* enable debug displays */

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 12
	mov	DWORD PTR ModuleInfo+408, eax

; 1436 : 
; 1437 : #if 1 //def __SW_BD
; 1438 :     /* fatal errors during assembly won't terminate the program,
; 1439 :      * just the assembly step.!
; 1440 :      */
; 1441 :     if ( setjmp( jmpenv ) ) {

	lea	rcx, OFFSET FLAT:jmpenv
	mov	rdx, rsp
	call	_setjmp
	test	eax, eax
	je	SHORT $LN11@AssembleMo

; 1442 :         if ( ModuleInfo.g.src_stack )

	cmp	QWORD PTR ModuleInfo+200, 0
	je	SHORT $LN12@AssembleMo

; 1443 :             ClearSrcStack(); /* avoid memory leaks! */

	call	ClearSrcStack
$LN12@AssembleMo:

; 1444 :         goto done;

	jmp	$done$32
$LN11@AssembleMo:

; 1445 :     }
; 1446 : #endif
; 1447 : 
; 1448 :     AssembleInit( source );

	mov	rcx, QWORD PTR source$[rsp]
	call	AssembleInit

; 1449 : 
; 1450 :     starttime = clock();

	call	QWORD PTR __imp_clock
	mov	DWORD PTR starttime$[rsp], eax

; 1451 : 
; 1452 : #if 0 /* 1=trigger a protection fault */
; 1453 :     seg = NULL;
; 1454 :     seg->sym.state = SYM_UNDEFINED;
; 1455 : #endif
; 1456 : 
; 1457 :     for( Parse_Pass = PASS_1; ; Parse_Pass++ ) {

	mov	DWORD PTR Parse_Pass, 0
	jmp	SHORT $LN4@AssembleMo
$LN2@AssembleMo:
	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	DWORD PTR Parse_Pass, eax
$LN4@AssembleMo:

; 1458 : 
; 1459 :         DebugMsg(( "*************\npass %u\n*************\n", Parse_Pass + 1 ));

	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12206
	call	DoDebugMsg

; 1460 :         OnePass();

	call	OnePass

; 1461 : 
; 1462 :         if( ModuleInfo.g.error_count > 0 ) {

	cmp	DWORD PTR ModuleInfo, 0
	jbe	SHORT $LN13@AssembleMo

; 1463 :             DebugMsg(("AssembleModule(%u): errorcnt=%u\n", Parse_Pass + 1, ModuleInfo.g.error_count ));

	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	r8d, DWORD PTR ModuleInfo
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12208
	call	DoDebugMsg

; 1464 :             break;

	jmp	$LN3@AssembleMo
$LN13@AssembleMo:

; 1465 :         }
; 1466 : 
; 1467 :         /* calculate total size of segments */
; 1468 :         for ( curr_written = 0, seg = SymTables[TAB_SEG].head; seg ; seg = seg->next ) {

	mov	DWORD PTR curr_written$[rsp], 0
	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR seg$[rsp], rax
	jmp	SHORT $LN7@AssembleMo
$LN5@AssembleMo:
	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR seg$[rsp], rax
$LN7@AssembleMo:
	cmp	QWORD PTR seg$[rsp], 0
	je	SHORT $LN6@AssembleMo

; 1469 :             /* v2.04: use <max_offset> instead of <bytes_written>
; 1470 :              * (the latter is not always reliable due to backpatching).
; 1471 :              */
; 1472 :             //curr_written += seg->e.seginfo->bytes_written;
; 1473 :             curr_written += seg->sym.max_offset;

	mov	rax, QWORD PTR seg$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	ecx, DWORD PTR curr_written$[rsp]
	add	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR curr_written$[rsp], eax

; 1474 :             DebugMsg(("AssembleModule(%u): segm=%-8s start=%8" I32_SPEC "X max_ofs=%8" I32_SPEC "X written=%" I32_SPEC "X\n",

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR seg$[rsp]
	mov	rcx, QWORD PTR [rcx+96]
	mov	edx, DWORD PTR Parse_Pass
	inc	edx
	mov	eax, DWORD PTR [rax+24]
	mov	DWORD PTR [rsp+40], eax
	mov	rax, QWORD PTR seg$[rsp]
	mov	eax, DWORD PTR [rax+56]
	mov	DWORD PTR [rsp+32], eax
	mov	r9d, DWORD PTR [rcx+8]
	mov	rax, QWORD PTR seg$[rsp]
	mov	r8, QWORD PTR [rax+8]
	lea	rcx, OFFSET FLAT:$SG12209
	call	DoDebugMsg

; 1475 :                       Parse_Pass + 1, seg->sym.name, seg->e.seginfo->start_loc, seg->sym.max_offset,
; 1476 :                       seg->e.seginfo->bytes_written ));
; 1477 :         }

	jmp	SHORT $LN5@AssembleMo
$LN6@AssembleMo:

; 1478 : 
; 1479 :         /* if there's no phase error and size of segments didn't change, we're done */
; 1480 :         DebugMsg(("AssembleModule(%u): PhaseError=%u, prev_written=%" I32_SPEC "X, curr_written=%" I32_SPEC "X\n", Parse_Pass + 1, ModuleInfo.PhaseError, prev_written, curr_written));

	movzx	eax, BYTE PTR ModuleInfo+422
	mov	ecx, DWORD PTR Parse_Pass
	inc	ecx
	mov	edx, DWORD PTR curr_written$[rsp]
	mov	DWORD PTR [rsp+32], edx
	mov	r9d, DWORD PTR prev_written$[rsp]
	mov	r8d, eax
	mov	edx, ecx
	lea	rcx, OFFSET FLAT:$SG12210
	call	DoDebugMsg

; 1481 :         if( !ModuleInfo.PhaseError && prev_written == curr_written )

	movzx	eax, BYTE PTR ModuleInfo+422
	test	eax, eax
	jne	SHORT $LN14@AssembleMo
	mov	eax, DWORD PTR curr_written$[rsp]
	cmp	DWORD PTR prev_written$[rsp], eax
	jne	SHORT $LN14@AssembleMo

; 1482 :             break;

	jmp	$LN3@AssembleMo
$LN14@AssembleMo:

; 1483 : 
; 1484 : #ifdef DEBUG_OUT
; 1485 :         if ( curr_written < prev_written && prev_written != -1 ) {

	mov	eax, DWORD PTR prev_written$[rsp]
	cmp	DWORD PTR curr_written$[rsp], eax
	jae	SHORT $LN15@AssembleMo
	cmp	DWORD PTR prev_written$[rsp], -1	; ffffffffH
	je	SHORT $LN15@AssembleMo

; 1486 :             printf( "size shrank from %" I32_SPEC "X to %" I32_SPEC "X in pass %u\n", prev_written, curr_written, Parse_Pass + 1 );

	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	r9d, eax
	mov	r8d, DWORD PTR curr_written$[rsp]
	mov	edx, DWORD PTR prev_written$[rsp]
	lea	rcx, OFFSET FLAT:$SG12213
	call	printf
$LN15@AssembleMo:

; 1487 :         }
; 1488 : #endif
; 1489 : 
; 1490 :         DebugMsg(("AssembleModule(%u): prepare for next pass\n", Parse_Pass + 1));

	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	edx, eax
	lea	rcx, OFFSET FLAT:$SG12214
	call	DoDebugMsg

; 1491 :         prev_written = curr_written;

	mov	eax, DWORD PTR curr_written$[rsp]
	mov	DWORD PTR prev_written$[rsp], eax

; 1492 : 
; 1493 :         if ( Parse_Pass % 200 == 199 )

	xor	edx, edx
	mov	eax, DWORD PTR Parse_Pass
	mov	ecx, 200				; 000000c8H
	div	ecx
	mov	eax, edx
	cmp	eax, 199				; 000000c7H
	jne	SHORT $LN16@AssembleMo

; 1494 :             EmitWarn( 2, ASSEMBLY_PASSES, Parse_Pass+1 );

	mov	eax, DWORD PTR Parse_Pass
	inc	eax
	mov	r8d, eax
	mov	edx, 240				; 000000f0H
	mov	ecx, 2
	call	EmitWarn
$LN16@AssembleMo:

; 1495 : #ifdef DEBUG_OUT
; 1496 :         if ( Options.max_passes && Parse_Pass == (Options.max_passes - 1) )

	movzx	eax, WORD PTR Options+20
	test	eax, eax
	je	SHORT $LN17@AssembleMo
	movzx	eax, WORD PTR Options+20
	dec	eax
	cmp	DWORD PTR Parse_Pass, eax
	jne	SHORT $LN17@AssembleMo

; 1497 :             break;

	jmp	$LN3@AssembleMo
$LN17@AssembleMo:

; 1498 : #endif
; 1499 :         if ( Options.line_numbers ) {

	movzx	eax, BYTE PTR Options+1
	test	eax, eax
	je	$LN18@AssembleMo

; 1500 : #if COFF_SUPPORT
; 1501 :             if ( Options.output_format == OFORMAT_COFF ) {

	cmp	DWORD PTR Options+160, 2
	jne	SHORT $LN19@AssembleMo

; 1502 :                 for( seg = SymTables[TAB_SEG].head; seg; seg = seg->next ) {

	mov	eax, 16
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:SymTables
	mov	rax, QWORD PTR [rcx+rax]
	mov	QWORD PTR seg$[rsp], rax
	jmp	SHORT $LN10@AssembleMo
$LN8@AssembleMo:
	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+104]
	mov	QWORD PTR seg$[rsp], rax
$LN10@AssembleMo:
	cmp	QWORD PTR seg$[rsp], 0
	je	SHORT $LN9@AssembleMo

; 1503 :                     if ( seg->e.seginfo->LinnumQueue )

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	cmp	QWORD PTR [rax+56], 0
	je	SHORT $LN21@AssembleMo

; 1504 :                         QueueDeleteLinnum( seg->e.seginfo->LinnumQueue );

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR [rax+56]
	call	QueueDeleteLinnum
$LN21@AssembleMo:

; 1505 :                     seg->e.seginfo->LinnumQueue = NULL;

	mov	rax, QWORD PTR seg$[rsp]
	mov	rax, QWORD PTR [rax+96]
	mov	QWORD PTR [rax+56], 0

; 1506 :                 }

	jmp	SHORT $LN8@AssembleMo
$LN9@AssembleMo:

; 1507 :             } else {

	jmp	SHORT $LN20@AssembleMo
$LN19@AssembleMo:

; 1508 : #endif
; 1509 :                 QueueDeleteLinnum( &LinnumQueue );

	lea	rcx, OFFSET FLAT:LinnumQueue
	call	QueueDeleteLinnum

; 1510 :                 LinnumQueue.head = NULL;

	mov	QWORD PTR LinnumQueue, 0
$LN20@AssembleMo:
$LN18@AssembleMo:

; 1511 : #if COFF_SUPPORT
; 1512 :             }
; 1513 : #endif
; 1514 :         }
; 1515 : 
; 1516 :         /* set file position of ASM and LST files for next pass */
; 1517 : 
; 1518 :         rewind( CurrFile[ASM] );

	mov	eax, 8
	imul	rax, rax, 0
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_rewind

; 1519 :         if ( write_to_file && Options.output_format == OFORMAT_OMF )

	movzx	eax, BYTE PTR write_to_file
	test	eax, eax
	je	SHORT $LN22@AssembleMo
	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN22@AssembleMo

; 1520 :             omf_set_filepos();

	call	omf_set_filepos
$LN22@AssembleMo:

; 1521 : 
; 1522 : #if FASTPASS
; 1523 :         if ( UseSavedState == FALSE && CurrFile[LST] ) {

	movzx	eax, BYTE PTR UseSavedState
	test	eax, eax
	jne	SHORT $LN23@AssembleMo
	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN23@AssembleMo

; 1524 : #else
; 1525 :         if ( CurrFile[LST] ) {
; 1526 : #endif
; 1527 :             rewind( CurrFile[LST] );

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	mov	rcx, QWORD PTR [rcx+rax]
	call	QWORD PTR __imp_rewind

; 1528 :             LstInit();

	call	LstInit
$LN23@AssembleMo:

; 1529 :         }
; 1530 :     } /* end for() */

	jmp	$LN2@AssembleMo
$LN3@AssembleMo:

; 1531 : 
; 1532 :     if ( ( Parse_Pass > PASS_1 ) && write_to_file )

	cmp	DWORD PTR Parse_Pass, 0
	jbe	SHORT $LN24@AssembleMo
	movzx	eax, BYTE PTR write_to_file
	test	eax, eax
	je	SHORT $LN24@AssembleMo

; 1533 :         WriteModule( &ModuleInfo );

	lea	rcx, OFFSET FLAT:ModuleInfo
	call	WriteModule
$LN24@AssembleMo:

; 1534 : 
; 1535 :     if ( ModuleInfo.pCodeBuff ) {
; 1536 :         LclFree( ModuleInfo.pCodeBuff );
; 1537 :     }
; 1538 :     DebugMsg(("AssembleModule: finished, cleanup\n"));

	lea	rcx, OFFSET FLAT:$SG12225
	call	DoDebugMsg

; 1539 : 
; 1540 :     /* Write a symbol listing file (if requested) */
; 1541 :     LstWriteCRef();

	call	LstWriteCRef

; 1542 : 
; 1543 :     endtime = clock(); /* is in ms already */

	call	QWORD PTR __imp_clock
	mov	DWORD PTR endtime$[rsp], eax

; 1544 : 
; 1545 :     sprintf( CurrSource, MsgGetEx( MSG_ASSEMBLY_RESULTS ),

	mov	eax, DWORD PTR starttime$[rsp]
	mov	ecx, DWORD PTR endtime$[rsp]
	sub	ecx, eax
	mov	eax, ecx
	mov	DWORD PTR tv209[rsp], eax
	mov	ecx, DWORD PTR Parse_Pass
	inc	ecx
	mov	DWORD PTR tv211[rsp], ecx
	call	GetLineNumber
	mov	DWORD PTR tv213[rsp], eax
	mov	ecx, DWORD PTR ModuleInfo+428
	call	GetFName
	mov	QWORD PTR tv215[rsp], rax
	mov	ecx, 1
	call	MsgGetEx
	mov	ecx, DWORD PTR ModuleInfo
	mov	DWORD PTR [rsp+56], ecx
	mov	ecx, DWORD PTR ModuleInfo+4
	mov	DWORD PTR [rsp+48], ecx
	mov	ecx, DWORD PTR tv209[rsp]
	mov	DWORD PTR [rsp+40], ecx
	mov	ecx, DWORD PTR tv211[rsp]
	mov	DWORD PTR [rsp+32], ecx
	mov	ecx, DWORD PTR tv213[rsp]
	mov	r9d, ecx
	mov	rcx, QWORD PTR tv215[rsp]
	mov	r8, QWORD PTR [rcx]
	mov	rdx, rax
	mov	rcx, QWORD PTR ModuleInfo+464
	call	sprintf

; 1546 :              GetFName( ModuleInfo.srcfile )->fname,
; 1547 :              GetLineNumber(),
; 1548 :              Parse_Pass + 1,
; 1549 :              endtime - starttime,
; 1550 :              ModuleInfo.g.warning_count,
; 1551 :              ModuleInfo.g.error_count);
; 1552 :     if ( Options.quiet == FALSE )

	movzx	eax, BYTE PTR Options
	test	eax, eax
	jne	SHORT $LN26@AssembleMo

; 1553 :         printf( "%s\n", CurrSource );

	mov	rdx, QWORD PTR ModuleInfo+464
	lea	rcx, OFFSET FLAT:$SG12227
	call	printf
$LN26@AssembleMo:

; 1554 : 
; 1555 :     if ( CurrFile[LST] ) {

	mov	eax, 8
	imul	rax, rax, 2
	lea	rcx, OFFSET FLAT:ModuleInfo+96
	cmp	QWORD PTR [rcx+rax], 0
	je	SHORT $LN27@AssembleMo

; 1556 :         LstPrintf( CurrSource );

	mov	rcx, QWORD PTR ModuleInfo+464
	call	LstPrintf

; 1557 :         LstNL();

	call	LstNL
$LN27@AssembleMo:
$done$32:

; 1558 :     }
; 1559 : #if 1 //def __SW_BD
; 1560 : done:
; 1561 : #endif
; 1562 :     AssembleFini();

	call	AssembleFini

; 1563 :     DebugMsg(("AssembleModule exit\n"));

	lea	rcx, OFFSET FLAT:$SG12229
	call	DoDebugMsg

; 1564 :     return( ModuleInfo.g.error_count == 0 );

	cmp	DWORD PTR ModuleInfo, 0
	jne	SHORT $LN29@AssembleMo
	mov	DWORD PTR tv264[rsp], 1
	jmp	SHORT $LN30@AssembleMo
$LN29@AssembleMo:
	mov	DWORD PTR tv264[rsp], 0
$LN30@AssembleMo:
	mov	eax, DWORD PTR tv264[rsp]

; 1565 : }

	add	rsp, 128				; 00000080H
	pop	rdi
	ret	0
AssembleModule ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
idx$1 = 32
tv79 = 36
pbytes$ = 64
len$ = 72
fixup$ = 80
OutputBytes PROC

; 299  : {

$LN11:
	mov	QWORD PTR [rsp+24], r8
	mov	DWORD PTR [rsp+16], edx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 300  :     if( write_to_file == TRUE ) {

	movzx	eax, BYTE PTR write_to_file
	cmp	eax, 1
	jne	$LN2@OutputByte

; 301  :         uint_32 idx = CurrSeg->e.seginfo->current_loc - CurrSeg->e.seginfo->start_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	DWORD PTR idx$1[rsp], eax

; 302  : #if 0 /* def DEBUG_OUT */
; 303  :         if ( CurrSeg->e.seginfo->current_loc < CurrSeg->e.seginfo->start_loc )
; 304  :             _asm int 3;
; 305  : #endif
; 306  :         /**/myassert( CurrSeg->e.seginfo->current_loc >= CurrSeg->e.seginfo->start_loc );

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+12], ecx
	jb	SHORT $LN9@OutputByte
	mov	DWORD PTR tv79[rsp], 0
	jmp	SHORT $LN10@OutputByte
$LN9@OutputByte:
	mov	edx, 306				; 00000132H
	lea	rcx, OFFSET FLAT:$SG11812
	call	InternalError
	mov	DWORD PTR tv79[rsp], eax
$LN10@OutputByte:

; 307  :         if( Options.output_format == OFORMAT_OMF && ((idx + len) > MAX_LEDATA_THRESHOLD ) ) {

	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN4@OutputByte
	mov	eax, DWORD PTR len$[rsp]
	mov	ecx, DWORD PTR idx$1[rsp]
	add	ecx, eax
	mov	eax, ecx
	cmp	eax, 1014				; 000003f6H
	jbe	SHORT $LN4@OutputByte

; 308  :             omf_FlushCurrSeg();

	call	omf_FlushCurrSeg

; 309  :             idx = CurrSeg->e.seginfo->current_loc - CurrSeg->e.seginfo->start_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	DWORD PTR idx$1[rsp], eax
$LN4@OutputByte:

; 310  :         }
; 311  :         if ( fixup )

	cmp	QWORD PTR fixup$[rsp], 0
	je	SHORT $LN5@OutputByte

; 312  :             store_fixup( fixup, CurrSeg, (int_32 *)pbytes );

	mov	r8, QWORD PTR pbytes$[rsp]
	mov	rdx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR fixup$[rsp]
	call	store_fixup
$LN5@OutputByte:

; 313  :         //DebugMsg(("OutputBytes: buff=%p, idx=%" I32_SPEC "X, byte=%X\n", CurrSeg->e.seginfo->CodeBuffer, idx, *pbytes ));
; 314  :         memcpy( &CurrSeg->e.seginfo->CodeBuffer[idx], pbytes, len );

	movsxd	rax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	edx, DWORD PTR idx$1[rsp]
	mov	rcx, QWORD PTR [rcx+16]
	add	rcx, rdx
	mov	r8, rax
	mov	rdx, QWORD PTR pbytes$[rsp]
	call	memcpy

; 315  :     }

	jmp	SHORT $LN3@OutputByte
$LN2@OutputByte:

; 316  : #if 1
; 317  :     /* check this in pass 1 only */
; 318  :     else if( CurrSeg->e.seginfo->current_loc < CurrSeg->e.seginfo->start_loc ) {

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+12], ecx
	jae	SHORT $LN6@OutputByte

; 319  :         DebugMsg(("OutputBytes: segment start loc changed from %" I32_SPEC "Xh to %" I32_SPEC "Xh\n",

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	r8d, DWORD PTR [rax+12]
	mov	edx, DWORD PTR [rcx+8]
	lea	rcx, OFFSET FLAT:$SG11816
	call	DoDebugMsg

; 320  :                   CurrSeg->e.seginfo->start_loc,
; 321  :                   CurrSeg->e.seginfo->current_loc));
; 322  :         CurrSeg->e.seginfo->start_loc = CurrSeg->e.seginfo->current_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx+8], eax
$LN6@OutputByte:
$LN3@OutputByte:

; 323  :     }
; 324  : #endif
; 325  :     CurrSeg->e.seginfo->current_loc += len;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+12]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+12], eax

; 326  :     CurrSeg->e.seginfo->bytes_written += len;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+24]
	add	eax, DWORD PTR len$[rsp]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+24], eax

; 327  :     CurrSeg->e.seginfo->written = TRUE;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+107]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+107], al

; 328  :     if( CurrSeg->e.seginfo->current_loc > CurrSeg->sym.max_offset )

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	ecx, DWORD PTR [rcx+56]
	cmp	DWORD PTR [rax+12], ecx
	jbe	SHORT $LN7@OutputByte

; 329  :         CurrSeg->sym.max_offset = CurrSeg->e.seginfo->current_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx+56], eax
$LN7@OutputByte:

; 330  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
OutputBytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
byte$ = 48
len$ = 56
FillDataBytes PROC

; 285  : {

$LN7:
	mov	DWORD PTR [rsp+16], edx
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 32					; 00000020H
	mov	rdi, rsp
	mov	ecx, 8
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+48]

; 286  :     if ( ModuleInfo.CommentDataInCode )

	movzx	eax, BYTE PTR ModuleInfo+423
	test	eax, eax
	je	SHORT $LN5@FillDataBy

; 287  :         omf_OutSelect( TRUE );

	mov	cl, 1
	call	omf_OutSelect
$LN5@FillDataBy:

; 288  :     for( ; len; len-- )

	jmp	SHORT $LN4@FillDataBy
$LN2@FillDataBy:
	mov	eax, DWORD PTR len$[rsp]
	dec	eax
	mov	DWORD PTR len$[rsp], eax
$LN4@FillDataBy:
	cmp	DWORD PTR len$[rsp], 0
	je	SHORT $LN3@FillDataBy

; 289  :         OutputByte( byte );

	movzx	ecx, BYTE PTR byte$[rsp]
	call	OutputByte
	jmp	SHORT $LN2@FillDataBy
$LN3@FillDataBy:

; 290  : }

	add	rsp, 32					; 00000020H
	pop	rdi
	ret	0
FillDataBytes ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\assemble.c
_TEXT	SEGMENT
idx$1 = 32
tv84 = 36
byte$ = 64
OutputByte PROC

; 204  : {

$LN11:
	mov	BYTE PTR [rsp+8], cl
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	movzx	ecx, BYTE PTR [rsp+64]

; 205  :     if( write_to_file == TRUE ) {

	movzx	eax, BYTE PTR write_to_file
	cmp	eax, 1
	jne	$LN2@OutputByte

; 206  :         uint_32 idx = CurrSeg->e.seginfo->current_loc - CurrSeg->e.seginfo->start_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	DWORD PTR idx$1[rsp], eax

; 207  : #ifdef DEBUG_OUT
; 208  :         if ( CurrSeg->e.seginfo->current_loc < CurrSeg->e.seginfo->start_loc ) {

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]

; 209  :             ;//_asm int 3;
; 210  :         }
; 211  : #endif
; 212  :         /**/myassert( CurrSeg->e.seginfo->current_loc >= CurrSeg->e.seginfo->start_loc );

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+12], ecx
	jb	SHORT $LN9@OutputByte
	mov	DWORD PTR tv84[rsp], 0
	jmp	SHORT $LN10@OutputByte
$LN9@OutputByte:
	mov	edx, 212				; 000000d4H
	lea	rcx, OFFSET FLAT:$SG11766
	call	InternalError
	mov	DWORD PTR tv84[rsp], eax
$LN10@OutputByte:

; 213  :         if( Options.output_format == OFORMAT_OMF && idx >= MAX_LEDATA_THRESHOLD ) {

	cmp	DWORD PTR Options+160, 1
	jne	SHORT $LN5@OutputByte
	cmp	DWORD PTR idx$1[rsp], 1014		; 000003f6H
	jb	SHORT $LN5@OutputByte

; 214  :             omf_FlushCurrSeg();

	call	omf_FlushCurrSeg

; 215  :             idx = CurrSeg->e.seginfo->current_loc - CurrSeg->e.seginfo->start_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	mov	eax, DWORD PTR [rax+12]
	sub	eax, ecx
	mov	DWORD PTR idx$1[rsp], eax
$LN5@OutputByte:

; 216  :         }
; 217  :         //DebugMsg(("OutputByte: buff=%p, idx=%" I32_SPEC "X, byte=%X, codebuff[0]=%X\n", CurrSeg->e.seginfo->CodeBuffer, idx, byte, *CurrSeg->e.seginfo->CodeBuffer ));
; 218  :         CurrSeg->e.seginfo->CodeBuffer[idx] = byte;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	ecx, DWORD PTR idx$1[rsp]
	mov	rax, QWORD PTR [rax+16]
	movzx	edx, BYTE PTR byte$[rsp]
	mov	BYTE PTR [rax+rcx], dl

; 219  :     }

	jmp	SHORT $LN3@OutputByte
$LN2@OutputByte:

; 220  : #if 1
; 221  :     /* check this in pass 1 only */
; 222  :     else if( CurrSeg->e.seginfo->current_loc < CurrSeg->e.seginfo->start_loc ) {

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	ecx, DWORD PTR [rcx+8]
	cmp	DWORD PTR [rax+12], ecx
	jae	SHORT $LN6@OutputByte

; 223  :         DebugMsg(("OutputByte: segment start loc changed from %" I32_SPEC "Xh to %" I32_SPEC "Xh\n",

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	r8d, DWORD PTR [rax+12]
	mov	edx, DWORD PTR [rcx+8]
	lea	rcx, OFFSET FLAT:$SG11769
	call	DoDebugMsg

; 224  :                   CurrSeg->e.seginfo->start_loc,
; 225  :                   CurrSeg->e.seginfo->current_loc));
; 226  :         CurrSeg->e.seginfo->start_loc = CurrSeg->e.seginfo->current_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx+8], eax
$LN6@OutputByte:
$LN3@OutputByte:

; 227  :     }
; 228  : #endif
; 229  :     CurrSeg->e.seginfo->current_loc++;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+12]
	inc	eax
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+12], eax

; 230  :     CurrSeg->e.seginfo->bytes_written++;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	eax, DWORD PTR [rax+24]
	inc	eax
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	DWORD PTR [rcx+24], eax

; 231  :     CurrSeg->e.seginfo->written = TRUE;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	movzx	eax, BYTE PTR [rax+107]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	rcx, QWORD PTR [rcx+96]
	mov	BYTE PTR [rcx+107], al

; 232  :     if( CurrSeg->e.seginfo->current_loc > CurrSeg->sym.max_offset )

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	ecx, DWORD PTR [rcx+56]
	cmp	DWORD PTR [rax+12], ecx
	jbe	SHORT $LN7@OutputByte

; 233  :         CurrSeg->sym.max_offset = CurrSeg->e.seginfo->current_loc;

	mov	rax, QWORD PTR ModuleInfo+432
	mov	rax, QWORD PTR [rax+96]
	mov	rcx, QWORD PTR ModuleInfo+432
	mov	eax, DWORD PTR [rax+12]
	mov	DWORD PTR [rcx+56], eax
$LN7@OutputByte:

; 234  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
OutputByte ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT sprintf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Buffer$ = 96
_Format$ = 104
sprintf	PROC						; COMDAT

; 1776 : {

$LN3:
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 1777 :     int _Result;
; 1778 :     va_list _ArgList;
; 1779 :     __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 1780 : 
; 1781 :     #pragma warning(push)
; 1782 :     #pragma warning(disable: 4996) // Deprecation
; 1783 :     _Result = _vsprintf_l(_Buffer, _Format, NULL, _ArgList);

	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 1784 :     #pragma warning(pop)
; 1785 : 
; 1786 :     __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 1787 :     return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 1788 : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:sprintf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
sprintf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsprintf_l
_TEXT	SEGMENT
_Buffer$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vsprintf_l PROC					; COMDAT

; 1455 : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 1456 :     #pragma warning(push)
; 1457 :     #pragma warning(disable: 4996) // Deprecation
; 1458 :     return _vsnprintf_l(_Buffer, (size_t)-1, _Format, _Locale, _ArgList);

	mov	rax, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rax
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, -1
	mov	rcx, QWORD PTR _Buffer$[rsp]
	call	_vsnprintf_l

; 1459 :     #pragma warning(pop)
; 1460 : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vsprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vsnprintf_l
_TEXT	SEGMENT
_Result$ = 48
tv74 = 52
_Buffer$ = 80
_BufferCount$ = 88
_Format$ = 96
_Locale$ = 104
_ArgList$ = 112
_vsnprintf_l PROC					; COMDAT

; 1385 : {

$LN5:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 64					; 00000040H
	mov	rdi, rsp
	mov	ecx, 16
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+80]

; 1386 :     int const _Result = __stdio_common_vsprintf(

	call	__local_stdio_printf_options
	mov	rax, QWORD PTR [rax]
	or	rax, 1
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+40], rcx
	mov	rcx, QWORD PTR _Locale$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Format$[rsp]
	mov	r8, QWORD PTR _BufferCount$[rsp]
	mov	rdx, QWORD PTR _Buffer$[rsp]
	mov	rcx, rax
	call	QWORD PTR __imp___stdio_common_vsprintf
	mov	DWORD PTR _Result$[rsp], eax

; 1387 :         _CRT_INTERNAL_LOCAL_PRINTF_OPTIONS | _CRT_INTERNAL_PRINTF_LEGACY_VSPRINTF_NULL_TERMINATION,
; 1388 :         _Buffer, _BufferCount, _Format, _Locale, _ArgList);
; 1389 : 
; 1390 :     return _Result < 0 ? -1 : _Result;

	cmp	DWORD PTR _Result$[rsp], 0
	jge	SHORT $LN3@vsnprintf_
	mov	DWORD PTR tv74[rsp], -1
	jmp	SHORT $LN4@vsnprintf_
$LN3@vsnprintf_:
	mov	eax, DWORD PTR _Result$[rsp]
	mov	DWORD PTR tv74[rsp], eax
$LN4@vsnprintf_:
	mov	eax, DWORD PTR tv74[rsp]

; 1391 : }

	add	rsp, 64					; 00000040H
	pop	rdi
	ret	0
_vsnprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT printf
_TEXT	SEGMENT
_Result$ = 32
_ArgList$ = 56
_Format$ = 96
printf	PROC						; COMDAT

; 950  : {

$LN3:
	mov	QWORD PTR [rsp+8], rcx
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+32], r9
	push	rdi
	sub	rsp, 80					; 00000050H
	mov	rdi, rsp
	mov	ecx, 20
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+96]

; 951  :     int _Result;
; 952  :     va_list _ArgList;
; 953  :     __crt_va_start(_ArgList, _Format);

	lea	rax, QWORD PTR _Format$[rsp+8]
	mov	QWORD PTR _ArgList$[rsp], rax

; 954  :     _Result = _vfprintf_l(stdout, _Format, NULL, _ArgList);

	mov	ecx, 1
	call	QWORD PTR __imp___acrt_iob_func
	mov	r9, QWORD PTR _ArgList$[rsp]
	xor	r8d, r8d
	mov	rdx, QWORD PTR _Format$[rsp]
	mov	rcx, rax
	call	_vfprintf_l
	mov	DWORD PTR _Result$[rsp], eax

; 955  :     __crt_va_end(_ArgList);

	mov	QWORD PTR _ArgList$[rsp], 0

; 956  :     return _Result;

	mov	eax, DWORD PTR _Result$[rsp]

; 957  : }

	mov	edi, eax
	mov	rcx, rsp
	lea	rdx, OFFSET FLAT:printf$rtcFrameData
	call	_RTC_CheckStackVars
	mov	eax, edi
	add	rsp, 80					; 00000050H
	pop	rdi
	ret	0
printf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\stdio.h
;	COMDAT _vfprintf_l
_TEXT	SEGMENT
_Stream$ = 64
_Format$ = 72
_Locale$ = 80
_ArgList$ = 88
_vfprintf_l PROC					; COMDAT

; 638  : {

$LN3:
	mov	QWORD PTR [rsp+32], r9
	mov	QWORD PTR [rsp+24], r8
	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	push	rdi
	sub	rsp, 48					; 00000030H
	mov	rdi, rsp
	mov	ecx, 12
	mov	eax, -858993460				; ccccccccH
	rep stosd
	mov	rcx, QWORD PTR [rsp+64]

; 639  :     return __stdio_common_vfprintf(_CRT_INTERNAL_LOCAL_PRINTF_OPTIONS, _Stream, _Format, _Locale, _ArgList);

	call	__local_stdio_printf_options
	mov	rcx, QWORD PTR _ArgList$[rsp]
	mov	QWORD PTR [rsp+32], rcx
	mov	r9, QWORD PTR _Locale$[rsp]
	mov	r8, QWORD PTR _Format$[rsp]
	mov	rdx, QWORD PTR _Stream$[rsp]
	mov	rcx, QWORD PTR [rax]
	call	QWORD PTR __imp___stdio_common_vfprintf

; 640  : }

	add	rsp, 48					; 00000030H
	pop	rdi
	ret	0
_vfprintf_l ENDP
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu
; File c:\program files (x86)\windows kits\10\include\10.0.10150.0\ucrt\corecrt_stdio_config.h
;	COMDAT __local_stdio_printf_options
_TEXT	SEGMENT
__local_stdio_printf_options PROC			; COMDAT

; 73   : {

$LN3:
	push	rdi

; 74   :     static unsigned __int64 _OptionsStorage;
; 75   :     return &_OptionsStorage;

	lea	rax, OFFSET FLAT:?_OptionsStorage@?1??__local_stdio_printf_options@@9@9 ; `__local_stdio_printf_options'::`2'::_OptionsStorage

; 76   : }

	pop	rdi
	ret	0
__local_stdio_printf_options ENDP
_TEXT	ENDS
END
