; Listing generated by Microsoft (R) Optimizing Compiler Version 19.00.23026.0 

include listing.inc

INCLUDELIB LIBCMTD
INCLUDELIB OLDNAMES

_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	broadflags:BYTE
COMM	evex:BYTE
COMM	ZEROLOCALS:BYTE
_DATA	ENDS
CONST	SEGMENT
optiontab DQ	FLAT:$SG11260
	DQ	FLAT:SetDotName
	DQ	FLAT:$SG11261
	DQ	FLAT:SetNoDotName
	DQ	FLAT:$SG11262
	DQ	FLAT:SetM510
	DQ	FLAT:$SG11263
	DQ	FLAT:SetNoM510
	DQ	FLAT:$SG11264
	DQ	FLAT:SetScoped
	DQ	FLAT:$SG11265
	DQ	FLAT:SetNoScoped
	DQ	FLAT:$SG11266
	DQ	FLAT:SetOldStructs
	DQ	FLAT:$SG11267
	DQ	FLAT:SetNoOldStructs
	DQ	FLAT:$SG11268
	DQ	FLAT:SetEmulator
	DQ	FLAT:$SG11269
	DQ	FLAT:SetNoEmulator
	DQ	FLAT:$SG11270
	DQ	FLAT:SetLJmp
	DQ	FLAT:$SG11271
	DQ	FLAT:SetNoLJmp
	DQ	FLAT:$SG11272
	DQ	FLAT:Unsupported
	DQ	FLAT:$SG11273
	DQ	FLAT:SetNoReadonly
	DQ	FLAT:$SG11274
	DQ	FLAT:Unsupported
	DQ	FLAT:$SG11275
	DQ	FLAT:SetNoOldmacros
	DQ	FLAT:$SG11276
	DQ	FLAT:Unsupported
	DQ	FLAT:$SG11277
	DQ	FLAT:SetExpr32
	DQ	FLAT:$SG11278
	DQ	FLAT:SetNoSignExt
	DQ	FLAT:$SG11279
	DQ	FLAT:SetCaseMap
	DQ	FLAT:$SG11280
	DQ	FLAT:SetProc
	DQ	FLAT:$SG11281
	DQ	FLAT:SetPrologue
	DQ	FLAT:$SG11282
	DQ	FLAT:SetEpilogue
	DQ	FLAT:$SG11283
	DQ	FLAT:SetLanguage
	DQ	FLAT:$SG11284
	DQ	FLAT:SetNoKeyword
	DQ	FLAT:$SG11285
	DQ	FLAT:SetSetIF2
	DQ	FLAT:$SG11286
	DQ	FLAT:SetOffset
	DQ	FLAT:$SG11287
	DQ	FLAT:SetSegment
	DQ	FLAT:$SG11288
	DQ	FLAT:SetFieldAlign
	DQ	FLAT:$SG11289
	DQ	FLAT:SetProcAlign
	DQ	FLAT:$SG11290
	DQ	FLAT:SetMZ
	DQ	FLAT:$SG11291
	DQ	FLAT:SetFrame
	DQ	FLAT:$SG11292
	DQ	FLAT:SetElf
	DQ	FLAT:$SG11293
	DQ	FLAT:SetRenameKey
	DQ	FLAT:$SG11294
	DQ	FLAT:SetWin64
	DQ	FLAT:$SG11295
	DQ	FLAT:SetDllImport
	DQ	FLAT:$SG11296
	DQ	FLAT:SetCodeView
	DQ	FLAT:$SG11297
	DQ	FLAT:SetStackBase
	DQ	FLAT:$SG11298
	DQ	FLAT:SetEvex
	DQ	FLAT:$SG11299
	DQ	FLAT:SetZeroLocals
	DQ	FLAT:$SG11300
	DQ	FLAT:SetSwitchStile
CONST	ENDS
_DATA	SEGMENT
$SG11264 DB	'SCOPED', 00H
	ORG $+1
$SG11265 DB	'NOSCOPED', 00H
	ORG $+3
$SG11271 DB	'NOLJMP', 00H
	ORG $+1
$SG11290 DB	'MZ', 00H
	ORG $+1
$SG11266 DB	'OLDSTRUCTS', 00H
	ORG $+1
$SG11292 DB	'ELF', 00H
$SG11267 DB	'NOOLDSTRUCTS', 00H
	ORG $+3
$SG11268 DB	'EMULATOR', 00H
	ORG $+3
$SG11276 DB	'EXPR16', 00H
	ORG $+1
$SG10822 DB	'ALL', 00H
$SG11269 DB	'NOEMULATOR', 00H
	ORG $+1
$SG11270 DB	'LJMP', 00H
	ORG $+3
$SG11277 DB	'EXPR32', 00H
	ORG $+5
$SG11272 DB	'READONLY', 00H
	ORG $+7
$SG11273 DB	'NOREADONLY', 00H
	ORG $+5
$SG11274 DB	'OLDMACROS', 00H
	ORG $+6
$SG11275 DB	'NOOLDMACROS', 00H
	ORG $+4
$SG11278 DB	'NOSIGNEXTEND', 00H
	ORG $+3
$SG11279 DB	'CASEMAP', 00H
$SG11280 DB	'PROC', 00H
	ORG $+3
$SG11281 DB	'PROLOGUE', 00H
	ORG $+7
$SG11282 DB	'EPILOGUE', 00H
	ORG $+7
$SG11283 DB	'LANGUAGE', 00H
	ORG $+7
$SG11284 DB	'NOKEYWORD', 00H
	ORG $+2
$SG11285 DB	'SETIF2', 00H
	ORG $+1
$SG11286 DB	'OFFSET', 00H
	ORG $+5
$SG11287 DB	'SEGMENT', 00H
$SG11288 DB	'FIELDALIGN', 00H
	ORG $+5
$SG11289 DB	'PROCALIGN', 00H
	ORG $+2
$SG11291 DB	'FRAME', 00H
	ORG $+6
$SG11293 DB	'RENAMEKEYWORD', 00H
	ORG $+2
$SG11294 DB	'WIN64', 00H
	ORG $+2
$SG11295 DB	'DLLIMPORT', 00H
	ORG $+6
$SG11296 DB	'CODEVIEW', 00H
	ORG $+7
$SG11297 DB	'STACKBASE', 00H
	ORG $+2
$SG11298 DB	'EVEX', 00H
	ORG $+7
$SG11299 DB	'ZEROLOCALS', 00H
	ORG $+5
$SG11300 DB	'SWITCHSTYLE', 00H
	ORG $+4
$SG11313 DB	'OPTION directive enter, option=%s', 0aH, 00H
	ORG $+5
$SG11324 DB	'option syntax error: >%s<', 0aH, 00H
	ORG $+1
$SG10816 DB	'NONE', 00H
	ORG $+7
$SG10819 DB	'NOTPUBLIC', 00H
	ORG $+6
$SG10823 DB	'SetCaseMap(%s) ok', 0aH, 00H
	ORG $+1
$SG10966 DB	'TRUE', 00H
	ORG $+3
$SG10968 DB	'FALSE', 00H
	ORG $+2
$SG10981 DB	'NONE', 00H
	ORG $+7
$SG10984 DB	'PROLOGUEDEF', 00H
$SG10997 DB	'NONE', 00H
	ORG $+7
$SG11000 DB	'EPILOGUEDEF', 00H
$SG11010 DB	'GROUP', 00H
	ORG $+2
$SG11013 DB	'FLAT', 00H
	ORG $+7
$SG11016 DB	'SEGMENT', 00H
$SG11029 DB	'PRIVATE', 00H
$SG11031 DB	'EXPORT', 00H
	ORG $+1
$SG11047 DB	'USE16', 00H
	ORG $+2
$SG11050 DB	'USE32', 00H
	ORG $+2
$SG11053 DB	'USE64', 00H
	ORG $+2
$SG11134 DB	'AUTO', 00H
	ORG $+3
$SG11136 DB	'NOAUTO', 00H
	ORG $+1
$SG11146 DB	'CSTYLE', 00H
	ORG $+1
$SG11148 DB	'ASMSTYLE', 00H
	ORG $+3
$SG11204 DB	'__imp_', 00H
	ORG $+1
$SG11205 DB	'_imp_', 00H
	ORG $+2
$SG11216 DB	'NONE', 00H
	ORG $+7
$SG11246 DB	'@StackBase', 00H
	ORG $+5
$SG11247 DB	'@ProcStatus', 00H
	ORG $+4
$SG11260 DB	'DOTNAME', 00H
$SG11261 DB	'NODOTNAME', 00H
	ORG $+2
$SG11262 DB	'M510', 00H
	ORG $+3
$SG11263 DB	'NOM510', 00H
_DATA	ENDS
PUBLIC	OptionDirective
EXTRN	isspace:PROC
EXTRN	strcmp:PROC
EXTRN	strcpy:PROC
EXTRN	_stricmp:PROC
EXTRN	strlen:PROC
EXTRN	_strupr:PROC
EXTRN	DoDebugMsg:PROC
EXTRN	DoDebugMsg1:PROC
EXTRN	EmitError:PROC
EXTRN	EmitErr:PROC
EXTRN	SetMasm510:PROC
EXTRN	LclAlloc:PROC
EXTRN	SymSetCmpFunc:PROC
EXTRN	GetLangType:PROC
EXTRN	FindResWord:PROC
EXTRN	IsKeywordDisabled:PROC
EXTRN	DisableKeyword:PROC
EXTRN	RenameKeyword:PROC
EXTRN	EvalOperand:PROC
EXTRN	EmitConstError:PROC
EXTRN	CreateVariable:PROC
EXTRN	UpdateStackBase:PROC
EXTRN	UpdateProcStatus:PROC
EXTRN	Options:BYTE
EXTRN	ModuleInfo:BYTE
EXTRN	Parse_Pass:DWORD
EXTRN	SpecialTable:BYTE
EXTRN	sym_Interface:QWORD
pdata	SEGMENT
$pdata$SetEvex DD imagerel SetEvex
	DD	imagerel SetEvex+154
	DD	imagerel $unwind$SetEvex
$pdata$SetZeroLocals DD imagerel SetZeroLocals
	DD	imagerel SetZeroLocals+154
	DD	imagerel $unwind$SetZeroLocals
$pdata$SetCaseMap DD imagerel SetCaseMap
	DD	imagerel SetCaseMap+384
	DD	imagerel $unwind$SetCaseMap
$pdata$SetM510 DD imagerel SetM510
	DD	imagerel SetM510+28
	DD	imagerel $unwind$SetM510
$pdata$SetNoM510 DD imagerel SetNoM510
	DD	imagerel SetNoM510+28
	DD	imagerel $unwind$SetNoM510
$pdata$SetNoKeyword DD imagerel SetNoKeyword
	DD	imagerel SetNoKeyword+486
	DD	imagerel $unwind$SetNoKeyword
$pdata$SetLanguage DD imagerel SetLanguage
	DD	imagerel SetLanguage+158
	DD	imagerel $unwind$SetLanguage
$pdata$SetSetIF2 DD imagerel SetSetIF2
	DD	imagerel SetSetIF2+167
	DD	imagerel $unwind$SetSetIF2
$pdata$SetPrologue DD imagerel SetPrologue
	DD	imagerel SetPrologue+299
	DD	imagerel $unwind$SetPrologue
$pdata$SetEpilogue DD imagerel SetEpilogue
	DD	imagerel SetEpilogue+299
	DD	imagerel $unwind$SetEpilogue
$pdata$SetOffset DD imagerel SetOffset
	DD	imagerel SetOffset+225
	DD	imagerel $unwind$SetOffset
$pdata$SetProc DD imagerel SetProc
	DD	imagerel SetProc+306
	DD	imagerel $unwind$SetProc
$pdata$SetSegment DD imagerel SetSegment
	DD	imagerel SetSegment+372
	DD	imagerel $unwind$SetSegment
$pdata$SetFieldAlign DD imagerel SetFieldAlign
	DD	imagerel SetFieldAlign+230
	DD	imagerel $unwind$SetFieldAlign
$pdata$SetProcAlign DD imagerel SetProcAlign
	DD	imagerel SetProcAlign+228
	DD	imagerel $unwind$SetProcAlign
$pdata$SetMZ DD	imagerel SetMZ
	DD	imagerel SetMZ+578
	DD	imagerel $unwind$SetMZ
$pdata$SetFrame DD imagerel SetFrame
	DD	imagerel SetFrame+167
	DD	imagerel $unwind$SetFrame
$pdata$SetSwitchStile DD imagerel SetSwitchStile
	DD	imagerel SetSwitchStile+167
	DD	imagerel $unwind$SetSwitchStile
$pdata$SetElf DD imagerel SetElf
	DD	imagerel SetElf+166
	DD	imagerel $unwind$SetElf
$pdata$SetRenameKey DD imagerel SetRenameKey
	DD	imagerel SetRenameKey+415
	DD	imagerel $unwind$SetRenameKey
$pdata$SetWin64 DD imagerel SetWin64
	DD	imagerel SetWin64+197
	DD	imagerel $unwind$SetWin64
$pdata$IncludeDll DD imagerel IncludeDll
	DD	imagerel IncludeDll+256
	DD	imagerel $unwind$IncludeDll
$pdata$SetDllImport DD imagerel SetDllImport
	DD	imagerel SetDllImport+221
	DD	imagerel $unwind$SetDllImport
$pdata$SetCodeView DD imagerel SetCodeView
	DD	imagerel SetCodeView+134
	DD	imagerel $unwind$SetCodeView
$pdata$SetStackBase DD imagerel SetStackBase
	DD	imagerel SetStackBase+335
	DD	imagerel $unwind$SetStackBase
$pdata$Unsupported DD imagerel Unsupported
	DD	imagerel Unsupported+55
	DD	imagerel $unwind$Unsupported
$pdata$OptionDirective DD imagerel $LN18
	DD	imagerel $LN18+553
	DD	imagerel $unwind$OptionDirective
pdata	ENDS
xdata	SEGMENT
$unwind$SetEvex DD 021101H
	DD	0170111H
$unwind$SetZeroLocals DD 021101H
	DD	0170111H
$unwind$SetCaseMap DD 010e01H
	DD	0620eH
$unwind$SetM510 DD 010e01H
	DD	0420eH
$unwind$SetNoM510 DD 010e01H
	DD	0420eH
$unwind$SetNoKeyword DD 010e01H
	DD	0820eH
$unwind$SetLanguage DD 010e01H
	DD	0620eH
$unwind$SetSetIF2 DD 010e01H
	DD	0620eH
$unwind$SetPrologue DD 010e01H
	DD	0620eH
$unwind$SetEpilogue DD 010e01H
	DD	0620eH
$unwind$SetOffset DD 010e01H
	DD	0620eH
$unwind$SetProc DD 010e01H
	DD	0620eH
$unwind$SetSegment DD 010e01H
	DD	0620eH
$unwind$SetFieldAlign DD 021101H
	DD	0170111H
$unwind$SetProcAlign DD 021101H
	DD	0170111H
$unwind$SetMZ DD 021101H
	DD	0190111H
$unwind$SetFrame DD 010e01H
	DD	0620eH
$unwind$SetSwitchStile DD 010e01H
	DD	0620eH
$unwind$SetElf DD 021101H
	DD	0170111H
$unwind$SetRenameKey DD 010e01H
	DD	0620eH
$unwind$SetWin64 DD 021101H
	DD	0170111H
$unwind$IncludeDll DD 010901H
	DD	08209H
$unwind$SetDllImport DD 010e01H
	DD	0620eH
$unwind$SetCodeView DD 021101H
	DD	0170111H
$unwind$SetStackBase DD 010e01H
	DD	0620eH
$unwind$Unsupported DD 010e01H
	DD	0420eH
$unwind$OptionDirective DD 010d01H
	DD	0820dH
xdata	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
idx$ = 32
tv93 = 40
tv191 = 48
i$ = 80
tokenarray$ = 88
OptionDirective PROC

; 972  : {

$LN18:
	mov	QWORD PTR [rsp+16], rdx
	mov	DWORD PTR [rsp+8], ecx
	sub	rsp, 72					; 00000048H

; 973  :     int idx = -1;

	mov	DWORD PTR idx$[rsp], -1

; 974  : 
; 975  :     DebugMsg1(( "OPTION directive enter, option=%s\n", tokenarray[i+1].string_ptr ));

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	lea	rcx, OFFSET FLAT:$SG11313
	call	DoDebugMsg1

; 976  : 
; 977  :     i++; /* skip OPTION directive */

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN2@OptionDire:

; 978  :     while ( tokenarray[i].token != T_FINAL ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	$LN3@OptionDire

; 979  :         _strupr( tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_strupr

; 980  :         for ( idx = 0; idx < TABITEMS; idx++ ) {

	mov	DWORD PTR idx$[rsp], 0
	jmp	SHORT $LN6@OptionDire
$LN4@OptionDire:
	mov	eax, DWORD PTR idx$[rsp]
	inc	eax
	mov	DWORD PTR idx$[rsp], eax
$LN6@OptionDire:
	movsxd	rax, DWORD PTR idx$[rsp]
	cmp	rax, 41					; 00000029H
	jae	SHORT $LN5@OptionDire

; 981  :             if ( 0 == strcmp( tokenarray[i].string_ptr, optiontab[idx].name ) )

	movsxd	rax, DWORD PTR idx$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:optiontab
	movsxd	rdx, DWORD PTR i$[rsp]
	imul	rdx, rdx, 32				; 00000020H
	mov	QWORD PTR tv93[rsp], rdx
	mov	rdx, QWORD PTR [rcx+rax]
	mov	rax, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR tv93[rsp]
	mov	rcx, QWORD PTR [rax+rcx+8]
	call	strcmp
	test	eax, eax
	jne	SHORT $LN7@OptionDire

; 982  :                 break;

	jmp	SHORT $LN5@OptionDire
$LN7@OptionDire:

; 983  :         }

	jmp	SHORT $LN4@OptionDire
$LN5@OptionDire:

; 984  :         if ( idx >= TABITEMS )

	movsxd	rax, DWORD PTR idx$[rsp]
	cmp	rax, 41					; 00000029H
	jb	SHORT $LN8@OptionDire

; 985  :             break;

	jmp	$LN3@OptionDire
$LN8@OptionDire:

; 986  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 987  :         /* v2.06: check for colon separator here */
; 988  :         if ( idx >= NOARGOPTS ) {

	cmp	DWORD PTR idx$[rsp], 19
	jl	SHORT $LN9@OptionDire

; 989  :             if ( tokenarray[i].token != T_COLON ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN10@OptionDire

; 990  :                 return( EmitError( COLON_EXPECTED ) );

	mov	ecx, 84					; 00000054H
	call	EmitError
	jmp	$LN1@OptionDire
$LN10@OptionDire:

; 991  :             }
; 992  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 993  :             /* there must be something after the colon */
; 994  :             if ( tokenarray[i].token == T_FINAL ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	jne	SHORT $LN11@OptionDire

; 995  :                 i -= 2; /* position back to option identifier */

	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 2
	mov	DWORD PTR i$[rsp], eax

; 996  :                 break;

	jmp	SHORT $LN3@OptionDire
$LN11@OptionDire:

; 997  :             }
; 998  :             /* reject option if -Zne is set */
; 999  :             if ( idx >= MASMOPTS && Options.strict_masm_compat ) {

	cmp	DWORD PTR idx$[rsp], 28
	jl	SHORT $LN12@OptionDire
	movzx	eax, BYTE PTR Options+143
	test	eax, eax
	je	SHORT $LN12@OptionDire

; 1000 :                 i -= 2;

	mov	eax, DWORD PTR i$[rsp]
	sub	eax, 2
	mov	DWORD PTR i$[rsp], eax

; 1001 :                 break;

	jmp	SHORT $LN3@OptionDire
$LN12@OptionDire:
$LN9@OptionDire:

; 1002 :             }
; 1003 :         }
; 1004 :         if ( optiontab[idx].func( &i, tokenarray ) == ERROR )

	movsxd	rax, DWORD PTR idx$[rsp]
	imul	rax, rax, 16
	lea	rcx, OFFSET FLAT:optiontab
	mov	QWORD PTR tv191[rsp], rcx
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	mov	r8, QWORD PTR tv191[rsp]
	call	QWORD PTR [r8+rax+8]
	cmp	eax, -1
	jne	SHORT $LN13@OptionDire

; 1005 :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@OptionDire
$LN13@OptionDire:

; 1006 :         if ( tokenarray[i].token != T_COMMA )

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN14@OptionDire

; 1007 :             break;

	jmp	SHORT $LN3@OptionDire
$LN14@OptionDire:

; 1008 :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 1009 :     }

	jmp	$LN2@OptionDire
$LN3@OptionDire:

; 1010 :     if ( idx >= TABITEMS  || tokenarray[i].token != T_FINAL ) {

	movsxd	rax, DWORD PTR idx$[rsp]
	cmp	rax, 41					; 00000029H
	jae	SHORT $LN16@OptionDire
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN15@OptionDire
$LN16@OptionDire:

; 1011 :         DebugMsg(( "option syntax error: >%s<\n", tokenarray[i].tokpos ));

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	lea	rcx, OFFSET FLAT:$SG11324
	call	DoDebugMsg

; 1012 :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@OptionDire
$LN15@OptionDire:

; 1013 :     }
; 1014 :     return( NOT_ERROR );

	xor	eax, eax
$LN1@OptionDire:

; 1015 : }

	add	rsp, 72					; 00000048H
	ret	0
OptionDirective ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
Unsupported PROC

; 883  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 884  :     return( EmitErr( NOT_SUPPORTED, tokenarray[(*pi)-2].tokpos ) );

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	sub	eax, 2
	cdqe
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 72					; 00000048H
	call	EmitErr

; 885  : }

	add	rsp, 40					; 00000028H
	ret	0
Unsupported ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetStackBase PROC

; 857  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 858  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 859  : 
; 860  :     if ( tokenarray[i].token != T_REG ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 2
	je	SHORT $LN2@SetStackBa

; 861  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@SetStackBa
$LN2@SetStackBa:

; 862  :     }
; 863  :     if ( !( GetSflagsSp( tokenarray[i].tokval ) & SFR_IREG ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [rcx+rax+16]
	imul	rax, rax, 12
	lea	rcx, OFFSET FLAT:SpecialTable
	mov	eax, DWORD PTR [rcx+rax+4]
	and	eax, 32					; 00000020H
	test	eax, eax
	jne	SHORT $LN3@SetStackBa

; 864  :         return( EmitError( MUST_BE_INDEX_OR_BASE_REGISTER ) );

	mov	ecx, 33					; 00000021H
	call	EmitError
	jmp	$LN1@SetStackBa
$LN3@SetStackBa:

; 865  :     }
; 866  :     ModuleInfo.basereg[ModuleInfo.Ofssize] = tokenarray[i].tokval;

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	movzx	ecx, BYTE PTR ModuleInfo+404
	lea	rdx, OFFSET FLAT:ModuleInfo+500
	mov	r8, QWORD PTR tokenarray$[rsp]
	mov	eax, DWORD PTR [r8+rax+16]
	mov	DWORD PTR [rdx+rcx*4], eax

; 867  :     if ( !ModuleInfo.g.StackBase ) {

	cmp	QWORD PTR ModuleInfo+272, 0
	jne	SHORT $LN4@SetStackBa

; 868  :         ModuleInfo.g.StackBase = CreateVariable( "@StackBase", 0 );

	xor	edx, edx
	lea	rcx, OFFSET FLAT:$SG11246
	call	CreateVariable
	mov	QWORD PTR ModuleInfo+272, rax

; 869  :         ModuleInfo.g.StackBase->predefined = TRUE;

	mov	rax, QWORD PTR ModuleInfo+272
	movzx	eax, BYTE PTR [rax+48]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR ModuleInfo+272
	mov	BYTE PTR [rcx+48], al

; 870  :         ModuleInfo.g.StackBase->sfunc_ptr = UpdateStackBase;

	mov	rax, QWORD PTR ModuleInfo+272
	lea	rcx, OFFSET FLAT:UpdateStackBase
	mov	QWORD PTR [rax+72], rcx

; 871  :         ModuleInfo.g.ProcStatus = CreateVariable( "@ProcStatus", 0 );

	xor	edx, edx
	lea	rcx, OFFSET FLAT:$SG11247
	call	CreateVariable
	mov	QWORD PTR ModuleInfo+280, rax

; 872  :         ModuleInfo.g.ProcStatus->predefined = TRUE;

	mov	rax, QWORD PTR ModuleInfo+280
	movzx	eax, BYTE PTR [rax+48]
	or	al, 32					; 00000020H
	mov	rcx, QWORD PTR ModuleInfo+280
	mov	BYTE PTR [rcx+48], al

; 873  :         ModuleInfo.g.ProcStatus->sfunc_ptr = UpdateProcStatus;

	mov	rax, QWORD PTR ModuleInfo+280
	lea	rcx, OFFSET FLAT:UpdateProcStatus
	mov	QWORD PTR [rax+72], rcx
$LN4@SetStackBa:

; 874  :     }
; 875  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 876  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 877  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetStackBa:

; 878  : }

	add	rsp, 56					; 00000038H
	ret	0
SetStackBase ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 48
opnd$ = 64
pi$ = 192
tokenarray$ = 200
SetCodeView PROC

; 834  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H

; 835  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 836  :     struct expr opnd;
; 837  : 
; 838  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opnd, 0 ) == ERROR )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opnd$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetCodeVie

; 839  :         return( ERROR );

	mov	eax, -1
	jmp	SHORT $LN1@SetCodeVie
$LN2@SetCodeVie:

; 840  :     if ( opnd.kind == EXPR_CONST ) {

	cmp	DWORD PTR opnd$[rsp+60], 0
	jne	SHORT $LN3@SetCodeVie

; 841  :         ModuleInfo.cv_opt = opnd.value;

	movzx	eax, BYTE PTR opnd$[rsp]
	mov	BYTE PTR ModuleInfo+427, al

; 842  :     } else {

	jmp	SHORT $LN4@SetCodeVie
$LN3@SetCodeVie:

; 843  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetCodeVie
$LN4@SetCodeVie:

; 844  :     }
; 845  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 846  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetCodeVie:

; 847  : }

	add	rsp, 184				; 000000b8H
	ret	0
SetCodeView ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetDllImport PROC

; 808  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 809  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 810  : 
; 811  :     /* used for COFF only */
; 812  :     //if ( Options.output_format != OFORMAT_COFF ) {
; 813  :     //    SkipOption( pi, tokenarray );
; 814  :     //    return( NOT_ERROR);
; 815  :     //}
; 816  : 
; 817  :     if ( tokenarray[i].token == T_ID &&

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	SHORT $LN2@SetDllImpo
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11216
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetDllImpo

; 818  :         ( _stricmp( tokenarray[i].string_ptr, "NONE" ) == 0 ) ) {
; 819  :         ModuleInfo.CurrDll = NULL;

	mov	QWORD PTR ModuleInfo+336, 0

; 820  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN3@SetDllImpo
$LN2@SetDllImpo:

; 821  :     } else if ( tokenarray[i].token == T_STRING && tokenarray[i].string_delim == '<' ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 9
	jne	SHORT $LN4@SetDllImpo
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+1]
	cmp	eax, 60					; 0000003cH
	jne	SHORT $LN4@SetDllImpo

; 822  :         if ( Parse_Pass == PASS_1 )

	cmp	DWORD PTR Parse_Pass, 0
	jne	SHORT $LN5@SetDllImpo

; 823  :             ModuleInfo.CurrDll = IncludeDll( tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	IncludeDll
	mov	QWORD PTR ModuleInfo+336, rax
$LN5@SetDllImpo:

; 824  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@SetDllImpo:
$LN3@SetDllImpo:

; 825  :     }
; 826  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 827  :     return( NOT_ERROR );

	xor	eax, eax

; 828  : }

	add	rsp, 56					; 00000038H
	ret	0
SetDllImport ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
q$ = 32
node$ = 40
tv85 = 48
name$ = 80
IncludeDll PROC

; 779  : {

	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 780  :     struct dll_desc **q;
; 781  :     struct dll_desc *node;
; 782  : 
; 783  :     /* allow a zero-sized name! */
; 784  :     if ( *name == NULLC )

	mov	rax, QWORD PTR name$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	jne	SHORT $LN5@IncludeDll

; 785  :         return( NULL );

	xor	eax, eax
	jmp	$LN1@IncludeDll
$LN5@IncludeDll:

; 786  : 
; 787  :     for ( q = &ModuleInfo.g.DllQueue; *q ; q = &(*q)->next ) {

	lea	rax, OFFSET FLAT:ModuleInfo+80
	mov	QWORD PTR q$[rsp], rax
	jmp	SHORT $LN4@IncludeDll
$LN2@IncludeDll:
	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax]
	mov	QWORD PTR q$[rsp], rax
$LN4@IncludeDll:
	mov	rax, QWORD PTR q$[rsp]
	cmp	QWORD PTR [rax], 0
	je	SHORT $LN3@IncludeDll

; 788  :         if ( _stricmp( (*q)->name, name ) == 0 )

	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax]
	add	rax, 12
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, rax
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@IncludeDll

; 789  :             return( *q );

	mov	rax, QWORD PTR q$[rsp]
	mov	rax, QWORD PTR [rax]
	jmp	$LN1@IncludeDll
$LN6@IncludeDll:

; 790  :     }

	jmp	SHORT $LN2@IncludeDll
$LN3@IncludeDll:

; 791  :     node = LclAlloc( sizeof( struct dll_desc ) + strlen( name ) );

	mov	rcx, QWORD PTR name$[rsp]
	call	strlen
	add	rax, 16
	mov	rcx, rax
	call	LclAlloc
	mov	QWORD PTR node$[rsp], rax

; 792  :     node->next = NULL;

	mov	rax, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax], 0

; 793  :     node->cnt = 0;

	mov	rax, QWORD PTR node$[rsp]
	mov	DWORD PTR [rax+8], 0

; 794  :     strcpy( node->name, name );

	mov	rax, QWORD PTR node$[rsp]
	add	rax, 12
	mov	rdx, QWORD PTR name$[rsp]
	mov	rcx, rax
	call	strcpy

; 795  :     *q = node;

	mov	rax, QWORD PTR q$[rsp]
	mov	rcx, QWORD PTR node$[rsp]
	mov	QWORD PTR [rax], rcx

; 796  : 
; 797  : #if AMD64_SUPPORT
; 798  :     ModuleInfo.g.imp_prefix = ( ( ModuleInfo.defOfssize == USE64 ) ? "__imp_" : "_imp_" );

	movzx	eax, BYTE PTR ModuleInfo+405
	cmp	eax, 2
	jne	SHORT $LN8@IncludeDll
	lea	rax, OFFSET FLAT:$SG11204
	mov	QWORD PTR tv85[rsp], rax
	jmp	SHORT $LN9@IncludeDll
$LN8@IncludeDll:
	lea	rax, OFFSET FLAT:$SG11205
	mov	QWORD PTR tv85[rsp], rax
$LN9@IncludeDll:
	mov	rax, QWORD PTR tv85[rsp]
	mov	QWORD PTR ModuleInfo+88, rax

; 799  : #else
; 800  :     ModuleInfo.g.imp_prefix = "_imp_";
; 801  : #endif
; 802  : 
; 803  :     return( node );

	mov	rax, QWORD PTR node$[rsp]
$LN1@IncludeDll:

; 804  : }

	add	rsp, 72					; 00000048H
	ret	0
IncludeDll ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 48
opndx$ = 64
pi$ = 192
tokenarray$ = 200
SetWin64 PROC

; 749  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H

; 750  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 751  :     struct expr opndx;
; 752  : 
; 753  :     /* if -win64 isn't set, skip the option */
; 754  :     /* v2.09: skip option if Ofssize != USE64 */
; 755  :     if ( ModuleInfo.defOfssize != USE64 ) {

	movzx	eax, BYTE PTR ModuleInfo+405
	cmp	eax, 2
	je	SHORT $LN2@SetWin64

; 756  :         SkipOption( pi, tokenarray );

	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR pi$[rsp]
	call	SkipOption

; 757  :         return( NOT_ERROR);

	xor	eax, eax
	jmp	SHORT $LN1@SetWin64
$LN2@SetWin64:

; 758  :     }
; 759  : 
; 760  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, 0 ) == ERROR )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN3@SetWin64

; 761  :         return( ERROR );

	mov	eax, -1
	jmp	SHORT $LN1@SetWin64
$LN3@SetWin64:

; 762  :     if ( opndx.kind == EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN4@SetWin64

; 763  :         if ( opndx.llvalue & ( ~W64F_ALL ) ) {

	mov	rax, QWORD PTR opndx$[rsp]
	and	rax, -16
	test	rax, rax
	je	SHORT $LN6@SetWin64

; 764  :             return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	SHORT $LN1@SetWin64
$LN6@SetWin64:

; 765  :         }
; 766  :         ModuleInfo.win64_flags = opndx.value;

	movzx	eax, BYTE PTR opndx$[rsp]
	mov	BYTE PTR ModuleInfo+413, al

; 767  :     } else {

	jmp	SHORT $LN5@SetWin64
$LN4@SetWin64:

; 768  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetWin64
$LN5@SetWin64:

; 769  :     }
; 770  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 771  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetWin64:

; 772  : }

	add	rsp, 184				; 000000b8H
	ret	0
SetWin64 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
index$ = 36
oldname$ = 40
pi$ = 64
tokenarray$ = 72
SetRenameKey PROC

; 704  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 705  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 706  :     //struct ReservedWord *resw;
; 707  :     unsigned index;
; 708  :     char *oldname;
; 709  : 
; 710  : #if 0 /* v2.11: allow temporary renaming of keywords */
; 711  :     /* do nothing if pass > 1 */
; 712  :     if( Parse_Pass != PASS_1 ) {
; 713  :         SkipOption( pi, tokenarray );
; 714  :         return( NOT_ERROR );
; 715  :     }
; 716  : #endif
; 717  :     if ( tokenarray[i].token != T_STRING || tokenarray[i].string_delim != '<' )  {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 9
	jne	SHORT $LN3@SetRenameK
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+1]
	cmp	eax, 60					; 0000003cH
	je	SHORT $LN2@SetRenameK
$LN3@SetRenameK:

; 718  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@SetRenameK
$LN2@SetRenameK:

; 719  :     }
; 720  :     oldname = tokenarray[i].string_ptr;

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR oldname$[rsp], rax

; 721  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 722  :     /* v2.06: syntax changed */
; 723  :     //if ( tokenarray[i].token != T_COMMA ) {
; 724  :     if ( tokenarray[i].token != T_DIRECTIVE || tokenarray[i].dirtype != DRT_EQUALSGN ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 3
	jne	SHORT $LN5@SetRenameK
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax+1]
	cmp	eax, 48					; 00000030H
	je	SHORT $LN4@SetRenameK
$LN5@SetRenameK:

; 725  :         //EmitError( EXPECTING_COMMA );
; 726  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@SetRenameK
$LN4@SetRenameK:

; 727  :     }
; 728  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 729  :     if ( tokenarray[i].token != T_ID )  {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	je	SHORT $LN6@SetRenameK

; 730  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@SetRenameK
$LN6@SetRenameK:

; 731  :     }
; 732  : 
; 733  :     /* todo: if MAX_ID_LEN can be > 255, then check size,
; 734  :      * since a reserved word's size must be <= 255 */
; 735  :     index = FindResWord( oldname, strlen( oldname ) );

	mov	rcx, QWORD PTR oldname$[rsp]
	call	strlen
	movzx	edx, al
	mov	rcx, QWORD PTR oldname$[rsp]
	call	FindResWord
	mov	DWORD PTR index$[rsp], eax

; 736  :     if ( index == 0 ) {

	cmp	DWORD PTR index$[rsp], 0
	jne	SHORT $LN7@SetRenameK

; 737  :         return( EmitError( RESERVED_WORD_EXPECTED ) );

	mov	ecx, 158				; 0000009eH
	call	EmitError
	jmp	SHORT $LN1@SetRenameK
$LN7@SetRenameK:

; 738  :     }
; 739  :     RenameKeyword( index, tokenarray[i].string_ptr, strlen( tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	strlen
	movsxd	rcx, DWORD PTR i$[rsp]
	imul	rcx, rcx, 32				; 00000020H
	movzx	r8d, al
	mov	rax, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rax+rcx+8]
	mov	ecx, DWORD PTR index$[rsp]
	call	RenameKeyword

; 740  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 741  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 742  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetRenameK:

; 743  : }

	add	rsp, 56					; 00000038H
	ret	0
SetRenameKey ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 48
opndx$ = 64
pi$ = 192
tokenarray$ = 200
SetElf	PROC

; 678  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H

; 679  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 680  :     struct expr opndx;
; 681  : 
; 682  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, 0 ) == ERROR )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetElf

; 683  :         return( ERROR );

	mov	eax, -1
	jmp	SHORT $LN1@SetElf
$LN2@SetElf:

; 684  :     if ( opndx.kind == EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN3@SetElf

; 685  :         if ( opndx.llvalue > 0xFF ) {

	cmp	QWORD PTR opndx$[rsp], 255		; 000000ffH
	jbe	SHORT $LN5@SetElf

; 686  :             return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	SHORT $LN1@SetElf
$LN5@SetElf:

; 687  :         }
; 688  :         if ( Options.output_format == OFORMAT_ELF )

	cmp	DWORD PTR Options+160, 3
	jne	SHORT $LN6@SetElf

; 689  :             ModuleInfo.elf_osabi = opndx.value;

	movzx	eax, BYTE PTR opndx$[rsp]
	mov	BYTE PTR ModuleInfo+412, al
$LN6@SetElf:

; 690  :     } else {

	jmp	SHORT $LN4@SetElf
$LN3@SetElf:

; 691  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetElf
$LN4@SetElf:

; 692  :     }
; 693  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 694  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetElf:

; 695  : }

	add	rsp, 184				; 000000b8H
	ret	0
SetElf	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetSwitchStile PROC

; 660  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 661  :   int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 662  : 
; 663  :   if (0 == _stricmp(tokenarray[i].string_ptr, "CSTYLE")) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11146
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetSwitchS

; 664  :     ModuleInfo.switch_style = 1;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 19
	mov	DWORD PTR ModuleInfo+408, eax

; 665  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 666  :   }

	jmp	SHORT $LN3@SetSwitchS
$LN2@SetSwitchS:

; 667  :   else if (0 == _stricmp(tokenarray[i].string_ptr, "ASMSTYLE")) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11148
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetSwitchS

; 668  :     ModuleInfo.switch_style = 0;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 19
	mov	DWORD PTR ModuleInfo+408, eax

; 669  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@SetSwitchS:
$LN3@SetSwitchS:

; 670  :   }
; 671  :   *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 672  :   return(NOT_ERROR);

	xor	eax, eax

; 673  : }

	add	rsp, 56					; 00000038H
	ret	0
SetSwitchStile ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetFrame PROC

; 644  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 645  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 646  : 
; 647  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "AUTO" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11134
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetFrame

; 648  :         ModuleInfo.frame_auto = 1;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 17
	mov	DWORD PTR ModuleInfo+408, eax

; 649  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN3@SetFrame
$LN2@SetFrame:

; 650  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "NOAUTO" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11136
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetFrame

; 651  :         ModuleInfo.frame_auto = 0;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 17
	mov	DWORD PTR ModuleInfo+408, eax

; 652  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@SetFrame:
$LN3@SetFrame:

; 653  :     }
; 654  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 655  :     return( NOT_ERROR );

	xor	eax, eax

; 656  : }

	add	rsp, 56					; 00000038H
	ret	0
SetFrame ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
j$ = 48
i$ = 52
k$1 = 56
parms$ = 64
opndx$ = 80
pi$ = 208
tokenarray$ = 216
SetMZ	PROC

; 588  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 200				; 000000c8H

; 589  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 590  :     int j;
; 591  :     uint_16 *parms;
; 592  :     struct expr opndx;
; 593  : 
; 594  :     for ( j = 0, parms = (uint_16 *)&ModuleInfo.mz_data ; j < 4; j++ ) {

	mov	DWORD PTR j$[rsp], 0
	lea	rax, OFFSET FLAT:ModuleInfo+412
	mov	QWORD PTR parms$[rsp], rax
	jmp	SHORT $LN4@SetMZ
$LN2@SetMZ:
	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN4@SetMZ:
	cmp	DWORD PTR j$[rsp], 4
	jge	$LN3@SetMZ

; 595  :         int k;
; 596  :         for ( k = i; tokenarray[k].token != T_FINAL; k++ )

	mov	eax, DWORD PTR i$[rsp]
	mov	DWORD PTR k$1[rsp], eax
	jmp	SHORT $LN7@SetMZ
$LN5@SetMZ:
	mov	eax, DWORD PTR k$1[rsp]
	inc	eax
	mov	DWORD PTR k$1[rsp], eax
$LN7@SetMZ:
	movsxd	rax, DWORD PTR k$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN6@SetMZ

; 597  :             if ( tokenarray[k].token == T_COMMA ||
; 598  :                 tokenarray[k].token == T_COLON ||

	movsxd	rax, DWORD PTR k$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN12@SetMZ
	movsxd	rax, DWORD PTR k$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	je	SHORT $LN12@SetMZ
	movsxd	rax, DWORD PTR k$1[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	jne	SHORT $LN11@SetMZ
$LN12@SetMZ:

; 599  :                 tokenarray[k].token == T_DBL_COLON )
; 600  :                 break;

	jmp	SHORT $LN6@SetMZ
$LN11@SetMZ:
	jmp	SHORT $LN5@SetMZ
$LN6@SetMZ:

; 601  :         if ( EvalOperand( &i, tokenarray, k, &opndx, 0 ) == ERROR )

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR k$1[rsp]
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN13@SetMZ

; 602  :             return( ERROR );

	mov	eax, -1
	jmp	$LN1@SetMZ
$LN13@SetMZ:

; 603  :         if ( opndx.kind == EXPR_EMPTY ) {

	cmp	DWORD PTR opndx$[rsp+60], -2
	jne	SHORT $LN14@SetMZ
	jmp	SHORT $LN15@SetMZ
$LN14@SetMZ:

; 604  :         } else if ( opndx.kind == EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN16@SetMZ

; 605  :             if ( opndx.value64 > 0xFFFF ) {

	cmp	QWORD PTR opndx$[rsp], 65535		; 0000ffffH
	jle	SHORT $LN18@SetMZ

; 606  :                 return( EmitConstError( &opndx ) );

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	$LN1@SetMZ
$LN18@SetMZ:

; 607  :             }
; 608  :             if ( ModuleInfo.sub_format == SFORMAT_MZ )

	cmp	DWORD PTR ModuleInfo+372, 1
	jne	SHORT $LN19@SetMZ

; 609  :                 *(parms + j) = opndx.value;

	movsxd	rax, DWORD PTR j$[rsp]
	mov	rcx, QWORD PTR parms$[rsp]
	movzx	edx, WORD PTR opndx$[rsp]
	mov	WORD PTR [rcx+rax*2], dx
$LN19@SetMZ:

; 610  :         } else {

	jmp	SHORT $LN17@SetMZ
$LN16@SetMZ:

; 611  :             return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	$LN1@SetMZ
$LN17@SetMZ:
$LN15@SetMZ:

; 612  :         }
; 613  :         if ( tokenarray[i].token == T_COLON )

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 58					; 0000003aH
	jne	SHORT $LN20@SetMZ

; 614  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN21@SetMZ
$LN20@SetMZ:

; 615  :         else if ( tokenarray[i].token == T_DBL_COLON ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 13
	jne	SHORT $LN22@SetMZ

; 616  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 617  :             j++;

	mov	eax, DWORD PTR j$[rsp]
	inc	eax
	mov	DWORD PTR j$[rsp], eax
$LN22@SetMZ:
$LN21@SetMZ:

; 618  :         }
; 619  :     }

	jmp	$LN2@SetMZ
$LN3@SetMZ:

; 620  : 
; 621  :     /* ensure data integrity of the params */
; 622  :     if ( ModuleInfo.sub_format == SFORMAT_MZ ) {

	cmp	DWORD PTR ModuleInfo+372, 1
	jne	SHORT $LN23@SetMZ

; 623  :         if ( ModuleInfo.mz_data.ofs_fixups < 0x1E )

	movzx	eax, WORD PTR ModuleInfo+412
	cmp	eax, 30
	jge	SHORT $LN24@SetMZ

; 624  :             ModuleInfo.mz_data.ofs_fixups = 0x1E;

	mov	eax, 30
	mov	WORD PTR ModuleInfo+412, ax
$LN24@SetMZ:

; 625  : 
; 626  :         for( j = 16; j < ModuleInfo.mz_data.alignment; j <<= 1 );

	mov	DWORD PTR j$[rsp], 16
	jmp	SHORT $LN10@SetMZ
$LN8@SetMZ:
	mov	eax, DWORD PTR j$[rsp]
	shl	eax, 1
	mov	DWORD PTR j$[rsp], eax
$LN10@SetMZ:
	movzx	eax, WORD PTR ModuleInfo+414
	cmp	DWORD PTR j$[rsp], eax
	jge	SHORT $LN9@SetMZ
	jmp	SHORT $LN8@SetMZ
$LN9@SetMZ:

; 627  :         if( j != ModuleInfo.mz_data.alignment )

	movzx	eax, WORD PTR ModuleInfo+414
	cmp	DWORD PTR j$[rsp], eax
	je	SHORT $LN25@SetMZ

; 628  :             EmitError( INVALID_HEADER_ALIGNMENT );

	mov	ecx, 205				; 000000cdH
	call	EmitError
$LN25@SetMZ:

; 629  : 
; 630  :         if ( ModuleInfo.mz_data.heapmax < ModuleInfo.mz_data.heapmin )

	movzx	eax, WORD PTR ModuleInfo+418
	movzx	ecx, WORD PTR ModuleInfo+416
	cmp	eax, ecx
	jge	SHORT $LN26@SetMZ

; 631  :             ModuleInfo.mz_data.heapmax = ModuleInfo.mz_data.heapmin;

	movzx	eax, WORD PTR ModuleInfo+416
	mov	WORD PTR ModuleInfo+418, ax
$LN26@SetMZ:
$LN23@SetMZ:

; 632  :     }
; 633  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 634  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetMZ:

; 635  : }

	add	rsp, 200				; 000000c8H
	ret	0
SetMZ	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
temp$ = 48
temp2$ = 52
i$ = 56
opndx$ = 64
pi$ = 192
tokenarray$ = 200
SetProcAlign PROC

; 562  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H

; 563  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 564  :     int temp, temp2;
; 565  :     struct expr opndx;
; 566  : 
; 567  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, EXPF_NOUNDEF ) == ERROR )

	mov	BYTE PTR [rsp+32], 2
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN5@SetProcAli

; 568  :         return( ERROR );

	mov	eax, -1
	jmp	$LN1@SetProcAli
$LN5@SetProcAli:

; 569  :     if ( opndx.kind != EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	je	SHORT $LN6@SetProcAli

; 570  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetProcAli
$LN6@SetProcAli:

; 571  :     }
; 572  :     if( opndx.value > MAX_STRUCT_ALIGN ) {

	cmp	DWORD PTR opndx$[rsp], 32		; 00000020H
	jle	SHORT $LN7@SetProcAli

; 573  :         EmitError( STRUCT_ALIGN_TOO_HIGH );

	mov	ecx, 214				; 000000d6H
	call	EmitError
$LN7@SetProcAli:

; 574  :     }
; 575  :     for( temp = 1, temp2 = 0; temp < opndx.value ; temp <<= 1, temp2++ );

	mov	DWORD PTR temp$[rsp], 1
	mov	DWORD PTR temp2$[rsp], 0
	jmp	SHORT $LN4@SetProcAli
$LN2@SetProcAli:
	mov	eax, DWORD PTR temp$[rsp]
	shl	eax, 1
	mov	DWORD PTR temp$[rsp], eax
	mov	eax, DWORD PTR temp2$[rsp]
	inc	eax
	mov	DWORD PTR temp2$[rsp], eax
$LN4@SetProcAli:
	mov	eax, DWORD PTR opndx$[rsp]
	cmp	DWORD PTR temp$[rsp], eax
	jge	SHORT $LN3@SetProcAli
	jmp	SHORT $LN2@SetProcAli
$LN3@SetProcAli:

; 576  :     if( temp != opndx.value ) {

	mov	eax, DWORD PTR opndx$[rsp]
	cmp	DWORD PTR temp$[rsp], eax
	je	SHORT $LN8@SetProcAli

; 577  :         return( EmitErr( POWER_OF_2, opndx.value ) );

	mov	edx, DWORD PTR opndx$[rsp]
	mov	ecx, 129				; 00000081H
	call	EmitErr
	jmp	SHORT $LN1@SetProcAli
$LN8@SetProcAli:

; 578  :     }
; 579  :     ModuleInfo.procalign = temp2;

	movzx	eax, BYTE PTR temp2$[rsp]
	mov	BYTE PTR ModuleInfo+399, al

; 580  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 581  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetProcAli:

; 582  : }

	add	rsp, 184				; 000000b8H
	ret	0
SetProcAlign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
temp$ = 48
temp2$ = 52
i$ = 56
opndx$ = 64
pi$ = 192
tokenarray$ = 200
SetFieldAlign PROC

; 534  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H

; 535  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 536  :     unsigned temp, temp2;
; 537  :     struct expr opndx;
; 538  : 
; 539  :     if ( EvalOperand( &i, tokenarray, Token_Count, &opndx, EXPF_NOUNDEF ) == ERROR )

	mov	BYTE PTR [rsp+32], 2
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN5@SetFieldAl

; 540  :         return( ERROR );

	mov	eax, -1
	jmp	$LN1@SetFieldAl
$LN5@SetFieldAl:

; 541  :     if ( opndx.kind != EXPR_CONST ) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	je	SHORT $LN6@SetFieldAl

; 542  :         return( EmitError( CONSTANT_EXPECTED ) );

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetFieldAl
$LN6@SetFieldAl:

; 543  :     }
; 544  :     if( opndx.uvalue > MAX_STRUCT_ALIGN ) {

	cmp	DWORD PTR opndx$[rsp], 32		; 00000020H
	jbe	SHORT $LN7@SetFieldAl

; 545  :         return( EmitError( STRUCT_ALIGN_TOO_HIGH ) );

	mov	ecx, 214				; 000000d6H
	call	EmitError
	jmp	SHORT $LN1@SetFieldAl
$LN7@SetFieldAl:

; 546  :     }
; 547  :     for( temp = 1, temp2 = 0; temp < opndx.uvalue ; temp <<= 1, temp2++ );

	mov	DWORD PTR temp$[rsp], 1
	mov	DWORD PTR temp2$[rsp], 0
	jmp	SHORT $LN4@SetFieldAl
$LN2@SetFieldAl:
	mov	eax, DWORD PTR temp$[rsp]
	shl	eax, 1
	mov	DWORD PTR temp$[rsp], eax
	mov	eax, DWORD PTR temp2$[rsp]
	inc	eax
	mov	DWORD PTR temp2$[rsp], eax
$LN4@SetFieldAl:
	mov	eax, DWORD PTR opndx$[rsp]
	cmp	DWORD PTR temp$[rsp], eax
	jae	SHORT $LN3@SetFieldAl
	jmp	SHORT $LN2@SetFieldAl
$LN3@SetFieldAl:

; 548  :     if( temp != opndx.uvalue ) {

	mov	eax, DWORD PTR opndx$[rsp]
	cmp	DWORD PTR temp$[rsp], eax
	je	SHORT $LN8@SetFieldAl

; 549  :         return( EmitErr( POWER_OF_2, opndx.value ) );

	mov	edx, DWORD PTR opndx$[rsp]
	mov	ecx, 129				; 00000081H
	call	EmitErr
	jmp	SHORT $LN1@SetFieldAl
$LN8@SetFieldAl:

; 550  :     }
; 551  :     ModuleInfo.fieldalign = temp2;

	movzx	eax, BYTE PTR temp2$[rsp]
	mov	BYTE PTR ModuleInfo+397, al

; 552  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 553  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetFieldAl:

; 554  : }

	add	rsp, 184				; 000000b8H
	ret	0
SetFieldAlign ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetSegment PROC

; 503  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 504  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 505  : 
; 506  :     if ( tokenarray[i].token == T_RES_ID && tokenarray[i].tokval == T_FLAT ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 7
	jne	SHORT $LN2@SetSegment
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 261		; 00000105H
	jne	SHORT $LN2@SetSegment

; 507  : #if AMD64_SUPPORT
; 508  :         if ( ( ModuleInfo.curr_cpu & P_CPU_MASK ) >= P_64 )

	mov	eax, DWORD PTR ModuleInfo+392
	and	eax, 240				; 000000f0H
	cmp	eax, 112				; 00000070H
	jl	SHORT $LN4@SetSegment

; 509  :             ModuleInfo.defOfssize = USE64;

	mov	BYTE PTR ModuleInfo+405, 2
	jmp	SHORT $LN5@SetSegment
$LN4@SetSegment:

; 510  :         else
; 511  : #endif
; 512  :             ModuleInfo.defOfssize = USE32;

	mov	BYTE PTR ModuleInfo+405, 1
$LN5@SetSegment:

; 513  :     } else if ( tokenarray[i].token == T_ID && _stricmp( tokenarray[i].string_ptr, "USE16" ) == 0) {

	jmp	$LN3@SetSegment
$LN2@SetSegment:
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	SHORT $LN6@SetSegment
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11047
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetSegment

; 514  :         ModuleInfo.defOfssize = USE16;

	mov	BYTE PTR ModuleInfo+405, 0
	jmp	$LN7@SetSegment
$LN6@SetSegment:

; 515  :     } else if ( tokenarray[i].token == T_ID && _stricmp( tokenarray[i].string_ptr, "USE32" ) == 0) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	SHORT $LN8@SetSegment
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11050
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN8@SetSegment

; 516  :         ModuleInfo.defOfssize = USE32;

	mov	BYTE PTR ModuleInfo+405, 1
	jmp	SHORT $LN9@SetSegment
$LN8@SetSegment:

; 517  : #if AMD64_SUPPORT
; 518  :     } else if ( tokenarray[i].token == T_ID && _stricmp( tokenarray[i].string_ptr, "USE64" ) == 0) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	SHORT $LN10@SetSegment
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11053
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN10@SetSegment

; 519  :         ModuleInfo.defOfssize = USE64;

	mov	BYTE PTR ModuleInfo+405, 2

; 520  : #endif
; 521  :     } else {

	jmp	SHORT $LN11@SetSegment
$LN10@SetSegment:

; 522  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@SetSegment
$LN11@SetSegment:
$LN9@SetSegment:
$LN7@SetSegment:
$LN3@SetSegment:

; 523  :     }
; 524  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 525  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 526  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetSegment:

; 527  : }

	add	rsp, 56					; 00000038H
	ret	0
SetSegment ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
tv69 = 36
pi$ = 64
tokenarray$ = 72
SetProc	PROC

; 469  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 470  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 471  : 
; 472  :     switch ( tokenarray[i].token ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	mov	BYTE PTR tv69[rsp], al
	cmp	BYTE PTR tv69[rsp], 3
	je	$LN8@SetProc
	cmp	BYTE PTR tv69[rsp], 8
	je	SHORT $LN4@SetProc
	jmp	$LN2@SetProc
$LN4@SetProc:

; 473  :     case T_ID:
; 474  :         if ( 0 == _stricmp( tokenarray[i].string_ptr, "PRIVATE" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11029
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN5@SetProc

; 475  :             ModuleInfo.procs_private = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 4
	mov	DWORD PTR ModuleInfo+408, eax

; 476  :             ModuleInfo.procs_export = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -9					; fffffff7H
	mov	DWORD PTR ModuleInfo+408, eax

; 477  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN6@SetProc
$LN5@SetProc:

; 478  :         } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "EXPORT" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11031
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN7@SetProc

; 479  :             ModuleInfo.procs_private = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -5					; fffffffbH
	mov	DWORD PTR ModuleInfo+408, eax

; 480  :             ModuleInfo.procs_export = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 8
	mov	DWORD PTR ModuleInfo+408, eax

; 481  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN7@SetProc:
$LN6@SetProc:

; 482  :         }
; 483  :         break;

	jmp	SHORT $LN2@SetProc
$LN8@SetProc:

; 484  :     case T_DIRECTIVE: /* word PUBLIC is a directive */
; 485  :         if ( tokenarray[i].tokval == T_PUBLIC ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	cmp	DWORD PTR [rcx+rax+16], 431		; 000001afH
	jne	SHORT $LN9@SetProc

; 486  :             ModuleInfo.procs_private = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -5					; fffffffbH
	mov	DWORD PTR ModuleInfo+408, eax

; 487  :             ModuleInfo.procs_export = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -9					; fffffff7H
	mov	DWORD PTR ModuleInfo+408, eax

; 488  :             i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN9@SetProc:
$LN2@SetProc:

; 489  :         }
; 490  :         break;
; 491  :     }
; 492  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 493  :     return( NOT_ERROR );

	xor	eax, eax

; 494  : }

	add	rsp, 56					; 00000038H
	ret	0
SetProc	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetOffset PROC

; 448  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 449  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 450  : 
; 451  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "GROUP" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11010
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetOffset

; 452  :         ModuleInfo.offsettype = OT_GROUP;

	mov	DWORD PTR ModuleInfo+384, 0
	jmp	SHORT $LN3@SetOffset
$LN2@SetOffset:

; 453  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "FLAT" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11013
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetOffset

; 454  :         ModuleInfo.offsettype = OT_FLAT;

	mov	DWORD PTR ModuleInfo+384, 1
	jmp	SHORT $LN5@SetOffset
$LN4@SetOffset:

; 455  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "SEGMENT" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11016
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetOffset

; 456  :         ModuleInfo.offsettype = OT_SEGMENT;

	mov	DWORD PTR ModuleInfo+384, 2

; 457  :     } else {

	jmp	SHORT $LN7@SetOffset
$LN6@SetOffset:

; 458  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].string_ptr ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@SetOffset
$LN7@SetOffset:
$LN5@SetOffset:
$LN3@SetOffset:

; 459  :     }
; 460  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 461  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 462  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetOffset:

; 463  : }

	add	rsp, 56					; 00000038H
	ret	0
SetOffset ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetEpilogue PROC

; 416  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 417  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 418  : 
; 419  :     if ( tokenarray[i].token != T_ID ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	je	SHORT $LN2@SetEpilogu

; 420  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@SetEpilogu
$LN2@SetEpilogu:

; 421  :     }
; 422  :     if ( ModuleInfo.proc_epilogue ) {

	cmp	QWORD PTR ModuleInfo+328, 0
	je	SHORT $LN3@SetEpilogu

; 423  :         LclFree( ModuleInfo.proc_epilogue );
; 424  :         ModuleInfo.proc_epilogue = NULL;

	mov	QWORD PTR ModuleInfo+328, 0
$LN3@SetEpilogu:

; 425  :     }
; 426  : 
; 427  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "NONE" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10997
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetEpilogu

; 428  :         ModuleInfo.epiloguemode = PEM_NONE;

	mov	BYTE PTR ModuleInfo+425, 2
	jmp	SHORT $LN5@SetEpilogu
$LN4@SetEpilogu:

; 429  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "EPILOGUEDEF" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG11000
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetEpilogu

; 430  :         ModuleInfo.epiloguemode = PEM_DEFAULT;

	mov	BYTE PTR ModuleInfo+425, 0

; 431  :     } else {

	jmp	SHORT $LN7@SetEpilogu
$LN6@SetEpilogu:

; 432  :         ModuleInfo.epiloguemode = PEM_MACRO;

	mov	BYTE PTR ModuleInfo+425, 1

; 433  :         ModuleInfo.proc_epilogue = LclAlloc( strlen( tokenarray[i].string_ptr ) + 1);

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	strlen
	inc	rax
	mov	rcx, rax
	call	LclAlloc
	mov	QWORD PTR ModuleInfo+328, rax

; 434  :         strcpy( ModuleInfo.proc_epilogue, tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR ModuleInfo+328
	call	strcpy
$LN7@SetEpilogu:
$LN5@SetEpilogu:

; 435  :     }
; 436  : 
; 437  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 438  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 439  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetEpilogu:

; 440  : }

	add	rsp, 56					; 00000038H
	ret	0
SetEpilogue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetPrologue PROC

; 384  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 385  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 386  : 
; 387  :     if ( tokenarray[i].token != T_ID ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	je	SHORT $LN2@SetPrologu

; 388  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@SetPrologu
$LN2@SetPrologu:

; 389  :     }
; 390  :     if ( ModuleInfo.proc_prologue ) {

	cmp	QWORD PTR ModuleInfo+320, 0
	je	SHORT $LN3@SetPrologu

; 391  :         LclFree( ModuleInfo.proc_prologue );
; 392  :         ModuleInfo.proc_prologue = NULL;

	mov	QWORD PTR ModuleInfo+320, 0
$LN3@SetPrologu:

; 393  :     }
; 394  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "NONE" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10981
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetPrologu

; 395  :         ModuleInfo.prologuemode = PEM_NONE;

	mov	BYTE PTR ModuleInfo+424, 2
	jmp	SHORT $LN5@SetPrologu
$LN4@SetPrologu:

; 396  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "PROLOGUEDEF" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10984
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetPrologu

; 397  :         ModuleInfo.prologuemode = PEM_DEFAULT;

	mov	BYTE PTR ModuleInfo+424, 0

; 398  :     } else {

	jmp	SHORT $LN7@SetPrologu
$LN6@SetPrologu:

; 399  :         ModuleInfo.prologuemode = PEM_MACRO;

	mov	BYTE PTR ModuleInfo+424, 1

; 400  :         ModuleInfo.proc_prologue = LclAlloc( strlen( tokenarray[i].string_ptr ) + 1);

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	strlen
	inc	rax
	mov	rcx, rax
	call	LclAlloc
	mov	QWORD PTR ModuleInfo+320, rax

; 401  :         strcpy( ModuleInfo.proc_prologue, tokenarray[i].string_ptr );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	mov	rcx, QWORD PTR ModuleInfo+320
	call	strcpy
$LN7@SetPrologu:
$LN5@SetPrologu:

; 402  :     }
; 403  : 
; 404  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 405  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 406  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetPrologu:

; 407  : }

	add	rsp, 56					; 00000038H
	ret	0
SetPrologue ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetSetIF2 PROC

; 351  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 352  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 353  : 
; 354  :     if ( 0 == _stricmp( tokenarray[i].string_ptr, "TRUE" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10966
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN2@SetSetIF2

; 355  :         ModuleInfo.setif2 = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 10
	mov	DWORD PTR ModuleInfo+408, eax

; 356  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
	jmp	SHORT $LN3@SetSetIF2
$LN2@SetSetIF2:

; 357  :     } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "FALSE" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10968
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetSetIF2

; 358  :         ModuleInfo.setif2 = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 10
	mov	DWORD PTR ModuleInfo+408, eax

; 359  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax
$LN4@SetSetIF2:
$LN3@SetSetIF2:

; 360  :     }
; 361  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 362  :     return( NOT_ERROR );

	xor	eax, eax

; 363  : }

	add	rsp, 56					; 00000038H
	ret	0
SetSetIF2 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetLanguage PROC

; 328  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 329  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 330  :     //lang_type langtype;
; 331  :     //int language = ERROR;
; 332  : 
; 333  :     if ( tokenarray[i].token == T_RES_ID ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 7
	jne	SHORT $LN2@SetLanguag

; 334  :         if ( GetLangType( &i, tokenarray, &ModuleInfo.langtype ) == NOT_ERROR ) {

	lea	r8, OFFSET FLAT:ModuleInfo+364
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	GetLangType
	test	eax, eax
	jne	SHORT $LN3@SetLanguag

; 335  :             /* update @Interface assembly time variable */
; 336  :             if ( ModuleInfo.model != MODEL_NONE && sym_Interface )

	cmp	DWORD PTR ModuleInfo+360, 0
	je	SHORT $LN4@SetLanguag
	cmp	QWORD PTR sym_Interface, 0
	je	SHORT $LN4@SetLanguag

; 337  :                 sym_Interface->value = ModuleInfo.langtype;

	mov	rax, QWORD PTR sym_Interface
	mov	ecx, DWORD PTR ModuleInfo+364
	mov	DWORD PTR [rax+16], ecx
$LN4@SetLanguag:

; 338  :             *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 339  :             return( NOT_ERROR );

	xor	eax, eax
	jmp	SHORT $LN1@SetLanguag
$LN3@SetLanguag:
$LN2@SetLanguag:

; 340  :         }
; 341  :     }
; 342  :     return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
$LN1@SetLanguag:

; 343  : }

	add	rsp, 56					; 00000038H
	ret	0
SetLanguage ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
cnt$1 = 32
i$ = 36
index$ = 40
p$ = 48
p2$2 = 56
pi$ = 80
tokenarray$ = 88
SetNoKeyword PROC

; 280  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 72					; 00000048H

; 281  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 282  :     //struct ReservedWord *resw;
; 283  :     unsigned index;
; 284  :     char *p;
; 285  : 
; 286  :     if( Parse_Pass != PASS_1 ) {

	cmp	DWORD PTR Parse_Pass, 0
	je	SHORT $LN12@SetNoKeywo

; 287  :         SkipOption( pi, tokenarray );

	mov	rdx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR pi$[rsp]
	call	SkipOption

; 288  :         return( NOT_ERROR);

	xor	eax, eax
	jmp	$LN1@SetNoKeywo
$LN12@SetNoKeywo:

; 289  :     }
; 290  :     if ( tokenarray[i].token != T_STRING || tokenarray[i].string_delim != '<' ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 9
	jne	SHORT $LN14@SetNoKeywo
	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movsx	eax, BYTE PTR [rcx+rax+1]
	cmp	eax, 60					; 0000003cH
	je	SHORT $LN13@SetNoKeywo
$LN14@SetNoKeywo:

; 291  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	$LN1@SetNoKeywo
$LN13@SetNoKeywo:

; 292  :     }
; 293  :     for ( p = tokenarray[i].string_ptr; *p; ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rax, QWORD PTR [rcx+rax+8]
	mov	QWORD PTR p$[rsp], rax
$LN2@SetNoKeywo:
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN3@SetNoKeywo
$LN5@SetNoKeywo:

; 294  :         while ( isspace( *p ) ) p++;

	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	je	SHORT $LN6@SetNoKeywo
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN5@SetNoKeywo
$LN6@SetNoKeywo:

; 295  :         if ( *p ) {

	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	$LN15@SetNoKeywo

; 296  :             char *p2 = p;

	mov	rax, QWORD PTR p$[rsp]
	mov	QWORD PTR p2$2[rsp], rax

; 297  :             unsigned char cnt;
; 298  :             //struct instr_item *instruct;
; 299  :             for ( ;*p; p++ ) {

	jmp	SHORT $LN9@SetNoKeywo
$LN7@SetNoKeywo:
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN9@SetNoKeywo:
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	test	eax, eax
	je	SHORT $LN8@SetNoKeywo

; 300  :                 if ( isspace( *p ) || *p == ',' )

	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	jne	SHORT $LN17@SetNoKeywo
	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN16@SetNoKeywo
$LN17@SetNoKeywo:

; 301  :                     break;

	jmp	SHORT $LN8@SetNoKeywo
$LN16@SetNoKeywo:

; 302  :             }

	jmp	SHORT $LN7@SetNoKeywo
$LN8@SetNoKeywo:

; 303  :             cnt = p - p2;

	mov	rax, QWORD PTR p2$2[rsp]
	mov	rcx, QWORD PTR p$[rsp]
	sub	rcx, rax
	mov	rax, rcx
	mov	BYTE PTR cnt$1[rsp], al

; 304  :             /* todo: if MAX_ID_LEN can be > 255, then check size,
; 305  :              * since a reserved word's size must be <= 255
; 306  :              */
; 307  :             index = FindResWord( p2, cnt );

	movzx	edx, BYTE PTR cnt$1[rsp]
	mov	rcx, QWORD PTR p2$2[rsp]
	call	FindResWord
	mov	DWORD PTR index$[rsp], eax

; 308  :             if ( index != 0 )

	cmp	DWORD PTR index$[rsp], 0
	je	SHORT $LN18@SetNoKeywo

; 309  :                 DisableKeyword( index );

	mov	ecx, DWORD PTR index$[rsp]
	call	DisableKeyword
	jmp	SHORT $LN19@SetNoKeywo
$LN18@SetNoKeywo:

; 310  :             else {
; 311  :                 if ( IsKeywordDisabled( p2, cnt ) ) {

	movzx	eax, BYTE PTR cnt$1[rsp]
	mov	edx, eax
	mov	rcx, QWORD PTR p2$2[rsp]
	call	IsKeywordDisabled
	movzx	eax, al
	test	eax, eax
	je	SHORT $LN20@SetNoKeywo

; 312  :                     return( EmitError( RESERVED_WORD_EXPECTED ) );

	mov	ecx, 158				; 0000009eH
	call	EmitError
	jmp	SHORT $LN1@SetNoKeywo
$LN20@SetNoKeywo:
$LN19@SetNoKeywo:
$LN15@SetNoKeywo:
$LN10@SetNoKeywo:

; 313  :                 }
; 314  :             }
; 315  :         }
; 316  :         while ( isspace(*p) ) p++;

	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	mov	ecx, eax
	call	isspace
	test	eax, eax
	je	SHORT $LN11@SetNoKeywo
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
	jmp	SHORT $LN10@SetNoKeywo
$LN11@SetNoKeywo:

; 317  :         if (*p == ',') p++;

	mov	rax, QWORD PTR p$[rsp]
	movsx	eax, BYTE PTR [rax]
	cmp	eax, 44					; 0000002cH
	jne	SHORT $LN21@SetNoKeywo
	mov	rax, QWORD PTR p$[rsp]
	inc	rax
	mov	QWORD PTR p$[rsp], rax
$LN21@SetNoKeywo:

; 318  :     }

	jmp	$LN2@SetNoKeywo
$LN3@SetNoKeywo:

; 319  :     i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 320  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 321  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetNoKeywo:

; 322  : }

	add	rsp, 72					; 00000048H
	ret	0
SetNoKeyword ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SkipOption PROC

; 269  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
$LN2@SkipOption:

; 270  :     while ( tokenarray[*pi].token != T_FINAL &&

	mov	rax, QWORD PTR pi$[rsp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	test	eax, eax
	je	SHORT $LN3@SkipOption
	mov	rax, QWORD PTR pi$[rsp]
	movsxd	rax, DWORD PTR [rax]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 44					; 0000002cH
	je	SHORT $LN3@SkipOption

; 271  :            tokenarray[*pi].token != T_COMMA )
; 272  :         (*pi)++;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	inc	eax
	mov	rcx, QWORD PTR pi$[rsp]
	mov	DWORD PTR [rcx], eax
	jmp	SHORT $LN2@SkipOption
$LN3@SkipOption:

; 273  : }

	ret	0
SkipOption ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoSignExt PROC

; 262  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 263  :     ModuleInfo.NoSignExtend = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 18
	mov	DWORD PTR ModuleInfo+408, eax

; 264  :     return( NOT_ERROR );

	xor	eax, eax

; 265  : }

	ret	0
SetNoSignExt ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetExpr32 PROC

; 255  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 256  :     /* default, nothing to do */
; 257  :     return( NOT_ERROR );

	xor	eax, eax

; 258  : }

	ret	0
SetExpr32 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoOldmacros PROC

; 246  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 247  :     /* default, nothing to do */
; 248  :     return( NOT_ERROR );

	xor	eax, eax

; 249  : }

	ret	0
SetNoOldmacros ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoReadonly PROC

; 237  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 238  :     /* default, nothing to do */
; 239  :     return( NOT_ERROR );

	xor	eax, eax

; 240  : }

	ret	0
SetNoReadonly ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoLJmp PROC

; 228  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 229  :     ModuleInfo.ljmp = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -33				; ffffffdfH
	mov	DWORD PTR ModuleInfo+408, eax

; 230  :     return( NOT_ERROR );

	xor	eax, eax

; 231  : }

	ret	0
SetNoLJmp ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetLJmp	PROC

; 219  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 220  :     ModuleInfo.ljmp = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 32					; 00000020H
	mov	DWORD PTR ModuleInfo+408, eax

; 221  :     return( NOT_ERROR );

	xor	eax, eax

; 222  : }

	ret	0
SetLJmp	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoEmulator PROC

; 210  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 211  :     ModuleInfo.emulator = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 9
	mov	DWORD PTR ModuleInfo+408, eax

; 212  :     return( NOT_ERROR );

	xor	eax, eax

; 213  : }

	ret	0
SetNoEmulator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetEmulator PROC

; 201  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 202  :     ModuleInfo.emulator = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 9
	mov	DWORD PTR ModuleInfo+408, eax

; 203  :     return( NOT_ERROR );

	xor	eax, eax

; 204  : }

	ret	0
SetEmulator ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoOldStructs PROC

; 192  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 193  :     ModuleInfo.oldstructs = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 8
	mov	DWORD PTR ModuleInfo+408, eax

; 194  :     return( NOT_ERROR );

	xor	eax, eax

; 195  : }

	ret	0
SetNoOldStructs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetOldStructs PROC

; 183  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 184  :     ModuleInfo.oldstructs = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 8
	mov	DWORD PTR ModuleInfo+408, eax

; 185  :     return( NOT_ERROR );

	xor	eax, eax

; 186  : }

	ret	0
SetOldStructs ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoScoped PROC

; 174  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 175  :     ModuleInfo.scoped = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	btr	eax, 7
	mov	DWORD PTR ModuleInfo+408, eax

; 176  :     return( NOT_ERROR );

	xor	eax, eax

; 177  : }

	ret	0
SetNoScoped ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetScoped PROC

; 165  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 166  :     ModuleInfo.scoped = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	bts	eax, 7
	mov	DWORD PTR ModuleInfo+408, eax

; 167  :     return( NOT_ERROR );

	xor	eax, eax

; 168  : }

	ret	0
SetScoped ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetNoM510 PROC

; 156  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 157  :     SetMasm510(FALSE);

	xor	ecx, ecx
	call	SetMasm510

; 158  :     return( NOT_ERROR );

	xor	eax, eax

; 159  : }

	add	rsp, 40					; 00000028H
	ret	0
SetNoM510 ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 48
tokenarray$ = 56
SetM510	PROC

; 147  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 40					; 00000028H

; 148  :     SetMasm510( TRUE );

	mov	cl, 1
	call	SetMasm510

; 149  :     return( NOT_ERROR );

	xor	eax, eax

; 150  : }

	add	rsp, 40					; 00000028H
	ret	0
SetM510	ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 32
pi$ = 64
tokenarray$ = 72
SetCaseMap PROC

; 118  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 56					; 00000038H

; 119  :     int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 120  :     if ( tokenarray[i].token == T_ID ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	movzx	eax, BYTE PTR [rcx+rax]
	cmp	eax, 8
	jne	$LN2@SetCaseMap

; 121  :         if ( 0 == _stricmp( tokenarray[i].string_ptr, "NONE" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10816
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN4@SetCaseMap

; 122  :             ModuleInfo.case_sensitive = TRUE;        /* -Cx */

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 1
	mov	DWORD PTR ModuleInfo+408, eax

; 123  :             ModuleInfo.convert_uppercase = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -3					; fffffffdH
	mov	DWORD PTR ModuleInfo+408, eax
	jmp	$LN5@SetCaseMap
$LN4@SetCaseMap:

; 124  :         } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "NOTPUBLIC" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10819
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN6@SetCaseMap

; 125  :             ModuleInfo.case_sensitive = FALSE;       /* -Cp */

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ModuleInfo+408, eax

; 126  :             ModuleInfo.convert_uppercase = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -3					; fffffffdH
	mov	DWORD PTR ModuleInfo+408, eax
	jmp	SHORT $LN7@SetCaseMap
$LN6@SetCaseMap:

; 127  :         } else if ( 0 == _stricmp( tokenarray[i].string_ptr, "ALL" ) ) {

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	lea	rdx, OFFSET FLAT:$SG10822
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rcx, QWORD PTR [rcx+rax+8]
	call	_stricmp
	test	eax, eax
	jne	SHORT $LN8@SetCaseMap

; 128  :             ModuleInfo.case_sensitive = FALSE;       /* -Cu */

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -2					; fffffffeH
	mov	DWORD PTR ModuleInfo+408, eax

; 129  :             ModuleInfo.convert_uppercase = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 2
	mov	DWORD PTR ModuleInfo+408, eax

; 130  :         } else {

	jmp	SHORT $LN9@SetCaseMap
$LN8@SetCaseMap:

; 131  :             return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@SetCaseMap
$LN9@SetCaseMap:
$LN7@SetCaseMap:
$LN5@SetCaseMap:

; 132  :         }
; 133  :         DebugMsg1(("SetCaseMap(%s) ok\n", tokenarray[i].string_ptr ));

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+8]
	lea	rcx, OFFSET FLAT:$SG10823
	call	DoDebugMsg1

; 134  :         i++;

	mov	eax, DWORD PTR i$[rsp]
	inc	eax
	mov	DWORD PTR i$[rsp], eax

; 135  :         SymSetCmpFunc();

	call	SymSetCmpFunc

; 136  :     } else {

	jmp	SHORT $LN3@SetCaseMap
$LN2@SetCaseMap:

; 137  :         return( EmitErr( SYNTAX_ERROR_EX, tokenarray[i].tokpos ) );

	movsxd	rax, DWORD PTR i$[rsp]
	imul	rax, rax, 32				; 00000020H
	mov	rcx, QWORD PTR tokenarray$[rsp]
	mov	rdx, QWORD PTR [rcx+rax+24]
	mov	ecx, 209				; 000000d1H
	call	EmitErr
	jmp	SHORT $LN1@SetCaseMap
$LN3@SetCaseMap:

; 138  :     }
; 139  :     *pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 140  :     return( NOT_ERROR );

	xor	eax, eax
$LN1@SetCaseMap:

; 141  : }

	add	rsp, 56					; 00000038H
	ret	0
SetCaseMap ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetNoDotName PROC

; 109  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 110  :     ModuleInfo.dotname = FALSE;

	mov	eax, DWORD PTR ModuleInfo+408
	and	eax, -17				; ffffffefH
	mov	DWORD PTR ModuleInfo+408, eax

; 111  :     return( NOT_ERROR );

	xor	eax, eax

; 112  : }

	ret	0
SetNoDotName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
pi$ = 8
tokenarray$ = 16
SetDotName PROC

; 100  : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx

; 101  :     ModuleInfo.dotname = TRUE;

	mov	eax, DWORD PTR ModuleInfo+408
	or	eax, 16
	mov	DWORD PTR ModuleInfo+408, eax

; 102  :     return( NOT_ERROR );

	xor	eax, eax

; 103  : }

	ret	0
SetDotName ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 48
opndx$ = 64
pi$ = 192
tokenarray$ = 200
SetZeroLocals PROC

; 78   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H

; 79   : 	int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 80   : 	struct expr opndx;
; 81   : 
; 82   : 	if (EvalOperand(&i, tokenarray, Token_Count, &opndx, 0) == ERROR)

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetZeroLoc

; 83   : 		return(ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@SetZeroLoc
$LN2@SetZeroLoc:

; 84   : 	if (opndx.kind == EXPR_CONST) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN3@SetZeroLoc

; 85   : 		if (opndx.llvalue > 1) {

	cmp	QWORD PTR opndx$[rsp], 1
	jbe	SHORT $LN5@SetZeroLoc

; 86   : 			return(EmitConstError(&opndx));

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	SHORT $LN1@SetZeroLoc
$LN5@SetZeroLoc:

; 87   : 		}
; 88   : 		ZEROLOCALS = opndx.llvalue;

	movzx	eax, BYTE PTR opndx$[rsp]
	mov	BYTE PTR ZEROLOCALS, al

; 89   : 	}

	jmp	SHORT $LN4@SetZeroLoc
$LN3@SetZeroLoc:

; 90   : 	else {
; 91   : 		return(EmitError(CONSTANT_EXPECTED));

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetZeroLoc
$LN4@SetZeroLoc:

; 92   : 	}
; 93   : 	*pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 94   : 	return(NOT_ERROR);

	xor	eax, eax
$LN1@SetZeroLoc:

; 95   : }

	add	rsp, 184				; 000000b8H
	ret	0
SetZeroLocals ENDP
_TEXT	ENDS
; Function compile flags: /Odtp
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\option.c
_TEXT	SEGMENT
i$ = 48
opndx$ = 64
pi$ = 192
tokenarray$ = 200
SetEvex	PROC

; 37   : {

	mov	QWORD PTR [rsp+16], rdx
	mov	QWORD PTR [rsp+8], rcx
	sub	rsp, 184				; 000000b8H

; 38   : 	int i = *pi;

	mov	rax, QWORD PTR pi$[rsp]
	mov	eax, DWORD PTR [rax]
	mov	DWORD PTR i$[rsp], eax

; 39   : 	struct expr opndx;
; 40   : 
; 41   : 	if (EvalOperand(&i, tokenarray, Token_Count, &opndx, 0) == ERROR)

	mov	BYTE PTR [rsp+32], 0
	lea	r9, QWORD PTR opndx$[rsp]
	mov	r8d, DWORD PTR ModuleInfo+496
	mov	rdx, QWORD PTR tokenarray$[rsp]
	lea	rcx, QWORD PTR i$[rsp]
	call	EvalOperand
	cmp	eax, -1
	jne	SHORT $LN2@SetEvex

; 42   : 		return(ERROR);

	mov	eax, -1
	jmp	SHORT $LN1@SetEvex
$LN2@SetEvex:

; 43   : 	if (opndx.kind == EXPR_CONST) {

	cmp	DWORD PTR opndx$[rsp+60], 0
	jne	SHORT $LN3@SetEvex

; 44   : 		if (opndx.llvalue > 1) {

	cmp	QWORD PTR opndx$[rsp], 1
	jbe	SHORT $LN5@SetEvex

; 45   : 			return(EmitConstError(&opndx));

	lea	rcx, QWORD PTR opndx$[rsp]
	call	EmitConstError
	jmp	SHORT $LN1@SetEvex
$LN5@SetEvex:

; 46   : 		}
; 47   : 		evex = opndx.llvalue;

	movzx	eax, BYTE PTR opndx$[rsp]
	mov	BYTE PTR evex, al

; 48   : 	}

	jmp	SHORT $LN4@SetEvex
$LN3@SetEvex:

; 49   : 	else {
; 50   : 		return(EmitError(CONSTANT_EXPECTED));

	mov	ecx, 65					; 00000041H
	call	EmitError
	jmp	SHORT $LN1@SetEvex
$LN4@SetEvex:

; 51   : 	}
; 52   : 	*pi = i;

	mov	rax, QWORD PTR pi$[rsp]
	mov	ecx, DWORD PTR i$[rsp]
	mov	DWORD PTR [rax], ecx

; 53   : 	return(NOT_ERROR);

	xor	eax, eax
$LN1@SetEvex:

; 54   : }

	add	rsp, 184				; 000000b8H
	ret	0
SetEvex	ENDP
_TEXT	ENDS
END
