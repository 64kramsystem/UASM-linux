; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.40310.41 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	pOrgTable
_BSS	SEGMENT
pOrgTable DQ	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	MODULEARCH:BYTE
COMM	broadflags:BYTE
COMM	ZEROLOCALS:BYTE
COMM	evex:BYTE
_DATA	ENDS
PUBLIC	AddOrgFixup
EXTRN	malloc:NEAR
xdata	SEGMENT
$unwind$AddOrgFixup DD 010401H
	DD	04204H
xdata	ENDS
pdata	SEGMENT
$pdata$AddOrgFixup DD @imagerel($LN9#)
	DD	@imagerel($LN9#+4)
	DD	@imagerel($unwind$AddOrgFixup#)
pdata	ENDS
xdata	SEGMENT
$chain$2$AddOrgFixup DD 061d21H
	DD	09741dH
	DD	08640cH
	DD	073405H
	DD	@imagerel($LN9#)
	DD	@imagerel($LN9#+4)
	DD	@imagerel($unwind$AddOrgFixup#)
xdata	ENDS
pdata	SEGMENT
$pdata$2$AddOrgFixup DD @imagerel($LN9#+4)
	DD	@imagerel($LN9#+71)
	DD	@imagerel($chain$2$AddOrgFixup#)
pdata	ENDS
xdata	SEGMENT
$chain$3$AddOrgFixup DD 020021H
	DD	086400H
	DD	@imagerel($LN9#)
	DD	@imagerel($LN9#+4)
	DD	@imagerel($unwind$AddOrgFixup#)
xdata	ENDS
pdata	SEGMENT
$pdata$3$AddOrgFixup DD @imagerel($LN9#+71)
	DD	@imagerel($LN9#+140)
	DD	@imagerel($chain$3$AddOrgFixup#)
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\orgfixup.c
pdata	ENDS
_TEXT	SEGMENT
curPos$ = 48
orgValue$ = 56
AddOrgFixup PROC NEAR

; 13   : {

$LN9:
	sub	rsp, 40					; 00000028H
	mov	QWORD PTR [rsp+56], rbx
	mov	ebx, ecx
	mov	QWORD PTR [rsp+64], rsi

; 14   : 	struct orgFixup *curPtr = pOrgTable;

	mov	rsi, QWORD PTR pOrgTable

; 15   : 	struct orgFixup *pFixup = (struct orgFixup*)malloc(sizeof(struct orgFixup));

	mov	ecx, 16
	mov	QWORD PTR [rsp+72], rdi
	mov	edi, edx
	call	malloc

; 16   : 	pFixup->startPos = curPos;
; 17   : 	pFixup->orgValue = orgValue;
; 18   : 	pFixup->pNext = NULL;
; 19   : 	if (!curPtr)

	test	rsi, rsi
	mov	DWORD PTR [rax], ebx
	mov	rbx, QWORD PTR [rsp+56]
	mov	DWORD PTR [rax+4], edi
	mov	rdi, QWORD PTR [rsp+72]
	mov	r11, rax
	mov	QWORD PTR [rax+8], 0
	jne	SHORT $LN7@AddOrgFixu

; 20   : 	{
; 21   : 		curPtr = pFixup;
; 22   : 		pOrgTable = pFixup;

	mov	QWORD PTR pOrgTable, rax
	mov	rsi, QWORD PTR [rsp+64]

; 29   : 	}
; 30   : 	return;
; 31   : }

	add	rsp, 40					; 00000028H
	ret	0
$LN7@AddOrgFixu:

; 23   : 	}
; 24   : 	else
; 25   : 	{
; 26   : 		while (curPtr->pNext != NULL)

	cmp	QWORD PTR [rsi+8], 0
	lea	rax, QWORD PTR [rsi+8]
	je	SHORT $LN1@AddOrgFixu
	npad	13
$LL2@AddOrgFixu:

; 27   : 			curPtr = curPtr->pNext;

	mov	rsi, QWORD PTR [rax]
	cmp	QWORD PTR [rsi+8], 0
	lea	rax, QWORD PTR [rsi+8]
	jne	SHORT $LL2@AddOrgFixu
$LN1@AddOrgFixu:

; 28   : 		curPtr->pNext = pFixup;

	mov	QWORD PTR [rsi+8], r11
	mov	rsi, QWORD PTR [rsp+64]

; 29   : 	}
; 30   : 	return;
; 31   : }

	add	rsp, 40					; 00000028H
	ret	0
AddOrgFixup ENDP
_TEXT	ENDS
PUBLIC	ResetOrgFixup
EXTRN	free:NEAR
xdata	SEGMENT
$unwind$ResetOrgFixup DD 020601H
	DD	030023206H
xdata	ENDS
pdata	SEGMENT
$pdata$ResetOrgFixup DD @imagerel($LN10#)
	DD	@imagerel($LN10#+48)
	DD	@imagerel($unwind$ResetOrgFixup#)
; Function compile flags: /Ogtpy
pdata	ENDS
_TEXT	SEGMENT
ResetOrgFixup PROC NEAR

; 34   : {

$LN10:
	push	rbx
	sub	rsp, 32					; 00000020H

; 35   : 	struct orgFixup *curPtr = pOrgTable;

	mov	rcx, QWORD PTR pOrgTable

; 36   : 	struct orgFixup *nextPtr;
; 37   : 
; 38   : 	if (!curPtr)

	test	rcx, rcx
	je	SHORT $LN4@ResetOrgFi
$LL2@ResetOrgFi:

; 39   : 		return;
; 40   : 
; 41   : 	nextPtr = curPtr->pNext;
; 42   : 
; 43   : 	while (curPtr != NULL)
; 44   : 	{
; 45   : 		nextPtr = curPtr->pNext;

	mov	rbx, QWORD PTR [rcx+8]

; 46   : 		free(curPtr);

	call	free
	test	rbx, rbx

; 47   : 		curPtr = nextPtr;

	mov	rcx, rbx
	jne	SHORT $LL2@ResetOrgFi

; 48   : 	}
; 49   : 	pOrgTable = NULL;

	mov	QWORD PTR pOrgTable, rbx
$LN4@ResetOrgFi:

; 50   : }

	add	rsp, 32					; 00000020H
	pop	rbx
	ret	0
ResetOrgFixup ENDP
_TEXT	ENDS
PUBLIC	InOrgRange
; Function compile flags: /Ogtpy
_TEXT	SEGMENT
position$ = 8
InOrgRange PROC NEAR

; 54   : 	struct orgFixup *curPtr = pOrgTable;

	mov	rdx, QWORD PTR pOrgTable

; 55   : 	bool retval = FALSE;
; 56   : 	if (curPtr)

	test	rdx, rdx
	je	SHORT $LN12@InOrgRange
	npad	4
$LL3@InOrgRange:

; 57   : 	{
; 58   : 		while (curPtr)
; 59   : 		{
; 60   : 			if (position >= curPtr->startPos && position < curPtr->orgValue)

	cmp	ecx, DWORD PTR [rdx]
	jl	SHORT $LN1@InOrgRange
	cmp	ecx, DWORD PTR [rdx+4]
	jl	SHORT $LN8@InOrgRange
$LN1@InOrgRange:

; 61   : 			{
; 62   : 				retval = TRUE;
; 63   : 				break;
; 64   : 			}
; 65   : 			curPtr = curPtr->pNext;

	mov	rdx, QWORD PTR [rdx+8]
	test	rdx, rdx
	jne	SHORT $LL3@InOrgRange
$LN12@InOrgRange:

; 66   : 		}
; 67   : 	}
; 68   : 	return(retval);

	xor	al, al

; 69   : }

	ret	0
$LN8@InOrgRange:

; 66   : 		}
; 67   : 	}
; 68   : 	return(retval);

	mov	al, 1

; 69   : }

	ret	0
InOrgRange ENDP
_TEXT	ENDS
END
