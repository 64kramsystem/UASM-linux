; Listing generated by Microsoft (R) Optimizing Compiler Version 14.00.40310.41 

include listing.inc

INCLUDELIB LIBCMT
INCLUDELIB OLDNAMES

PUBLIC	macDef
PUBLIC	macName
PUBLIC	MacroRebuild
_BSS	SEGMENT
MacroRebuild DB	01H DUP (?)
_BSS	ENDS
_DATA	SEGMENT
COMM	decoflags:BYTE
COMM	MODULEARCH:BYTE
COMM	broadflags:BYTE
COMM	ZEROLOCALS:BYTE
COMM	evex:BYTE
$SG6081	DB	'@CSTR', 00H
	ORG $+2
$SG6082	DB	'@WSTR', 00H
	ORG $+2
$SG6083	DB	'FP4', 00H
$SG6084	DB	'FP8', 00H
$SG6085	DB	'FP10', 00H
	ORG $+3
$SG6086	DB	'LOADSS', 00H
	ORG $+1
$SG6087	DB	'LOADSD', 00H
	ORG $+1
$SG6088	DB	'LOADPS', 00H
	ORG $+1
$SG6089	DB	'MEMALIGN', 00H
	ORG $+3
$SG6090	DB	'RV', 00H
	ORG $+9
macName	DQ	FLAT:$SG6081
	DQ	FLAT:$SG6082
	DQ	FLAT:$SG6083
	DQ	FLAT:$SG6084
	DQ	FLAT:$SG6085
	DQ	FLAT:$SG6086
	DQ	FLAT:$SG6087
	DQ	FLAT:$SG6088
	DQ	FLAT:$SG6089
	DQ	FLAT:$SG6090
$SG6092	DB	'@CSTR macro Text:VARARG', 00H
$SG6093	DB	'@WSTR macro Text:VARARG', 00H
$SG6094	DB	'FP4 macro value:REQ', 00H
	ORG $+4
$SG6095	DB	'FP8 macro value:REQ', 00H
	ORG $+4
$SG6096	DB	'FP10 macro value:REQ', 00H
	ORG $+3
$SG6097	DB	'LOADSS MACRO reg, val', 00H
	ORG $+2
$SG6098	DB	'LOADSD MACRO reg, val', 00H
	ORG $+2
$SG6099	DB	'LOADPS MACRO reg, val', 00H
	ORG $+2
$SG6100	DB	'MEMALIGN MACRO reg, number', 00H
	ORG $+5
$SG6101	DB	'RV MACRO FuncName:REQ, args:VARARG', 00H
	ORG $+13
macDef	DQ	FLAT:$SG6092
	DQ	FLAT:$SG6093
	DQ	FLAT:$SG6094
	DQ	FLAT:$SG6095
	DQ	FLAT:$SG6096
	DQ	FLAT:$SG6097
	DQ	FLAT:$SG6098
	DQ	FLAT:$SG6099
	DQ	FLAT:$SG6100
	DQ	FLAT:$SG6101
$SG6112	DB	'local szText', 00H
	ORG $+3
$SG6113	DB	'local szText', 00H
	ORG $+3
$SG6114	DB	'.data', 00H
	ORG $+2
$SG6115	DB	'.data', 00H
	ORG $+2
$SG6116	DB	'szText db Text,0', 00H
	ORG $+7
$SG6117	DB	'szText db Text,0', 00H
	ORG $+3
$SG6118	DB	'.code', 00H
	ORG $+2
$SG6119	DB	'.code', 00H
	ORG $+6
$SG6120	DB	'exitm <szText>', 00H
	ORG $+1
$SG6121	DB	'exitm <szText>', 00H
	ORG $+1
$SG6122	DB	'endm', 00H
	ORG $+3
$SG6123	DB	'endm', 00H
	ORG $+3
$SG6125	DB	'local szText', 00H
	ORG $+3
$SG6126	DB	'local szText', 00H
	ORG $+3
$SG6127	DB	'.data', 00H
	ORG $+2
$SG6128	DB	'.data', 00H
	ORG $+2
$SG6129	DB	'szText dw Text,0', 00H
	ORG $+7
$SG6130	DB	'szText dw Text,0', 00H
	ORG $+3
$SG6131	DB	'.code', 00H
	ORG $+2
$SG6132	DB	'.code', 00H
	ORG $+6
$SG6133	DB	'exitm <szText>', 00H
	ORG $+1
$SG6134	DB	'exitm <szText>', 00H
	ORG $+1
$SG6135	DB	'endm', 00H
	ORG $+3
$SG6136	DB	'endm', 00H
	ORG $+3
$SG6138	DB	'local vname', 00H
	ORG $+4
$SG6139	DB	'local vname', 00H
$SG6140	DB	'.data', 00H
	ORG $+2
$SG6141	DB	'.data', 00H
	ORG $+6
$SG6142	DB	'align 4', 00H
$SG6143	DB	'align 4', 00H
$SG6144	DB	'vname REAL4 value', 00H
	ORG $+6
$SG6145	DB	'vname REAL4 value', 00H
	ORG $+2
$SG6146	DB	'.code', 00H
	ORG $+2
$SG6147	DB	'.code', 00H
	ORG $+6
$SG6148	DB	'exitm <vname>', 00H
	ORG $+2
$SG6149	DB	'exitm <vname>', 00H
	ORG $+2
$SG6150	DB	'endm', 00H
	ORG $+3
$SG6151	DB	'endm', 00H
	ORG $+3
$SG6153	DB	'local vname', 00H
	ORG $+4
$SG6154	DB	'local vname', 00H
$SG6155	DB	'.data', 00H
	ORG $+2
$SG6156	DB	'.data', 00H
	ORG $+6
$SG6157	DB	'align 8', 00H
$SG6158	DB	'align 8', 00H
$SG6159	DB	'vname REAL8 value', 00H
	ORG $+6
$SG6160	DB	'vname REAL8 value', 00H
	ORG $+2
$SG6161	DB	'.code', 00H
	ORG $+2
$SG6162	DB	'.code', 00H
	ORG $+6
$SG6163	DB	'exitm <vname>', 00H
	ORG $+2
$SG6164	DB	'exitm <vname>', 00H
	ORG $+2
$SG6165	DB	'endm', 00H
	ORG $+3
$SG6166	DB	'endm', 00H
	ORG $+3
$SG6168	DB	'local vname', 00H
	ORG $+4
$SG6169	DB	'local vname', 00H
$SG6170	DB	'.data', 00H
	ORG $+2
$SG6171	DB	'.data', 00H
	ORG $+6
$SG6172	DB	'align 8', 00H
$SG6173	DB	'align 8', 00H
$SG6174	DB	'vname REAL10 value', 00H
	ORG $+5
$SG6175	DB	'vname REAL10 value', 00H
	ORG $+1
$SG6176	DB	'.code', 00H
	ORG $+2
$SG6177	DB	'.code', 00H
	ORG $+6
$SG6178	DB	'exitm <vname>', 00H
	ORG $+2
$SG6179	DB	'exitm <vname>', 00H
	ORG $+2
$SG6180	DB	'endm', 00H
	ORG $+3
$SG6181	DB	'endm', 00H
	ORG $+3
$SG6183	DB	'mov eax,val', 00H
	ORG $+4
$SG6184	DB	'mov eax,val', 00H
	ORG $+4
$SG6185	DB	'movd reg,eax', 00H
	ORG $+3
$SG6186	DB	'movd reg,eax', 00H
	ORG $+3
$SG6187	DB	'ENDM', 00H
	ORG $+3
$SG6188	DB	'ENDM', 00H
	ORG $+3
$SG6190	DB	'mov rax, val', 00H
	ORG $+3
$SG6191	DB	'mov rax, val', 00H
	ORG $+3
$SG6192	DB	'movq reg, rax', 00H
	ORG $+2
$SG6193	DB	'movq reg, rax', 00H
	ORG $+2
$SG6194	DB	'ENDM', 00H
	ORG $+3
$SG6195	DB	'ENDM', 00H
	ORG $+3
$SG6197	DB	'mov eax, val', 00H
	ORG $+3
$SG6198	DB	'mov eax, val', 00H
	ORG $+3
$SG6199	DB	'movd reg, eax', 00H
	ORG $+2
$SG6200	DB	'movd reg, eax', 00H
	ORG $+2
$SG6201	DB	'pshufd reg, 0', 00H
	ORG $+2
$SG6202	DB	'pshufd reg, 0', 00H
	ORG $+2
$SG6203	DB	'ENDM', 00H
	ORG $+3
$SG6204	DB	'ENDM', 00H
	ORG $+3
$SG6206	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6207	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6208	DB	'and reg, -number', 00H
	ORG $+7
$SG6209	DB	'and reg, -number', 00H
	ORG $+3
$SG6210	DB	'ENDM', 00H
	ORG $+3
$SG6211	DB	'ENDM', 00H
	ORG $+7
$SG6213	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6214	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6215	DB	'FOR var, <args>', 00H
$SG6216	DB	'FOR var, <args>', 00H
$SG6217	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6218	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6219	DB	'ENDM', 00H
	ORG $+3
$SG6220	DB	'ENDM', 00H
	ORG $+3
$SG6221	DB	'arg', 00H
$SG6222	DB	'arg', 00H
$SG6223	DB	'EXITM <rax>', 00H
	ORG $+4
$SG6224	DB	'EXITM <rax>', 00H
$SG6225	DB	'ENDM', 00H
	ORG $+3
$SG6226	DB	'ENDM', 00H
	ORG $+7
$SG6230	DB	'local szText', 00H
	ORG $+3
$SG6231	DB	'local szText', 00H
	ORG $+3
$SG6232	DB	'.data', 00H
	ORG $+2
$SG6233	DB	'.data', 00H
	ORG $+2
$SG6234	DB	'szText db Text,0', 00H
	ORG $+7
$SG6235	DB	'szText db Text,0', 00H
	ORG $+3
$SG6236	DB	'.code', 00H
	ORG $+2
$SG6237	DB	'.code', 00H
	ORG $+6
$SG6238	DB	'exitm <szText>', 00H
	ORG $+1
$SG6239	DB	'exitm <szText>', 00H
	ORG $+1
$SG6240	DB	'endm', 00H
	ORG $+3
$SG6241	DB	'endm', 00H
	ORG $+3
$SG6243	DB	'local szText', 00H
	ORG $+3
$SG6244	DB	'local szText', 00H
	ORG $+3
$SG6245	DB	'.data', 00H
	ORG $+2
$SG6246	DB	'.data', 00H
	ORG $+2
$SG6247	DB	'szText dw Text,0', 00H
	ORG $+7
$SG6248	DB	'szText dw Text,0', 00H
	ORG $+3
$SG6249	DB	'.code', 00H
	ORG $+2
$SG6250	DB	'.code', 00H
	ORG $+6
$SG6251	DB	'exitm <szText>', 00H
	ORG $+1
$SG6252	DB	'exitm <szText>', 00H
	ORG $+1
$SG6253	DB	'endm', 00H
	ORG $+3
$SG6254	DB	'endm', 00H
	ORG $+3
$SG6256	DB	'local vname', 00H
	ORG $+4
$SG6257	DB	'local vname', 00H
$SG6258	DB	'.data', 00H
	ORG $+2
$SG6259	DB	'.data', 00H
	ORG $+6
$SG6260	DB	'align 4', 00H
$SG6261	DB	'align 4', 00H
$SG6262	DB	'vname REAL4 value', 00H
	ORG $+6
$SG6263	DB	'vname REAL4 value', 00H
	ORG $+2
$SG6264	DB	'.code', 00H
	ORG $+2
$SG6265	DB	'.code', 00H
	ORG $+6
$SG6266	DB	'exitm <vname>', 00H
	ORG $+2
$SG6267	DB	'exitm <vname>', 00H
	ORG $+2
$SG6268	DB	'endm', 00H
	ORG $+3
$SG6269	DB	'endm', 00H
	ORG $+3
$SG6271	DB	'local vname', 00H
	ORG $+4
$SG6272	DB	'local vname', 00H
$SG6273	DB	'.data', 00H
	ORG $+2
$SG6274	DB	'.data', 00H
	ORG $+6
$SG6275	DB	'align 8', 00H
$SG6276	DB	'align 8', 00H
$SG6277	DB	'vname REAL8 value', 00H
	ORG $+6
$SG6278	DB	'vname REAL8 value', 00H
	ORG $+2
$SG6279	DB	'.code', 00H
	ORG $+2
$SG6280	DB	'.code', 00H
	ORG $+6
$SG6281	DB	'exitm <vname>', 00H
	ORG $+2
$SG6282	DB	'exitm <vname>', 00H
	ORG $+2
$SG6283	DB	'endm', 00H
	ORG $+3
$SG6284	DB	'endm', 00H
	ORG $+3
$SG6286	DB	'local vname', 00H
	ORG $+4
$SG6287	DB	'local vname', 00H
$SG6288	DB	'.data', 00H
	ORG $+2
$SG6289	DB	'.data', 00H
	ORG $+6
$SG6290	DB	'align 8', 00H
$SG6291	DB	'align 8', 00H
$SG6292	DB	'vname REAL10 value', 00H
	ORG $+5
$SG6293	DB	'vname REAL10 value', 00H
	ORG $+1
$SG6294	DB	'.code', 00H
	ORG $+2
$SG6295	DB	'.code', 00H
	ORG $+6
$SG6296	DB	'exitm <vname>', 00H
	ORG $+2
$SG6297	DB	'exitm <vname>', 00H
	ORG $+2
$SG6298	DB	'endm', 00H
	ORG $+3
$SG6299	DB	'endm', 00H
	ORG $+3
$SG6301	DB	'mov eax,val', 00H
	ORG $+4
$SG6302	DB	'mov eax,val', 00H
	ORG $+4
$SG6303	DB	'vmovd reg,eax', 00H
	ORG $+2
$SG6304	DB	'vmovd reg,eax', 00H
	ORG $+2
$SG6305	DB	'ENDM', 00H
	ORG $+3
$SG6306	DB	'ENDM', 00H
	ORG $+3
$SG6308	DB	'mov rax, val', 00H
	ORG $+3
$SG6309	DB	'mov rax, val', 00H
	ORG $+3
$SG6310	DB	'vmovq reg, rax', 00H
	ORG $+1
$SG6311	DB	'vmovq reg, rax', 00H
	ORG $+1
$SG6312	DB	'ENDM', 00H
	ORG $+3
$SG6313	DB	'ENDM', 00H
	ORG $+3
$SG6315	DB	'mov eax, val', 00H
	ORG $+3
$SG6316	DB	'mov eax, val', 00H
	ORG $+3
$SG6317	DB	'vmovd reg, eax', 00H
	ORG $+1
$SG6318	DB	'vmovd reg, eax', 00H
	ORG $+1
$SG6319	DB	'vpshufd reg, reg, 0', 00H
	ORG $+4
$SG6320	DB	'vpshufd reg, reg, 0', 00H
$SG6321	DB	'ENDM', 00H
	ORG $+3
$SG6322	DB	'ENDM', 00H
	ORG $+7
$SG6324	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6325	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6326	DB	'and reg, -number', 00H
	ORG $+7
$SG6327	DB	'and reg, -number', 00H
	ORG $+3
$SG6328	DB	'ENDM', 00H
	ORG $+3
$SG6329	DB	'ENDM', 00H
	ORG $+7
$SG6331	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6332	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6333	DB	'FOR var, <args>', 00H
$SG6334	DB	'FOR var, <args>', 00H
$SG6335	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6336	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6337	DB	'ENDM', 00H
	ORG $+3
$SG6338	DB	'ENDM', 00H
	ORG $+3
$SG6339	DB	'arg', 00H
$SG6340	DB	'arg', 00H
$SG6341	DB	'EXITM <rax>', 00H
	ORG $+4
$SG6342	DB	'EXITM <rax>', 00H
$SG6343	DB	'ENDM', 00H
	ORG $+3
$SG6344	DB	'ENDM', 00H
	ORG $+7
$SG6364	DB	'local szText', 00H
	ORG $+3
$SG6365	DB	'local szText', 00H
	ORG $+3
$SG6366	DB	'.data', 00H
	ORG $+2
$SG6367	DB	'.data', 00H
	ORG $+2
$SG6368	DB	'szText db Text,0', 00H
	ORG $+7
$SG6369	DB	'szText db Text,0', 00H
	ORG $+3
$SG6370	DB	'.code', 00H
	ORG $+2
$SG6371	DB	'.code', 00H
	ORG $+6
$SG6372	DB	'exitm <szText>', 00H
	ORG $+1
$SG6373	DB	'exitm <szText>', 00H
	ORG $+1
$SG6374	DB	'endm', 00H
	ORG $+3
$SG6375	DB	'endm', 00H
	ORG $+3
$SG6377	DB	'local szText', 00H
	ORG $+3
$SG6378	DB	'local szText', 00H
	ORG $+3
$SG6379	DB	'.data', 00H
	ORG $+2
$SG6380	DB	'.data', 00H
	ORG $+2
$SG6381	DB	'szText dw Text,0', 00H
	ORG $+7
$SG6382	DB	'szText dw Text,0', 00H
	ORG $+3
$SG6383	DB	'.code', 00H
	ORG $+2
$SG6384	DB	'.code', 00H
	ORG $+6
$SG6385	DB	'exitm <szText>', 00H
	ORG $+1
$SG6386	DB	'exitm <szText>', 00H
	ORG $+1
$SG6387	DB	'endm', 00H
	ORG $+3
$SG6388	DB	'endm', 00H
	ORG $+3
$SG6390	DB	'local vname', 00H
	ORG $+4
$SG6391	DB	'local vname', 00H
$SG6392	DB	'.data', 00H
	ORG $+2
$SG6393	DB	'.data', 00H
	ORG $+6
$SG6394	DB	'align 4', 00H
$SG6395	DB	'align 4', 00H
$SG6396	DB	'vname REAL4 value', 00H
	ORG $+6
$SG6397	DB	'vname REAL4 value', 00H
	ORG $+2
$SG6398	DB	'.code', 00H
	ORG $+2
$SG6399	DB	'.code', 00H
	ORG $+6
$SG6400	DB	'exitm <vname>', 00H
	ORG $+2
$SG6401	DB	'exitm <vname>', 00H
	ORG $+2
$SG6402	DB	'endm', 00H
	ORG $+3
$SG6403	DB	'endm', 00H
	ORG $+3
$SG6405	DB	'local vname', 00H
	ORG $+4
$SG6406	DB	'local vname', 00H
$SG6407	DB	'.data', 00H
	ORG $+2
$SG6408	DB	'.data', 00H
	ORG $+6
$SG6409	DB	'align 8', 00H
$SG6410	DB	'align 8', 00H
$SG6411	DB	'vname REAL8 value', 00H
	ORG $+6
$SG6412	DB	'vname REAL8 value', 00H
	ORG $+2
$SG6413	DB	'.code', 00H
	ORG $+2
$SG6414	DB	'.code', 00H
	ORG $+6
$SG6415	DB	'exitm <vname>', 00H
	ORG $+2
$SG6416	DB	'exitm <vname>', 00H
	ORG $+2
$SG6417	DB	'endm', 00H
	ORG $+3
$SG6418	DB	'endm', 00H
	ORG $+3
$SG6420	DB	'local vname', 00H
	ORG $+4
$SG6421	DB	'local vname', 00H
$SG6422	DB	'.data', 00H
	ORG $+2
$SG6423	DB	'.data', 00H
	ORG $+6
$SG6424	DB	'align 8', 00H
$SG6425	DB	'align 8', 00H
$SG6426	DB	'vname REAL10 value', 00H
	ORG $+5
$SG6427	DB	'vname REAL10 value', 00H
	ORG $+1
$SG6428	DB	'.code', 00H
	ORG $+2
$SG6429	DB	'.code', 00H
	ORG $+6
$SG6430	DB	'exitm <vname>', 00H
	ORG $+2
$SG6431	DB	'exitm <vname>', 00H
	ORG $+2
$SG6432	DB	'endm', 00H
	ORG $+3
$SG6433	DB	'endm', 00H
	ORG $+3
$SG6435	DB	'mov eax,val', 00H
	ORG $+4
$SG6436	DB	'mov eax,val', 00H
	ORG $+4
$SG6437	DB	'movd reg,eax', 00H
	ORG $+3
$SG6438	DB	'movd reg,eax', 00H
	ORG $+3
$SG6439	DB	'ENDM', 00H
	ORG $+3
$SG6440	DB	'ENDM', 00H
	ORG $+3
$SG6442	DB	'mov rax, val', 00H
	ORG $+3
$SG6443	DB	'mov rax, val', 00H
	ORG $+3
$SG6444	DB	'movq reg, rax', 00H
	ORG $+2
$SG6445	DB	'movq reg, rax', 00H
	ORG $+2
$SG6446	DB	'ENDM', 00H
	ORG $+3
$SG6447	DB	'ENDM', 00H
	ORG $+3
$SG6449	DB	'mov eax, val', 00H
	ORG $+3
$SG6450	DB	'mov eax, val', 00H
	ORG $+3
$SG6451	DB	'movd reg, eax', 00H
	ORG $+2
$SG6452	DB	'movd reg, eax', 00H
	ORG $+2
$SG6453	DB	'pshufd reg, 0', 00H
	ORG $+2
$SG6454	DB	'pshufd reg, 0', 00H
	ORG $+2
$SG6455	DB	'ENDM', 00H
	ORG $+3
$SG6456	DB	'ENDM', 00H
	ORG $+3
$SG6458	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6459	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6460	DB	'and reg, -number', 00H
	ORG $+7
$SG6461	DB	'and reg, -number', 00H
	ORG $+3
$SG6462	DB	'ENDM', 00H
	ORG $+3
$SG6463	DB	'ENDM', 00H
	ORG $+7
$SG6465	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6466	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6467	DB	'FOR var, <args>', 00H
$SG6468	DB	'FOR var, <args>', 00H
$SG6469	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6470	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6471	DB	'ENDM', 00H
	ORG $+3
$SG6472	DB	'ENDM', 00H
	ORG $+3
$SG6473	DB	'arg', 00H
$SG6474	DB	'arg', 00H
$SG6475	DB	'EXITM <rax>', 00H
	ORG $+4
$SG6476	DB	'EXITM <rax>', 00H
$SG6477	DB	'ENDM', 00H
	ORG $+3
$SG6478	DB	'ENDM', 00H
	ORG $+7
$SG6482	DB	'local szText', 00H
	ORG $+3
$SG6483	DB	'local szText', 00H
	ORG $+3
$SG6484	DB	'.data', 00H
	ORG $+2
$SG6485	DB	'.data', 00H
	ORG $+2
$SG6486	DB	'szText db Text,0', 00H
	ORG $+7
$SG6487	DB	'szText db Text,0', 00H
	ORG $+3
$SG6488	DB	'.code', 00H
	ORG $+2
$SG6489	DB	'.code', 00H
	ORG $+6
$SG6490	DB	'exitm <szText>', 00H
	ORG $+1
$SG6491	DB	'exitm <szText>', 00H
	ORG $+1
$SG6492	DB	'endm', 00H
	ORG $+3
$SG6493	DB	'endm', 00H
	ORG $+3
$SG6495	DB	'local szText', 00H
	ORG $+3
$SG6496	DB	'local szText', 00H
	ORG $+3
$SG6497	DB	'.data', 00H
	ORG $+2
$SG6498	DB	'.data', 00H
	ORG $+2
$SG6499	DB	'szText dw Text,0', 00H
	ORG $+7
$SG6500	DB	'szText dw Text,0', 00H
	ORG $+3
$SG6501	DB	'.code', 00H
	ORG $+2
$SG6502	DB	'.code', 00H
	ORG $+6
$SG6503	DB	'exitm <szText>', 00H
	ORG $+1
$SG6504	DB	'exitm <szText>', 00H
	ORG $+1
$SG6505	DB	'endm', 00H
	ORG $+3
$SG6506	DB	'endm', 00H
	ORG $+3
$SG6508	DB	'local vname', 00H
	ORG $+4
$SG6509	DB	'local vname', 00H
$SG6510	DB	'.data', 00H
	ORG $+2
$SG6511	DB	'.data', 00H
	ORG $+6
$SG6512	DB	'align 4', 00H
$SG6513	DB	'align 4', 00H
$SG6514	DB	'vname REAL4 value', 00H
	ORG $+6
$SG6515	DB	'vname REAL4 value', 00H
	ORG $+2
$SG6516	DB	'.code', 00H
	ORG $+2
$SG6517	DB	'.code', 00H
	ORG $+6
$SG6518	DB	'exitm <vname>', 00H
	ORG $+2
$SG6519	DB	'exitm <vname>', 00H
	ORG $+2
$SG6520	DB	'endm', 00H
	ORG $+3
$SG6521	DB	'endm', 00H
	ORG $+3
$SG6523	DB	'local vname', 00H
	ORG $+4
$SG6524	DB	'local vname', 00H
$SG6525	DB	'.data', 00H
	ORG $+2
$SG6526	DB	'.data', 00H
	ORG $+6
$SG6527	DB	'align 8', 00H
$SG6528	DB	'align 8', 00H
$SG6529	DB	'vname REAL8 value', 00H
	ORG $+6
$SG6530	DB	'vname REAL8 value', 00H
	ORG $+2
$SG6531	DB	'.code', 00H
	ORG $+2
$SG6532	DB	'.code', 00H
	ORG $+6
$SG6533	DB	'exitm <vname>', 00H
	ORG $+2
$SG6534	DB	'exitm <vname>', 00H
	ORG $+2
$SG6535	DB	'endm', 00H
	ORG $+3
$SG6536	DB	'endm', 00H
	ORG $+3
$SG6538	DB	'local vname', 00H
	ORG $+4
$SG6539	DB	'local vname', 00H
$SG6540	DB	'.data', 00H
	ORG $+2
$SG6541	DB	'.data', 00H
	ORG $+6
$SG6542	DB	'align 8', 00H
$SG6543	DB	'align 8', 00H
$SG6544	DB	'vname REAL10 value', 00H
	ORG $+5
$SG6545	DB	'vname REAL10 value', 00H
	ORG $+1
$SG6546	DB	'.code', 00H
	ORG $+2
$SG6547	DB	'.code', 00H
	ORG $+6
$SG6548	DB	'exitm <vname>', 00H
	ORG $+2
$SG6549	DB	'exitm <vname>', 00H
	ORG $+2
$SG6550	DB	'endm', 00H
	ORG $+3
$SG6551	DB	'endm', 00H
	ORG $+3
$SG6553	DB	'mov eax,val', 00H
	ORG $+4
$SG6554	DB	'mov eax,val', 00H
	ORG $+4
$SG6555	DB	'vmovd reg,eax', 00H
	ORG $+2
$SG6556	DB	'vmovd reg,eax', 00H
	ORG $+2
$SG6557	DB	'ENDM', 00H
	ORG $+3
$SG6558	DB	'ENDM', 00H
	ORG $+3
$SG6560	DB	'mov rax, val', 00H
	ORG $+3
$SG6561	DB	'mov rax, val', 00H
	ORG $+3
$SG6562	DB	'vmovq reg, rax', 00H
	ORG $+1
$SG6563	DB	'vmovq reg, rax', 00H
	ORG $+1
$SG6564	DB	'ENDM', 00H
	ORG $+3
$SG6565	DB	'ENDM', 00H
	ORG $+3
$SG6567	DB	'mov eax, val', 00H
	ORG $+3
$SG6568	DB	'mov eax, val', 00H
	ORG $+3
$SG6569	DB	'vmovd reg, eax', 00H
	ORG $+1
$SG6570	DB	'vmovd reg, eax', 00H
	ORG $+1
$SG6571	DB	'vpshufd reg, reg, 0', 00H
	ORG $+4
$SG6572	DB	'vpshufd reg, reg, 0', 00H
$SG6573	DB	'ENDM', 00H
	ORG $+3
$SG6574	DB	'ENDM', 00H
	ORG $+7
$SG6576	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6577	DB	'add reg, number - 1', 00H
	ORG $+4
$SG6578	DB	'and reg, -number', 00H
	ORG $+7
$SG6579	DB	'and reg, -number', 00H
	ORG $+3
$SG6580	DB	'ENDM', 00H
	ORG $+3
$SG6581	DB	'ENDM', 00H
	ORG $+7
$SG6583	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6584	DB	'arg equ <invoke FuncName>', 00H
	ORG $+6
$SG6585	DB	'FOR var, <args>', 00H
$SG6586	DB	'FOR var, <args>', 00H
$SG6587	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6588	DB	'arg CATSTR arg, <, expand_prefix(reparg(var))>', 00H
	ORG $+1
$SG6589	DB	'ENDM', 00H
	ORG $+3
$SG6590	DB	'ENDM', 00H
	ORG $+3
$SG6591	DB	'arg', 00H
$SG6592	DB	'arg', 00H
$SG6593	DB	'EXITM <rax>', 00H
	ORG $+4
$SG6594	DB	'EXITM <rax>', 00H
$SG6595	DB	'ENDM', 00H
	ORG $+3
$SG6596	DB	'ENDM', 00H
_DATA	ENDS
PUBLIC	InitAutoMacros
EXTRN	StoreAutoMacro:NEAR
EXTRN	Tokenize:NEAR
EXTRN	ModuleInfo:BYTE
EXTRN	CreateMacro:NEAR
EXTRN	__ImageBase:BYTE
xdata	SEGMENT
$unwind$InitAutoMacros DD 0108301H
	DD	092e483H
	DD	093d471H
	DD	094c45fH
	DD	099744dH
	DD	098642bH
	DD	0975419H
	DD	0963415H
	DD	095010aH
xdata	ENDS
pdata	SEGMENT
$pdata$InitAutoMacros DD @imagerel($LN15#)
	DD	@imagerel($LN15#+2161)
	DD	@imagerel($unwind$InitAutoMacros#)
; Function compile flags: /Ogtpy
; File d:\hjwasm\hjwasm2.13.1s\hjwasm2.13.1s\macrolib.c
pdata	ENDS
_TEXT	SEGMENT
macroLenSSE$ = 64
macroLenAVX$ = 104
macCodeAVX$ = 144
macCodeSSE$ = 656
InitAutoMacros PROC NEAR

; 63   : {

$LN15:
	mov	r11, rsp
	sub	rsp, 1192				; 000004a8H

; 64   : 	struct dsym *mac;
; 65   : 	uint_32 i = 0;
; 66   : 	uint_32 j = 0;
; 67   : 	uint_32 k = 0;
; 68   : 	uint_32 start_pos = 0;
; 69   : 	char  *macCodePtr[MACRO_COUNT];
; 70   : 
; 71   : 	uint_32 macroLenSSE[] = { 6, 6, 7, 7, 7, 3, 3, 4, 3, 7 };
; 72   : 	char *macCodeSSE[] = {
; 73   : 		"local szText", ".data", "szText db Text,0", ".code", "exitm <szText>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6113
	mov	QWORD PTR [r11+8], rbx
	mov	QWORD PTR [r11+16], rbp
	mov	QWORD PTR [r11-536], rax
	lea	rax, OFFSET FLAT:$SG6115
	mov	QWORD PTR [r11+24], rsi
	mov	QWORD PTR [r11-528], rax
	lea	rax, OFFSET FLAT:$SG6117
	xor	esi, esi
	mov	QWORD PTR [r11-520], rax
	lea	rax, OFFSET FLAT:$SG6119
	mov	QWORD PTR [r11+32], rdi
	mov	QWORD PTR [r11-512], rax
	lea	rax, OFFSET FLAT:$SG6121
	mov	QWORD PTR [r11-8], r12
	mov	QWORD PTR [r11-504], rax
	lea	rax, OFFSET FLAT:$SG6123
	mov	QWORD PTR [r11-16], r13
	mov	QWORD PTR [r11-496], rax

; 74   : 		"local szText", ".data", "szText dw Text,0", ".code", "exitm <szText>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6126
	mov	QWORD PTR [r11-24], r14
	mov	QWORD PTR [r11-480], rax
	lea	rax, OFFSET FLAT:$SG6128
	mov	DWORD PTR macroLenSSE$[rsp], 6
	mov	QWORD PTR [r11-472], rax
	lea	rax, OFFSET FLAT:$SG6130
	mov	DWORD PTR macroLenSSE$[rsp+4], 6
	mov	QWORD PTR [r11-464], rax
	lea	rax, OFFSET FLAT:$SG6132
	mov	DWORD PTR macroLenSSE$[rsp+8], 7
	mov	QWORD PTR [r11-456], rax
	lea	rax, OFFSET FLAT:$SG6134
	mov	DWORD PTR macroLenSSE$[rsp+12], 7
	mov	QWORD PTR [r11-448], rax
	lea	rax, OFFSET FLAT:$SG6136
	mov	DWORD PTR macroLenSSE$[rsp+16], 7
	mov	QWORD PTR [r11-440], rax

; 75   : 		"local vname", ".data", "align 4", "vname REAL4 value", ".code", "exitm <vname>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6139
	mov	DWORD PTR macroLenSSE$[rsp+20], 3
	mov	QWORD PTR [r11-424], rax
	lea	rax, OFFSET FLAT:$SG6141
	mov	DWORD PTR macroLenSSE$[rsp+24], 3
	mov	QWORD PTR [r11-416], rax
	lea	rax, OFFSET FLAT:$SG6143
	mov	DWORD PTR macroLenSSE$[rsp+28], 4
	mov	QWORD PTR [r11-408], rax
	lea	rax, OFFSET FLAT:$SG6145
	mov	DWORD PTR macroLenSSE$[rsp+32], 3
	mov	QWORD PTR [r11-400], rax
	lea	rax, OFFSET FLAT:$SG6147
	mov	DWORD PTR macroLenSSE$[rsp+36], 7
	mov	QWORD PTR [r11-392], rax
	lea	rax, OFFSET FLAT:$SG6149
	mov	QWORD PTR [r11-488], rsi
	mov	QWORD PTR [r11-384], rax
	lea	rax, OFFSET FLAT:$SG6151
	mov	QWORD PTR [r11-432], rsi
	mov	QWORD PTR [r11-376], rax

; 76   : 		"local vname", ".data", "align 8", "vname REAL8 value", ".code", "exitm <vname>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6154
	mov	QWORD PTR [r11-368], rsi
	mov	QWORD PTR [r11-360], rax
	lea	rax, OFFSET FLAT:$SG6156
	mov	QWORD PTR [r11-304], rsi
	mov	QWORD PTR [r11-352], rax
	lea	rax, OFFSET FLAT:$SG6158
	mov	QWORD PTR [r11-344], rax
	lea	rax, OFFSET FLAT:$SG6160
	mov	QWORD PTR [r11-336], rax
	lea	rax, OFFSET FLAT:$SG6162
	mov	QWORD PTR [r11-328], rax
	lea	rax, OFFSET FLAT:$SG6164
	mov	QWORD PTR [r11-320], rax
	lea	rax, OFFSET FLAT:$SG6166
	mov	QWORD PTR [r11-312], rax

; 77   : 		"local vname", ".data", "align 8", "vname REAL10 value", ".code", "exitm <vname>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6169
	mov	QWORD PTR [r11-296], rax
	lea	rax, OFFSET FLAT:$SG6171
	mov	QWORD PTR [r11-288], rax
	lea	rax, OFFSET FLAT:$SG6173
	mov	QWORD PTR [r11-280], rax
	lea	rax, OFFSET FLAT:$SG6175
	mov	QWORD PTR [r11-272], rax
	lea	rax, OFFSET FLAT:$SG6177
	mov	QWORD PTR [r11-240], rsi
	mov	QWORD PTR [r11-264], rax
	lea	rax, OFFSET FLAT:$SG6179

; 78   : 		"mov eax,val", "movd reg,eax", "ENDM", NULL,

	mov	QWORD PTR [r11-208], rsi
	mov	QWORD PTR [r11-256], rax
	lea	rax, OFFSET FLAT:$SG6181

; 79   : 		"mov rax, val", "movq reg, rax", "ENDM", NULL,

	mov	QWORD PTR [r11-176], rsi
	mov	QWORD PTR [r11-248], rax
	lea	rax, OFFSET FLAT:$SG6184

; 80   : 		"mov eax, val", "movd reg, eax", "pshufd reg, 0", "ENDM", NULL,

	mov	QWORD PTR [r11-136], rsi
	mov	QWORD PTR [r11-232], rax
	lea	rax, OFFSET FLAT:$SG6186

; 81   : 		"add reg, number - 1", "and reg, -number", "ENDM", NULL,

	mov	QWORD PTR [r11-104], rsi
	mov	QWORD PTR [r11-224], rax
	lea	rax, OFFSET FLAT:$SG6188

; 82   : 		"arg equ <invoke FuncName>", "FOR var, <args>", "arg CATSTR arg, <, expand_prefix(reparg(var))>", "ENDM", "arg", "EXITM <rax>", "ENDM", NULL
; 83   : 	};

	mov	QWORD PTR [r11-40], rsi
	mov	QWORD PTR [r11-216], rax
	lea	rax, OFFSET FLAT:$SG6191

; 84   : 
; 85   : 	uint_32 macroLenAVX[] = { 6, 6, 7, 7, 7, 3, 3, 4, 3, 7 };

	mov	DWORD PTR macroLenAVX$[rsp], 6
	mov	QWORD PTR [r11-200], rax
	lea	rax, OFFSET FLAT:$SG6193
	mov	DWORD PTR macroLenAVX$[rsp+4], 6
	mov	QWORD PTR [r11-192], rax
	lea	rax, OFFSET FLAT:$SG6195
	mov	DWORD PTR macroLenAVX$[rsp+8], 7
	mov	QWORD PTR [r11-184], rax
	lea	rax, OFFSET FLAT:$SG6198
	mov	DWORD PTR macroLenAVX$[rsp+12], 7
	mov	QWORD PTR [r11-168], rax
	lea	rax, OFFSET FLAT:$SG6200
	mov	DWORD PTR macroLenAVX$[rsp+16], 7
	mov	QWORD PTR [r11-160], rax
	lea	rax, OFFSET FLAT:$SG6202
	mov	DWORD PTR macroLenAVX$[rsp+20], 3
	mov	QWORD PTR [r11-152], rax
	lea	rax, OFFSET FLAT:$SG6204
	mov	DWORD PTR macroLenAVX$[rsp+24], 3
	mov	QWORD PTR [r11-144], rax
	lea	rax, OFFSET FLAT:$SG6207
	mov	DWORD PTR macroLenAVX$[rsp+28], 4
	mov	QWORD PTR [r11-128], rax
	lea	rax, OFFSET FLAT:$SG6209
	mov	DWORD PTR macroLenAVX$[rsp+32], 3
	mov	QWORD PTR [r11-120], rax
	lea	rax, OFFSET FLAT:$SG6211
	mov	DWORD PTR macroLenAVX$[rsp+36], 7
	mov	QWORD PTR [r11-112], rax
	lea	rax, OFFSET FLAT:$SG6214

; 86   : 	char *macCodeAVX[] = {
; 87   : 		"local szText", ".data", "szText db Text,0", ".code", "exitm <szText>", "endm", NULL,

	mov	QWORD PTR [r11-1000], rsi
	mov	QWORD PTR [r11-96], rax
	lea	rax, OFFSET FLAT:$SG6216
	mov	QWORD PTR [r11-88], rax
	lea	rax, OFFSET FLAT:$SG6218
	mov	QWORD PTR [r11-80], rax
	lea	rax, OFFSET FLAT:$SG6220
	mov	QWORD PTR [r11-72], rax
	lea	rax, OFFSET FLAT:$SG6222
	mov	QWORD PTR [r11-64], rax
	lea	rax, OFFSET FLAT:$SG6224
	mov	QWORD PTR [r11-56], rax
	lea	rax, OFFSET FLAT:$SG6226
	mov	QWORD PTR [r11-48], rax
	lea	rax, OFFSET FLAT:$SG6231
	mov	QWORD PTR [r11-1048], rax
	lea	rax, OFFSET FLAT:$SG6233
	mov	QWORD PTR [r11-1040], rax
	lea	rax, OFFSET FLAT:$SG6235
	mov	QWORD PTR [r11-1032], rax
	lea	rax, OFFSET FLAT:$SG6237
	mov	QWORD PTR [r11-1024], rax
	lea	rax, OFFSET FLAT:$SG6239
	mov	QWORD PTR [r11-1016], rax
	lea	rax, OFFSET FLAT:$SG6241
	mov	QWORD PTR [r11-1008], rax

; 88   : 		"local szText", ".data", "szText dw Text,0", ".code", "exitm <szText>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6244
	mov	QWORD PTR [r11-992], rax
	lea	rax, OFFSET FLAT:$SG6246
	mov	QWORD PTR [r11-984], rax
	lea	rax, OFFSET FLAT:$SG6248
	mov	QWORD PTR [r11-976], rax
	lea	rax, OFFSET FLAT:$SG6250
	mov	QWORD PTR [r11-944], rsi
	mov	QWORD PTR [r11-968], rax
	lea	rax, OFFSET FLAT:$SG6252

; 89   : 		"local vname", ".data","align 4", "vname REAL4 value", ".code", "exitm <vname>", "endm", NULL,

	mov	QWORD PTR [r11-880], rsi
	mov	QWORD PTR [r11-960], rax
	lea	rax, OFFSET FLAT:$SG6254

; 90   : 		"local vname", ".data","align 8", "vname REAL8 value", ".code", "exitm <vname>", "endm", NULL,

	mov	QWORD PTR [r11-816], rsi
	mov	QWORD PTR [r11-952], rax
	lea	rax, OFFSET FLAT:$SG6257

; 91   : 		"local vname", ".data","align 8", "vname REAL10 value", ".code", "exitm <vname>", "endm", NULL,

	mov	QWORD PTR [r11-752], rsi
	mov	QWORD PTR [r11-936], rax
	lea	rax, OFFSET FLAT:$SG6259

; 92   : 		"mov eax,val", "vmovd reg,eax", "ENDM", NULL,

	mov	QWORD PTR [r11-720], rsi
	mov	QWORD PTR [r11-928], rax
	lea	rax, OFFSET FLAT:$SG6261

; 93   : 		"mov rax, val", "vmovq reg, rax", "ENDM", NULL,

	mov	QWORD PTR [r11-688], rsi
	mov	QWORD PTR [r11-920], rax
	lea	rax, OFFSET FLAT:$SG6263

; 94   : 		"mov eax, val", "vmovd reg, eax", "vpshufd reg, reg, 0", "ENDM", NULL,

	mov	QWORD PTR [r11-648], rsi
	mov	QWORD PTR [r11-912], rax
	lea	rax, OFFSET FLAT:$SG6265
	mov	QWORD PTR [r11-904], rax
	lea	rax, OFFSET FLAT:$SG6267
	mov	QWORD PTR [r11-896], rax
	lea	rax, OFFSET FLAT:$SG6269
	mov	QWORD PTR [r11-888], rax
	lea	rax, OFFSET FLAT:$SG6272
	mov	QWORD PTR [r11-872], rax
	lea	rax, OFFSET FLAT:$SG6274
	mov	QWORD PTR [r11-864], rax
	lea	rax, OFFSET FLAT:$SG6276
	mov	QWORD PTR [r11-856], rax
	lea	rax, OFFSET FLAT:$SG6278
	mov	QWORD PTR [r11-848], rax
	lea	rax, OFFSET FLAT:$SG6280
	mov	QWORD PTR [r11-840], rax
	lea	rax, OFFSET FLAT:$SG6282
	mov	QWORD PTR [r11-832], rax
	lea	rax, OFFSET FLAT:$SG6284
	mov	QWORD PTR [r11-824], rax
	lea	rax, OFFSET FLAT:$SG6287
	mov	QWORD PTR [r11-808], rax
	lea	rax, OFFSET FLAT:$SG6289
	mov	QWORD PTR [r11-800], rax
	lea	rax, OFFSET FLAT:$SG6291
	mov	QWORD PTR [r11-792], rax
	lea	rax, OFFSET FLAT:$SG6293
	mov	QWORD PTR [r11-784], rax
	lea	rax, OFFSET FLAT:$SG6295
	mov	QWORD PTR [r11-776], rax
	lea	rax, OFFSET FLAT:$SG6297
	mov	QWORD PTR [r11-768], rax
	lea	rax, OFFSET FLAT:$SG6299
	mov	QWORD PTR [r11-760], rax
	lea	rax, OFFSET FLAT:$SG6302
	mov	QWORD PTR [r11-744], rax
	lea	rax, OFFSET FLAT:$SG6304
	mov	QWORD PTR [r11-736], rax
	lea	rax, OFFSET FLAT:$SG6306
	mov	QWORD PTR [r11-728], rax
	lea	rax, OFFSET FLAT:$SG6309
	mov	QWORD PTR [r11-712], rax
	lea	rax, OFFSET FLAT:$SG6311
	mov	QWORD PTR [r11-704], rax
	lea	rax, OFFSET FLAT:$SG6313
	mov	QWORD PTR [r11-696], rax
	lea	rax, OFFSET FLAT:$SG6316
	mov	QWORD PTR [r11-680], rax
	lea	rax, OFFSET FLAT:$SG6318
	mov	QWORD PTR [r11-672], rax
	lea	rax, OFFSET FLAT:$SG6320
	mov	QWORD PTR [r11-664], rax
	lea	rax, OFFSET FLAT:$SG6322
	mov	QWORD PTR [r11-656], rax

; 95   : 		"add reg, number - 1", "and reg, -number", "ENDM", NULL,

	lea	rax, OFFSET FLAT:$SG6325
	mov	QWORD PTR [r11-640], rax
	lea	rax, OFFSET FLAT:$SG6327
	mov	QWORD PTR [r11-632], rax
	lea	rax, OFFSET FLAT:$SG6329

; 96   : 		"arg equ <invoke FuncName>", "FOR var, <args>", "arg CATSTR arg, <, expand_prefix(reparg(var))>", "ENDM", "arg", "EXITM <rax>", "ENDM", NULL
; 97   : 	};
; 98   : 
; 99   : 	/* Architecture dependant MACRO code bodies */
; 100  : 	if (MODULEARCH == ARCH_AVX)

	cmp	BYTE PTR MODULEARCH, 1
	mov	QWORD PTR [r11-624], rax
	mov	QWORD PTR [r11-616], rsi
	lea	rax, OFFSET FLAT:$SG6332
	mov	QWORD PTR [r11-608], rax
	lea	rax, OFFSET FLAT:$SG6334
	mov	QWORD PTR [r11-600], rax
	lea	rax, OFFSET FLAT:$SG6336
	mov	QWORD PTR [r11-592], rax
	lea	rax, OFFSET FLAT:$SG6338
	mov	QWORD PTR macCodeAVX$[rsp+496], rsi
	mov	QWORD PTR macCodeAVX$[rsp+464], rax
	lea	rax, OFFSET FLAT:$SG6340
	mov	QWORD PTR macCodeAVX$[rsp+472], rax
	lea	rax, OFFSET FLAT:$SG6342
	mov	QWORD PTR macCodeAVX$[rsp+480], rax
	lea	rax, OFFSET FLAT:$SG6344
	mov	QWORD PTR macCodeAVX$[rsp+488], rax
	jne	$LN8@InitAutoMa

; 101  : 	{
; 102  : 		/* Compile Macros */
; 103  : 		for (i = 0; i < MACRO_COUNT; i++)

	lea	r14, QWORD PTR macroLenAVX$[rsp]
	mov	r13, rsi
	lea	ebp, QWORD PTR [rsi+10]
	lea	r12, OFFSET FLAT:__ImageBase
	npad	4
$LL7@InitAutoMa:

; 104  : 		{
; 105  : 			mac = CreateMacro(macName[i]);

	mov	rcx, QWORD PTR macName[r13+r12]
	call	CreateMacro

; 106  : 			ModuleInfo.token_count = Tokenize(macDef[i], 0, ModuleInfo.tokenarray, 0);

	mov	r8, QWORD PTR ModuleInfo+480
	mov	rcx, QWORD PTR macDef[r13+r12]
	xor	r9d, r9d
	xor	edx, edx
	mov	rdi, rax
	call	Tokenize

; 107  : 			StoreAutoMacro(mac, 2, ModuleInfo.tokenarray, TRUE, macCodeAVX, start_pos, macroLenAVX[i]);

	mov	ebx, DWORD PTR [r14]
	mov	r8, QWORD PTR ModuleInfo+480
	mov	r9d, 1
	mov	DWORD PTR ModuleInfo+496, eax
	lea	rax, QWORD PTR macCodeAVX$[rsp]
	mov	DWORD PTR [rsp+48], ebx
	lea	edx, QWORD PTR [r9+1]
	mov	rcx, rdi
	mov	DWORD PTR [rsp+40], esi
	mov	QWORD PTR [rsp+32], rax
	call	StoreAutoMacro
	add	r13, 8
	add	r14, 4
	dec	rbp

; 108  : 			start_pos += macroLenAVX[i] + 1;

	lea	esi, DWORD PTR [rsi+rbx+1]
	jne	SHORT $LL7@InitAutoMa

; 109  : 		}
; 110  : 	}
; 111  : 	else

	jmp	$LN1@InitAutoMa
$LN8@InitAutoMa:

; 112  : 	{
; 113  : 		/* Compile Macros */
; 114  : 		for (i = 0; i < MACRO_COUNT; i++)

	lea	r14, QWORD PTR macroLenSSE$[rsp]
	mov	r13, rsi
	mov	ebp, 10
	lea	r12, OFFSET FLAT:__ImageBase
	npad	6
$LL3@InitAutoMa:

; 115  : 		{
; 116  : 			mac = CreateMacro(macName[i]);

	mov	rcx, QWORD PTR macName[r13+r12]
	call	CreateMacro

; 117  : 			ModuleInfo.token_count = Tokenize(macDef[i], 0, ModuleInfo.tokenarray, 0);

	mov	r8, QWORD PTR ModuleInfo+480
	mov	rcx, QWORD PTR macDef[r13+r12]
	xor	r9d, r9d
	xor	edx, edx
	mov	rdi, rax
	call	Tokenize

; 118  : 			StoreAutoMacro(mac, 2, ModuleInfo.tokenarray, TRUE, macCodeSSE, start_pos, macroLenSSE[i]);

	mov	ebx, DWORD PTR [r14]
	mov	r8, QWORD PTR ModuleInfo+480
	mov	r9d, 1
	mov	DWORD PTR ModuleInfo+496, eax
	lea	rax, QWORD PTR macCodeSSE$[rsp]
	mov	DWORD PTR [rsp+48], ebx
	lea	edx, QWORD PTR [r9+1]
	mov	rcx, rdi
	mov	DWORD PTR [rsp+40], esi
	mov	QWORD PTR [rsp+32], rax
	call	StoreAutoMacro
	add	r13, 8
	add	r14, 4
	dec	rbp

; 119  : 			start_pos += macroLenSSE[i] + 1;

	lea	esi, DWORD PTR [rsi+rbx+1]
	jne	SHORT $LL3@InitAutoMa
$LN1@InitAutoMa:
	mov	r14, QWORD PTR [rsp+1168]
	mov	r13, QWORD PTR [rsp+1176]
	mov	r12, QWORD PTR [rsp+1184]
	mov	rdi, QWORD PTR [rsp+1224]
	mov	rsi, QWORD PTR [rsp+1216]
	mov	rbp, QWORD PTR [rsp+1208]
	mov	rbx, QWORD PTR [rsp+1200]

; 120  : 		}
; 121  : 	}
; 122  : }

	add	rsp, 1192				; 000004a8H
	ret	0
InitAutoMacros ENDP
_TEXT	ENDS
PUBLIC	CompileMacros
EXTRN	StoreAutoMacroRebuild:NEAR
EXTRN	ReuseMacro:NEAR
EXTRN	SymFree:NEAR
EXTRN	ReleaseMacroData:NEAR
EXTRN	SymFind:NEAR
xdata	SEGMENT
$unwind$CompileMacros DD 0108301H
	DD	092e483H
	DD	093d471H
	DD	094c45fH
	DD	099744dH
	DD	098642bH
	DD	0975419H
	DD	0963415H
	DD	095010aH
xdata	ENDS
pdata	SEGMENT
$pdata$CompileMacros DD @imagerel($LN15#)
	DD	@imagerel($LN15#+2255)
	DD	@imagerel($unwind$CompileMacros#)
; Function compile flags: /Ogtpy
pdata	ENDS
_TEXT	SEGMENT
macroLenSSE$ = 64
macroLenAVX$ = 104
macCodeAVX$ = 144
macCodeSSE$ = 656
CompileMacros PROC NEAR

; 130  : {

$LN15:
	mov	r11, rsp
	sub	rsp, 1192				; 000004a8H

; 131  : 	struct dsym *mac;
; 132  : 	uint_32 i = 0;
; 133  : 	uint_32 j = 0;
; 134  : 	uint_32 k = 0;
; 135  : 	uint_32 start_pos = 0;
; 136  : 	char  *macCodePtr[MACRO_COUNT];
; 137  : 
; 138  : 	uint_32 macroLenSSE[] = { 6, 6, 7, 7, 7, 3, 3, 4, 3, 7 };
; 139  : 	char *macCodeSSE[] = {
; 140  : 		"local szText", ".data", "szText db Text,0", ".code", "exitm <szText>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6365
	mov	QWORD PTR [r11+8], rbx
	mov	QWORD PTR [r11+16], rbp
	mov	QWORD PTR [r11-536], rax
	lea	rax, OFFSET FLAT:$SG6367
	mov	QWORD PTR [r11+24], rsi
	mov	QWORD PTR [r11-528], rax
	lea	rax, OFFSET FLAT:$SG6369
	xor	ebp, ebp
	mov	QWORD PTR [r11-520], rax
	lea	rax, OFFSET FLAT:$SG6371
	mov	QWORD PTR [r11+32], rdi
	mov	QWORD PTR [r11-512], rax
	lea	rax, OFFSET FLAT:$SG6373
	mov	QWORD PTR [r11-8], r12
	mov	QWORD PTR [r11-504], rax
	lea	rax, OFFSET FLAT:$SG6375
	mov	QWORD PTR [r11-16], r13
	mov	QWORD PTR [r11-496], rax

; 141  : 		"local szText", ".data", "szText dw Text,0", ".code", "exitm <szText>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6378
	mov	QWORD PTR [r11-24], r14
	mov	QWORD PTR [r11-480], rax
	lea	rax, OFFSET FLAT:$SG6380
	mov	DWORD PTR macroLenSSE$[rsp], 6
	mov	QWORD PTR [r11-472], rax
	lea	rax, OFFSET FLAT:$SG6382
	mov	DWORD PTR macroLenSSE$[rsp+4], 6
	mov	QWORD PTR [r11-464], rax
	lea	rax, OFFSET FLAT:$SG6384
	mov	DWORD PTR macroLenSSE$[rsp+8], 7
	mov	QWORD PTR [r11-456], rax
	lea	rax, OFFSET FLAT:$SG6386
	mov	DWORD PTR macroLenSSE$[rsp+12], 7
	mov	QWORD PTR [r11-448], rax
	lea	rax, OFFSET FLAT:$SG6388
	mov	DWORD PTR macroLenSSE$[rsp+16], 7
	mov	QWORD PTR [r11-440], rax

; 142  : 		"local vname", ".data", "align 4", "vname REAL4 value", ".code", "exitm <vname>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6391
	mov	DWORD PTR macroLenSSE$[rsp+20], 3
	mov	QWORD PTR [r11-424], rax
	lea	rax, OFFSET FLAT:$SG6393
	mov	DWORD PTR macroLenSSE$[rsp+24], 3
	mov	QWORD PTR [r11-416], rax
	lea	rax, OFFSET FLAT:$SG6395
	mov	DWORD PTR macroLenSSE$[rsp+28], 4
	mov	QWORD PTR [r11-408], rax
	lea	rax, OFFSET FLAT:$SG6397
	mov	DWORD PTR macroLenSSE$[rsp+32], 3
	mov	QWORD PTR [r11-400], rax
	lea	rax, OFFSET FLAT:$SG6399
	mov	DWORD PTR macroLenSSE$[rsp+36], 7
	mov	QWORD PTR [r11-392], rax
	lea	rax, OFFSET FLAT:$SG6401
	mov	QWORD PTR [r11-488], rbp
	mov	QWORD PTR [r11-384], rax
	lea	rax, OFFSET FLAT:$SG6403
	mov	QWORD PTR [r11-432], rbp
	mov	QWORD PTR [r11-376], rax

; 143  : 		"local vname", ".data", "align 8", "vname REAL8 value", ".code", "exitm <vname>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6406
	mov	QWORD PTR [r11-368], rbp
	mov	QWORD PTR [r11-360], rax
	lea	rax, OFFSET FLAT:$SG6408
	mov	QWORD PTR [r11-304], rbp
	mov	QWORD PTR [r11-352], rax
	lea	rax, OFFSET FLAT:$SG6410
	mov	QWORD PTR [r11-344], rax
	lea	rax, OFFSET FLAT:$SG6412
	mov	QWORD PTR [r11-336], rax
	lea	rax, OFFSET FLAT:$SG6414
	mov	QWORD PTR [r11-328], rax
	lea	rax, OFFSET FLAT:$SG6416
	mov	QWORD PTR [r11-320], rax
	lea	rax, OFFSET FLAT:$SG6418
	mov	QWORD PTR [r11-312], rax

; 144  : 		"local vname", ".data", "align 8", "vname REAL10 value", ".code", "exitm <vname>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6421
	mov	QWORD PTR [r11-296], rax
	lea	rax, OFFSET FLAT:$SG6423
	mov	QWORD PTR [r11-288], rax
	lea	rax, OFFSET FLAT:$SG6425
	mov	QWORD PTR [r11-280], rax
	lea	rax, OFFSET FLAT:$SG6427
	mov	QWORD PTR [r11-272], rax
	lea	rax, OFFSET FLAT:$SG6429
	mov	QWORD PTR [r11-240], rbp
	mov	QWORD PTR [r11-264], rax
	lea	rax, OFFSET FLAT:$SG6431

; 145  : 		"mov eax,val", "movd reg,eax", "ENDM", NULL,

	mov	QWORD PTR [r11-208], rbp
	mov	QWORD PTR [r11-256], rax
	lea	rax, OFFSET FLAT:$SG6433

; 146  : 		"mov rax, val", "movq reg, rax", "ENDM", NULL,

	mov	QWORD PTR [r11-176], rbp
	mov	QWORD PTR [r11-248], rax
	lea	rax, OFFSET FLAT:$SG6436

; 147  : 		"mov eax, val", "movd reg, eax", "pshufd reg, 0", "ENDM", NULL,

	mov	QWORD PTR [r11-136], rbp
	mov	QWORD PTR [r11-232], rax
	lea	rax, OFFSET FLAT:$SG6438

; 148  : 		"add reg, number - 1", "and reg, -number", "ENDM", NULL,

	mov	QWORD PTR [r11-104], rbp
	mov	QWORD PTR [r11-224], rax
	lea	rax, OFFSET FLAT:$SG6440

; 149  : 		"arg equ <invoke FuncName>", "FOR var, <args>", "arg CATSTR arg, <, expand_prefix(reparg(var))>", "ENDM", "arg", "EXITM <rax>", "ENDM", NULL
; 150  : 	};

	mov	QWORD PTR [r11-40], rbp
	mov	QWORD PTR [r11-216], rax
	lea	rax, OFFSET FLAT:$SG6443

; 151  : 
; 152  : 	uint_32 macroLenAVX[] = { 6, 6, 7, 7, 7, 3, 3, 4, 3, 7 };

	mov	DWORD PTR macroLenAVX$[rsp], 6
	mov	QWORD PTR [r11-200], rax
	lea	rax, OFFSET FLAT:$SG6445
	mov	DWORD PTR macroLenAVX$[rsp+4], 6
	mov	QWORD PTR [r11-192], rax
	lea	rax, OFFSET FLAT:$SG6447
	mov	DWORD PTR macroLenAVX$[rsp+8], 7
	mov	QWORD PTR [r11-184], rax
	lea	rax, OFFSET FLAT:$SG6450
	mov	DWORD PTR macroLenAVX$[rsp+12], 7
	mov	QWORD PTR [r11-168], rax
	lea	rax, OFFSET FLAT:$SG6452
	mov	DWORD PTR macroLenAVX$[rsp+16], 7
	mov	QWORD PTR [r11-160], rax
	lea	rax, OFFSET FLAT:$SG6454
	mov	DWORD PTR macroLenAVX$[rsp+20], 3
	mov	QWORD PTR [r11-152], rax
	lea	rax, OFFSET FLAT:$SG6456
	mov	DWORD PTR macroLenAVX$[rsp+24], 3
	mov	QWORD PTR [r11-144], rax
	lea	rax, OFFSET FLAT:$SG6459
	mov	DWORD PTR macroLenAVX$[rsp+28], 4
	mov	QWORD PTR [r11-128], rax
	lea	rax, OFFSET FLAT:$SG6461
	mov	DWORD PTR macroLenAVX$[rsp+32], 3
	mov	QWORD PTR [r11-120], rax
	lea	rax, OFFSET FLAT:$SG6463
	mov	DWORD PTR macroLenAVX$[rsp+36], 7
	mov	QWORD PTR [r11-112], rax
	lea	rax, OFFSET FLAT:$SG6466

; 153  : 	char *macCodeAVX[] = {
; 154  : 		"local szText", ".data", "szText db Text,0", ".code", "exitm <szText>", "endm", NULL,

	mov	QWORD PTR [r11-1000], rbp
	mov	QWORD PTR [r11-96], rax
	lea	rax, OFFSET FLAT:$SG6468
	mov	QWORD PTR [r11-88], rax
	lea	rax, OFFSET FLAT:$SG6470
	mov	QWORD PTR [r11-80], rax
	lea	rax, OFFSET FLAT:$SG6472
	mov	QWORD PTR [r11-72], rax
	lea	rax, OFFSET FLAT:$SG6474
	mov	QWORD PTR [r11-64], rax
	lea	rax, OFFSET FLAT:$SG6476
	mov	QWORD PTR [r11-56], rax
	lea	rax, OFFSET FLAT:$SG6478
	mov	QWORD PTR [r11-48], rax
	lea	rax, OFFSET FLAT:$SG6483
	mov	QWORD PTR [r11-1048], rax
	lea	rax, OFFSET FLAT:$SG6485
	mov	QWORD PTR [r11-1040], rax
	lea	rax, OFFSET FLAT:$SG6487
	mov	QWORD PTR [r11-1032], rax
	lea	rax, OFFSET FLAT:$SG6489
	mov	QWORD PTR [r11-1024], rax
	lea	rax, OFFSET FLAT:$SG6491
	mov	QWORD PTR [r11-1016], rax
	lea	rax, OFFSET FLAT:$SG6493
	mov	QWORD PTR [r11-1008], rax

; 155  : 		"local szText", ".data", "szText dw Text,0", ".code", "exitm <szText>", "endm", NULL,

	lea	rax, OFFSET FLAT:$SG6496
	mov	QWORD PTR [r11-992], rax
	lea	rax, OFFSET FLAT:$SG6498
	mov	QWORD PTR [r11-984], rax
	lea	rax, OFFSET FLAT:$SG6500
	mov	QWORD PTR [r11-976], rax
	lea	rax, OFFSET FLAT:$SG6502
	mov	QWORD PTR [r11-944], rbp
	mov	QWORD PTR [r11-968], rax
	lea	rax, OFFSET FLAT:$SG6504

; 156  : 		"local vname", ".data","align 4", "vname REAL4 value", ".code", "exitm <vname>", "endm", NULL,

	mov	QWORD PTR [r11-880], rbp
	mov	QWORD PTR [r11-960], rax
	lea	rax, OFFSET FLAT:$SG6506

; 157  : 		"local vname", ".data","align 8", "vname REAL8 value", ".code", "exitm <vname>", "endm", NULL,

	mov	QWORD PTR [r11-816], rbp
	mov	QWORD PTR [r11-952], rax
	lea	rax, OFFSET FLAT:$SG6509

; 158  : 		"local vname", ".data","align 8", "vname REAL10 value", ".code", "exitm <vname>", "endm", NULL,

	mov	QWORD PTR [r11-752], rbp
	mov	QWORD PTR [r11-936], rax
	lea	rax, OFFSET FLAT:$SG6511

; 159  : 		"mov eax,val", "vmovd reg,eax", "ENDM", NULL,

	mov	QWORD PTR [r11-720], rbp
	mov	QWORD PTR [r11-928], rax
	lea	rax, OFFSET FLAT:$SG6513

; 160  : 		"mov rax, val", "vmovq reg, rax", "ENDM", NULL,

	mov	QWORD PTR [r11-688], rbp
	mov	QWORD PTR [r11-920], rax
	lea	rax, OFFSET FLAT:$SG6515

; 161  : 		"mov eax, val", "vmovd reg, eax", "vpshufd reg, reg, 0", "ENDM", NULL,

	mov	QWORD PTR [r11-648], rbp
	mov	QWORD PTR [r11-912], rax
	lea	rax, OFFSET FLAT:$SG6517
	mov	QWORD PTR [r11-904], rax
	lea	rax, OFFSET FLAT:$SG6519
	mov	QWORD PTR [r11-896], rax
	lea	rax, OFFSET FLAT:$SG6521
	mov	QWORD PTR [r11-888], rax
	lea	rax, OFFSET FLAT:$SG6524
	mov	QWORD PTR [r11-872], rax
	lea	rax, OFFSET FLAT:$SG6526
	mov	QWORD PTR [r11-864], rax
	lea	rax, OFFSET FLAT:$SG6528
	mov	QWORD PTR [r11-856], rax
	lea	rax, OFFSET FLAT:$SG6530
	mov	QWORD PTR [r11-848], rax
	lea	rax, OFFSET FLAT:$SG6532
	mov	QWORD PTR [r11-840], rax
	lea	rax, OFFSET FLAT:$SG6534
	mov	QWORD PTR [r11-832], rax
	lea	rax, OFFSET FLAT:$SG6536
	mov	QWORD PTR [r11-824], rax
	lea	rax, OFFSET FLAT:$SG6539
	mov	QWORD PTR [r11-808], rax
	lea	rax, OFFSET FLAT:$SG6541
	mov	QWORD PTR [r11-800], rax
	lea	rax, OFFSET FLAT:$SG6543
	mov	QWORD PTR [r11-792], rax
	lea	rax, OFFSET FLAT:$SG6545
	mov	QWORD PTR [r11-784], rax
	lea	rax, OFFSET FLAT:$SG6547
	mov	QWORD PTR [r11-776], rax
	lea	rax, OFFSET FLAT:$SG6549
	mov	QWORD PTR [r11-768], rax
	lea	rax, OFFSET FLAT:$SG6551
	mov	QWORD PTR [r11-760], rax
	lea	rax, OFFSET FLAT:$SG6554
	mov	QWORD PTR [r11-744], rax
	lea	rax, OFFSET FLAT:$SG6556
	mov	QWORD PTR [r11-736], rax
	lea	rax, OFFSET FLAT:$SG6558
	mov	QWORD PTR [r11-728], rax
	lea	rax, OFFSET FLAT:$SG6561
	mov	QWORD PTR [r11-712], rax
	lea	rax, OFFSET FLAT:$SG6563
	mov	QWORD PTR [r11-704], rax
	lea	rax, OFFSET FLAT:$SG6565
	mov	QWORD PTR [r11-696], rax
	lea	rax, OFFSET FLAT:$SG6568
	mov	QWORD PTR [r11-680], rax
	lea	rax, OFFSET FLAT:$SG6570
	mov	QWORD PTR [r11-672], rax
	lea	rax, OFFSET FLAT:$SG6572
	mov	QWORD PTR [r11-664], rax
	lea	rax, OFFSET FLAT:$SG6574
	mov	QWORD PTR [r11-656], rax

; 162  : 		"add reg, number - 1", "and reg, -number", "ENDM", NULL,

	lea	rax, OFFSET FLAT:$SG6577
	mov	QWORD PTR [r11-640], rax
	lea	rax, OFFSET FLAT:$SG6579
	mov	QWORD PTR [r11-632], rax
	lea	rax, OFFSET FLAT:$SG6581

; 163  : 		"arg equ <invoke FuncName>", "FOR var, <args>", "arg CATSTR arg, <, expand_prefix(reparg(var))>", "ENDM", "arg", "EXITM <rax>", "ENDM", NULL
; 164  : 	};
; 165  : 
; 166  : 	/* Architecture dependant MACRO code bodies */
; 167  : 	if (MODULEARCH == ARCH_AVX)

	cmp	BYTE PTR MODULEARCH, 1
	mov	QWORD PTR [r11-624], rax
	mov	QWORD PTR [r11-616], rbp
	lea	rax, OFFSET FLAT:$SG6584
	mov	QWORD PTR [r11-608], rax
	lea	rax, OFFSET FLAT:$SG6586
	mov	QWORD PTR [r11-600], rax
	lea	rax, OFFSET FLAT:$SG6588
	mov	QWORD PTR [r11-592], rax
	lea	rax, OFFSET FLAT:$SG6590
	mov	QWORD PTR macCodeAVX$[rsp+496], rbp
	mov	QWORD PTR macCodeAVX$[rsp+464], rax
	lea	rax, OFFSET FLAT:$SG6592
	mov	QWORD PTR macCodeAVX$[rsp+472], rax
	lea	rax, OFFSET FLAT:$SG6594
	mov	QWORD PTR macCodeAVX$[rsp+480], rax
	lea	rax, OFFSET FLAT:$SG6596
	mov	QWORD PTR macCodeAVX$[rsp+488], rax
	jne	$LN8@CompileMac

; 168  : 	{
; 169  : 		/* Compile Macros */
; 170  : 		for (i = 0; i < MACRO_COUNT; i++)

	lea	r14, QWORD PTR macroLenAVX$[rsp]
	mov	r12, rbp
	lea	r13d, QWORD PTR [rbp+10]
	lea	rsi, OFFSET FLAT:__ImageBase
	npad	3
$LL7@CompileMac:

; 171  : 		{
; 172  : 			mac = (struct dsym*)SymFind(macName[i]);

	mov	rcx, QWORD PTR macName[r12+rsi]
	call	SymFind

; 173  : 			ReleaseMacroData(mac);

	mov	rcx, rax
	call	ReleaseMacroData

; 174  : 			SymFree(SymFind(macName[i]));

	mov	rcx, QWORD PTR macName[r12+rsi]
	call	SymFind
	mov	rcx, rax
	call	SymFree

; 175  : 			mac = ReuseMacro(macName[i]);

	mov	rcx, QWORD PTR macName[r12+rsi]
	call	ReuseMacro

; 176  : 			ModuleInfo.token_count = Tokenize(macDef[i], 0, ModuleInfo.tokenarray, 0);

	mov	r8, QWORD PTR ModuleInfo+480
	mov	rcx, QWORD PTR macDef[r12+rsi]
	xor	r9d, r9d
	xor	edx, edx
	mov	rdi, rax
	call	Tokenize

; 177  : 			StoreAutoMacroRebuild(mac, 2, ModuleInfo.tokenarray, TRUE, macCodeAVX, start_pos, macroLenAVX[i]);

	mov	ebx, DWORD PTR [r14]
	mov	r8, QWORD PTR ModuleInfo+480
	mov	r9d, 1
	mov	DWORD PTR ModuleInfo+496, eax
	lea	rax, QWORD PTR macCodeAVX$[rsp]
	mov	DWORD PTR [rsp+48], ebx
	lea	edx, QWORD PTR [r9+1]
	mov	rcx, rdi
	mov	DWORD PTR [rsp+40], ebp
	mov	QWORD PTR [rsp+32], rax
	call	StoreAutoMacroRebuild
	add	r12, 8
	add	r14, 4
	dec	r13

; 178  : 			start_pos += macroLenAVX[i] + 1;

	lea	ebp, DWORD PTR [rbp+rbx+1]
	jne	$LL7@CompileMac

; 179  : 		}
; 180  : 	}
; 181  : 	else

	jmp	$LN1@CompileMac
$LN8@CompileMac:

; 182  : 	{
; 183  : 		/* Compile Macros */
; 184  : 		for (i = 0; i < MACRO_COUNT; i++)

	lea	r14, QWORD PTR macroLenSSE$[rsp]
	mov	r12, rbp
	mov	r13d, 10
	lea	rsi, OFFSET FLAT:__ImageBase
	npad	7
$LL3@CompileMac:

; 185  : 		{
; 186  : 			mac = (struct dsym*)SymFind(macName[i]);

	mov	rcx, QWORD PTR macName[r12+rsi]
	call	SymFind

; 187  : 			ReleaseMacroData(mac);

	mov	rcx, rax
	call	ReleaseMacroData

; 188  : 			SymFree(SymFind(macName[i]));

	mov	rcx, QWORD PTR macName[r12+rsi]
	call	SymFind
	mov	rcx, rax
	call	SymFree

; 189  : 			mac = ReuseMacro(macName[i]);

	mov	rcx, QWORD PTR macName[r12+rsi]
	call	ReuseMacro

; 190  : 			ModuleInfo.token_count = Tokenize(macDef[i], 0, ModuleInfo.tokenarray, 0);

	mov	r8, QWORD PTR ModuleInfo+480
	mov	rcx, QWORD PTR macDef[r12+rsi]
	xor	r9d, r9d
	xor	edx, edx
	mov	rdi, rax
	call	Tokenize

; 191  : 			StoreAutoMacroRebuild(mac, 2, ModuleInfo.tokenarray, TRUE, macCodeSSE, start_pos, macroLenSSE[i]);

	mov	ebx, DWORD PTR [r14]
	mov	r8, QWORD PTR ModuleInfo+480
	mov	r9d, 1
	mov	DWORD PTR ModuleInfo+496, eax
	lea	rax, QWORD PTR macCodeSSE$[rsp]
	mov	DWORD PTR [rsp+48], ebx
	lea	edx, QWORD PTR [r9+1]
	mov	rcx, rdi
	mov	DWORD PTR [rsp+40], ebp
	mov	QWORD PTR [rsp+32], rax
	call	StoreAutoMacroRebuild
	add	r12, 8
	add	r14, 4
	dec	r13

; 192  : 			start_pos += macroLenSSE[i] + 1;

	lea	ebp, DWORD PTR [rbp+rbx+1]
	jne	$LL3@CompileMac
$LN1@CompileMac:
	mov	r14, QWORD PTR [rsp+1168]
	mov	r13, QWORD PTR [rsp+1176]
	mov	r12, QWORD PTR [rsp+1184]
	mov	rdi, QWORD PTR [rsp+1224]
	mov	rsi, QWORD PTR [rsp+1216]
	mov	rbp, QWORD PTR [rsp+1208]
	mov	rbx, QWORD PTR [rsp+1200]

; 193  : 		}
; 194  : 	}
; 195  : 
; 196  : }

	add	rsp, 1192				; 000004a8H
	ret	0
CompileMacros ENDP
_TEXT	ENDS
END
